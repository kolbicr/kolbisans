{
.appVersion = "3343";
.formatVersion = 3;
customParameters = (
{
name = panose;
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
4,
5,
6,
7,
9,
29,
31,
32,
33,
35,
36,
37,
38,
42,
45,
47,
60,
62
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
CR,
space,
A,
Aacute,
Abreve,
uni01CD,
Acircumflex,
Adieresis,
Agrave,
Amacron,
Aogonek,
Aring,
Atilde,
AE,
AEacute,
B,
C,
Cacute,
Ccaron,
Ccedilla,
Cdotaccent,
D,
Dcaron,
Dcroat,
Eth,
E,
Eacute,
Ebreve,
Ecaron,
Ecircumflex,
Edieresis,
Edotaccent,
Egrave,
Emacron,
Eogonek,
uni018E,
uni1EBC,
uni018F,
F,
G,
Gbreve,
uni0122,
Gdotaccent,
H,
Hbar,
I,
IJ,
Iacute,
Ibreve,
Icircumflex,
Idieresis,
Idotaccent,
Igrave,
Imacron,
Iogonek,
Itilde,
J,
uni004A0301,
K,
uni0136,
L,
Lacute,
Lcaron,
uni013B,
Ldot,
Lslash,
M,
N,
Nacute,
Ncaron,
uni0145,
Ntilde,
Eng,
O,
Oacute,
Obreve,
Ocircumflex,
Odieresis,
Ograve,
Ohungarumlaut,
Omacron,
Oslash,
Otilde,
OE,
P,
Thorn,
Q,
R,
Racute,
Rcaron,
uni0156,
S,
Sacute,
Scaron,
Scedilla,
uni0218,
uni1E9E,
T,
Tcaron,
uni0162,
uni021A,
U,
Uacute,
Ubreve,
Ucircumflex,
Udieresis,
Ugrave,
Uhungarumlaut,
Umacron,
Uogonek,
Uring,
Utilde,
V,
W,
Wacute,
Wcircumflex,
Wdieresis,
Wgrave,
X,
Y,
Yacute,
Ycircumflex,
Ydieresis,
Ygrave,
uni1EF8,
Z,
Zacute,
Zcaron,
Zdotaccent,
uniA78B,
a,
aacute,
abreve,
uni01CE,
acircumflex,
adieresis,
agrave,
amacron,
aogonek,
aring,
atilde,
ae,
aeacute,
b,
c,
cacute,
ccaron,
ccedilla,
cdotaccent,
d,
dcaron,
dcroat,
eth,
e,
eacute,
ebreve,
ecaron,
ecircumflex,
edieresis,
edotaccent,
egrave,
emacron,
eogonek,
uni1EBD,
uni0259,
f,
g,
gbreve,
uni0123,
gdotaccent,
h,
hbar,
i,
dotlessi,
iacute,
ibreve,
icircumflex,
idieresis,
i.loclTRK,
igrave,
imacron,
iogonek,
itilde,
ij,
j,
uni0237,
uni006A0301,
k,
uni0137,
l,
lacute,
lcaron,
uni013C,
ldot,
lslash,
m,
n,
nacute,
ncaron,
uni0146,
ntilde,
eng,
o,
oacute,
obreve,
ocircumflex,
odieresis,
ograve,
ohungarumlaut,
omacron,
oslash,
otilde,
oe,
p,
thorn,
q,
r,
racute,
rcaron,
uni0157,
s,
sacute,
scaron,
scedilla,
uni0219,
germandbls,
t,
tcaron,
uni0163,
uni021B,
u,
uacute,
ubreve,
ucircumflex,
udieresis,
ugrave,
uhungarumlaut,
umacron,
uogonek,
uring,
utilde,
v,
w,
wacute,
wcircumflex,
wdieresis,
wgrave,
x,
y,
yacute,
ycircumflex,
ydieresis,
ygrave,
uni1EF9,
z,
zacute,
zcaron,
zdotaccent,
uniA78C,
fi,
fl,
ordfeminine,
ordmasculine,
uni042F,
uni0394,
Pi,
uni03A9,
uni03BC,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
uni24EA,
uni2780,
uni2781,
uni2782,
uni2783,
uni2784,
uni2785,
uni2786,
uni2787,
uni2788,
uni278A,
uni278B,
uni278C,
uni278D,
uni278E,
uni278F,
uni2790,
uni2791,
uni2792,
uni24EA.solid,
zero.dnom,
one.dnom,
two.dnom,
three.dnom,
four.dnom,
five.dnom,
six.dnom,
seven.dnom,
eight.dnom,
nine.dnom,
zero.numr,
one.numr,
two.numr,
three.numr,
four.numr,
five.numr,
six.numr,
seven.numr,
eight.numr,
nine.numr,
fraction,
onehalf,
onequarter,
threequarters,
oneeighth,
threeeighths,
fiveeighths,
seveneighths,
uni2080,
uni2081,
uni2082,
uni2083,
uni2084,
uni2085,
uni2086,
uni2087,
uni2088,
uni2089,
uni2070,
uni00B9,
uni00B2,
uni00B3,
uni2074,
uni2075,
uni2076,
uni2077,
uni2078,
uni2079,
uni00A0,
period,
comma,
colon,
semicolon,
ellipsis,
exclam,
exclamdown,
question,
questiondown,
periodcentered,
bullet,
asterisk,
numbersign,
slash,
backslash,
periodcentered.loclCAT,
periodcentered.loclCAT.case,
hyphen,
endash,
emdash,
underscore,
parenleft,
parenright,
braceleft,
braceright,
bracketleft,
bracketright,
quotesinglbase,
quotedblbase,
quotedblleft,
quotedblright,
quoteleft,
quoteright,
guillemotleft,
guillemotright,
guilsinglleft,
guilsinglright,
quotedbl,
quotesingle,
florin,
at,
ampersand,
paragraph,
section,
copyright,
registered,
trademark,
degree,
bar,
brokenbar,
dagger,
uni2113,
daggerdbl,
estimated,
at.case,
registered.case,
uni20BF,
cent,
currency,
dollar,
Euro,
uni20BD,
uni20A8,
sterling,
yen,
cent.001,
uni2215,
plus,
minus,
multiply,
divide,
equal,
notequal,
greater,
less,
greaterequal,
lessequal,
plusminus,
approxequal,
asciitilde,
logicalnot,
asciicircum,
infinity,
integral,
uni2126,
uni2206,
product,
summation,
radical,
uni00B5,
partialdiff,
percent,
perthousand,
plus.case,
arrowup,
arrowright,
arrowdown,
arrowleft,
lozenge,
uni0308,
uni0307,
gravecomb,
acutecomb,
uni030B,
uni030C.alt,
uni0302,
uni030C,
uni0306,
uni030A,
tildecomb,
uni0304,
uni0312,
uni0326,
uni0327,
uni0328,
uni0308.case,
uni0307.case,
gravecomb.case,
acutecomb.case,
uni030B.case,
uni030C.alt.case,
uni0302.case,
uni030C.case,
uni0306.case,
uni030A.case,
tildecomb.case,
uni0304.case,
uni0327.case,
uni0328.case,
uni0308.narrow,
dieresis,
dotaccent,
grave,
acute,
hungarumlaut,
circumflex,
caron,
breve,
ring,
tilde,
macron,
cedilla,
ogonek,
uni02BA,
uni02B9,
uniE000,
uniE001,
uniE002,
uniE003,
uniE004,
uniE005,
REbackwards,
RethinkWordmark,
Rlogobig
);
}
);
date = "2021-03-04 17:58:23 +0000";
familyName = "Kolbi Sans";
featurePrefixes = (
{
code = "lookup SUB_19 {
	sub i by dotlessi;
	sub j by uni0237;
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_19;
lookup SUB_20 {
	sub iogonek by dotlessi uni0328;
} SUB_20;
lookup SUB_21 {
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_21;
lookup SUB_22 {
	sub periodcentered by periodcentered.loclCAT;
} SUB_22;
lookup SUB_23 {
	sub J by uni004A0301;
	sub j by uni006A0301;
	sub periodcentered by periodcentered.loclCAT.case;
} SUB_23;
lookup SUB_24 {
	sub zero.numr by zero.dnom;
	sub one.numr by one.dnom;
	sub two.numr by two.dnom;
	sub three.numr by three.dnom;
	sub four.numr by four.dnom;
	sub five.numr by five.dnom;
	sub six.numr by six.dnom;
	sub seven.numr by seven.dnom;
	sub eight.numr by eight.dnom;
	sub nine.numr by nine.dnom;
} SUB_24;
lookup SUB_25 {
	sub A by ordfeminine;
	sub O by ordmasculine;
	sub a by ordfeminine;
	sub o by ordmasculine;
} SUB_25;
";
name = Prefix;
}
);
features = (
{
automatic = 1;
code = "";
tag = aalt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_1 {
	@SUB_1_0_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub [i j]' lookup SUB_19 @SUB_1_0_LA_0;
	@SUB_1_1_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub [i j]' lookup SUB_19 [uni0327 uni0328] @SUB_1_1_LA_0;
	@SUB_1_2_BT_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	@SUB_1_2_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_1_2_BT_0 @SUB_1_2_1' lookup SUB_19;
	@SUB_1_3_BT_0 = [A Aacute Abreve uni01CD Acircumflex Adieresis Agrave Amacron Aogonek Aring Atilde AE AEacute B C Cacute Ccaron Ccedilla Cdotaccent D Dcaron Dcroat Eth E Eacute Ebreve Ecaron Ecircumflex Edieresis Edotaccent Egrave Emacron Eogonek uni018E uni1EBC uni018F F G Gbreve uni0122 Gdotaccent H Hbar I IJ Iacute Ibreve Icircumflex Idieresis Idotaccent Igrave Imacron Iogonek Itilde J uni004A0301 K uni0136 L Lacute Lcaron uni013B Ldot Lslash M N Nacute Ncaron uni0145 Ntilde Eng O Oacute Obreve Ocircumflex Odieresis Ograve Ohungarumlaut Omacron Oslash Otilde OE P Thorn Q R Racute Rcaron uni0156 S Sacute Scaron Scedilla uni0218 uni1E9E T Tcaron uni0162 uni021A U Uacute Ubreve Ucircumflex Udieresis Ugrave Uhungarumlaut Umacron Uogonek Uring Utilde V W Wacute Wcircumflex Wdieresis Wgrave X Y Yacute Ycircumflex Ydieresis Ygrave uni1EF8 Z Zacute Zcaron Zdotaccent uniA78B uni042F uni0394 Pi uni03A9];
	@SUB_1_3_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_1_3_BT_0 @SUB_1_3_1' lookup SUB_19;
	@SUB_1_4_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub iogonek' lookup SUB_20 @SUB_1_4_LA_0;
} SUB_1;
lookup SUB_2 {
	@SUB_2_0_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	@SUB_2_0_LA_1 = [uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni030C.alt.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0327.case uni0328.case];
	sub @SUB_2_0_0' lookup SUB_21 @SUB_2_0_LA_1;
	@SUB_2_1_BT_0 = [uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni030C.alt.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0327.case uni0328.case];
	@SUB_2_1_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_2_1_BT_0 @SUB_2_1_1' lookup SUB_21;
} SUB_2;
lookup SUB_3 {
	sub Ldot by L periodcentered.loclCAT.case;
	sub fi by f i;
	sub fl by f l;
} SUB_3;
script latn;
language dflt;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language AZE;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language CAT;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language CRT;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language KAZ;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language MOL;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language NLD;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language ROM;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language TAT;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language TRK;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
";
tag = ccmp;
},
{
code = "script latn;
language AZE;
lookup SUB_4 {
	sub i by i.loclTRK;
} SUB_4;
language CRT;
lookup SUB_4;
language KAZ;
lookup SUB_4;
language TAT;
lookup SUB_4;
language TRK;
lookup SUB_4;
language MOL;
lookup SUB_5 {
	sub Scedilla by uni0218;
	sub uni0162 by uni021A;
	sub scedilla by uni0219;
	sub uni0163 by uni021B;
} SUB_5;
language ROM;
lookup SUB_5;
language CAT;
lookup SUB_6 {
	sub L periodcentered' lookup SUB_23 L;
	sub l periodcentered' lookup SUB_22 l;
} SUB_6;
language NLD;
lookup SUB_7 {
	sub Iacute J' lookup SUB_23;
	sub iacute j' lookup SUB_23;
} SUB_7;
";
tag = locl;
},
{
code = "script DFLT;
language dflt;
lookup SUB_8 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_8;
script latn;
language dflt;
lookup SUB_8;
language AZE;
lookup SUB_8;
language CAT;
lookup SUB_8;
language CRT;
lookup SUB_8;
language KAZ;
lookup SUB_8;
language MOL;
lookup SUB_8;
language NLD;
lookup SUB_8;
language ROM;
lookup SUB_8;
language TAT;
lookup SUB_8;
language TRK;
lookup SUB_8;
";
tag = subs;
},
{
code = "script DFLT;
language dflt;
lookup SUB_9 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_9;
script latn;
language dflt;
lookup SUB_9;
language AZE;
lookup SUB_9;
language CAT;
lookup SUB_9;
language CRT;
lookup SUB_9;
language KAZ;
lookup SUB_9;
language MOL;
lookup SUB_9;
language NLD;
lookup SUB_9;
language ROM;
lookup SUB_9;
language TAT;
lookup SUB_9;
language TRK;
lookup SUB_9;
";
tag = sinf;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	sub zero by uni2070;
	sub one by uni00B9;
	sub two by uni00B2;
	sub three by uni00B3;
	sub four by uni2074;
	sub five by uni2075;
	sub six by uni2076;
	sub seven by uni2077;
	sub eight by uni2078;
	sub nine by uni2079;
} SUB_10;
script latn;
language dflt;
lookup SUB_10;
language AZE;
lookup SUB_10;
language CAT;
lookup SUB_10;
language CRT;
lookup SUB_10;
language KAZ;
lookup SUB_10;
language MOL;
lookup SUB_10;
language NLD;
lookup SUB_10;
language ROM;
lookup SUB_10;
language TAT;
lookup SUB_10;
language TRK;
lookup SUB_10;
";
tag = sups;
},
{
code = "script DFLT;
language dflt;
lookup SUB_11 {
	sub zero by zero.numr;
	sub one by one.numr;
	sub two by two.numr;
	sub three by three.numr;
	sub four by four.numr;
	sub five by five.numr;
	sub six by six.numr;
	sub seven by seven.numr;
	sub eight by eight.numr;
	sub nine by nine.numr;
} SUB_11;
script latn;
language dflt;
lookup SUB_11;
language AZE;
lookup SUB_11;
language CAT;
lookup SUB_11;
language CRT;
lookup SUB_11;
language KAZ;
lookup SUB_11;
language MOL;
lookup SUB_11;
language NLD;
lookup SUB_11;
language ROM;
lookup SUB_11;
language TAT;
lookup SUB_11;
language TRK;
lookup SUB_11;
";
tag = numr;
},
{
code = "script DFLT;
language dflt;
lookup SUB_12 {
	sub zero by zero.dnom;
	sub one by one.dnom;
	sub two by two.dnom;
	sub three by three.dnom;
	sub four by four.dnom;
	sub five by five.dnom;
	sub six by six.dnom;
	sub seven by seven.dnom;
	sub eight by eight.dnom;
	sub nine by nine.dnom;
} SUB_12;
script latn;
language dflt;
lookup SUB_12;
language AZE;
lookup SUB_12;
language CAT;
lookup SUB_12;
language CRT;
lookup SUB_12;
language KAZ;
lookup SUB_12;
language MOL;
lookup SUB_12;
language NLD;
lookup SUB_12;
language ROM;
lookup SUB_12;
language TAT;
lookup SUB_12;
language TRK;
lookup SUB_12;
";
tag = dnom;
},
{
code = "script DFLT;
language dflt;
lookup SUB_13 {
	sub slash by fraction;
} SUB_13;
lookup SUB_14 {
	sub zero by zero.numr;
	sub one by one.numr;
	sub two by two.numr;
	sub three by three.numr;
	sub four by four.numr;
	sub five by five.numr;
	sub six by six.numr;
	sub seven by seven.numr;
	sub eight by eight.numr;
	sub nine by nine.numr;
} SUB_14;
lookup SUB_15 {
	@SUB_15_0_0 = [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
	sub fraction @SUB_15_0_0' lookup SUB_24;
	@SUB_15_1_BT_0 = [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];
	@SUB_15_1_1 = [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
	sub @SUB_15_1_BT_0 @SUB_15_1_1' lookup SUB_24;
} SUB_15;
script latn;
language dflt;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language AZE;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language CAT;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language CRT;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language KAZ;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language MOL;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language NLD;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language ROM;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language TAT;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language TRK;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
";
tag = frac;
},
{
code = "script DFLT;
language dflt;
lookup SUB_16 {
	lookupflag IgnoreMarks;
	sub E less by uni018E;
	sub R E less by REbackwards;
	sub R less E by REbackwards;
	sub R greater by RethinkWordmark;
	sub R less by uni042F;
	sub f i by fi;
	sub f l by fl;
	sub hyphen hyphen hyphen greater by arrowdown;
	sub hyphen hyphen greater by arrowright;
	sub parenleft R parenright by Rlogobig;
	sub parenleft zero parenright by uni24EA;
	sub parenleft one parenright by uni2780;
	sub parenleft two parenright by uni2781;
	sub parenleft three parenright by uni2782;
	sub parenleft four parenright by uni2783;
	sub parenleft five parenright by uni2784;
	sub parenleft six parenright by uni2785;
	sub parenleft seven parenright by uni2786;
	sub parenleft eight parenright by uni2787;
	sub parenleft nine parenright by uni2788;
	sub braceleft zero braceright by uni24EA.solid;
	sub braceleft one braceright by uni278A;
	sub braceleft two braceright by uni278B;
	sub braceleft three braceright by uni278C;
	sub braceleft four braceright by uni278D;
	sub braceleft five braceright by uni278E;
	sub braceleft six braceright by uni278F;
	sub braceleft seven braceright by uni2790;
	sub braceleft eight braceright by uni2791;
	sub braceleft nine braceright by uni2792;
	sub registered plus by registered.case;
	sub less hyphen hyphen hyphen by arrowup;
	sub less hyphen hyphen by arrowleft;
} SUB_16;
script latn;
language dflt;
lookup SUB_16;
language AZE;
lookup SUB_16;
language CAT;
lookup SUB_16;
language CRT;
lookup SUB_16;
language KAZ;
lookup SUB_16;
language MOL;
lookup SUB_16;
language NLD;
lookup SUB_16;
language ROM;
lookup SUB_16;
language TAT;
lookup SUB_16;
language TRK;
lookup SUB_16;
";
tag = liga;
},
{
code = "script DFLT;
language dflt;
lookup SUB_17 {
	@SUB_17_0_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_17_0_BT_0 [A a]' lookup SUB_25;
	@SUB_17_1_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_17_1_BT_0 [O o]' lookup SUB_25;
} SUB_17;
script latn;
language dflt;
lookup SUB_17;
language AZE;
lookup SUB_17;
language CAT;
lookup SUB_17;
language CRT;
lookup SUB_17;
language KAZ;
lookup SUB_17;
language MOL;
lookup SUB_17;
language NLD;
lookup SUB_17;
language ROM;
lookup SUB_17;
language TAT;
lookup SUB_17;
language TRK;
lookup SUB_17;
";
tag = ordn;
},
{
code = "script DFLT;
language dflt;
lookup SUB_18 {
	sub periodcentered.loclCAT by periodcentered.loclCAT.case;
	sub at by at.case;
	sub registered by registered.case;
	sub plus by plus.case;
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_18;
script latn;
language dflt;
lookup SUB_18;
language AZE;
lookup SUB_18;
language CAT;
lookup SUB_18;
language CRT;
lookup SUB_18;
language KAZ;
lookup SUB_18;
language MOL;
lookup SUB_18;
language NLD;
lookup SUB_18;
language ROM;
lookup SUB_18;
language TAT;
lookup SUB_18;
language TRK;
lookup SUB_18;
";
tag = case;
},
{
code = "script DFLT;
language dflt;
lookup POS_2 {
	markClass uni0326 <anchor 58 0> @POS_2_0_MARK_0;
	markClass uni0327 <anchor 87 0> @POS_2_0_MARK_0;
	markClass uni0327.case <anchor 85 0> @POS_2_0_MARK_0;
	markClass uni0308 <anchor 178 496> @POS_2_0_MARK_1;
	markClass uni0307 <anchor 75 496> @POS_2_0_MARK_1;
	markClass gravecomb <anchor 110 496> @POS_2_0_MARK_1;
	markClass acutecomb <anchor 110 496> @POS_2_0_MARK_1;
	markClass uni030B <anchor 137 496> @POS_2_0_MARK_1;
	markClass uni0302 <anchor 143 496> @POS_2_0_MARK_1;
	markClass uni030C <anchor 143 496> @POS_2_0_MARK_1;
	markClass uni0306 <anchor 151 496> @POS_2_0_MARK_1;
	markClass uni030A <anchor 111 496> @POS_2_0_MARK_1;
	markClass tildecomb <anchor 168 496> @POS_2_0_MARK_1;
	markClass uni0304 <anchor 176 496> @POS_2_0_MARK_1;
	markClass uni0312 <anchor 60 496> @POS_2_0_MARK_1;
	markClass uni0308.case <anchor 178 700> @POS_2_0_MARK_1;
	markClass uni0307.case <anchor 75 700> @POS_2_0_MARK_1;
	markClass gravecomb.case <anchor 110 700> @POS_2_0_MARK_1;
	markClass acutecomb.case <anchor 110 700> @POS_2_0_MARK_1;
	markClass uni030B.case <anchor 167 700> @POS_2_0_MARK_1;
	markClass uni0302.case <anchor 143 700> @POS_2_0_MARK_1;
	markClass uni030C.case <anchor 143 700> @POS_2_0_MARK_1;
	markClass uni0306.case <anchor 151 700> @POS_2_0_MARK_1;
	markClass uni030A.case <anchor 111 700> @POS_2_0_MARK_1;
	markClass tildecomb.case <anchor 168 700> @POS_2_0_MARK_1;
	markClass uni0304.case <anchor 176 700> @POS_2_0_MARK_1;
	markClass uni0308.narrow <anchor 178 496> @POS_2_0_MARK_1;
	pos base cent <anchor 382 6> mark @POS_2_0_MARK_0 <anchor 380 695> mark @POS_2_0_MARK_1;
	pos base uni20A8 <anchor 824 0> mark @POS_2_0_MARK_0 <anchor 817 496> mark @POS_2_0_MARK_1;
} POS_2;
lookup POS_3 {
	markClass uni0326 <anchor 58 0> @POS_3_0_MARK_0;
	markClass uni0327 <anchor 87 0> @POS_3_0_MARK_0;
	markClass uni0327.case <anchor 85 0> @POS_3_0_MARK_0;
	markClass uni0308 <anchor 178 496> @POS_3_0_MARK_1;
	markClass uni0307 <anchor 75 496> @POS_3_0_MARK_1;
	markClass gravecomb <anchor 110 496> @POS_3_0_MARK_1;
	markClass acutecomb <anchor 110 496> @POS_3_0_MARK_1;
	markClass uni030B <anchor 137 496> @POS_3_0_MARK_1;
	markClass uni0302 <anchor 143 496> @POS_3_0_MARK_1;
	markClass uni030C <anchor 143 496> @POS_3_0_MARK_1;
	markClass uni0306 <anchor 151 496> @POS_3_0_MARK_1;
	markClass uni030A <anchor 111 496> @POS_3_0_MARK_1;
	markClass tildecomb <anchor 168 496> @POS_3_0_MARK_1;
	markClass uni0304 <anchor 176 496> @POS_3_0_MARK_1;
	markClass uni0312 <anchor 60 496> @POS_3_0_MARK_1;
	markClass uni0308.case <anchor 178 700> @POS_3_0_MARK_1;
	markClass uni0307.case <anchor 75 700> @POS_3_0_MARK_1;
	markClass gravecomb.case <anchor 110 700> @POS_3_0_MARK_1;
	markClass acutecomb.case <anchor 110 700> @POS_3_0_MARK_1;
	markClass uni030B.case <anchor 167 700> @POS_3_0_MARK_1;
	markClass uni0302.case <anchor 143 700> @POS_3_0_MARK_1;
	markClass uni030C.case <anchor 143 700> @POS_3_0_MARK_1;
	markClass uni0306.case <anchor 151 700> @POS_3_0_MARK_1;
	markClass uni030A.case <anchor 111 700> @POS_3_0_MARK_1;
	markClass tildecomb.case <anchor 168 700> @POS_3_0_MARK_1;
	markClass uni0304.case <anchor 176 700> @POS_3_0_MARK_1;
	markClass uni0308.narrow <anchor 178 496> @POS_3_0_MARK_1;
	pos base A <anchor 342 0> mark @POS_3_0_MARK_0 <anchor 342 700> mark @POS_3_0_MARK_1;
	pos base Aacute <anchor 342 0> mark @POS_3_0_MARK_0 <anchor 342 945> mark @POS_3_0_MARK_1;
	pos base Abreve <anchor 342 0> mark @POS_3_0_MARK_0 <anchor 342 912> mark @POS_3_0_MARK_1;
	pos base uni01CD <anchor 342 0> mark @POS_3_0_MARK_0 <anchor 342 912> mark @POS_3_0_MARK_1;
	pos base Acircumflex <anchor 342 0> mark @POS_3_0_MARK_0 <anchor 342 913> mark @POS_3_0_MARK_1;
	pos base Adieresis <anchor 342 0> mark @POS_3_0_MARK_0 <anchor 342 919> mark @POS_3_0_MARK_1;
	pos base Agrave <anchor 342 0> mark @POS_3_0_MARK_0 <anchor 342 945> mark @POS_3_0_MARK_1;
	pos base Amacron <anchor 342 0> mark @POS_3_0_MARK_0 <anchor 342 869> mark @POS_3_0_MARK_1;
	pos base Aogonek <anchor 342 0> mark @POS_3_0_MARK_0 <anchor 342 700> mark @POS_3_0_MARK_1;
	pos base Aring <anchor 342 0> mark @POS_3_0_MARK_0 <anchor 342 972> mark @POS_3_0_MARK_1;
	pos base Atilde <anchor 342 0> mark @POS_3_0_MARK_0 <anchor 342 871> mark @POS_3_0_MARK_1;
	pos base AE <anchor 463 0> mark @POS_3_0_MARK_0 <anchor 539 700> mark @POS_3_0_MARK_1;
	pos base AEacute <anchor 463 0> mark @POS_3_0_MARK_0 <anchor 539 945> mark @POS_3_0_MARK_1;
	pos base C <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 380 700> mark @POS_3_0_MARK_1;
	pos base Cacute <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 380 945> mark @POS_3_0_MARK_1;
	pos base Ccaron <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 380 912> mark @POS_3_0_MARK_1;
	pos base Ccedilla <anchor 381 -262> mark @POS_3_0_MARK_0 <anchor 380 700> mark @POS_3_0_MARK_1;
	pos base Cdotaccent <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 380 919> mark @POS_3_0_MARK_1;
	pos base D <anchor 345 0> mark @POS_3_0_MARK_0 <anchor 345 700> mark @POS_3_0_MARK_1;
	pos base Dcaron <anchor 345 0> mark @POS_3_0_MARK_0 <anchor 345 912> mark @POS_3_0_MARK_1;
	pos base E <anchor 281 0> mark @POS_3_0_MARK_0 <anchor 281 700> mark @POS_3_0_MARK_1;
	pos base Eacute <anchor 281 0> mark @POS_3_0_MARK_0 <anchor 281 945> mark @POS_3_0_MARK_1;
	pos base Ebreve <anchor 281 0> mark @POS_3_0_MARK_0 <anchor 281 912> mark @POS_3_0_MARK_1;
	pos base Ecaron <anchor 281 0> mark @POS_3_0_MARK_0 <anchor 281 912> mark @POS_3_0_MARK_1;
	pos base Ecircumflex <anchor 281 0> mark @POS_3_0_MARK_0 <anchor 281 913> mark @POS_3_0_MARK_1;
	pos base Edieresis <anchor 281 0> mark @POS_3_0_MARK_0 <anchor 281 919> mark @POS_3_0_MARK_1;
	pos base Edotaccent <anchor 281 0> mark @POS_3_0_MARK_0 <anchor 281 919> mark @POS_3_0_MARK_1;
	pos base Egrave <anchor 281 0> mark @POS_3_0_MARK_0 <anchor 281 945> mark @POS_3_0_MARK_1;
	pos base Emacron <anchor 281 0> mark @POS_3_0_MARK_0 <anchor 281 869> mark @POS_3_0_MARK_1;
	pos base Eogonek <anchor 281 0> mark @POS_3_0_MARK_0 <anchor 281 700> mark @POS_3_0_MARK_1;
	pos base uni1EBC <anchor 281 0> mark @POS_3_0_MARK_0 <anchor 281 871> mark @POS_3_0_MARK_1;
	pos base G <anchor 382 0> mark @POS_3_0_MARK_0 <anchor 382 700> mark @POS_3_0_MARK_1;
	pos base Gbreve <anchor 382 0> mark @POS_3_0_MARK_0 <anchor 382 912> mark @POS_3_0_MARK_1;
	pos base uni0122 <anchor 382 -262> mark @POS_3_0_MARK_0 <anchor 382 700> mark @POS_3_0_MARK_1;
	pos base Gdotaccent <anchor 382 0> mark @POS_3_0_MARK_0 <anchor 382 919> mark @POS_3_0_MARK_1;
	pos base I <anchor 124 0> mark @POS_3_0_MARK_0 <anchor 124 700> mark @POS_3_0_MARK_1;
	pos base IJ <anchor 506 0> mark @POS_3_0_MARK_0 <anchor 641 700> mark @POS_3_0_MARK_1;
	pos base Iacute <anchor 124 0> mark @POS_3_0_MARK_0 <anchor 124 945> mark @POS_3_0_MARK_1;
	pos base Ibreve <anchor 124 0> mark @POS_3_0_MARK_0 <anchor 124 912> mark @POS_3_0_MARK_1;
	pos base Icircumflex <anchor 124 0> mark @POS_3_0_MARK_0 <anchor 124 913> mark @POS_3_0_MARK_1;
	pos base Idieresis <anchor 124 0> mark @POS_3_0_MARK_0 <anchor 124 919> mark @POS_3_0_MARK_1;
	pos base Idotaccent <anchor 124 0> mark @POS_3_0_MARK_0 <anchor 124 919> mark @POS_3_0_MARK_1;
	pos base Igrave <anchor 124 0> mark @POS_3_0_MARK_0 <anchor 124 945> mark @POS_3_0_MARK_1;
	pos base Imacron <anchor 124 0> mark @POS_3_0_MARK_0 <anchor 124 869> mark @POS_3_0_MARK_1;
	pos base Iogonek <anchor 124 0> mark @POS_3_0_MARK_0 <anchor 124 700> mark @POS_3_0_MARK_1;
	pos base Itilde <anchor 124 0> mark @POS_3_0_MARK_0 <anchor 124 871> mark @POS_3_0_MARK_1;
	pos base J <anchor 258 0> mark @POS_3_0_MARK_0 <anchor 393 700> mark @POS_3_0_MARK_1;
	pos base uni004A0301 <anchor 258 0> mark @POS_3_0_MARK_0 <anchor 393 945> mark @POS_3_0_MARK_1;
	pos base K <anchor 307 0> mark @POS_3_0_MARK_0 <anchor 307 700> mark @POS_3_0_MARK_1;
	pos base uni0136 <anchor 307 -262> mark @POS_3_0_MARK_0 <anchor 307 700> mark @POS_3_0_MARK_1;
	pos base L <anchor 266 0> mark @POS_3_0_MARK_0 <anchor 176 700> mark @POS_3_0_MARK_1;
	pos base Lacute <anchor 266 0> mark @POS_3_0_MARK_0 <anchor 176 945> mark @POS_3_0_MARK_1;
	pos base Lcaron <anchor 266 0> mark @POS_3_0_MARK_0 <anchor 176 700> mark @POS_3_0_MARK_1;
	pos base uni013B <anchor 266 -262> mark @POS_3_0_MARK_0 <anchor 176 700> mark @POS_3_0_MARK_1;
	pos base N <anchor 353 0> mark @POS_3_0_MARK_0 <anchor 353 700> mark @POS_3_0_MARK_1;
	pos base Nacute <anchor 353 0> mark @POS_3_0_MARK_0 <anchor 353 945> mark @POS_3_0_MARK_1;
	pos base Ncaron <anchor 353 0> mark @POS_3_0_MARK_0 <anchor 353 912> mark @POS_3_0_MARK_1;
	pos base uni0145 <anchor 353 -262> mark @POS_3_0_MARK_0 <anchor 353 700> mark @POS_3_0_MARK_1;
	pos base Ntilde <anchor 353 0> mark @POS_3_0_MARK_0 <anchor 353 871> mark @POS_3_0_MARK_1;
	pos base O <anchor 397 0> mark @POS_3_0_MARK_0 <anchor 397 700> mark @POS_3_0_MARK_1;
	pos base Oacute <anchor 397 0> mark @POS_3_0_MARK_0 <anchor 397 945> mark @POS_3_0_MARK_1;
	pos base Obreve <anchor 397 0> mark @POS_3_0_MARK_0 <anchor 397 912> mark @POS_3_0_MARK_1;
	pos base Ocircumflex <anchor 397 0> mark @POS_3_0_MARK_0 <anchor 397 913> mark @POS_3_0_MARK_1;
	pos base Odieresis <anchor 397 0> mark @POS_3_0_MARK_0 <anchor 397 919> mark @POS_3_0_MARK_1;
	pos base Ograve <anchor 397 0> mark @POS_3_0_MARK_0 <anchor 397 945> mark @POS_3_0_MARK_1;
	pos base Ohungarumlaut <anchor 397 0> mark @POS_3_0_MARK_0 <anchor 397 919> mark @POS_3_0_MARK_1;
	pos base Omacron <anchor 397 0> mark @POS_3_0_MARK_0 <anchor 397 869> mark @POS_3_0_MARK_1;
	pos base Otilde <anchor 397 0> mark @POS_3_0_MARK_0 <anchor 397 871> mark @POS_3_0_MARK_1;
	pos base R <anchor 308 0> mark @POS_3_0_MARK_0 <anchor 298 700> mark @POS_3_0_MARK_1;
	pos base Racute <anchor 308 0> mark @POS_3_0_MARK_0 <anchor 298 945> mark @POS_3_0_MARK_1;
	pos base Rcaron <anchor 308 0> mark @POS_3_0_MARK_0 <anchor 298 912> mark @POS_3_0_MARK_1;
	pos base uni0156 <anchor 308 -262> mark @POS_3_0_MARK_0 <anchor 298 700> mark @POS_3_0_MARK_1;
	pos base S <anchor 293 0> mark @POS_3_0_MARK_0 <anchor 293 700> mark @POS_3_0_MARK_1;
	pos base Sacute <anchor 293 0> mark @POS_3_0_MARK_0 <anchor 293 945> mark @POS_3_0_MARK_1;
	pos base Scaron <anchor 293 0> mark @POS_3_0_MARK_0 <anchor 293 912> mark @POS_3_0_MARK_1;
	pos base Scedilla <anchor 293 -262> mark @POS_3_0_MARK_0 <anchor 293 700> mark @POS_3_0_MARK_1;
	pos base uni0218 <anchor 293 -262> mark @POS_3_0_MARK_0 <anchor 293 700> mark @POS_3_0_MARK_1;
	pos base T <anchor 288 0> mark @POS_3_0_MARK_0 <anchor 288 700> mark @POS_3_0_MARK_1;
	pos base Tcaron <anchor 288 0> mark @POS_3_0_MARK_0 <anchor 288 912> mark @POS_3_0_MARK_1;
	pos base uni0162 <anchor 288 -262> mark @POS_3_0_MARK_0 <anchor 288 700> mark @POS_3_0_MARK_1;
	pos base uni021A <anchor 288 -262> mark @POS_3_0_MARK_0 <anchor 288 700> mark @POS_3_0_MARK_1;
	pos base U <anchor 334 0> mark @POS_3_0_MARK_0 <anchor 334 700> mark @POS_3_0_MARK_1;
	pos base Uacute <anchor 334 0> mark @POS_3_0_MARK_0 <anchor 334 945> mark @POS_3_0_MARK_1;
	pos base Ubreve <anchor 334 0> mark @POS_3_0_MARK_0 <anchor 334 912> mark @POS_3_0_MARK_1;
	pos base Ucircumflex <anchor 334 0> mark @POS_3_0_MARK_0 <anchor 334 913> mark @POS_3_0_MARK_1;
	pos base Udieresis <anchor 334 0> mark @POS_3_0_MARK_0 <anchor 334 919> mark @POS_3_0_MARK_1;
	pos base Ugrave <anchor 334 0> mark @POS_3_0_MARK_0 <anchor 334 945> mark @POS_3_0_MARK_1;
	pos base Uhungarumlaut <anchor 334 0> mark @POS_3_0_MARK_0 <anchor 334 919> mark @POS_3_0_MARK_1;
	pos base Umacron <anchor 334 0> mark @POS_3_0_MARK_0 <anchor 334 869> mark @POS_3_0_MARK_1;
	pos base Uogonek <anchor 334 0> mark @POS_3_0_MARK_0 <anchor 334 700> mark @POS_3_0_MARK_1;
	pos base Uring <anchor 334 0> mark @POS_3_0_MARK_0 <anchor 334 972> mark @POS_3_0_MARK_1;
	pos base Utilde <anchor 334 0> mark @POS_3_0_MARK_0 <anchor 334 871> mark @POS_3_0_MARK_1;
	pos base W <anchor 510 0> mark @POS_3_0_MARK_0 <anchor 510 700> mark @POS_3_0_MARK_1;
	pos base Wacute <anchor 510 0> mark @POS_3_0_MARK_0 <anchor 510 945> mark @POS_3_0_MARK_1;
	pos base Wcircumflex <anchor 510 0> mark @POS_3_0_MARK_0 <anchor 510 913> mark @POS_3_0_MARK_1;
	pos base Wdieresis <anchor 510 0> mark @POS_3_0_MARK_0 <anchor 510 919> mark @POS_3_0_MARK_1;
	pos base Wgrave <anchor 510 0> mark @POS_3_0_MARK_0 <anchor 510 945> mark @POS_3_0_MARK_1;
	pos base Y <anchor 303 0> mark @POS_3_0_MARK_0 <anchor 303 700> mark @POS_3_0_MARK_1;
	pos base Yacute <anchor 303 0> mark @POS_3_0_MARK_0 <anchor 303 945> mark @POS_3_0_MARK_1;
	pos base Ycircumflex <anchor 303 0> mark @POS_3_0_MARK_0 <anchor 303 913> mark @POS_3_0_MARK_1;
	pos base Ydieresis <anchor 303 0> mark @POS_3_0_MARK_0 <anchor 303 919> mark @POS_3_0_MARK_1;
	pos base Ygrave <anchor 303 0> mark @POS_3_0_MARK_0 <anchor 303 945> mark @POS_3_0_MARK_1;
	pos base uni1EF8 <anchor 303 0> mark @POS_3_0_MARK_0 <anchor 303 871> mark @POS_3_0_MARK_1;
	pos base Z <anchor 275 0> mark @POS_3_0_MARK_0 <anchor 275 700> mark @POS_3_0_MARK_1;
	pos base Zacute <anchor 275 0> mark @POS_3_0_MARK_0 <anchor 275 945> mark @POS_3_0_MARK_1;
	pos base Zcaron <anchor 275 0> mark @POS_3_0_MARK_0 <anchor 275 912> mark @POS_3_0_MARK_1;
	pos base Zdotaccent <anchor 275 0> mark @POS_3_0_MARK_0 <anchor 275 919> mark @POS_3_0_MARK_1;
	pos base a <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 269 496> mark @POS_3_0_MARK_1;
	pos base aacute <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 269 750> mark @POS_3_0_MARK_1;
	pos base abreve <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 269 719> mark @POS_3_0_MARK_1;
	pos base uni01CE <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 269 728> mark @POS_3_0_MARK_1;
	pos base acircumflex <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 269 728> mark @POS_3_0_MARK_1;
	pos base adieresis <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 269 724> mark @POS_3_0_MARK_1;
	pos base agrave <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 269 750> mark @POS_3_0_MARK_1;
	pos base amacron <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 269 692> mark @POS_3_0_MARK_1;
	pos base aogonek <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 269 496> mark @POS_3_0_MARK_1;
	pos base aring <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 269 767> mark @POS_3_0_MARK_1;
	pos base atilde <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 269 704> mark @POS_3_0_MARK_1;
	pos base ae <anchor 453 0> mark @POS_3_0_MARK_0 <anchor 453 496> mark @POS_3_0_MARK_1;
	pos base aeacute <anchor 453 0> mark @POS_3_0_MARK_0 <anchor 453 750> mark @POS_3_0_MARK_1;
	pos base c <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 496> mark @POS_3_0_MARK_1;
	pos base cacute <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 750> mark @POS_3_0_MARK_1;
	pos base ccaron <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 728> mark @POS_3_0_MARK_1;
	pos base ccedilla <anchor 284 -262> mark @POS_3_0_MARK_0 <anchor 282 496> mark @POS_3_0_MARK_1;
	pos base cdotaccent <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 724> mark @POS_3_0_MARK_1;
	pos base d <anchor 304 0> mark @POS_3_0_MARK_0 <anchor 304 992> mark @POS_3_0_MARK_1;
	pos base dcaron <anchor 304 0> mark @POS_3_0_MARK_0 <anchor 304 992> mark @POS_3_0_MARK_1;
	pos base e <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 281 496> mark @POS_3_0_MARK_1;
	pos base eacute <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 281 750> mark @POS_3_0_MARK_1;
	pos base ebreve <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 281 719> mark @POS_3_0_MARK_1;
	pos base ecaron <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 281 728> mark @POS_3_0_MARK_1;
	pos base ecircumflex <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 281 728> mark @POS_3_0_MARK_1;
	pos base edieresis <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 281 724> mark @POS_3_0_MARK_1;
	pos base edotaccent <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 281 724> mark @POS_3_0_MARK_1;
	pos base egrave <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 281 750> mark @POS_3_0_MARK_1;
	pos base emacron <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 281 692> mark @POS_3_0_MARK_1;
	pos base eogonek <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 281 496> mark @POS_3_0_MARK_1;
	pos base uni1EBD <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 281 704> mark @POS_3_0_MARK_1;
	pos base g <anchor 264 -310> mark @POS_3_0_MARK_0 <anchor 253 496> mark @POS_3_0_MARK_1;
	pos base gbreve <anchor 264 -310> mark @POS_3_0_MARK_0 <anchor 253 719> mark @POS_3_0_MARK_1;
	pos base uni0123 <anchor 264 -310> mark @POS_3_0_MARK_0 <anchor 253 810> mark @POS_3_0_MARK_1;
	pos base gdotaccent <anchor 264 -310> mark @POS_3_0_MARK_0 <anchor 253 724> mark @POS_3_0_MARK_1;
	pos base i <anchor 116 0> mark @POS_3_0_MARK_0;
	pos base dotlessi <anchor 110 0> mark @POS_3_0_MARK_0 <anchor 110 496> mark @POS_3_0_MARK_1;
	pos base iacute <anchor 110 0> mark @POS_3_0_MARK_0 <anchor 110 750> mark @POS_3_0_MARK_1;
	pos base ibreve <anchor 110 0> mark @POS_3_0_MARK_0 <anchor 110 719> mark @POS_3_0_MARK_1;
	pos base icircumflex <anchor 110 0> mark @POS_3_0_MARK_0 <anchor 110 728> mark @POS_3_0_MARK_1;
	pos base idieresis <anchor 110 0> mark @POS_3_0_MARK_0 <anchor 110 724> mark @POS_3_0_MARK_1;
	pos base i.loclTRK <anchor 110 0> mark @POS_3_0_MARK_0 <anchor 110 724> mark @POS_3_0_MARK_1;
	pos base igrave <anchor 110 0> mark @POS_3_0_MARK_0 <anchor 110 750> mark @POS_3_0_MARK_1;
	pos base imacron <anchor 110 0> mark @POS_3_0_MARK_0 <anchor 110 692> mark @POS_3_0_MARK_1;
	pos base iogonek <anchor 110 0> mark @POS_3_0_MARK_0 <anchor 110 724> mark @POS_3_0_MARK_1;
	pos base itilde <anchor 110 0> mark @POS_3_0_MARK_0 <anchor 110 704> mark @POS_3_0_MARK_1;
	pos base ij <anchor 116 0> mark @POS_3_0_MARK_0;
	pos base uni0237 <anchor 116 -310> mark @POS_3_0_MARK_0 <anchor 116 496> mark @POS_3_0_MARK_1;
	pos base uni006A0301 <anchor 116 -310> mark @POS_3_0_MARK_0 <anchor 116 750> mark @POS_3_0_MARK_1;
	pos base k <anchor 259 0> mark @POS_3_0_MARK_0 <anchor 259 992> mark @POS_3_0_MARK_1;
	pos base uni0137 <anchor 259 -262> mark @POS_3_0_MARK_0 <anchor 259 992> mark @POS_3_0_MARK_1;
	pos base l <anchor 110 0> mark @POS_3_0_MARK_0 <anchor 110 700> mark @POS_3_0_MARK_1;
	pos base lacute <anchor 110 0> mark @POS_3_0_MARK_0 <anchor 110 954> mark @POS_3_0_MARK_1;
	pos base lcaron <anchor 110 0> mark @POS_3_0_MARK_0 <anchor 110 700> mark @POS_3_0_MARK_1;
	pos base uni013C <anchor 110 -262> mark @POS_3_0_MARK_0 <anchor 110 700> mark @POS_3_0_MARK_1;
	pos base n <anchor 293 0> mark @POS_3_0_MARK_0 <anchor 293 496> mark @POS_3_0_MARK_1;
	pos base nacute <anchor 293 0> mark @POS_3_0_MARK_0 <anchor 293 750> mark @POS_3_0_MARK_1;
	pos base ncaron <anchor 293 0> mark @POS_3_0_MARK_0 <anchor 293 728> mark @POS_3_0_MARK_1;
	pos base uni0146 <anchor 293 -262> mark @POS_3_0_MARK_0 <anchor 293 496> mark @POS_3_0_MARK_1;
	pos base ntilde <anchor 293 0> mark @POS_3_0_MARK_0 <anchor 293 704> mark @POS_3_0_MARK_1;
	pos base o <anchor 295 0> mark @POS_3_0_MARK_0 <anchor 295 496> mark @POS_3_0_MARK_1;
	pos base oacute <anchor 295 0> mark @POS_3_0_MARK_0 <anchor 295 750> mark @POS_3_0_MARK_1;
	pos base obreve <anchor 295 0> mark @POS_3_0_MARK_0 <anchor 295 719> mark @POS_3_0_MARK_1;
	pos base ocircumflex <anchor 295 0> mark @POS_3_0_MARK_0 <anchor 295 728> mark @POS_3_0_MARK_1;
	pos base odieresis <anchor 295 0> mark @POS_3_0_MARK_0 <anchor 295 724> mark @POS_3_0_MARK_1;
	pos base ograve <anchor 295 0> mark @POS_3_0_MARK_0 <anchor 295 750> mark @POS_3_0_MARK_1;
	pos base ohungarumlaut <anchor 295 0> mark @POS_3_0_MARK_0 <anchor 295 715> mark @POS_3_0_MARK_1;
	pos base omacron <anchor 295 0> mark @POS_3_0_MARK_0 <anchor 295 692> mark @POS_3_0_MARK_1;
	pos base otilde <anchor 295 0> mark @POS_3_0_MARK_0 <anchor 295 704> mark @POS_3_0_MARK_1;
	pos base r <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 175 496> mark @POS_3_0_MARK_1;
	pos base racute <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 175 750> mark @POS_3_0_MARK_1;
	pos base rcaron <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 175 728> mark @POS_3_0_MARK_1;
	pos base uni0157 <anchor 116 -262> mark @POS_3_0_MARK_0 <anchor 175 496> mark @POS_3_0_MARK_1;
	pos base s <anchor 249 0> mark @POS_3_0_MARK_0 <anchor 241 496> mark @POS_3_0_MARK_1;
	pos base sacute <anchor 249 0> mark @POS_3_0_MARK_0 <anchor 241 750> mark @POS_3_0_MARK_1;
	pos base scaron <anchor 249 0> mark @POS_3_0_MARK_0 <anchor 241 728> mark @POS_3_0_MARK_1;
	pos base scedilla <anchor 249 -262> mark @POS_3_0_MARK_0 <anchor 241 496> mark @POS_3_0_MARK_1;
	pos base uni0219 <anchor 249 -262> mark @POS_3_0_MARK_0 <anchor 241 496> mark @POS_3_0_MARK_1;
	pos base t <anchor 225 0> mark @POS_3_0_MARK_0 <anchor 182 496> mark @POS_3_0_MARK_1;
	pos base tcaron <anchor 225 0> mark @POS_3_0_MARK_0 <anchor 182 496> mark @POS_3_0_MARK_1;
	pos base uni0163 <anchor 225 -262> mark @POS_3_0_MARK_0 <anchor 182 496> mark @POS_3_0_MARK_1;
	pos base uni021B <anchor 225 -262> mark @POS_3_0_MARK_0 <anchor 182 496> mark @POS_3_0_MARK_1;
	pos base u <anchor 283 0> mark @POS_3_0_MARK_0 <anchor 281 496> mark @POS_3_0_MARK_1;
	pos base uacute <anchor 283 0> mark @POS_3_0_MARK_0 <anchor 281 750> mark @POS_3_0_MARK_1;
	pos base ubreve <anchor 283 0> mark @POS_3_0_MARK_0 <anchor 281 719> mark @POS_3_0_MARK_1;
	pos base ucircumflex <anchor 283 0> mark @POS_3_0_MARK_0 <anchor 281 728> mark @POS_3_0_MARK_1;
	pos base udieresis <anchor 283 0> mark @POS_3_0_MARK_0 <anchor 281 724> mark @POS_3_0_MARK_1;
	pos base ugrave <anchor 283 0> mark @POS_3_0_MARK_0 <anchor 281 750> mark @POS_3_0_MARK_1;
	pos base uhungarumlaut <anchor 283 0> mark @POS_3_0_MARK_0 <anchor 281 715> mark @POS_3_0_MARK_1;
	pos base umacron <anchor 283 0> mark @POS_3_0_MARK_0 <anchor 281 692> mark @POS_3_0_MARK_1;
	pos base uogonek <anchor 283 0> mark @POS_3_0_MARK_0 <anchor 281 496> mark @POS_3_0_MARK_1;
	pos base uring <anchor 283 0> mark @POS_3_0_MARK_0 <anchor 281 767> mark @POS_3_0_MARK_1;
	pos base utilde <anchor 283 0> mark @POS_3_0_MARK_0 <anchor 281 704> mark @POS_3_0_MARK_1;
	pos base w <anchor 375 0> mark @POS_3_0_MARK_0 <anchor 376 496> mark @POS_3_0_MARK_1;
	pos base wacute <anchor 375 0> mark @POS_3_0_MARK_0 <anchor 376 750> mark @POS_3_0_MARK_1;
	pos base wcircumflex <anchor 375 0> mark @POS_3_0_MARK_0 <anchor 376 728> mark @POS_3_0_MARK_1;
	pos base wdieresis <anchor 375 0> mark @POS_3_0_MARK_0 <anchor 376 724> mark @POS_3_0_MARK_1;
	pos base wgrave <anchor 375 0> mark @POS_3_0_MARK_0 <anchor 376 750> mark @POS_3_0_MARK_1;
	pos base y <anchor 271 0> mark @POS_3_0_MARK_0 <anchor 271 496> mark @POS_3_0_MARK_1;
	pos base yacute <anchor 271 0> mark @POS_3_0_MARK_0 <anchor 271 750> mark @POS_3_0_MARK_1;
	pos base ycircumflex <anchor 271 0> mark @POS_3_0_MARK_0 <anchor 271 728> mark @POS_3_0_MARK_1;
	pos base ydieresis <anchor 271 0> mark @POS_3_0_MARK_0 <anchor 271 724> mark @POS_3_0_MARK_1;
	pos base ygrave <anchor 271 0> mark @POS_3_0_MARK_0 <anchor 271 750> mark @POS_3_0_MARK_1;
	pos base uni1EF9 <anchor 271 0> mark @POS_3_0_MARK_0 <anchor 271 704> mark @POS_3_0_MARK_1;
	pos base z <anchor 213 0> mark @POS_3_0_MARK_0 <anchor 213 496> mark @POS_3_0_MARK_1;
	pos base zacute <anchor 213 0> mark @POS_3_0_MARK_0 <anchor 213 750> mark @POS_3_0_MARK_1;
	pos base zcaron <anchor 213 0> mark @POS_3_0_MARK_0 <anchor 213 728> mark @POS_3_0_MARK_1;
	pos base zdotaccent <anchor 213 0> mark @POS_3_0_MARK_0 <anchor 213 724> mark @POS_3_0_MARK_1;
} POS_3;
lookup POS_4 {
	markClass uni0328 <anchor 207 0> @POS_4_0_MARK_0;
	markClass uni0328.case <anchor 207 0> @POS_4_0_MARK_0;
	pos base A <anchor 661 0> mark @POS_4_0_MARK_0;
	pos base Aacute <anchor 661 0> mark @POS_4_0_MARK_0;
	pos base Abreve <anchor 661 0> mark @POS_4_0_MARK_0;
	pos base uni01CD <anchor 661 0> mark @POS_4_0_MARK_0;
	pos base Acircumflex <anchor 661 0> mark @POS_4_0_MARK_0;
	pos base Adieresis <anchor 661 0> mark @POS_4_0_MARK_0;
	pos base Agrave <anchor 661 0> mark @POS_4_0_MARK_0;
	pos base Amacron <anchor 661 0> mark @POS_4_0_MARK_0;
	pos base Aogonek <anchor 661 0> mark @POS_4_0_MARK_0;
	pos base Aring <anchor 661 0> mark @POS_4_0_MARK_0;
	pos base Atilde <anchor 661 0> mark @POS_4_0_MARK_0;
	pos base E <anchor 511 0> mark @POS_4_0_MARK_0;
	pos base Eacute <anchor 511 0> mark @POS_4_0_MARK_0;
	pos base Ebreve <anchor 511 0> mark @POS_4_0_MARK_0;
	pos base Ecaron <anchor 511 0> mark @POS_4_0_MARK_0;
	pos base Ecircumflex <anchor 511 0> mark @POS_4_0_MARK_0;
	pos base Edieresis <anchor 511 0> mark @POS_4_0_MARK_0;
	pos base Edotaccent <anchor 511 0> mark @POS_4_0_MARK_0;
	pos base Egrave <anchor 511 0> mark @POS_4_0_MARK_0;
	pos base Emacron <anchor 511 0> mark @POS_4_0_MARK_0;
	pos base Eogonek <anchor 511 0> mark @POS_4_0_MARK_0;
	pos base uni1EBC <anchor 511 0> mark @POS_4_0_MARK_0;
	pos base I <anchor 181 0> mark @POS_4_0_MARK_0;
	pos base IJ <anchor 181 0> mark @POS_4_0_MARK_0;
	pos base Iacute <anchor 181 0> mark @POS_4_0_MARK_0;
	pos base Ibreve <anchor 181 0> mark @POS_4_0_MARK_0;
	pos base Icircumflex <anchor 181 0> mark @POS_4_0_MARK_0;
	pos base Idieresis <anchor 181 0> mark @POS_4_0_MARK_0;
	pos base Idotaccent <anchor 181 0> mark @POS_4_0_MARK_0;
	pos base Igrave <anchor 181 0> mark @POS_4_0_MARK_0;
	pos base Imacron <anchor 181 0> mark @POS_4_0_MARK_0;
	pos base Iogonek <anchor 181 0> mark @POS_4_0_MARK_0;
	pos base Itilde <anchor 181 0> mark @POS_4_0_MARK_0;
	pos base O <anchor 477 10> mark @POS_4_0_MARK_0;
	pos base Oacute <anchor 477 10> mark @POS_4_0_MARK_0;
	pos base Obreve <anchor 477 10> mark @POS_4_0_MARK_0;
	pos base Ocircumflex <anchor 477 10> mark @POS_4_0_MARK_0;
	pos base Odieresis <anchor 477 10> mark @POS_4_0_MARK_0;
	pos base Ograve <anchor 477 10> mark @POS_4_0_MARK_0;
	pos base Ohungarumlaut <anchor 477 10> mark @POS_4_0_MARK_0;
	pos base Omacron <anchor 477 10> mark @POS_4_0_MARK_0;
	pos base Otilde <anchor 477 10> mark @POS_4_0_MARK_0;
	pos base U <anchor 413 10> mark @POS_4_0_MARK_0;
	pos base Uacute <anchor 413 10> mark @POS_4_0_MARK_0;
	pos base Ubreve <anchor 413 10> mark @POS_4_0_MARK_0;
	pos base Ucircumflex <anchor 413 10> mark @POS_4_0_MARK_0;
	pos base Udieresis <anchor 413 10> mark @POS_4_0_MARK_0;
	pos base Ugrave <anchor 413 10> mark @POS_4_0_MARK_0;
	pos base Uhungarumlaut <anchor 413 10> mark @POS_4_0_MARK_0;
	pos base Umacron <anchor 413 10> mark @POS_4_0_MARK_0;
	pos base Uogonek <anchor 413 10> mark @POS_4_0_MARK_0;
	pos base Uring <anchor 413 10> mark @POS_4_0_MARK_0;
	pos base Utilde <anchor 413 10> mark @POS_4_0_MARK_0;
	pos base a <anchor 538 0> mark @POS_4_0_MARK_0;
	pos base aacute <anchor 538 0> mark @POS_4_0_MARK_0;
	pos base abreve <anchor 538 0> mark @POS_4_0_MARK_0;
	pos base uni01CE <anchor 538 0> mark @POS_4_0_MARK_0;
	pos base acircumflex <anchor 538 0> mark @POS_4_0_MARK_0;
	pos base adieresis <anchor 538 0> mark @POS_4_0_MARK_0;
	pos base agrave <anchor 538 0> mark @POS_4_0_MARK_0;
	pos base amacron <anchor 538 0> mark @POS_4_0_MARK_0;
	pos base aogonek <anchor 538 0> mark @POS_4_0_MARK_0;
	pos base aring <anchor 538 0> mark @POS_4_0_MARK_0;
	pos base atilde <anchor 538 0> mark @POS_4_0_MARK_0;
	pos base e <anchor 391 10> mark @POS_4_0_MARK_0;
	pos base eacute <anchor 391 10> mark @POS_4_0_MARK_0;
	pos base ebreve <anchor 391 10> mark @POS_4_0_MARK_0;
	pos base ecaron <anchor 391 10> mark @POS_4_0_MARK_0;
	pos base ecircumflex <anchor 391 10> mark @POS_4_0_MARK_0;
	pos base edieresis <anchor 391 10> mark @POS_4_0_MARK_0;
	pos base edotaccent <anchor 391 10> mark @POS_4_0_MARK_0;
	pos base egrave <anchor 391 10> mark @POS_4_0_MARK_0;
	pos base emacron <anchor 391 10> mark @POS_4_0_MARK_0;
	pos base eogonek <anchor 391 10> mark @POS_4_0_MARK_0;
	pos base uni1EBD <anchor 391 10> mark @POS_4_0_MARK_0;
	pos base dotlessi <anchor 166 0> mark @POS_4_0_MARK_0;
	pos base iacute <anchor 166 0> mark @POS_4_0_MARK_0;
	pos base ibreve <anchor 166 0> mark @POS_4_0_MARK_0;
	pos base icircumflex <anchor 166 0> mark @POS_4_0_MARK_0;
	pos base idieresis <anchor 166 0> mark @POS_4_0_MARK_0;
	pos base i.loclTRK <anchor 166 0> mark @POS_4_0_MARK_0;
	pos base igrave <anchor 166 0> mark @POS_4_0_MARK_0;
	pos base imacron <anchor 166 0> mark @POS_4_0_MARK_0;
	pos base iogonek <anchor 166 0> mark @POS_4_0_MARK_0;
	pos base itilde <anchor 166 0> mark @POS_4_0_MARK_0;
	pos base o <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base oacute <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base obreve <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base ocircumflex <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base odieresis <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base ograve <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base ohungarumlaut <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base omacron <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base otilde <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base u <anchor 512 0> mark @POS_4_0_MARK_0;
	pos base uacute <anchor 512 0> mark @POS_4_0_MARK_0;
	pos base ubreve <anchor 512 0> mark @POS_4_0_MARK_0;
	pos base ucircumflex <anchor 512 0> mark @POS_4_0_MARK_0;
	pos base udieresis <anchor 512 0> mark @POS_4_0_MARK_0;
	pos base ugrave <anchor 512 0> mark @POS_4_0_MARK_0;
	pos base uhungarumlaut <anchor 512 0> mark @POS_4_0_MARK_0;
	pos base umacron <anchor 512 0> mark @POS_4_0_MARK_0;
	pos base uogonek <anchor 512 0> mark @POS_4_0_MARK_0;
	pos base uring <anchor 512 0> mark @POS_4_0_MARK_0;
	pos base utilde <anchor 512 0> mark @POS_4_0_MARK_0;
} POS_4;
lookup POS_5 {
	markClass uni030C.alt <anchor 0 992> @POS_5_0_MARK_0;
	markClass uni030C.alt.case <anchor 1 700> @POS_5_0_MARK_0;
	pos base L <anchor 274 700> mark @POS_5_0_MARK_0;
	pos base Lacute <anchor 274 700> mark @POS_5_0_MARK_0;
	pos base Lcaron <anchor 274 700> mark @POS_5_0_MARK_0;
	pos base uni013B <anchor 274 700> mark @POS_5_0_MARK_0;
	pos base O <anchor 773 700> mark @POS_5_0_MARK_0;
	pos base Oacute <anchor 773 700> mark @POS_5_0_MARK_0;
	pos base Obreve <anchor 773 700> mark @POS_5_0_MARK_0;
	pos base Ocircumflex <anchor 773 700> mark @POS_5_0_MARK_0;
	pos base Odieresis <anchor 773 700> mark @POS_5_0_MARK_0;
	pos base Ograve <anchor 773 700> mark @POS_5_0_MARK_0;
	pos base Ohungarumlaut <anchor 773 700> mark @POS_5_0_MARK_0;
	pos base Omacron <anchor 773 700> mark @POS_5_0_MARK_0;
	pos base Otilde <anchor 773 700> mark @POS_5_0_MARK_0;
	pos base U <anchor 647 700> mark @POS_5_0_MARK_0;
	pos base Uacute <anchor 647 700> mark @POS_5_0_MARK_0;
	pos base Ubreve <anchor 647 700> mark @POS_5_0_MARK_0;
	pos base Ucircumflex <anchor 647 700> mark @POS_5_0_MARK_0;
	pos base Udieresis <anchor 647 700> mark @POS_5_0_MARK_0;
	pos base Ugrave <anchor 647 700> mark @POS_5_0_MARK_0;
	pos base Uhungarumlaut <anchor 647 700> mark @POS_5_0_MARK_0;
	pos base Umacron <anchor 647 700> mark @POS_5_0_MARK_0;
	pos base Uogonek <anchor 647 700> mark @POS_5_0_MARK_0;
	pos base Uring <anchor 647 700> mark @POS_5_0_MARK_0;
	pos base Utilde <anchor 647 700> mark @POS_5_0_MARK_0;
	pos base d <anchor 588 992> mark @POS_5_0_MARK_0;
	pos base dcaron <anchor 588 992> mark @POS_5_0_MARK_0;
	pos base l <anchor 202 992> mark @POS_5_0_MARK_0;
	pos base lacute <anchor 202 992> mark @POS_5_0_MARK_0;
	pos base lcaron <anchor 202 992> mark @POS_5_0_MARK_0;
	pos base uni013C <anchor 202 992> mark @POS_5_0_MARK_0;
	pos base o <anchor 567 496> mark @POS_5_0_MARK_0;
	pos base oacute <anchor 567 496> mark @POS_5_0_MARK_0;
	pos base obreve <anchor 567 496> mark @POS_5_0_MARK_0;
	pos base ocircumflex <anchor 567 496> mark @POS_5_0_MARK_0;
	pos base odieresis <anchor 567 496> mark @POS_5_0_MARK_0;
	pos base ograve <anchor 567 496> mark @POS_5_0_MARK_0;
	pos base ohungarumlaut <anchor 567 496> mark @POS_5_0_MARK_0;
	pos base omacron <anchor 567 496> mark @POS_5_0_MARK_0;
	pos base otilde <anchor 567 496> mark @POS_5_0_MARK_0;
	pos base t <anchor 253 992> mark @POS_5_0_MARK_0;
	pos base tcaron <anchor 253 992> mark @POS_5_0_MARK_0;
	pos base uni0163 <anchor 253 992> mark @POS_5_0_MARK_0;
	pos base uni021B <anchor 253 992> mark @POS_5_0_MARK_0;
	pos base u <anchor 545 496> mark @POS_5_0_MARK_0;
	pos base uacute <anchor 545 496> mark @POS_5_0_MARK_0;
	pos base ubreve <anchor 545 496> mark @POS_5_0_MARK_0;
	pos base ucircumflex <anchor 545 496> mark @POS_5_0_MARK_0;
	pos base udieresis <anchor 545 496> mark @POS_5_0_MARK_0;
	pos base ugrave <anchor 545 496> mark @POS_5_0_MARK_0;
	pos base uhungarumlaut <anchor 545 496> mark @POS_5_0_MARK_0;
	pos base umacron <anchor 545 496> mark @POS_5_0_MARK_0;
	pos base uogonek <anchor 545 496> mark @POS_5_0_MARK_0;
	pos base uring <anchor 545 496> mark @POS_5_0_MARK_0;
	pos base utilde <anchor 545 496> mark @POS_5_0_MARK_0;
} POS_5;
script latn;
language dflt;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language AZE;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language CAT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language CRT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language KAZ;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language MOL;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language NLD;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language ROM;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language TAT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language TRK;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
";
tag = mark;
},
{
code = "script DFLT;
language dflt;
lookup POS_6 {
	lookupflag UseMarkFilteringSet [uni0326 uni0327 uni0327.case];
	markClass uni0326 <anchor 58 0> @POS_6_0_MARK_0;
	markClass uni0327 <anchor 87 0> @POS_6_0_MARK_0;
	markClass uni0327.case <anchor 85 0> @POS_6_0_MARK_0;
	pos mark uni0326 <anchor 58 -262> mark @POS_6_0_MARK_0;
	pos mark uni0327 <anchor 87 -262> mark @POS_6_0_MARK_0;
	pos mark uni0327.case <anchor 85 -262> mark @POS_6_0_MARK_0;
} POS_6;
lookup POS_7 {
	lookupflag UseMarkFilteringSet [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312 uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0308.narrow];
	markClass uni0308 <anchor 178 496> @POS_7_0_MARK_0;
	markClass uni0307 <anchor 75 496> @POS_7_0_MARK_0;
	markClass gravecomb <anchor 110 496> @POS_7_0_MARK_0;
	markClass acutecomb <anchor 110 496> @POS_7_0_MARK_0;
	markClass uni030B <anchor 137 496> @POS_7_0_MARK_0;
	markClass uni0302 <anchor 143 496> @POS_7_0_MARK_0;
	markClass uni030C <anchor 143 496> @POS_7_0_MARK_0;
	markClass uni0306 <anchor 151 496> @POS_7_0_MARK_0;
	markClass uni030A <anchor 111 496> @POS_7_0_MARK_0;
	markClass tildecomb <anchor 168 496> @POS_7_0_MARK_0;
	markClass uni0304 <anchor 176 496> @POS_7_0_MARK_0;
	markClass uni0312 <anchor 60 496> @POS_7_0_MARK_0;
	markClass uni0308.case <anchor 178 700> @POS_7_0_MARK_0;
	markClass uni0307.case <anchor 75 700> @POS_7_0_MARK_0;
	markClass gravecomb.case <anchor 110 700> @POS_7_0_MARK_0;
	markClass acutecomb.case <anchor 110 700> @POS_7_0_MARK_0;
	markClass uni030B.case <anchor 167 700> @POS_7_0_MARK_0;
	markClass uni0302.case <anchor 143 700> @POS_7_0_MARK_0;
	markClass uni030C.case <anchor 143 700> @POS_7_0_MARK_0;
	markClass uni0306.case <anchor 151 700> @POS_7_0_MARK_0;
	markClass uni030A.case <anchor 111 700> @POS_7_0_MARK_0;
	markClass tildecomb.case <anchor 168 700> @POS_7_0_MARK_0;
	markClass uni0304.case <anchor 176 700> @POS_7_0_MARK_0;
	markClass uni0308.narrow <anchor 178 496> @POS_7_0_MARK_0;
	pos mark uni0308 <anchor 178 724> mark @POS_7_0_MARK_0;
	pos mark uni0307 <anchor 75 724> mark @POS_7_0_MARK_0;
	pos mark gravecomb <anchor 110 750> mark @POS_7_0_MARK_0;
	pos mark acutecomb <anchor 110 750> mark @POS_7_0_MARK_0;
	pos mark uni030B <anchor 137 715> mark @POS_7_0_MARK_0;
	pos mark uni0302 <anchor 143 728> mark @POS_7_0_MARK_0;
	pos mark uni030C <anchor 143 728> mark @POS_7_0_MARK_0;
	pos mark uni0306 <anchor 151 719> mark @POS_7_0_MARK_0;
	pos mark uni030A <anchor 111 767> mark @POS_7_0_MARK_0;
	pos mark tildecomb <anchor 168 704> mark @POS_7_0_MARK_0;
	pos mark uni0304 <anchor 176 692> mark @POS_7_0_MARK_0;
	pos mark uni0312 <anchor 60 810> mark @POS_7_0_MARK_0;
	pos mark uni0308.case <anchor 178 919> mark @POS_7_0_MARK_0;
	pos mark uni0307.case <anchor 75 919> mark @POS_7_0_MARK_0;
	pos mark gravecomb.case <anchor 110 945> mark @POS_7_0_MARK_0;
	pos mark acutecomb.case <anchor 110 945> mark @POS_7_0_MARK_0;
	pos mark uni030B.case <anchor 167 919> mark @POS_7_0_MARK_0;
	pos mark uni0302.case <anchor 143 913> mark @POS_7_0_MARK_0;
	pos mark uni030C.case <anchor 143 912> mark @POS_7_0_MARK_0;
	pos mark uni0306.case <anchor 151 912> mark @POS_7_0_MARK_0;
	pos mark uni030A.case <anchor 111 972> mark @POS_7_0_MARK_0;
	pos mark tildecomb.case <anchor 168 871> mark @POS_7_0_MARK_0;
	pos mark uni0304.case <anchor 176 869> mark @POS_7_0_MARK_0;
	pos mark uni0308.narrow <anchor 178 724> mark @POS_7_0_MARK_0;
} POS_7;
script latn;
language dflt;
lookup POS_6;
lookup POS_7;
language AZE;
lookup POS_6;
lookup POS_7;
language CAT;
lookup POS_6;
lookup POS_7;
language CRT;
lookup POS_6;
lookup POS_7;
language KAZ;
lookup POS_6;
lookup POS_7;
language MOL;
lookup POS_6;
lookup POS_7;
language NLD;
lookup POS_6;
lookup POS_7;
language ROM;
lookup POS_6;
lookup POS_7;
language TAT;
lookup POS_6;
lookup POS_7;
language TRK;
lookup POS_6;
lookup POS_7;
";
tag = mkmk;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 992;
},
{
name = typoDescender;
value = -310;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 992;
},
{
name = winDescent;
value = 310;
},
{
name = hheaAscender;
value = 992;
},
{
name = hheaDescender;
value = -310;
},
{
name = strikeoutPosition;
value = 297;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
200
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 1
INSTCTRL[ ]	/* SetInstrExecControl */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
WCVTF[ ]	/* WriteCVTInFUnits */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 6 values pushed */
0 0 42 0 4 0
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
NPUSHB[ ]	/* 10 values pushed */
55 4 47 4 31 8 21 5 4 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
NPUSHB[ ]	/* 10 values pushed */
59 2 51 2 39 6 26 3 4 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 11
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 6 values pushed */
3584 3072 2048 1408 4 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 15
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 6 values pushed */
64 64 64 64 4 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
36 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
40 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 1 value pushed */
2048
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
39 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 3 values pushed */
2176 1 1088
GETINFO[ ]	/* GetInfo */
MUL[ ]	/* Multiply */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
57 2 49 2 33 6 23 3 4 14
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 1 value pushed */
511
SCANCTRL[ ]	/* ScanConversionControl */
PUSHB[ ]	/* 1 value pushed */
4
SCANTYPE[ ]	/* ScanType */
PUSHB[ ]	/* 2 values pushed */
2 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
5 100 6 0
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */
0
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
RCVT[ ]	/* ReadCVT */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
14
LTEQ[ ]	/* LessThenOrEqual */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
6
GTEQ[ ]	/* GreaterThanOrEqual */
AND[ ]	/* LogicalAnd */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
52
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
40
EIF[ ]	/* EndIf */
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
2
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 4 values pushed */
3 20 21 0
WS[ ]	/* WriteStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
19
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
2 20
RS[ ]	/* ReadStore */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
37 3
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
EQ[ ]	/* Equal */
JROT[ ]	/* JumpRelativeOnTrue */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
4
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 3 values pushed */
2 2 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
33
NEG[ ]	/* Negate */
JMPR[ ]	/* Jump */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 3 values pushed */
14 21 1
WS[ ]	/* WriteStore */
JMPR[ ]	/* Jump */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
19 1 19
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 3 values pushed */
22 1 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
4
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
21
RS[ ]	/* ReadStore */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
AND[ ]	/* LogicalAnd */
PUSHB[ ]	/* 3 values pushed */
40 1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
EIF[ ]	/* EndIf */
GT[ ]	/* GreaterThan */
OR[ ]	/* LogicalOr */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
ROLL[ ]	/* RollTopThreeStack */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
80
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
56
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
56
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
48
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
54
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
54
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
30
MPPEM[ ]	/* MeasurePixelPerEm */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 1 value pushed */
4096
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1280
DIV[ ]	/* Divide */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ABS[ ]	/* Absolute */
SUB[ ]	/* Subtract */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
7
RS[ ]	/* ReadStore */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
7
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
6
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 2 values pushed */
7 98
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
5
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
48 5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
ADD[ ]	/* Add */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
SUB[ ]	/* Subtract */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
EIF[ ]	/* EndIf */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 3 values pushed */
0 2 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
7
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
9 14 0
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
11
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
12
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
13
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
36
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
14
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 4 values pushed */
13 12 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
15
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 2
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
100
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
16
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
17
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHW[ ]	/* 1 value pushed */
1024
MUL[ ]	/* Multiply */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
18
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
13
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
19
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
MPPEM[ ]	/* MeasurePixelPerEm */
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
19
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 18
RS[ ]	/* ReadStore */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
18 18
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
17
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
15 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
16 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
0 0
SZP0[ ]	/* SetZonePointer0 */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
0
MIAP[0]	/* MoveIndirectAbsPt */
PUSHB[ ]	/* 3 values pushed */
1 1 1
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 8 values pushed */
24 24 1 0 17 0 19 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
20
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
27
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
28
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
29
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
30
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
31
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
43
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
6
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP1[ ]	/* DeltaExceptionP1 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
44
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
22
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP2[ ]	/* DeltaExceptionP2 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
38
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP3[ ]	/* DeltaExceptionP3 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 6 values pushed */
24 24 1 0 17 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
33
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
34
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
35
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
36
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
37
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
38
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
39
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
40
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
41
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
42
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
46
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
24
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
46
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
48
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
47
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
49
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
50
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
51
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
52
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
SHC[1]	/* ShiftContourByLastPt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
53
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 5 values pushed */
0 0 0 0 0
WCVTP[ ]	/* WriteCVTInPixels */
MIAP[0]	/* MoveIndirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
52 1
SZP2[ ]	/* SetZonePointer2 */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
54
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55
FDEF[ ]	/* FunctionDefinition */
MDAP[0]	/* MoveDirectAbsPt */
SLOOP[ ]	/* SetLoopVariable */
ALIGNRP[ ]	/* AlignRelativePt */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 0
SZPS[ ]	/* SetZonePointerS */
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
56 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
NEG[ ]	/* Negate */
ROLL[ ]	/* RollTopThreeStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
60
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
61
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
62
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
0
EQ[ ]	/* Equal */
IF[ ]	/* If */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
63
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
64
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
65
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
66
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
67
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
68
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
69
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
70
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
10 4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
71
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
72
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
73
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
74
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
75
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 1
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
PUSHB[ ]	/* 1 value pushed */
55
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
76
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
77
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
RCVT[ ]	/* ReadCVT */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
78
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
77
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
79
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
80
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
81
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
82
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
83
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
84
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
85
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
86
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
87
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
88
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
89
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
90
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
91
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
92
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
93
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
94
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
95
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
96
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
97
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
98
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
99
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
100
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
101
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
102
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
103
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
104
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
105
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
106
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
107
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
108
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
109
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
110
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
111
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
112
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
113
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
114
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
115
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
116
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
117
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
118
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
119
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
120
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
121
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
122
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
123
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
124
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
125
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
126
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
127
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
128
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
129
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
130
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
131
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
132
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
133
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
134
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
135
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
136
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
137
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
138
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
139
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
11 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
6
ELSE[ ]	/* Else */
PUSHB[ ]	/* 3 values pushed */
4 2 3
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
8
NEG[ ]	/* Negate */
PUSHB[ ]	/* 1 value pushed */
3
DEPTH[ ]	/* GetDepthStack */
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    24,
    24,
    24,
    24,
    712,
    0,
    \"-220\",
    712,
    0,
    \"-220\",
    115,
    115,
    98,
    98,
    700,
    0,
    700,
    496,
    0,
    \"-220\",
    712,
    \"-12\",
    724,
    508,
    \"-12\",
    \"-220\",
    73,
    73,
    66,
    66,
    353,
    0,
    358,
    \"-5\",
    73,
    73,
    66,
    66,
    700,
    347,
    705,
    342
)";
}
);
iconName = SemiBold;
id = m01;
metricValues = (
{
pos = 992;
},
{
pos = 700;
},
{
pos = 496;
},
{
},
{
pos = -310;
},
{
}
);
name = SemiBold;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(465,0,l),
(465,700,l),
(64,700,l),
(64,0,l)
);
},
{
closed = 1;
nodes = (
(134,643,l),
(395,643,l),
(395,57,l),
(134,57,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 0 0 2 3 0 2 103 4 1 3 1 1 3 87 4 1 3 3 1 95 0 1 3 1 79 4 4 4 7 4 7 18 17 16 5 6 25
CALL[ ]	/* CallFunction */";
};
width = 529;
}
);
note = .notdef;
},
{
glyphname = CR;
layers = (
{
layerId = m01;
width = 600;
}
);
note = CR;
unicode = 13;
},
{
glyphname = space;
kernLeft = space;
kernRight = space;
layers = (
{
layerId = m01;
width = 242;
}
);
note = space;
unicode = 32;
},
{
glyphname = A;
kernLeft = A;
kernRight = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (342,0);
},
{
name = ogonek;
pos = (661,0);
},
{
name = top;
pos = (342,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,0,l),
(200,166,l),
(483,166,l),
(541,0,l),
(661,0,l),
(405,700,l),
(279,700,l),
(23,0,l)
);
},
{
closed = 1;
nodes = (
(341,567,l),
(451,257,l),
(233,257,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
9 1 4 0 1 76 5 1 4 0 2 1 4 2 104 0 0 0 33 77 3 1 1 1 34 1 78 8 8 8 10 8 10 17 17 17 16 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 684;
}
);
note = A;
unicode = 65;
},
{
glyphname = Aacute;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (342,0);
},
{
name = ogonek;
pos = (661,0);
},
{
name = top;
pos = (342,945);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (232,0);
ref = acutecomb.case;
}
);
width = 684;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Abreve;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (342,0);
},
{
name = ogonek;
pos = (661,0);
},
{
name = top;
pos = (342,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (191,0);
ref = uni0306.case;
}
);
width = 684;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = uni01CD;
layers = (
{
anchors = (
{
name = bottom;
pos = (342,0);
},
{
name = ogonek;
pos = (661,0);
},
{
name = top;
pos = (342,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (199,0);
ref = uni030C.case;
}
);
width = 684;
}
);
note = uni01CD;
unicode = 461;
},
{
glyphname = Acircumflex;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (342,0);
},
{
name = ogonek;
pos = (661,0);
},
{
name = top;
pos = (342,913);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (199,0);
ref = uni0302.case;
}
);
width = 684;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Adieresis;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (342,0);
},
{
name = ogonek;
pos = (661,0);
},
{
name = top;
pos = (342,919);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (164,0);
ref = uni0308.case;
}
);
width = 684;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Agrave;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (342,0);
},
{
name = ogonek;
pos = (661,0);
},
{
name = top;
pos = (342,945);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (232,0);
ref = gravecomb.case;
}
);
width = 684;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Amacron;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (342,0);
},
{
name = ogonek;
pos = (661,0);
},
{
name = top;
pos = (342,869);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (166,0);
ref = uni0304.case;
}
);
width = 684;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = Aogonek;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (342,0);
},
{
name = ogonek;
pos = (661,0);
},
{
name = top;
pos = (342,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,0,l),
(200,166,l),
(483,166,l),
(538,9,l),
(493,-17,o),
(455,-74,o),
(455,-107,qs),
(455,-157,o),
(527,-208,o),
(583,-208,qs),
(622,-208,o),
(666,-194,q),
(666,-125,l),
(629,-140,o),
(597,-140,qs),
(572,-140,o),
(542,-116,o),
(542,-96,qs),
(542,-77,o),
(573,-44,o),
(608,-27,qs),
(662,0,l),
(658,7,l),
(405,700,l),
(279,700,l),
(23,0,l)
);
},
{
closed = 1;
nodes = (
(341,567,l),
(451,257,l),
(233,257,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
27 1 5 0 21 1 4 3 12 1 1 4 13 1 2 1 4 76 3 1 4 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 5 0 3 4 5 3 104 0 0 0 33 77 0 4 4 34 77 0 1 1 2 97 0 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
6 1 5 0 3 4 5 3 104 0 1 0 2 1 2 101 0 0 0 33 77 0 4 4 34 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
26 26 26 28 26 28 17 22 35 40 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 684;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = Aring;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (342,0);
},
{
name = ogonek;
pos = (661,0);
},
{
name = top;
pos = (342,972);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (231,0);
ref = uni030A.case;
}
);
width = 684;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = Atilde;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (342,0);
},
{
name = ogonek;
pos = (661,0);
},
{
name = top;
pos = (342,871);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (174,0);
ref = tildecomb.case;
}
);
width = 684;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = AE;
kernLeft = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (463,0);
},
{
name = top;
pos = (539,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(146,0,l),
(225,144,l),
(482,144,l),
(482,0,l),
(872,0,l),
(872,95,l),
(595,95,l),
(595,323,l),
(827,323,l),
(827,418,l),
(595,418,l),
(595,605,l),
(872,605,l),
(872,700,l),
(408,700,l),
(23,0,l)
);
},
{
closed = 1;
nodes = (
(482,612,l),
(482,233,l),
(274,233,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
17 1 1 0 1 76 0 2 0 3 8 2 3 103 9 1 8 0 6 4 8 6 103 0 1 1 0 95 0 0 0 33 77 0 4 4 5 95 7 1 5 5 34 5 78 16 16 16 18 16 18 17 17 17 17 17 17 17 16 10 8 30
CALL[ ]	/* CallFunction */";
};
width = 924;
}
);
note = AE;
unicode = 198;
},
{
glyphname = AEacute;
kernLeft = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (463,0);
},
{
name = top;
pos = (539,945);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = AE;
},
{
alignment = -1;
pos = (429,0);
ref = acutecomb.case;
}
);
width = 924;
}
);
note = AEacute;
unicode = 508;
},
{
glyphname = B;
kernRight = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(349,0,ls),
(422,0,o),
(524,51,o),
(577,141,o),
(577,198,qs),
(577,259,o),
(503,355,o),
(444,376,q),
(489,394,o),
(545,470,o),
(545,526,qs),
(545,605,o),
(428,700,o),
(324,700,qs),
(67,700,l),
(67,0,l)
);
},
{
closed = 1;
nodes = (
(181,96,l),
(181,320,l),
(331,320,ls),
(394,320,o),
(462,263,o),
(462,208,qs),
(462,96,o),
(333,96,qs)
);
},
{
closed = 1;
nodes = (
(181,415,l),
(181,604,l),
(313,604,ls),
(429,604,o),
(429,510,qs),
(429,464,o),
(372,415,o),
(315,415,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
7 1 2 5 1 76 7 1 5 0 2 3 5 2 103 0 4 4 0 95 0 0 0 33 77 6 1 3 3 1 95 0 1 1 34 1 78 24 24 16 16 24 31 24 30 29 27 16 23 16 22 36 43 32 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = B;
unicode = 66;
},
{
glyphname = C;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (380,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(504,-12,o),
(663,107,o),
(683,213,q),
(558,213,l),
(544,155,o),
(453,89,o),
(380,89,qs),
(276,89,o),
(159,230,o),
(159,349,qs),
(159,468,o),
(275,610,o),
(380,610,qs),
(453,610,o),
(544,542,o),
(558,481,q),
(683,481,l),
(663,591,o),
(505,712,o),
(381,712,qs),
(275,712,o),
(122,618,o),
(43,453,o),
(43,349,qs),
(43,245,o),
(123,81,o),
(276,-12,o),
(381,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 39 77 0 3 3 5 97 6 1 5 5 40 5 78 0 0 0 27 0 26 18 36 34 18 38 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = C;
unicode = 67;
},
{
glyphname = Cacute;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (380,945);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (269,0);
ref = acutecomb.case;
}
);
width = 726;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = Ccaron;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (380,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (237,0);
ref = uni030C.case;
}
);
width = 726;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = Ccedilla;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (381,-262);
},
{
name = top;
pos = (380,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(419,-262,ls),
(474,-262,o),
(546,-206,o),
(546,-156,qs),
(546,-106,o),
(473,-53,o),
(416,-54,q),
(416,-11,l),
(525,-3,o),
(664,114,o),
(683,213,q),
(558,213,l),
(544,155,o),
(453,89,o),
(380,89,qs),
(276,89,o),
(159,230,o),
(159,349,qs),
(159,468,o),
(275,610,o),
(380,610,qs),
(453,610,o),
(544,542,o),
(558,481,q),
(683,481,l),
(663,591,o),
(505,712,o),
(381,712,qs),
(275,712,o),
(122,618,o),
(43,453,o),
(43,349,qs),
(43,251,o),
(114,94,o),
(250,-2,o),
(344,-10,q),
(344,-116,l),
(401,-116,ls),
(459,-116,o),
(459,-155,qs),
(459,-195,o),
(401,-195,qs),
(296,-195,l),
(296,-262,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
35 7 2 7 5 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 5 7 7 5 112 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 39 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 5 7 4 5 7 126 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 39 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 20 18 36 34 18 40 34 32 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = Cdotaccent;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (380,919);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (305,0);
ref = uni0307.case;
}
);
width = 726;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = D;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (345,0);
},
{
name = top;
pos = (345,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(298,0,ls),
(474,0,o),
(658,182,o),
(658,349,qs),
(658,514,o),
(479,700,o),
(298,700,qs),
(67,700,l),
(67,0,l)
);
},
{
closed = 1;
nodes = (
(181,97,l),
(181,604,l),
(294,604,ls),
(421,604,o),
(541,480,o),
(541,349,qs),
(541,225,o),
(427,97,o),
(294,97,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 2 2 0 95 0 0 0 33 77 4 1 3 3 1 95 0 1 1 34 1 78 9 9 9 17 9 16 37 36 32 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = D;
unicode = 68;
},
{
glyphname = Dcaron;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (345,0);
},
{
name = top;
pos = (345,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = D;
},
{
alignment = -1;
pos = (202,0);
ref = uni030C.case;
}
);
width = 701;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = Dcroat;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,0,ls),
(490,0,o),
(673,181,o),
(673,349,qs),
(673,514,o),
(495,700,o),
(314,700,qs),
(83,700,l),
(83,399,l),
(4,399,l),
(4,300,l),
(83,300,l),
(83,0,l)
);
},
{
closed = 1;
nodes = (
(196,97,l),
(196,300,l),
(382,300,l),
(382,399,l),
(196,399,l),
(196,604,l),
(310,604,ls),
(437,604,o),
(557,480,o),
(557,349,qs),
(557,226,o),
(445,97,o),
(310,97,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
5 1 1 6 1 0 7 1 0 103 0 4 4 2 95 0 2 2 33 77 8 1 7 7 3 95 0 3 3 34 3 78 13 13 13 25 13 24 17 17 37 36 33 17 16 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 716;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = Eth;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,0,ls),
(490,0,o),
(673,181,o),
(673,349,qs),
(673,514,o),
(495,700,o),
(314,700,qs),
(83,700,l),
(83,399,l),
(4,399,l),
(4,300,l),
(83,300,l),
(83,0,l)
);
},
{
closed = 1;
nodes = (
(196,97,l),
(196,300,l),
(382,300,l),
(382,399,l),
(196,399,l),
(196,604,l),
(310,604,ls),
(437,604,o),
(557,480,o),
(557,349,qs),
(557,226,o),
(445,97,o),
(310,97,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
5 1 1 6 1 0 7 1 0 103 0 4 4 2 95 0 2 2 33 77 8 1 7 7 3 95 0 3 3 34 3 78 13 13 13 25 13 24 17 17 37 36 33 17 16 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 716;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = E;
kernRight = E;
layers = (
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (511,0);
},
{
name = top;
pos = (281,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,0,l),
(511,96,l),
(181,96,l),
(181,322,l),
(466,322,l),
(466,417,l),
(181,417,l),
(181,604,l),
(511,604,l),
(511,700,l),
(67,700,l),
(67,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 5 95 0 5 5 34 5 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = E;
unicode = 69;
},
{
glyphname = Eacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (511,0);
},
{
name = top;
pos = (281,945);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (171,0);
ref = acutecomb.case;
}
);
width = 563;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ebreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (511,0);
},
{
name = top;
pos = (281,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (130,0);
ref = uni0306.case;
}
);
width = 563;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = Ecaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (511,0);
},
{
name = top;
pos = (281,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (138,0);
ref = uni030C.case;
}
);
width = 563;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = Ecircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (511,0);
},
{
name = top;
pos = (281,913);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (138,0);
ref = uni0302.case;
}
);
width = 563;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (511,0);
},
{
name = top;
pos = (281,919);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (103,0);
ref = uni0308.case;
}
);
width = 563;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Edotaccent;
layers = (
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (511,0);
},
{
name = top;
pos = (281,919);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (207,0);
ref = uni0307.case;
}
);
width = 563;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = Egrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (511,0);
},
{
name = top;
pos = (281,945);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (171,0);
ref = gravecomb.case;
}
);
width = 563;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Emacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (511,0);
},
{
name = top;
pos = (281,869);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (105,0);
ref = uni0304.case;
}
);
width = 563;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = Eogonek;
layers = (
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (511,0);
},
{
name = top;
pos = (281,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(373,0,l),
(304,-45,o),
(304,-107,qs),
(304,-157,o),
(376,-208,o),
(432,-208,qs),
(471,-208,o),
(515,-194,q),
(515,-125,l),
(478,-140,o),
(446,-140,qs),
(421,-140,o),
(391,-116,o),
(391,-96,qs),
(391,-77,o),
(422,-44,o),
(457,-27,qs),
(511,0,l),
(511,96,l),
(181,96,l),
(181,322,l),
(466,322,l),
(466,417,l),
(181,417,l),
(181,604,l),
(511,604,l),
(511,700,l),
(67,700,l),
(67,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
19 1 5 7 20 1 6 5 2 76 10 1 7 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 7 95 0 7 7 34 77 0 5 5 6 97 0 6 6 38 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 2 0 3 4 2 3 103 0 5 0 6 5 6 101 0 1 1 0 95 0 0 0 33 77 0 4 4 7 95 0 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
20 35 39 17 17 17 17 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = uni018E;
kernRight = uni018E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(498,0,l),
(498,700,l),
(55,700,l),
(55,604,l),
(385,604,l),
(385,417,l),
(100,417,l),
(100,322,l),
(385,322,l),
(385,96,l),
(55,96,l),
(55,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 1 0 2 1 103 0 3 3 4 95 0 4 4 33 77 0 0 0 5 95 0 5 5 34 5 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = uni018E;
unicode = (398,477);
},
{
glyphname = uni1EBC;
layers = (
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (511,0);
},
{
name = top;
pos = (281,871);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (114,0);
ref = tildecomb.case;
}
);
width = 563;
}
);
note = uni1EBC;
unicode = 7868;
},
{
glyphname = uni018F;
kernLeft = uni018F;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(477,-12,o),
(553,33,qs),
(630,78,o),
(714,241,o),
(714,347,qs),
(714,457,o),
(671,539,qs),
(629,621,o),
(476,712,o),
(376,712,qs),
(294,712,o),
(228,682,qs),
(162,653,o),
(70,546,o),
(50,476,q),
(176,476,l),
(196,538,o),
(305,609,o),
(377,609,qs),
(440,609,o),
(485,582,qs),
(534,554,o),
(591,452,o),
(594,382,q),
(47,382,l),
(43,355,o),
(43,323,qs),
(43,216,o),
(86,142,qs),
(127,68,o),
(277,-12,o),
(375,-12,qs)
);
},
{
closed = 1;
nodes = (
(311,91,o),
(262,117,qs),
(214,143,o),
(161,235,o),
(160,296,q),
(594,296,l),
(589,229,o),
(560,185,qs),
(530,140,o),
(433,91,o),
(373,91,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 2 1 0 1 2 0 128 0 0 0 5 6 0 5 103 0 1 1 3 97 0 3 3 39 77 8 1 6 6 4 97 7 1 4 4 40 4 78 32 32 0 0 32 42 32 41 37 36 0 31 0 30 36 18 36 22 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 757;
}
);
note = uni018F;
unicode = 399;
},
{
glyphname = F;
kernRight = F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,0,l),
(181,314,l),
(460,314,l),
(460,409,l),
(181,409,l),
(181,604,l),
(503,604,l),
(503,700,l),
(67,700,l),
(67,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 34 4 78 17 17 17 17 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 533;
}
);
note = F;
unicode = 70;
},
{
glyphname = G;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (382,0);
},
{
name = top;
pos = (382,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,-12,o),
(558,44,o),
(595,100,q),
(604,0,l),
(708,0,l),
(708,377,l),
(359,377,l),
(359,283,l),
(591,283,l),
(579,191,o),
(475,89,o),
(381,89,qs),
(278,89,o),
(159,227,o),
(159,346,qs),
(159,466,o),
(280,608,o),
(390,608,qs),
(460,608,o),
(552,547,o),
(567,493,q),
(695,493,l),
(671,596,o),
(510,712,o),
(390,712,qs),
(281,712,o),
(124,617,o),
(43,451,o),
(43,347,qs),
(43,242,o),
(124,79,o),
(273,-12,o),
(372,-12,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
29 1 3 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 1 2 5 2 1 5 128 0 5 0 4 3 5 4 103 0 2 2 0 97 0 0 0 39 77 0 3 3 6 97 8 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 1 2 5 2 1 5 128 0 5 0 4 3 5 4 103 0 2 2 0 97 0 0 0 39 77 0 6 6 34 77 0 3 3 7 97 8 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 32 0 31 17 17 18 36 34 18 38 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 762;
}
);
note = G;
unicode = 71;
},
{
glyphname = Gbreve;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (382,0);
},
{
name = top;
pos = (382,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (231,0);
ref = uni0306.case;
}
);
width = 762;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = uni0122;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (382,-262);
},
{
name = top;
pos = (382,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (324,0);
ref = uni0326;
}
);
width = 762;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = Gdotaccent;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (382,0);
},
{
name = top;
pos = (382,919);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (307,0);
ref = uni0307.case;
}
);
width = 762;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = H;
kernRight = H;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,0,l),
(181,323,l),
(511,323,l),
(511,0,l),
(624,0,l),
(624,700,l),
(511,700,l),
(511,418,l),
(181,418,l),
(181,700,l),
(67,700,l),
(67,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 1 0 4 3 1 4 103 2 1 0 0 33 77 5 1 3 3 34 3 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 692;
}
);
note = H;
unicode = 72;
},
{
glyphname = Hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,0,l),
(181,323,l),
(512,323,l),
(512,0,l),
(625,0,l),
(625,500,l),
(668,500,l),
(668,595,l),
(625,595,l),
(625,700,l),
(512,700,l),
(512,595,l),
(181,595,l),
(181,700,l),
(68,700,l),
(68,595,l),
(24,595,l),
(24,500,l),
(68,500,l),
(68,0,l)
);
},
{
closed = 1;
nodes = (
(181,500,l),
(512,500,l),
(512,418,l),
(181,418,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
5 3 2 1 10 6 2 0 11 1 0 103 12 1 11 0 8 7 11 8 103 4 1 2 2 33 77 9 1 7 7 34 7 78 20 20 20 23 20 23 22 21 19 18 17 17 17 17 17 17 17 17 16 13 8 31
CALL[ ]	/* CallFunction */";
};
width = 692;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = I;
kernRight = I;
layers = (
{
anchors = (
{
name = bottom;
pos = (124,0);
},
{
name = ogonek;
pos = (181,0);
},
{
name = top;
pos = (124,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,0,l),
(181,700,l),
(67,700,l),
(67,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 248;
}
);
note = I;
unicode = 73;
},
{
glyphname = IJ;
layers = (
{
anchors = (
{
name = bottom;
pos = (506,0);
},
{
name = ogonek;
pos = (181,0);
},
{
name = top;
pos = (641,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (248,0);
ref = J;
}
);
width = 764;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = Iacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (124,0);
},
{
name = ogonek;
pos = (181,0);
},
{
name = top;
pos = (124,945);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (14,0);
ref = acutecomb.case;
}
);
width = 248;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (124,0);
},
{
name = ogonek;
pos = (181,0);
},
{
name = top;
pos = (124,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-27,0);
ref = uni0306.case;
}
);
width = 248;
}
);
note = Ibreve;
unicode = 300;
},
{
glyphname = Icircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (124,0);
},
{
name = ogonek;
pos = (181,0);
},
{
name = top;
pos = (124,913);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-19,0);
ref = uni0302.case;
}
);
width = 248;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (124,0);
},
{
name = ogonek;
pos = (181,0);
},
{
name = top;
pos = (124,919);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-54,0);
ref = uni0308.case;
}
);
width = 248;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Idotaccent;
layers = (
{
anchors = (
{
name = bottom;
pos = (124,0);
},
{
name = ogonek;
pos = (181,0);
},
{
name = top;
pos = (124,919);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (49,0);
ref = uni0307.case;
}
);
width = 248;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = Igrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (124,0);
},
{
name = ogonek;
pos = (181,0);
},
{
name = top;
pos = (124,945);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (14,0);
ref = gravecomb.case;
}
);
width = 248;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Imacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (124,0);
},
{
name = ogonek;
pos = (181,0);
},
{
name = top;
pos = (124,869);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-52,0);
ref = uni0304.case;
}
);
width = 248;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = Iogonek;
layers = (
{
anchors = (
{
name = bottom;
pos = (124,0);
},
{
name = ogonek;
pos = (181,0);
},
{
name = top;
pos = (124,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,-208,o),
(185,-194,q),
(185,-125,l),
(148,-140,o),
(116,-140,qs),
(91,-140,o),
(61,-116,o),
(61,-96,qs),
(61,-77,o),
(92,-44,o),
(127,-27,qs),
(181,0,l),
(181,700,l),
(67,700,l),
(67,14,l),
(17,-13,o),
(-26,-72,o),
(-26,-107,qs),
(-26,-157,o),
(46,-208,o),
(102,-208,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
17 8 5 3 1 0 18 1 2 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 33 77 0 1 1 2 98 3 1 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 1 3 1 2 1 2 102 0 0 0 33 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 20 0 19 39 22 4 8 24
CALL[ ]	/* CallFunction */";
};
width = 248;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = Itilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (124,0);
},
{
name = ogonek;
pos = (181,0);
},
{
name = top;
pos = (124,871);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-44,0);
ref = tildecomb.case;
}
);
width = 248;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = J;
kernLeft = J;
kernRight = J;
layers = (
{
anchors = (
{
name = bottom;
pos = (258,0);
},
{
name = top;
pos = (393,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(338,-12,o),
(448,97,o),
(448,196,qs),
(448,700,l),
(335,700,l),
(335,196,ls),
(335,146,o),
(289,89,o),
(239,89,qs),
(187,89,o),
(138,149,o),
(137,202,q),
(24,202,l),
(24,101,o),
(140,-12,o),
(241,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 0 2 1 2 0 1 128 0 2 2 33 77 0 1 1 3 98 4 1 3 3 40 3 78 0 0 0 15 0 14 19 34 18 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = J;
unicode = 74;
},
{
glyphname = uni004A0301;
layers = (
{
anchors = (
{
name = bottom;
pos = (258,0);
},
{
name = top;
pos = (393,945);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = J;
},
{
alignment = -1;
pos = (282,0);
ref = acutecomb.case;
}
);
width = 516;
}
);
note = uni004A0301;
},
{
glyphname = K;
kernRight = K;
layers = (
{
anchors = (
{
name = bottom;
pos = (307,0);
},
{
name = top;
pos = (307,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,0,l),
(183,327,l),
(453,0,l),
(609,0,l),
(300,359,l),
(594,700,l),
(449,700,l),
(183,375,l),
(183,700,l),
(69,700,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
8 5 2 3 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 615;
}
);
note = K;
unicode = 75;
},
{
glyphname = uni0136;
kernRight = K;
layers = (
{
anchors = (
{
name = bottom;
pos = (307,-262);
},
{
name = top;
pos = (307,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = K;
},
{
alignment = -1;
pos = (249,0);
ref = uni0326;
}
);
width = 615;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = L;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (266,0);
},
{
name = top;
pos = (176,700);
},
{
name = topright;
pos = (274,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(491,0,l),
(491,95,l),
(181,95,l),
(181,700,l),
(67,700,l),
(67,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 17 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 532;
}
);
note = L;
unicode = 76;
},
{
glyphname = Lacute;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (266,0);
},
{
name = top;
pos = (176,945);
},
{
name = topright;
pos = (274,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (66,0);
ref = acutecomb.case;
}
);
width = 532;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = Lcaron;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (266,0);
},
{
name = top;
pos = (176,700);
},
{
name = topright;
pos = (274,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (273,0);
ref = uni030C.alt.case;
}
);
width = 532;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = uni013B;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (266,-262);
},
{
name = top;
pos = (176,700);
},
{
name = topright;
pos = (274,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (209,0);
ref = uni0326;
}
);
width = 532;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = Ldot;
kernRight = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(491,0,l),
(491,95,l),
(181,95,l),
(181,700,l),
(67,700,l),
(67,0,l)
);
},
{
closed = 1;
nodes = (
(396,276,o),
(439,319,o),
(439,350,qs),
(439,381,o),
(396,424,o),
(365,424,qs),
(333,424,o),
(290,381,o),
(290,350,qs),
(290,319,o),
(334,276,o),
(365,276,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 3 5 1 4 1 3 4 105 0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 6 6 6 17 6 16 37 17 17 16 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 532;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = Lslash;
kernRight = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(515,0,l),
(515,95,l),
(205,95,l),
(205,339,l),
(315,377,l),
(315,470,l),
(205,432,l),
(205,700,l),
(92,700,l),
(92,393,l),
(17,366,l),
(17,273,l),
(92,300,l),
(92,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
9 8 7 6 3 2 1 0 8 1 0 1 76 0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 17 21 20 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = M;
kernRight = M;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,0,l),
(181,497,l),
(369,93,l),
(458,93,l),
(646,497,l),
(646,0,l),
(760,0,l),
(760,700,l),
(625,700,l),
(415,237,l),
(201,700,l),
(67,700,l),
(67,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
10 7 2 3 3 0 1 76 0 3 0 2 0 3 2 128 1 1 0 0 33 77 4 1 2 2 34 2 78 18 18 17 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 827;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
kernLeft = N;
kernRight = N;
layers = (
{
anchors = (
{
name = bottom;
pos = (353,0);
},
{
name = top;
pos = (353,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,0,l),
(181,512,l),
(524,0,l),
(638,0,l),
(638,700,l),
(524,700,l),
(524,187,l),
(181,700,l),
(67,700,l),
(67,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
7 2 2 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 17 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 705;
}
);
note = N;
unicode = 78;
},
{
glyphname = Nacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (353,0);
},
{
name = top;
pos = (353,945);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (243,0);
ref = acutecomb.case;
}
);
width = 705;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = Ncaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (353,0);
},
{
name = top;
pos = (353,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (210,0);
ref = uni030C.case;
}
);
width = 705;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = uni0145;
layers = (
{
anchors = (
{
name = bottom;
pos = (353,-262);
},
{
name = top;
pos = (353,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (295,0);
ref = uni0326;
}
);
width = 705;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = Ntilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (353,0);
},
{
name = top;
pos = (353,871);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (185,0);
ref = tildecomb.case;
}
);
width = 705;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,0,l),
(181,512,l),
(524,0,l),
(524,-63,ls),
(524,-96,o),
(494,-123,o),
(460,-123,qs),
(429,-123,l),
(429,-220,l),
(478,-220,ls),
(554,-220,o),
(638,-146,o),
(638,-63,qs),
(638,700,l),
(524,700,l),
(524,187,l),
(181,700,l),
(67,700,l),
(67,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
16 2 2 4 0 1 76 15 1 4 1 75 1 1 0 0 33 77 0 4 4 34 77 0 3 3 2 98 0 2 2 38 2 78 21 33 35 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 705;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = O;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (397,0);
},
{
name = ogonek;
pos = (477,10);
},
{
name = top;
pos = (397,700);
},
{
name = topright;
pos = (773,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(495,-12,o),
(656,78,o),
(750,243,o),
(750,350,qs),
(750,457,o),
(656,622,o),
(495,712,o),
(396,712,qs),
(298,712,o),
(136,621,o),
(43,457,o),
(43,350,qs),
(43,243,o),
(136,79,o),
(298,-12,o),
(396,-12,qs)
);
},
{
closed = 1;
nodes = (
(331,90,o),
(223,151,o),
(160,269,o),
(160,350,qs),
(160,431,o),
(223,549,o),
(331,610,o),
(396,610,qs),
(462,610,o),
(570,549,o),
(633,432,o),
(633,350,qs),
(633,269,o),
(570,151,o),
(462,90,o),
(396,90,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 39 77 5 1 3 3 1 97 4 1 1 1 40 1 78 16 16 0 0 16 31 16 30 24 22 0 15 0 14 38 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 793;
}
);
note = O;
unicode = 79;
},
{
glyphname = Oacute;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (397,0);
},
{
name = ogonek;
pos = (477,10);
},
{
name = top;
pos = (397,945);
},
{
name = topright;
pos = (773,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (286,0);
ref = acutecomb.case;
}
);
width = 793;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Obreve;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (397,0);
},
{
name = ogonek;
pos = (477,10);
},
{
name = top;
pos = (397,912);
},
{
name = topright;
pos = (773,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (246,0);
ref = uni0306.case;
}
);
width = 793;
}
);
note = Obreve;
unicode = 334;
},
{
glyphname = Ocircumflex;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (397,0);
},
{
name = ogonek;
pos = (477,10);
},
{
name = top;
pos = (397,913);
},
{
name = topright;
pos = (773,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (254,0);
ref = uni0302.case;
}
);
width = 793;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Odieresis;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (397,0);
},
{
name = ogonek;
pos = (477,10);
},
{
name = top;
pos = (397,919);
},
{
name = topright;
pos = (773,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (218,0);
ref = uni0308.case;
}
);
width = 793;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = Ograve;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (397,0);
},
{
name = ogonek;
pos = (477,10);
},
{
name = top;
pos = (397,945);
},
{
name = topright;
pos = (773,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (286,0);
ref = gravecomb.case;
}
);
width = 793;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Ohungarumlaut;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (397,0);
},
{
name = ogonek;
pos = (477,10);
},
{
name = top;
pos = (397,919);
},
{
name = topright;
pos = (773,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (229,0);
ref = uni030B.case;
}
);
width = 793;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = Omacron;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (397,0);
},
{
name = ogonek;
pos = (477,10);
},
{
name = top;
pos = (397,869);
},
{
name = topright;
pos = (773,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (221,0);
ref = uni0304.case;
}
);
width = 793;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = Oslash;
kernLeft = Oslash;
kernRight = Oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(496,-12,o),
(654,81,o),
(740,245,o),
(740,350,qs),
(740,496,o),
(658,595,q),
(749,700,l),
(638,700,l),
(596,652,l),
(508,712,o),
(391,712,qs),
(286,712,o),
(128,619,o),
(43,454,o),
(43,350,qs),
(43,278,o),
(84,153,o),
(123,107,q),
(31,0,l),
(142,0,l),
(186,49,l),
(272,-12,o),
(391,-12,qs)
);
},
{
closed = 1;
nodes = (
(313,89,o),
(255,130,q),
(584,509,l),
(624,443,o),
(624,350,qs),
(624,271,o),
(567,153,o),
(462,89,o),
(391,89,qs)
);
},
{
closed = 1;
nodes = (
(197,193,l),
(158,259,o),
(158,350,qs),
(158,428,o),
(215,546,o),
(320,610,o),
(391,610,qs),
(469,610,o),
(526,571,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
13 1 5 1 40 39 29 28 16 4 6 4 5 1 1 0 4 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
13 1 5 2 40 39 29 28 16 4 6 4 5 1 1 0 4 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 39 77 7 1 4 4 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 33 77 0 5 5 1 97 0 1 1 39 77 0 0 0 34 77 7 1 4 4 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
23 23 0 0 34 32 23 31 23 30 0 22 0 21 18 39 18 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 779;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Otilde;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (397,0);
},
{
name = ogonek;
pos = (477,10);
},
{
name = top;
pos = (397,871);
},
{
name = topright;
pos = (773,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (229,0);
ref = tildecomb.case;
}
);
width = 793;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = OE;
kernLeft = C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(462,-12,o),
(592,49,o),
(632,105,q),
(632,0,l),
(1051,0,l),
(1051,96,l),
(746,96,l),
(746,322,l),
(1007,322,l),
(1007,417,l),
(746,417,l),
(746,604,l),
(1051,604,l),
(1051,700,l),
(632,700,l),
(632,592,l),
(592,649,o),
(462,712,o),
(388,712,qs),
(289,712,o),
(132,618,o),
(43,453,o),
(43,350,qs),
(43,248,o),
(131,83,o),
(288,-12,o),
(388,-12,qs)
);
},
{
closed = 1;
nodes = (
(332,89,o),
(224,150,o),
(159,269,o),
(159,350,qs),
(159,419,o),
(213,538,o),
(320,610,o),
(395,610,qs),
(461,610,o),
(569,547,o),
(632,429,o),
(632,350,qs),
(632,281,o),
(576,161,o),
(469,89,o),
(395,89,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
10 1 3 2 23 1 5 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 1 1 0 0 39 77 11 9 2 5 5 6 97 10 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 0 0 0 39 77 8 1 2 2 1 95 0 1 1 33 77 11 9 2 5 5 6 95 0 6 6 34 77 11 9 2 5 5 7 97 10 1 7 7 40 7 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 0 0 0 39 77 8 1 2 2 1 95 0 1 1 33 77 0 5 5 6 95 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 3 0 4 5 3 4 103 0 8 8 0 97 0 0 0 39 77 0 2 2 1 95 0 1 1 33 77 0 5 5 6 95 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
27 27 0 0 27 42 27 41 35 33 0 26 0 25 17 17 17 17 17 19 38 12 8 29
CALL[ ]	/* CallFunction */";
};
width = 1103;
}
);
note = OE;
unicode = 338;
},
{
glyphname = P;
kernRight = P;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,0,l),
(181,287,l),
(317,287,ls),
(428,287,o),
(562,395,o),
(562,494,qs),
(562,592,o),
(429,700,o),
(317,700,qs),
(67,700,l),
(67,0,l)
);
},
{
closed = 1;
nodes = (
(181,384,l),
(181,604,l),
(314,604,ls),
(384,604,o),
(446,547,o),
(446,494,qs),
(446,440,o),
(384,384,o),
(314,384,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 4 0 1 2 4 1 103 0 3 3 0 95 0 0 0 33 77 0 2 2 34 2 78 11 11 11 19 11 18 37 17 36 32 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 592;
}
);
note = P;
unicode = 80;
},
{
glyphname = Thorn;
kernRight = Thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,0,l),
(181,140,l),
(317,140,ls),
(404,140,o),
(456,169,qs),
(509,197,o),
(562,290,o),
(562,349,qs),
(562,410,o),
(535,458,qs),
(508,507,o),
(398,561,o),
(317,561,qs),
(181,561,l),
(181,700,l),
(67,700,l),
(67,0,l)
);
},
{
closed = 1;
nodes = (
(181,232,l),
(181,468,l),
(311,468,ls),
(446,468,o),
(446,349,qs),
(446,293,o),
(380,232,o),
(311,232,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 0 4 5 1 4 103 6 1 5 0 2 3 5 2 103 0 0 0 33 77 0 3 3 34 3 78 17 17 17 24 17 23 36 17 40 33 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 592;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = Q;
kernLeft = C;
kernRight = Q;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(681,-12,l),
(754,64,l),
(683,131,l),
(750,221,o),
(750,350,qs),
(750,457,o),
(656,622,o),
(495,712,o),
(396,712,qs),
(298,712,o),
(136,621,o),
(43,457,o),
(43,350,qs),
(43,243,o),
(136,79,o),
(298,-12,o),
(396,-12,qs),
(457,-12,o),
(567,23,o),
(611,56,q)
);
},
{
closed = 1;
nodes = (
(160,431,o),
(223,549,o),
(331,610,o),
(396,610,qs),
(462,610,o),
(570,549,o),
(633,432,o),
(633,350,qs),
(633,263,o),
(603,209,q),
(500,310,l),
(427,234,l),
(535,129,l),
(478,90,o),
(396,90,qs),
(331,90,o),
(223,151,o),
(160,269,o),
(160,350,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
28 27 26 25 16 5 2 3 19 17 2 0 2 2 76 18 1 0 73 0 3 3 1 97 0 1 1 39 77 0 2 2 0 97 0 0 0 40 0 78 41 43 38 33 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 798;
}
);
note = Q;
unicode = 81;
},
{
glyphname = R;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (308,0);
},
{
name = top;
pos = (298,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,0,l),
(181,300,l),
(271,300,l),
(446,0,l),
(581,0,l),
(384,319,l),
(457,335,o),
(536,425,o),
(536,500,qs),
(536,596,o),
(409,700,o),
(298,700,qs),
(67,700,l),
(67,0,l)
);
},
{
closed = 1;
nodes = (
(181,396,l),
(181,604,l),
(296,604,ls),
(365,604,o),
(421,551,o),
(421,500,qs),
(421,449,o),
(364,396,o),
(296,396,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 1 2 5 1 76 6 1 5 0 2 1 5 2 103 0 4 4 0 95 0 0 0 33 77 3 1 1 1 34 1 78 14 14 14 22 14 21 37 17 17 22 32 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = R;
unicode = 82;
},
{
glyphname = Racute;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (308,0);
},
{
name = top;
pos = (298,945);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (187,0);
ref = acutecomb.case;
}
);
width = 608;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = Rcaron;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (308,0);
},
{
name = top;
pos = (298,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (155,0);
ref = uni030C.case;
}
);
width = 608;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = uni0156;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (308,-262);
},
{
name = top;
pos = (298,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (250,0);
ref = uni0326;
}
);
width = 608;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = S;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,0);
},
{
name = top;
pos = (293,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,-12,o),
(480,37,o),
(544,128,o),
(544,190,qs),
(544,252,o),
(488,334,o),
(406,379,o),
(349,398,qs),
(284,420,o),
(216,450,o),
(178,492,o),
(178,523,qs),
(178,567,o),
(238,616,o),
(283,616,qs),
(337,616,o),
(403,557,o),
(403,513,q),
(524,513,l),
(523,575,o),
(460,665,o),
(355,712,o),
(290,712,qs),
(225,712,o),
(121,667,o),
(60,579,o),
(60,517,qs),
(60,447,o),
(146,351,o),
(240,321,qs),
(319,295,o),
(392,262,o),
(424,219,o),
(424,183,qs),
(424,137,o),
(356,84,o),
(300,84,qs),
(237,84,o),
(162,154,o),
(160,211,q),
(41,211,l),
(42,140,o),
(110,39,o),
(227,-12,o),
(301,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 39 77 0 1 1 5 97 6 1 5 5 40 5 78 0 0 0 44 0 43 34 19 44 34 19 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 585;
}
);
note = S;
unicode = 83;
},
{
glyphname = Sacute;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,0);
},
{
name = top;
pos = (293,945);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (183,0);
ref = acutecomb.case;
}
);
width = 585;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = Scaron;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,0);
},
{
name = top;
pos = (293,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (150,0);
ref = uni030C.case;
}
);
width = 585;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = Scedilla;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,-262);
},
{
name = top;
pos = (293,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(331,-262,ls),
(386,-262,o),
(458,-206,o),
(458,-156,qs),
(458,-106,o),
(385,-53,o),
(328,-54,q),
(328,-11,l),
(423,-4,o),
(544,104,o),
(544,190,qs),
(544,252,o),
(488,334,o),
(406,379,o),
(349,398,qs),
(284,420,o),
(216,450,o),
(178,492,o),
(178,523,qs),
(178,567,o),
(238,616,o),
(283,616,qs),
(337,616,o),
(403,557,o),
(403,513,q),
(524,513,l),
(523,575,o),
(460,665,o),
(355,712,o),
(290,712,qs),
(225,712,o),
(121,667,o),
(60,579,o),
(60,517,qs),
(60,447,o),
(146,351,o),
(240,321,qs),
(319,295,o),
(392,262,o),
(424,219,o),
(424,183,qs),
(424,137,o),
(356,84,o),
(300,84,qs),
(237,84,o),
(162,154,o),
(160,211,q),
(41,211,l),
(42,116,o),
(160,2,o),
(256,-9,q),
(256,-116,l),
(313,-116,ls),
(371,-116,o),
(371,-155,qs),
(371,-195,o),
(313,-195,qs),
(208,-195,l),
(208,-262,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
50 7 2 7 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 3 7 7 3 112 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 6 6 4 97 0 4 4 39 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 3 7 6 3 7 126 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 6 6 4 97 0 4 4 39 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 30 34 19 44 34 20 34 32 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 585;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = uni0218;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,-262);
},
{
name = top;
pos = (293,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (235,0);
ref = uni0326;
}
);
width = 585;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni1E9E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(536,-10,o),
(646,78,o),
(646,156,qs),
(646,219,o),
(575,291,o),
(506,316,qs),
(447,337,o),
(400,365,o),
(400,389,qs),
(400,405,o),
(423,427,o),
(446,443,qs),
(486,468,o),
(531,518,o),
(531,560,qs),
(531,614,o),
(470,692,o),
(366,732,o),
(303,732,qs),
(231,732,o),
(118,681,o),
(54,582,o),
(54,513,qs),
(54,0,l),
(167,0,l),
(167,503,ls),
(167,567,o),
(231,637,o),
(299,637,qs),
(350,637,o),
(418,593,o),
(418,549,qs),
(418,527,o),
(394,494,o),
(372,479,qs),
(333,453,ls),
(286,420,o),
(286,372,qs),
(286,321,o),
(366,265,o),
(438,241,qs),
(486,225,o),
(534,186,o),
(534,149,qs),
(534,112,o),
(487,75,o),
(448,75,qs),
(403,75,o),
(350,128,o),
(345,173,q),
(237,173,l),
(246,84,o),
(362,-10,o),
(450,-10,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 1 1 3 97 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 2 1 2 0 1 128 0 4 0 2 0 4 2 105 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 53 0 52 35 33 29 28 25 23 34 18 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 666;
}
);
note = uni1E9E;
unicode = 7838;
},
{
glyphname = T;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (288,0);
},
{
name = top;
pos = (288,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(344,0,l),
(344,604,l),
(550,604,l),
(550,700,l),
(25,700,l),
(25,604,l),
(231,604,l),
(231,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 1 95 0 1 1 33 77 0 3 3 34 3 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
note = T;
unicode = 84;
},
{
glyphname = Tcaron;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (288,0);
},
{
name = top;
pos = (288,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (145,0);
ref = uni030C.case;
}
);
width = 575;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = uni0162;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (288,-262);
},
{
name = top;
pos = (288,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(251,0,l),
(251,-116,l),
(308,-116,ls),
(366,-116,o),
(366,-155,qs),
(366,-195,o),
(308,-195,qs),
(203,-195,l),
(203,-262,l),
(326,-262,ls),
(381,-262,o),
(453,-206,o),
(453,-156,qs),
(453,-106,o),
(380,-53,o),
(323,-54,q),
(323,0,l),
(344,0,l),
(344,604,l),
(550,604,l),
(550,700,l),
(25,700,l),
(25,604,l),
(231,604,l),
(231,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 0 7 6 4 7 105 0 6 0 5 6 5 99 2 1 0 0 1 95 0 1 1 33 77 8 1 3 3 34 3 78 17 34 33 36 17 17 17 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni021A;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (288,-262);
},
{
name = top;
pos = (288,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (230,0);
ref = uni0326;
}
);
width = 575;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = U;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (334,0);
},
{
name = ogonek;
pos = (413,10);
},
{
name = top;
pos = (334,700);
},
{
name = topright;
pos = (647,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(402,-12,o),
(525,42,o),
(605,166,o),
(605,265,qs),
(605,700,l),
(492,700,l),
(492,264,ls),
(492,178,o),
(409,91,o),
(334,91,qs),
(259,91,o),
(176,178,o),
(176,264,qs),
(176,700,l),
(63,700,l),
(63,265,ls),
(63,187,o),
(120,62,o),
(241,-12,o),
(332,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 0 0 33 77 0 1 1 3 97 4 1 3 3 40 3 78 0 0 0 19 0 18 19 35 20 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 667;
}
);
note = U;
unicode = 85;
},
{
glyphname = Uacute;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (334,0);
},
{
name = ogonek;
pos = (413,10);
},
{
name = top;
pos = (334,945);
},
{
name = topright;
pos = (647,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (224,0);
ref = acutecomb.case;
}
);
width = 667;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ubreve;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (334,0);
},
{
name = ogonek;
pos = (413,10);
},
{
name = top;
pos = (334,912);
},
{
name = topright;
pos = (647,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (183,0);
ref = uni0306.case;
}
);
width = 667;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = Ucircumflex;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (334,0);
},
{
name = ogonek;
pos = (413,10);
},
{
name = top;
pos = (334,913);
},
{
name = topright;
pos = (647,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (191,0);
ref = uni0302.case;
}
);
width = 667;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (334,0);
},
{
name = ogonek;
pos = (413,10);
},
{
name = top;
pos = (334,919);
},
{
name = topright;
pos = (647,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (156,0);
ref = uni0308.case;
}
);
width = 667;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Ugrave;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (334,0);
},
{
name = ogonek;
pos = (413,10);
},
{
name = top;
pos = (334,945);
},
{
name = topright;
pos = (647,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (224,0);
ref = gravecomb.case;
}
);
width = 667;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uhungarumlaut;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (334,0);
},
{
name = ogonek;
pos = (413,10);
},
{
name = top;
pos = (334,919);
},
{
name = topright;
pos = (647,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (167,0);
ref = uni030B.case;
}
);
width = 667;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = Umacron;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (334,0);
},
{
name = ogonek;
pos = (413,10);
},
{
name = top;
pos = (334,869);
},
{
name = topright;
pos = (647,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (158,0);
ref = uni0304.case;
}
);
width = 667;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = Uogonek;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (334,0);
},
{
name = ogonek;
pos = (413,10);
},
{
name = top;
pos = (334,700);
},
{
name = topright;
pos = (647,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(373,-198,o),
(417,-184,q),
(417,-115,l),
(380,-130,o),
(348,-130,qs),
(323,-130,o),
(293,-106,o),
(293,-86,qs),
(293,-67,o),
(324,-34,o),
(359,-17,qs),
(374,-10,l),
(472,2,o),
(605,135,o),
(605,265,qs),
(605,700,l),
(492,700,l),
(492,264,ls),
(492,178,o),
(409,91,o),
(334,91,qs),
(259,91,o),
(176,178,o),
(176,264,qs),
(176,700,l),
(63,700,l),
(63,265,ls),
(63,164,o),
(159,17,o),
(256,-4,q),
(206,-43,o),
(206,-97,qs),
(206,-147,o),
(278,-198,o),
(334,-198,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
31 4 2 3 1 32 1 4 3 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 3 0 1 3 128 2 1 0 0 33 77 0 3 3 4 98 5 1 4 4 38 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 1 0 3 0 1 3 128 0 3 5 1 4 3 4 102 2 1 0 0 33 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 34 0 33 42 19 35 24 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 667;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = Uring;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (334,0);
},
{
name = ogonek;
pos = (413,10);
},
{
name = top;
pos = (334,972);
},
{
name = topright;
pos = (647,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (223,0);
ref = uni030A.case;
}
);
width = 667;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = Utilde;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (334,0);
},
{
name = ogonek;
pos = (413,10);
},
{
name = top;
pos = (334,871);
},
{
name = topright;
pos = (647,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (166,0);
ref = tildecomb.case;
}
);
width = 667;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = V;
kernLeft = V;
kernRight = V;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(410,0,l),
(669,700,l),
(549,700,l),
(342,117,l),
(136,700,l),
(15,700,l),
(273,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 2 0 1 76 1 1 0 0 33 77 0 2 2 34 2 78 17 18 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 683;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (510,0);
},
{
name = top;
pos = (510,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,549,l),
(657,0,l),
(797,0,l),
(991,700,l),
(868,700,l),
(727,134,l),
(578,700,l),
(446,700,l),
(293,137,l),
(153,700,l),
(31,700,l),
(220,0,l),
(359,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 33 77 5 4 2 3 3 34 3 78 0 0 0 12 0 12 17 18 18 17 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 1022;
}
);
note = W;
unicode = 87;
},
{
glyphname = Wacute;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (510,0);
},
{
name = top;
pos = (510,945);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (400,0);
ref = acutecomb.case;
}
);
width = 1022;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = Wcircumflex;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (510,0);
},
{
name = top;
pos = (510,913);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (367,0);
ref = uni0302.case;
}
);
width = 1022;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = Wdieresis;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (510,0);
},
{
name = top;
pos = (510,919);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (332,0);
ref = uni0308.case;
}
);
width = 1022;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = Wgrave;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (510,0);
},
{
name = top;
pos = (510,945);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (400,0);
ref = gravecomb.case;
}
);
width = 1022;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = X;
kernLeft = X;
kernRight = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(314,276,l),
(479,0,l),
(607,0,l),
(381,380,l),
(569,700,l),
(441,700,l),
(318,482,l),
(188,700,l),
(60,700,l),
(251,379,l),
(30,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (303,0);
},
{
name = top;
pos = (303,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(359,0,l),
(359,276,l),
(591,700,l),
(464,700,l),
(303,388,l),
(142,700,l),
(13,700,l),
(246,276,l),
(246,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
6 3 0 3 2 0 1 76 1 1 0 0 33 77 0 2 2 34 2 78 18 18 17 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Yacute;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (303,0);
},
{
name = top;
pos = (303,945);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (192,0);
ref = acutecomb.case;
}
);
width = 604;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Ycircumflex;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (303,0);
},
{
name = top;
pos = (303,913);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (160,0);
ref = uni0302.case;
}
);
width = 604;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = Ydieresis;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (303,0);
},
{
name = top;
pos = (303,919);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (124,0);
ref = uni0308.case;
}
);
width = 604;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Ygrave;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (303,0);
},
{
name = top;
pos = (303,945);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (192,0);
ref = gravecomb.case;
}
);
width = 604;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = uni1EF8;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (303,0);
},
{
name = top;
pos = (303,871);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (135,0);
ref = tildecomb.case;
}
);
width = 604;
}
);
note = uni1EF8;
unicode = 7928;
},
{
glyphname = Z;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (275,0);
},
{
name = top;
pos = (275,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(507,0,l),
(507,97,l),
(174,97,l),
(504,613,l),
(504,700,l),
(47,700,l),
(47,604,l),
(372,604,l),
(43,87,l),
(43,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 0 1 0 1 3 2 2 76 0 0 0 1 95 0 1 1 33 77 0 2 2 3 95 0 3 3 34 3 78 17 18 17 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 550;
}
);
note = Z;
unicode = 90;
},
{
glyphname = Zacute;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (275,0);
},
{
name = top;
pos = (275,945);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (165,0);
ref = acutecomb.case;
}
);
width = 550;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = Zcaron;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (275,0);
},
{
name = top;
pos = (275,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (132,0);
ref = uni030C.case;
}
);
width = 550;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = Zdotaccent;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (275,0);
},
{
name = top;
pos = (275,919);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (201,0);
ref = uni0307.case;
}
);
width = 550;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = uniA78B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,216,l),
(183,700,l),
(62,700,l),
(74,216,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 245;
}
);
note = uniA78B;
unicode = 42891;
},
{
glyphname = a;
kernLeft = a;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (269,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(268,-12,o),
(354,36,o),
(378,74,q),
(381,0,l),
(485,0,l),
(485,299,ls),
(485,394,o),
(374,508,o),
(271,508,qs),
(215,508,o),
(115,467,o),
(51,389,o),
(47,336,q),
(161,336,l),
(167,375,o),
(225,413,o),
(268,413,qs),
(315,413,o),
(371,354,o),
(371,297,q),
(247,297,ls),
(153,297,o),
(37,218,o),
(37,138,qs),
(37,69,o),
(137,-12,o),
(211,-12,qs)
);
},
{
closed = 1;
nodes = (
(201,80,o),
(153,115,o),
(153,149,qs),
(153,186,o),
(211,221,o),
(255,221,qs),
(371,221,l),
(371,218,ls),
(371,160,o),
(295,80,o),
(238,80,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
23 1 4 7 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 2 1 0 1 2 0 128 0 0 0 6 7 0 6 103 0 1 1 3 97 0 3 3 42 77 9 1 7 7 4 97 8 5 2 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 2 1 0 1 2 0 128 0 0 0 6 7 0 6 103 0 1 1 3 97 0 3 3 42 77 0 4 4 34 77 9 1 7 7 5 97 8 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
27 27 0 0 27 37 27 36 32 29 0 26 0 25 19 35 18 34 36 10 8 27
CALL[ ]	/* CallFunction */";
};
width = 529;
}
);
note = a;
unicode = 97;
},
{
glyphname = aacute;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (269,750);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (159,0);
ref = acutecomb;
}
);
width = 529;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = abreve;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (269,719);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (118,0);
ref = uni0306;
}
);
width = 529;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = uni01CE;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (269,728);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (126,0);
ref = uni030C;
}
);
width = 529;
}
);
note = uni01CE;
unicode = 462;
},
{
glyphname = acircumflex;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (269,728);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (126,0);
ref = uni0302;
}
);
width = 529;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = adieresis;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (269,724);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (91,0);
ref = uni0308;
}
);
width = 529;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = agrave;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (269,750);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (159,0);
ref = gravecomb;
}
);
width = 529;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = amacron;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (269,692);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (93,0);
ref = uni0304;
}
);
width = 529;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = aogonek;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (269,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(268,-12,o),
(354,36,o),
(378,74,q),
(381,0,l),
(401,0,l),
(332,-45,o),
(332,-107,qs),
(332,-157,o),
(404,-208,o),
(460,-208,qs),
(499,-208,o),
(543,-194,q),
(543,-125,l),
(506,-140,o),
(474,-140,qs),
(449,-140,o),
(419,-116,o),
(419,-96,qs),
(419,-77,o),
(450,-44,o),
(485,-27,qs),
(539,0,l),
(512,54,l),
(485,42,l),
(485,299,ls),
(485,394,o),
(374,508,o),
(271,508,qs),
(215,508,o),
(115,467,o),
(51,389,o),
(47,336,q),
(161,336,l),
(167,375,o),
(225,413,o),
(268,413,qs),
(315,413,o),
(371,354,o),
(371,297,q),
(247,297,ls),
(153,297,o),
(37,218,o),
(37,138,qs),
(37,69,o),
(137,-12,o),
(211,-12,qs)
);
},
{
closed = 1;
nodes = (
(201,80,o),
(153,115,o),
(153,149,qs),
(153,186,o),
(211,221,o),
(255,221,qs),
(371,221,l),
(371,218,ls),
(371,160,o),
(295,80,o),
(238,80,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
42 22 21 3 6 9 32 1 4 6 33 1 5 4 3 76 23 1 6 1 75
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
42 22 21 3 6 9 32 1 4 7 33 1 5 4 3 76 23 1 6 1 75
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 2 1 0 1 2 0 128 0 0 0 8 9 0 8 103 0 1 1 3 97 0 3 3 42 77 11 1 9 9 6 97 10 7 2 6 6 34 77 0 4 4 5 97 0 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 2 1 0 1 2 0 128 0 0 0 8 9 0 8 103 0 1 1 3 97 0 3 3 42 77 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 77 0 4 4 5 97 0 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 2 1 0 1 2 0 128 0 0 0 8 9 0 8 103 0 4 0 5 4 5 101 0 1 1 3 97 0 3 3 42 77 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
46 46 0 0 46 56 46 55 51 48 0 45 0 44 20 35 43 35 18 34 36 12 8 29
CALL[ ]	/* CallFunction */";
};
width = 529;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = aring;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (269,767);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (158,0);
ref = uni030A;
}
);
width = 529;
}
);
note = aring;
unicode = 229;
},
{
glyphname = atilde;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (269,704);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (101,0);
ref = tildecomb;
}
);
width = 529;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = ae;
kernLeft = a;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (453,0);
},
{
name = top;
pos = (453,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(361,-12,o),
(429,95,q),
(462,44,o),
(570,-12,o),
(635,-12,qs),
(720,-12,o),
(840,80,o),
(862,152,q),
(749,152,l),
(733,119,o),
(675,82,o),
(634,82,qs),
(579,82,o),
(503,157,o),
(499,221,q),
(874,221,l),
(876,269,ls),
(876,338,o),
(814,447,o),
(704,508,o),
(635,508,qs),
(582,508,o),
(488,467,o),
(456,430,q),
(429,468,o),
(337,508,o),
(277,508,qs),
(223,508,o),
(127,469,o),
(63,391,o),
(57,336,q),
(170,336,l),
(177,374,o),
(236,415,o),
(277,415,qs),
(325,415,o),
(383,356,o),
(383,296,q),
(248,296,ls),
(146,296,o),
(37,213,o),
(37,140,qs),
(37,70,o),
(145,-12,o),
(229,-12,qs)
);
},
{
closed = 1;
nodes = (
(203,78,o),
(156,118,o),
(156,150,qs),
(156,183,o),
(208,221,o),
(262,221,qs),
(379,221,l),
(379,209,l),
(370,154,o),
(295,78,o),
(243,78,qs)
);
},
{
closed = 1;
nodes = (
(500,296,l),
(509,353,o),
(584,415,o),
(636,415,qs),
(688,415,o),
(758,351,o),
(762,296,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 97 values pushed */
20 1 1 3 47 1 7 5 42 1 6 7 3 76 0 2 1 0 1 2 0 128 0 7 5 6 5 7 6 128 13 1 0 10 1 5 7 0 5 103 12 1 1 1 3 97 4 1 3 3 42 77 15 11 2 6 6 8 97 14 9 2 8 8 40 8 78 45 45 0 0 62 61 59 57 45 55 45 54 50 48 0 44 0 43 34 18 34 20 36 35 18 34 36 16 8 31
CALL[ ]	/* CallFunction */";
};
width = 905;
}
);
note = ae;
unicode = 230;
},
{
glyphname = aeacute;
kernLeft = a;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (453,0);
},
{
name = top;
pos = (453,750);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = ae;
},
{
alignment = -1;
pos = (343,0);
ref = acutecomb;
}
);
width = 905;
}
);
note = aeacute;
unicode = 509;
},
{
glyphname = b;
kernLeft = b;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(407,-12,o),
(515,57,o),
(573,176,o),
(573,249,qs),
(573,322,o),
(515,440,o),
(408,508,o),
(338,508,qs),
(282,508,o),
(193,462,o),
(166,422,q),
(166,700,l),
(53,700,l),
(53,0,l),
(164,0,l),
(166,73,l),
(193,31,o),
(282,-12,o),
(337,-12,qs)
);
},
{
closed = 1;
nodes = (
(249,87,o),
(167,178,o),
(167,248,qs),
(167,319,o),
(248,409,o),
(312,409,qs),
(375,409,o),
(458,321,o),
(458,249,qs),
(458,179,o),
(377,87,o),
(312,87,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
7 1 4 2 2 1 0 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 1 33 77 0 4 4 2 97 0 2 2 42 77 7 1 5 5 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 33 77 0 4 4 2 97 0 2 2 42 77 0 0 0 34 77 7 1 5 5 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
19 19 0 0 19 30 19 29 25 23 0 18 0 17 35 17 19 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = b;
unicode = 98;
},
{
glyphname = c;
kernLeft = c;
kernRight = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (284,0);
},
{
name = top;
pos = (282,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(373,-12,o),
(499,82,o),
(517,163,q),
(397,163,l),
(386,124,o),
(327,84,o),
(283,84,qs),
(221,84,o),
(151,176,o),
(151,248,qs),
(151,319,o),
(219,412,o),
(283,412,qs),
(327,412,o),
(388,368,o),
(397,333,q),
(517,333,l),
(498,416,o),
(374,508,o),
(284,508,qs),
(210,508,o),
(97,441,o),
(35,323,o),
(35,248,qs),
(35,172,o),
(98,54,o),
(211,-12,o),
(284,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 42 77 0 3 3 5 97 6 1 5 5 40 5 78 0 0 0 27 0 26 18 36 34 18 38 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = c;
unicode = 99;
},
{
glyphname = cacute;
kernLeft = c;
kernRight = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (284,0);
},
{
name = top;
pos = (282,750);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (171,0);
ref = acutecomb;
}
);
width = 553;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = ccaron;
kernLeft = c;
kernRight = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (284,0);
},
{
name = top;
pos = (282,728);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (139,0);
ref = uni030C;
}
);
width = 553;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = ccedilla;
layers = (
{
anchors = (
{
name = bottom;
pos = (284,-262);
},
{
name = top;
pos = (282,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(320,-262,ls),
(375,-262,o),
(447,-206,o),
(447,-156,qs),
(447,-106,o),
(374,-53,o),
(317,-54,q),
(317,-10,l),
(394,-2,o),
(501,90,o),
(517,163,q),
(397,163,l),
(386,124,o),
(327,84,o),
(283,84,qs),
(221,84,o),
(151,176,o),
(151,248,qs),
(151,319,o),
(219,412,o),
(283,412,qs),
(327,412,o),
(388,368,o),
(397,333,q),
(517,333,l),
(498,416,o),
(374,508,o),
(284,508,qs),
(210,508,o),
(97,441,o),
(35,323,o),
(35,248,qs),
(35,144,o),
(150,4,o),
(245,-9,q),
(245,-116,l),
(302,-116,ls),
(360,-116,o),
(360,-155,qs),
(360,-195,o),
(302,-195,qs),
(197,-195,l),
(197,-262,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
34 7 2 7 5 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 5 7 7 5 112 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 42 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 5 7 4 5 7 126 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 42 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 20 18 36 34 18 39 34 32 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = cdotaccent;
kernLeft = c;
kernRight = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (284,0);
},
{
name = top;
pos = (282,724);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (207,0);
ref = uni0307;
}
);
width = 553;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = d;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (304,0);
},
{
name = top;
pos = (304,992);
},
{
name = topright;
pos = (588,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(326,-12,o),
(417,35,o),
(441,75,q),
(444,0,l),
(555,0,l),
(555,700,l),
(441,700,l),
(441,424,l),
(413,464,o),
(324,508,o),
(271,508,qs),
(200,508,o),
(93,440,o),
(35,322,o),
(35,250,qs),
(35,177,o),
(92,58,o),
(199,-12,o),
(271,-12,qs)
);
},
{
closed = 1;
nodes = (
(255,87,o),
(189,128,o),
(151,202,o),
(151,249,qs),
(151,320,o),
(232,409,o),
(295,409,qs),
(334,409,o),
(401,372,o),
(441,299,o),
(441,248,qs),
(441,178,o),
(362,87,o),
(296,87,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
10 1 4 0 15 1 2 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 1 33 77 0 4 4 0 97 0 0 0 42 77 7 1 5 5 2 97 6 3 2 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 33 77 0 4 4 0 97 0 0 0 42 77 0 2 2 34 77 7 1 5 5 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
19 19 0 0 19 32 19 31 26 24 0 18 0 17 17 19 38 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = d;
unicode = 100;
},
{
glyphname = dcaron;
kernLeft = c;
kernRight = dcaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (304,0);
},
{
name = top;
pos = (304,992);
},
{
name = topright;
pos = (588,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = d;
},
{
alignment = -1;
pos = (588,0);
ref = uni030C.alt;
}
);
width = 608;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = dcroat;
kernLeft = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(326,-12,o),
(417,35,o),
(441,75,q),
(444,0,l),
(555,0,l),
(555,562,l),
(597,562,l),
(597,643,l),
(555,643,l),
(555,700,l),
(441,700,l),
(441,643,l),
(281,643,l),
(281,562,l),
(441,562,l),
(441,424,l),
(413,464,o),
(324,508,o),
(271,508,qs),
(200,508,o),
(93,440,o),
(35,322,o),
(35,250,qs),
(35,177,o),
(92,58,o),
(199,-12,o),
(271,-12,qs)
);
},
{
closed = 1;
nodes = (
(151,320,o),
(232,409,o),
(295,409,qs),
(334,409,o),
(401,372,o),
(441,299,o),
(441,248,qs),
(441,178,o),
(362,87,o),
(296,87,qs),
(255,87,o),
(189,128,o),
(151,202,o),
(151,249,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
10 1 9 0 23 1 6 8 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
4 1 2 5 1 1 0 2 1 103 0 3 3 33 77 0 9 9 0 97 0 0 0 42 77 0 8 8 6 97 10 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
4 1 2 5 1 1 0 2 1 103 0 3 3 33 77 0 9 9 0 97 0 0 0 42 77 0 6 6 34 77 0 8 8 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 38 36 31 29 0 26 0 25 17 17 17 17 17 19 38 11 8 29
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = eth;
kernLeft = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(380,-12,o),
(442,25,qs),
(505,62,o),
(577,196,o),
(577,283,qs),
(577,370,o),
(518,538,o),
(460,612,q),
(536,638,l),
(536,709,l),
(411,667,l),
(406,673,o),
(376,700,q),
(267,700,l),
(307,666,o),
(330,640,q),
(247,612,l),
(247,542,l),
(375,585,l),
(425,518,o),
(450,447,q),
(389,504,o),
(295,504,qs),
(222,504,o),
(163,471,qs),
(103,437,o),
(35,320,o),
(35,246,qs),
(35,175,o),
(70,116,qs),
(105,56,o),
(226,-12,o),
(303,-12,qs)
);
},
{
closed = 1;
nodes = (
(264,86,o),
(193,127,o),
(152,202,o),
(152,249,qs),
(152,294,o),
(191,367,o),
(261,409,o),
(306,409,qs),
(345,409,o),
(416,373,o),
(461,300,o),
(461,247,qs),
(461,178,o),
(375,86,o),
(306,86,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
24 23 21 16 15 14 13 7 0 1 11 1 3 0 2 76 22 1 1 74 0 1 1 33 77 0 3 3 0 97 0 0 0 42 77 6 1 4 4 2 97 5 1 2 2 40 2 78 33 33 0 0 33 47 33 46 40 38 0 32 0 31 24 40 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 612;
}
);
note = eth;
unicode = 240;
},
{
glyphname = e;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (391,10);
},
{
name = top;
pos = (281,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(374,-12,o),
(493,80,o),
(516,152,q),
(397,152,l),
(365,82,o),
(283,82,qs),
(227,82,o),
(154,156,o),
(149,216,q),
(526,216,l),
(529,243,o),
(529,265,qs),
(529,334,o),
(467,445,o),
(357,508,o),
(286,508,qs),
(212,508,o),
(98,443,o),
(35,326,o),
(35,248,qs),
(35,173,o),
(98,54,o),
(211,-12,o),
(285,-12,qs)
);
},
{
closed = 1;
nodes = (
(150,295,l),
(157,353,o),
(232,414,o),
(283,414,qs),
(337,414,o),
(412,349,o),
(413,295,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
0 3 1 2 1 3 2 128 0 6 0 1 3 6 1 103 0 5 5 0 97 0 0 0 42 77 0 2 2 4 97 7 1 4 4 40 4 78 0 0 30 29 27 25 0 23 0 22 17 34 21 38 8 8 26
CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
note = e;
unicode = 101;
},
{
glyphname = eacute;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (391,10);
},
{
name = top;
pos = (281,750);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (171,0);
ref = acutecomb;
}
);
width = 558;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ebreve;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (391,10);
},
{
name = top;
pos = (281,719);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (130,0);
ref = uni0306;
}
);
width = 558;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = ecaron;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (391,10);
},
{
name = top;
pos = (281,728);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (138,0);
ref = uni030C;
}
);
width = 558;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = ecircumflex;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (391,10);
},
{
name = top;
pos = (281,728);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (138,0);
ref = uni0302;
}
);
width = 558;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (391,10);
},
{
name = top;
pos = (281,724);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (103,0);
ref = uni0308;
}
);
width = 558;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = edotaccent;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (391,10);
},
{
name = top;
pos = (281,724);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (206,0);
ref = uni0307;
}
);
width = 558;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = egrave;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (391,10);
},
{
name = top;
pos = (281,750);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (171,0);
ref = gravecomb;
}
);
width = 558;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = emacron;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (391,10);
},
{
name = top;
pos = (281,692);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (105,0);
ref = uni0304;
}
);
width = 558;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = eogonek;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (391,10);
},
{
name = top;
pos = (281,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,295,l),
(157,353,o),
(232,414,o),
(283,414,qs),
(337,414,o),
(412,349,o),
(413,295,q)
);
},
{
closed = 1;
nodes = (
(351,-198,o),
(395,-184,q),
(395,-115,l),
(358,-130,o),
(326,-130,qs),
(301,-130,o),
(271,-106,o),
(271,-86,qs),
(271,-67,o),
(302,-34,o),
(337,-17,qs),
(382,6,l),
(432,26,o),
(500,103,o),
(516,152,q),
(397,152,l),
(365,82,o),
(283,82,qs),
(227,82,o),
(154,156,o),
(149,216,q),
(526,216,l),
(529,243,o),
(529,265,qs),
(529,334,o),
(467,445,o),
(357,508,o),
(286,508,qs),
(212,508,o),
(98,443,o),
(35,326,o),
(35,248,qs),
(35,148,o),
(141,10,o),
(230,-7,q),
(184,-45,o),
(184,-97,qs),
(184,-147,o),
(256,-198,o),
(312,-198,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
43 11 2 6 4 44 1 7 6 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 5 3 4 3 5 4 128 0 4 6 3 4 6 126 0 1 0 3 5 1 3 103 0 0 0 2 97 0 2 2 42 77 0 6 6 7 98 8 1 7 7 38 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 5 3 4 3 5 4 128 0 4 6 3 4 6 126 0 1 0 3 5 1 3 103 0 6 8 1 7 6 7 102 0 0 0 2 97 0 2 2 42 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
7 7 7 46 7 45 41 17 34 21 43 18 33 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = uni1EBD;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (391,10);
},
{
name = top;
pos = (281,704);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (113,0);
ref = tildecomb;
}
);
width = 558;
}
);
note = uni1EBD;
unicode = 7869;
},
{
glyphname = uni0259;
kernLeft = c;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(346,-12,o),
(460,53,o),
(523,171,o),
(523,248,qs),
(523,323,o),
(462,441,o),
(349,508,o),
(273,508,qs),
(184,508,o),
(65,415,o),
(43,344,q),
(162,344,l),
(192,414,o),
(275,414,qs),
(332,414,o),
(405,340,o),
(409,280,q),
(32,280,l),
(29,255,o),
(29,231,qs),
(29,162,o),
(91,51,o),
(201,-12,o),
(272,-12,qs)
);
},
{
closed = 1;
nodes = (
(221,82,o),
(147,147,o),
(145,201,q),
(408,201,l),
(401,143,o),
(326,82,o),
(276,82,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 2 1 0 1 2 0 128 0 0 0 5 6 0 5 103 0 1 1 3 97 0 3 3 42 77 8 1 6 6 4 97 7 1 4 4 40 4 78 24 24 0 0 24 30 24 29 27 26 0 23 0 22 34 17 34 21 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
note = uni0259;
unicode = 601;
},
{
glyphname = f;
kernLeft = f;
kernRight = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(184,0,l),
(184,401,l),
(284,401,l),
(284,496,l),
(184,496,l),
(184,543,ls),
(184,575,o),
(214,603,o),
(248,603,qs),
(275,603,l),
(275,700,l),
(230,700,ls),
(152,700,o),
(71,625,o),
(71,543,qs),
(71,496,l),
(7,496,l),
(7,401,l),
(71,401,l),
(71,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 3 3 2 97 0 2 2 33 77 5 1 0 0 1 95 4 1 1 1 36 77 0 6 6 34 6 78 17 17 19 33 35 17 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 317;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (253,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(328,-232,o),
(433,-192,o),
(495,-115,o),
(495,-62,qs),
(495,92,o),
(305,92,qs),
(217,92,ls),
(178,92,o),
(140,114,o),
(140,138,qs),
(140,149,o),
(153,170,o),
(163,175,q),
(203,155,o),
(254,155,qs),
(310,155,o),
(402,199,o),
(455,279,o),
(455,331,qs),
(455,367,o),
(436,408,q),
(508,408,l),
(508,496,l),
(333,496,l),
(296,508,o),
(254,508,qs),
(164,508,o),
(53,412,o),
(53,331,qs),
(53,264,o),
(98,217,q),
(38,180,o),
(38,117,qs),
(38,59,o),
(91,28,q),
(27,-8,o),
(27,-78,qs),
(27,-157,o),
(158,-232,o),
(265,-232,qs)
);
},
{
closed = 1;
nodes = (
(206,-142,o),
(133,-107,o),
(133,-70,qs),
(133,-37,o),
(180,-2,o),
(223,-2,qs),
(299,-2,ls),
(389,-2,o),
(389,-70,qs),
(389,-105,o),
(319,-142,o),
(264,-142,qs)
);
},
{
closed = 1;
nodes = (
(208,245,o),
(157,292,o),
(157,331,qs),
(157,369,o),
(210,418,o),
(252,418,qs),
(295,418,o),
(350,369,o),
(350,331,qs),
(350,293,o),
(295,245,o),
(252,245,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
26 8 2 3 9 4 1 6 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
12 1 9 0 3 4 9 3 105 8 1 2 2 0 97 1 1 0 0 42 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
12 1 9 0 3 4 9 3 105 8 1 2 2 0 97 0 0 0 42 77 8 1 2 2 1 95 0 1 1 36 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
12 1 9 0 3 4 9 3 105 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
12 1 9 0 3 4 9 3 105 11 1 7 10 1 5 7 5 101 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 77 0 4 4 6 95 0 6 6 34 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
52 52 40 40 0 0 52 63 52 62 58 56 40 51 40 50 46 43 0 39 0 38 54 37 17 17 44 13 8 27
CALL[ ]	/* CallFunction */";
};
width = 528;
}
);
note = g;
unicode = 103;
},
{
glyphname = gbreve;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (253,719);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (102,0);
ref = uni0306;
}
);
width = 528;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = uni0123;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (253,810);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (193,0);
ref = uni0312;
}
);
width = 528;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = gdotaccent;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (253,724);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (179,0);
ref = uni0307;
}
);
width = 528;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = h;
kernLeft = b;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(166,0,l),
(166,269,ls),
(166,335,o),
(234,412,o),
(293,412,qs),
(349,412,o),
(409,341,o),
(409,277,qs),
(409,0,l),
(521,0,l),
(521,291,ls),
(521,396,o),
(416,508,o),
(327,508,qs),
(278,508,o),
(190,467,o),
(166,429,q),
(166,700,l),
(53,700,l),
(53,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 1 3 1 1 76 0 0 0 33 77 0 3 3 1 97 0 1 1 42 77 4 1 2 2 34 2 78 19 35 19 35 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 565;
}
);
note = h;
unicode = 104;
},
{
glyphname = hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(166,0,l),
(166,269,ls),
(166,335,o),
(234,412,o),
(293,412,qs),
(349,412,o),
(409,341,o),
(409,277,qs),
(409,0,l),
(521,0,l),
(521,291,ls),
(521,396,o),
(416,508,o),
(327,508,qs),
(278,508,o),
(190,467,o),
(166,429,q),
(166,562,l),
(327,562,l),
(327,643,l),
(166,643,l),
(166,700,l),
(53,700,l),
(53,643,l),
(11,643,l),
(11,562,l),
(53,562,l),
(53,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
10 1 7 5 1 76 3 1 1 4 1 0 5 1 0 103 0 2 2 33 77 0 7 7 5 97 0 5 5 42 77 8 1 6 6 34 6 78 19 35 19 35 17 17 17 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 565;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = i;
kernLeft = i;
kernRight = i;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(148,575,o),
(191,619,o),
(191,650,qs),
(191,681,o),
(147,724,o),
(116,724,qs),
(85,724,o),
(41,681,o),
(41,650,qs),
(41,619,o),
(85,575,o),
(116,575,qs)
);
},
{
closed = 1;
nodes = (
(173,0,l),
(173,496,l),
(59,496,l),
(59,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 1 0 97 0 0 0 41 77 0 2 2 36 77 0 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 1 0 97 0 0 0 39 77 0 2 2 36 77 0 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 0 4 1 1 2 0 1 105 0 2 2 36 77 0 3 3 34 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 15 14 13 12 0 11 0 10 36 5 8 23
CALL[ ]	/* CallFunction */";
};
width = 231;
}
);
note = i;
unicode = 105;
},
{
glyphname = dotlessi;
kernLeft = dotlessi;
layers = (
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (166,0);
},
{
name = top;
pos = (110,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(166,0,l),
(166,496,l),
(53,496,l),
(53,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 36 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 220;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = iacute;
kernLeft = iacute;
kernRight = iacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (166,0);
},
{
name = top;
pos = (110,750);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
ref = acutecomb;
}
);
width = 220;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = ibreve;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (166,0);
},
{
name = top;
pos = (110,719);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-41,0);
ref = uni0306;
}
);
width = 220;
}
);
note = ibreve;
unicode = 301;
},
{
glyphname = icircumflex;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (166,0);
},
{
name = top;
pos = (110,728);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-33,0);
ref = uni0302;
}
);
width = 220;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (166,0);
},
{
name = top;
pos = (110,724);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-68,0);
ref = uni0308.narrow;
}
);
width = 220;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = i.loclTRK;
layers = (
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (166,0);
},
{
name = top;
pos = (110,724);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (36,0);
ref = uni0307;
}
);
width = 220;
}
);
note = i.loclTRK;
},
{
glyphname = igrave;
kernRight = igrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (166,0);
},
{
name = top;
pos = (110,750);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
ref = gravecomb;
}
);
width = 220;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = imacron;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (166,0);
},
{
name = top;
pos = (110,692);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-66,0);
ref = uni0304;
}
);
width = 220;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = iogonek;
kernLeft = dotlessi;
layers = (
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (166,0);
},
{
name = top;
pos = (110,724);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(142,575,o),
(185,618,o),
(185,650,qs),
(185,682,o),
(143,724,o),
(111,724,qs),
(79,724,o),
(36,682,o),
(36,650,qs),
(36,618,o),
(79,575,o),
(111,575,qs)
);
},
{
closed = 1;
nodes = (
(127,-208,o),
(171,-194,q),
(171,-125,l),
(134,-140,o),
(102,-140,qs),
(77,-140,o),
(47,-116,o),
(47,-96,qs),
(47,-77,o),
(78,-44,o),
(113,-27,qs),
(167,0,l),
(166,2,l),
(166,496,l),
(53,496,l),
(53,14,l),
(3,-13,o),
(-40,-72,o),
(-40,-107,qs),
(-40,-157,o),
(32,-208,o),
(88,-208,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
30 20 17 3 3 2 31 1 4 3 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
5 1 1 1 0 97 0 0 0 41 77 0 2 2 36 77 0 3 3 4 98 6 1 4 4 38 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
5 1 1 1 0 97 0 0 0 39 77 0 2 2 36 77 0 3 3 4 98 6 1 4 4 38 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 5 1 1 2 0 1 105 0 3 6 1 4 3 4 102 0 2 2 36 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
12 12 0 0 12 33 12 32 29 27 19 18 0 11 0 10 36 7 8 23
CALL[ ]	/* CallFunction */";
};
width = 220;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = itilde;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (166,0);
},
{
name = top;
pos = (110,704);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-57,0);
ref = tildecomb;
}
);
width = 220;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = ij;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = i;
},
{
alignment = -1;
pos = (231,0);
ref = j;
}
);
width = 464;
}
);
note = ij;
unicode = 307;
},
{
glyphname = j;
kernLeft = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(15,-220,ls),
(91,-220,o),
(174,-146,o),
(174,-63,qs),
(174,496,l),
(61,496,l),
(61,-63,ls),
(61,-95,o),
(31,-123,o),
(-3,-123,qs),
(-34,-123,l),
(-34,-220,l)
);
},
{
closed = 1;
nodes = (
(150,575,o),
(193,619,o),
(193,650,qs),
(193,681,o),
(150,724,o),
(119,724,qs),
(88,724,o),
(44,681,o),
(44,650,qs),
(44,619,o),
(88,575,o),
(119,575,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
5 1 4 4 3 97 0 3 3 41 77 0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
5 1 4 4 3 97 0 3 3 39 77 0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 5 1 4 1 3 4 105 0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
12 12 12 23 12 22 37 35 19 32 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 233;
}
);
note = j;
unicode = 106;
},
{
glyphname = uni0237;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,-310);
},
{
name = top;
pos = (116,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(15,-220,ls),
(91,-220,o),
(174,-146,o),
(174,-63,qs),
(174,496,l),
(61,496,l),
(61,-63,ls),
(61,-95,o),
(31,-123,o),
(-3,-123,qs),
(-34,-123,l),
(-34,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78 35 19 32 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 233;
}
);
note = uni0237;
unicode = 567;
},
{
glyphname = uni006A0301;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,-310);
},
{
name = top;
pos = (116,750);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni0237;
},
{
alignment = -1;
pos = (6,0);
ref = acutecomb;
}
);
width = 233;
}
);
note = uni006A0301;
},
{
glyphname = k;
kernLeft = b;
kernRight = k;
layers = (
{
anchors = (
{
name = bottom;
pos = (259,0);
},
{
name = top;
pos = (259,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(166,0,l),
(166,226,l),
(354,0,l),
(500,0,l),
(270,255,l),
(488,496,l),
(344,496,l),
(166,286,l),
(166,700,l),
(53,700,l),
(53,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
8 5 2 3 2 1 1 76 0 0 0 33 77 0 1 1 36 77 3 1 2 2 34 2 78 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 517;
}
);
note = k;
unicode = 107;
},
{
glyphname = uni0137;
kernLeft = b;
kernRight = k;
layers = (
{
anchors = (
{
name = bottom;
pos = (259,-262);
},
{
name = top;
pos = (259,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = k;
},
{
alignment = -1;
pos = (201,0);
ref = uni0326;
}
);
width = 517;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = l;
kernLeft = b;
kernRight = l;
layers = (
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = top;
pos = (110,700);
},
{
name = topright;
pos = (202,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(166,0,l),
(166,700,l),
(53,700,l),
(53,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 220;
}
);
note = l;
unicode = 108;
},
{
glyphname = lacute;
kernLeft = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = top;
pos = (110,954);
},
{
name = topright;
pos = (202,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (0,204);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
204
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 220;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = lcaron;
kernLeft = b;
kernRight = dcaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = top;
pos = (110,700);
},
{
name = topright;
pos = (202,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (202,0);
ref = uni030C.alt;
}
);
width = 220;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = uni013C;
kernLeft = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (110,-262);
},
{
name = top;
pos = (110,700);
},
{
name = topright;
pos = (202,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (53,0);
ref = uni0326;
}
);
width = 220;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = ldot;
kernLeft = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,0,l),
(173,700,l),
(59,700,l),
(59,0,l)
);
},
{
closed = 1;
nodes = (
(313,309,o),
(346,341,o),
(346,366,qs),
(346,390,o),
(313,424,o),
(288,424,qs),
(263,424,o),
(230,390,o),
(230,366,qs),
(230,341,o),
(263,309,o),
(288,309,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 4 1 3 1 2 3 105 0 0 0 33 77 0 1 1 34 1 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 351;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = lslash;
kernLeft = b;
kernRight = lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(195,0,l),
(195,373,l),
(266,399,l),
(266,493,l),
(195,466,l),
(195,700,l),
(81,700,l),
(81,426,l),
(11,399,l),
(11,306,l),
(81,332,l),
(81,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
9 8 7 6 3 2 1 0 8 1 0 1 76 0 0 0 33 77 0 1 1 34 1 78 21 20 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 295;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = m;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(166,0,l),
(166,269,ls),
(166,338,o),
(234,410,o),
(286,410,qs),
(341,410,o),
(400,341,o),
(400,277,qs),
(400,0,l),
(512,0,l),
(512,269,ls),
(512,335,o),
(576,410,o),
(633,410,qs),
(689,410,o),
(746,341,o),
(746,277,qs),
(746,0,l),
(858,0,l),
(858,292,ls),
(858,397,o),
(748,508,o),
(657,508,qs),
(604,508,o),
(514,457,o),
(489,411,q),
(464,459,o),
(372,508,o),
(314,508,qs),
(268,508,o),
(190,470,o),
(165,434,q),
(163,496,l),
(53,496,l),
(53,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
8 2 2 4 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
6 1 4 4 0 97 2 1 2 0 0 36 77 7 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 0 36 77 6 1 4 4 1 97 2 1 1 1 42 77 7 5 2 3 3 34 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
19 35 19 35 19 36 35 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 902;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,0);
},
{
name = top;
pos = (293,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(166,0,l),
(166,269,ls),
(166,335,o),
(233,412,o),
(291,412,qs),
(348,412,o),
(409,341,o),
(409,277,qs),
(409,0,l),
(521,0,l),
(521,291,ls),
(521,396,o),
(415,508,o),
(326,508,qs),
(277,508,o),
(189,466,o),
(165,428,q),
(163,496,l),
(53,496,l),
(53,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 3 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 3 3 0 97 1 1 0 0 36 77 4 1 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 36 77 0 3 3 1 97 0 1 1 42 77 4 1 2 2 34 2 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
19 35 19 35 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = n;
unicode = 110;
},
{
glyphname = nacute;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,0);
},
{
name = top;
pos = (293,750);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (182,0);
ref = acutecomb;
}
);
width = 566;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = ncaron;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,0);
},
{
name = top;
pos = (293,728);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (150,0);
ref = uni030C;
}
);
width = 566;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = uni0146;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,-262);
},
{
name = top;
pos = (293,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (235,0);
ref = uni0326;
}
);
width = 566;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = ntilde;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,0);
},
{
name = top;
pos = (293,704);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (125,0);
ref = tildecomb;
}
);
width = 566;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = eng;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(362,-220,ls),
(438,-220,o),
(521,-146,o),
(521,-63,qs),
(521,291,ls),
(521,396,o),
(415,508,o),
(326,508,qs),
(277,508,o),
(189,466,o),
(165,428,q),
(163,496,l),
(53,496,l),
(53,0,l),
(166,0,l),
(166,269,ls),
(166,335,o),
(233,412,o),
(291,412,qs),
(348,412,o),
(409,341,o),
(409,277,qs),
(409,-63,ls),
(409,-95,o),
(379,-123,o),
(345,-123,qs),
(313,-123,l),
(313,-220,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
16 1 1 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 3 97 4 1 3 3 36 77 0 2 2 34 77 0 0 0 5 97 0 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 3 3 36 77 0 1 1 4 97 0 4 4 42 77 0 2 2 34 77 0 0 0 5 97 0 5 5 38 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
37 35 17 19 37 32 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 565;
}
);
note = eng;
unicode = 331;
},
{
glyphname = o;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (295,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (295,496);
},
{
name = topright;
pos = (567,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(367,-12,o),
(487,55,o),
(554,173,o),
(554,248,qs),
(554,326,o),
(486,444,o),
(368,508,o),
(295,508,qs),
(222,508,o),
(104,445,o),
(35,326,o),
(35,248,qs),
(35,170,o),
(101,52,o),
(218,-12,o),
(291,-12,qs)
);
},
{
closed = 1;
nodes = (
(253,86,o),
(189,125,o),
(150,198,o),
(150,248,qs),
(150,319,o),
(228,410,o),
(293,410,qs),
(356,410,o),
(438,322,o),
(438,250,qs),
(438,204,o),
(400,129,o),
(334,86,o),
(292,86,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 42 77 5 1 3 3 1 97 4 1 1 1 40 1 78 16 16 0 0 16 29 16 28 23 21 0 15 0 14 38 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = o;
unicode = 111;
},
{
glyphname = oacute;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (295,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (295,750);
},
{
name = topright;
pos = (567,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (184,0);
ref = acutecomb;
}
);
width = 589;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = obreve;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (295,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (295,719);
},
{
name = topright;
pos = (567,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (144,0);
ref = uni0306;
}
);
width = 589;
}
);
note = obreve;
unicode = 335;
},
{
glyphname = ocircumflex;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (295,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (295,728);
},
{
name = topright;
pos = (567,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (152,0);
ref = uni0302;
}
);
width = 589;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = odieresis;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (295,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (295,724);
},
{
name = topright;
pos = (567,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (116,0);
ref = uni0308;
}
);
width = 589;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = ograve;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (295,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (295,750);
},
{
name = topright;
pos = (567,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (184,0);
ref = gravecomb;
}
);
width = 589;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = ohungarumlaut;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (295,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (295,715);
},
{
name = topright;
pos = (567,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (157,0);
ref = uni030B;
}
);
width = 589;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = omacron;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (295,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (295,692);
},
{
name = topright;
pos = (567,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (119,0);
ref = uni0304;
}
);
width = 589;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(368,-12,o),
(486,54,o),
(552,173,o),
(552,248,qs),
(552,350,o),
(494,421,q),
(560,496,l),
(466,496,l),
(441,467,l),
(377,508,o),
(295,508,qs),
(224,508,o),
(106,444,o),
(38,326,o),
(38,248,qs),
(38,145,o),
(95,75,q),
(30,0,l),
(125,0,l),
(149,28,l),
(211,-12,o),
(292,-12,qs)
);
},
{
closed = 1;
nodes = (
(252,85,o),
(219,107,q),
(418,335,l),
(437,299,o),
(437,249,qs),
(437,180,o),
(357,85,o),
(293,85,qs)
);
},
{
closed = 1;
nodes = (
(171,161,l),
(152,199,o),
(152,248,qs),
(152,319,o),
(229,411,o),
(294,411,qs),
(336,411,o),
(371,388,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
15 12 2 5 1 37 36 27 26 4 4 5 4 1 2 0 4 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
15 12 2 5 2 37 36 27 26 4 4 5 4 1 2 0 4 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 42 77 7 1 4 4 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 36 77 0 5 5 1 97 0 1 1 42 77 0 0 0 34 77 7 1 4 4 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
22 22 0 0 32 30 22 29 22 28 0 21 0 20 18 38 18 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = otilde;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (295,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (295,704);
},
{
name = topright;
pos = (567,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (127,0);
ref = tildecomb;
}
);
width = 589;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = oe;
kernLeft = c;
kernRight = ae;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(348,-12,o),
(446,39,o),
(477,85,q),
(510,39,o),
(613,-12,o),
(677,-12,qs),
(763,-12,o),
(884,80,o),
(907,152,q),
(793,152,l),
(777,119,o),
(717,82,o),
(676,82,qs),
(618,82,o),
(540,157,o),
(535,221,q),
(918,221,l),
(920,269,ls),
(920,338,o),
(890,389,qs),
(859,445,o),
(749,508,o),
(677,508,qs),
(613,508,o),
(510,457,o),
(477,410,q),
(447,457,o),
(350,508,o),
(288,508,qs),
(217,508,o),
(160,475,qs),
(102,442,o),
(35,324,o),
(35,248,qs),
(35,170,o),
(69,112,qs),
(102,53,o),
(216,-12,o),
(287,-12,qs)
);
},
{
closed = 1;
nodes = (
(228,86,o),
(151,173,o),
(151,248,qs),
(151,322,o),
(227,410,o),
(288,410,qs),
(347,410,o),
(424,323,o),
(424,248,qs),
(424,174,o),
(348,86,o),
(287,86,qs)
);
},
{
closed = 1;
nodes = (
(539,296,l),
(546,352,o),
(623,415,o),
(676,415,qs),
(731,415,o),
(804,350,o),
(807,296,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
35 1 3 4 1 76 12 1 7 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 4 2 3 2 4 3 128 0 10 0 2 4 10 2 103 9 1 7 7 0 97 1 1 0 0 42 77 12 8 2 3 3 5 97 11 6 2 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 4 2 3 2 4 3 128 0 10 0 2 4 10 2 103 0 9 9 0 97 1 1 0 0 42 77 0 7 7 0 97 1 1 0 0 42 77 12 8 2 3 3 5 97 11 6 2 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
39 39 0 0 57 56 54 52 39 50 39 49 45 43 0 38 0 37 34 18 34 21 36 40 13 8 28
CALL[ ]	/* CallFunction */";
};
width = 950;
}
);
note = oe;
unicode = 339;
},
{
glyphname = p;
kernLeft = p;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(166,-220,l),
(166,73,l),
(190,36,o),
(278,-12,o),
(337,-12,qs),
(407,-12,o),
(515,57,o),
(573,176,o),
(573,249,qs),
(573,321,o),
(515,439,o),
(409,508,o),
(338,508,qs),
(283,508,o),
(194,463,o),
(166,423,q),
(163,496,l),
(53,496,l),
(53,-220,l)
);
},
{
closed = 1;
nodes = (
(248,87,o),
(166,179,o),
(166,248,qs),
(166,318,o),
(248,409,o),
(312,409,qs),
(375,409,o),
(458,321,o),
(458,249,qs),
(458,180,o),
(376,87,o),
(312,87,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
2 1 4 0 16 1 2 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 0 97 1 1 0 0 36 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 0 36 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 19 19 30 19 29 37 19 38 35 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = p;
unicode = 112;
},
{
glyphname = thorn;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(166,-220,l),
(166,73,l),
(193,32,o),
(280,-12,o),
(337,-12,qs),
(409,-12,o),
(520,56,o),
(582,174,o),
(582,247,qs),
(582,320,o),
(521,439,o),
(410,508,o),
(338,508,qs),
(227,508,o),
(166,421,q),
(166,700,l),
(53,700,l),
(53,-220,l)
);
},
{
closed = 1;
nodes = (
(249,87,o),
(166,178,o),
(166,248,qs),
(166,319,o),
(249,409,o),
(316,409,qs),
(383,409,o),
(467,318,o),
(467,247,qs),
(467,176,o),
(382,87,o),
(316,87,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
2 1 4 1 15 1 2 5 2 76 0 0 0 33 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78 18 18 18 29 18 28 37 19 38 34 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = q;
kernLeft = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(443,-220,l),
(556,-220,l),
(556,496,l),
(445,496,l),
(443,427,l),
(416,466,o),
(327,507,o),
(274,507,qs),
(204,507,o),
(95,439,o),
(35,321,o),
(35,249,qs),
(36,175,o),
(97,57,o),
(204,-11,o),
(273,-11,qs),
(331,-11,o),
(418,37,o),
(443,71,q)
);
},
{
closed = 1;
nodes = (
(255,87,o),
(189,128,o),
(151,202,o),
(151,249,qs),
(151,318,o),
(233,409,o),
(296,409,qs),
(361,409,o),
(442,318,o),
(442,248,qs),
(442,199,o),
(403,126,o),
(336,87,o),
(296,87,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
13 1 4 1 18 1 0 5 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
13 1 4 2 18 1 0 5 2 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 1 97 2 1 1 1 42 77 6 1 5 5 0 97 0 0 0 40 77 0 3 3 38 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 2 36 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 0 97 0 0 0 40 77 0 3 3 38 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 19 19 32 19 31 39 17 19 38 33 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = q;
unicode = 113;
},
{
glyphname = r;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = top;
pos = (175,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(166,0,l),
(166,249,ls),
(166,321,o),
(232,389,o),
(300,389,qs),
(331,389,l),
(331,508,l),
(275,508,o),
(191,460,o),
(165,415,q),
(163,496,l),
(53,496,l),
(53,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 2 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 2 2 0 97 1 1 0 0 36 77 0 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 36 77 0 2 2 1 97 0 1 1 42 77 0 3 3 34 3 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 33 19 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 349;
}
);
note = r;
unicode = 114;
},
{
glyphname = racute;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = top;
pos = (175,750);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (64,0);
ref = acutecomb;
}
);
width = 349;
}
);
note = racute;
unicode = 341;
},
{
glyphname = rcaron;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = top;
pos = (175,728);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (32,0);
ref = uni030C;
}
);
width = 349;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = uni0157;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,-262);
},
{
name = top;
pos = (175,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (58,0);
ref = uni0326;
}
);
width = 349;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = s;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (249,0);
},
{
name = top;
pos = (241,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(336,-12,o),
(447,71,o),
(447,141,qs),
(446,188,o),
(401,247,o),
(327,279,o),
(268,293,qs),
(218,305,o),
(159,335,o),
(159,362,qs),
(159,389,o),
(202,417,o),
(238,417,qs),
(277,417,o),
(326,380,o),
(330,347,q),
(438,347,l),
(432,424,o),
(324,508,o),
(241,508,qs),
(158,508,o),
(48,426,o),
(48,358,qs),
(48,293,o),
(140,230,o),
(226,210,qs),
(266,200,o),
(306,187,o),
(337,160,o),
(337,138,qs),
(337,111,o),
(288,78,o),
(251,78,qs),
(211,78,o),
(153,121,o),
(147,156,q),
(33,156,l),
(37,106,o),
(97,29,o),
(194,-12,o),
(252,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 42 77 0 1 1 5 97 6 1 5 5 40 5 78 0 0 0 40 0 39 34 18 43 34 19 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 483;
}
);
note = s;
unicode = 115;
},
{
glyphname = sacute;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (249,0);
},
{
name = top;
pos = (241,750);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (131,0);
ref = acutecomb;
}
);
width = 483;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = scaron;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (249,0);
},
{
name = top;
pos = (241,728);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (98,0);
ref = uni030C;
}
);
width = 483;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = scedilla;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (249,-262);
},
{
name = top;
pos = (241,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(285,-262,ls),
(340,-262,o),
(412,-206,o),
(412,-156,qs),
(412,-106,o),
(339,-53,o),
(282,-54,q),
(282,-11,l),
(355,-3,o),
(447,78,o),
(447,141,qs),
(446,188,o),
(401,247,o),
(327,279,o),
(268,293,qs),
(218,305,o),
(159,335,o),
(159,362,qs),
(159,389,o),
(202,417,o),
(238,417,qs),
(277,417,o),
(326,380,o),
(330,347,q),
(438,347,l),
(432,424,o),
(324,508,o),
(241,508,qs),
(158,508,o),
(48,426,o),
(48,358,qs),
(48,293,o),
(140,230,o),
(226,210,qs),
(266,200,o),
(306,187,o),
(337,160,o),
(337,138,qs),
(337,111,o),
(288,78,o),
(251,78,qs),
(211,78,o),
(153,121,o),
(147,156,q),
(33,156,l),
(38,90,o),
(136,2,o),
(210,-9,q),
(210,-116,l),
(267,-116,ls),
(325,-116,o),
(325,-155,qs),
(325,-195,o),
(267,-195,qs),
(162,-195,l),
(162,-262,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
47 7 2 7 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 3 7 7 3 112 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 6 6 4 97 0 4 4 42 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 3 7 6 3 7 126 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 6 6 4 97 0 4 4 42 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 29 34 18 43 34 20 34 32 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 483;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = uni0219;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (249,-262);
},
{
name = top;
pos = (241,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (191,0);
ref = uni0326;
}
);
width = 483;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = germandbls;
kernLeft = b;
kernRight = germandbls;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(536,-10,o),
(646,78,o),
(646,156,qs),
(646,219,o),
(575,291,o),
(506,316,qs),
(447,337,o),
(400,365,o),
(400,389,qs),
(400,405,o),
(423,427,o),
(446,443,qs),
(486,468,o),
(531,518,o),
(531,560,qs),
(531,614,o),
(470,692,o),
(366,732,o),
(303,732,qs),
(231,732,o),
(118,681,o),
(54,582,o),
(54,513,qs),
(54,0,l),
(167,0,l),
(167,503,ls),
(167,567,o),
(231,637,o),
(299,637,qs),
(350,637,o),
(418,593,o),
(418,549,qs),
(418,527,o),
(394,494,o),
(372,479,qs),
(333,453,ls),
(286,420,o),
(286,372,qs),
(286,321,o),
(366,265,o),
(438,241,qs),
(486,225,o),
(534,186,o),
(534,149,qs),
(534,112,o),
(487,75,o),
(448,75,qs),
(403,75,o),
(350,128,o),
(345,173,q),
(237,173,l),
(246,84,o),
(362,-10,o),
(450,-10,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 1 1 3 97 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 2 1 2 0 1 128 0 4 0 2 0 4 2 105 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 53 0 52 35 33 29 28 25 23 34 18 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 666;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = t;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (225,0);
},
{
name = top;
pos = (182,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(327,0,l),
(327,95,l),
(270,95,ls),
(237,95,o),
(206,121,o),
(206,154,qs),
(206,401,l),
(327,401,l),
(327,496,l),
(206,496,l),
(206,616,l),
(92,616,l),
(92,496,l),
(21,496,l),
(21,401,l),
(92,401,l),
(92,155,ls),
(92,75,o),
(171,0,o),
(248,0,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 2 1 2 133 4 1 0 0 1 95 3 1 1 1 36 77 0 5 5 6 96 7 1 6 6 34 6 78 0 0 0 19 0 18 35 17 17 17 17 19 8 8 28
CALL[ ]	/* CallFunction */";
};
width = 363;
}
);
note = t;
unicode = 116;
},
{
glyphname = tcaron;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (225,0);
},
{
name = top;
pos = (182,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (253,0);
ref = uni030C.alt;
}
);
width = 363;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = uni0163;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (225,-262);
},
{
name = top;
pos = (182,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(261,-262,ls),
(316,-262,o),
(388,-206,o),
(388,-156,qs),
(388,-106,o),
(315,-53,o),
(258,-54,q),
(258,0,l),
(327,0,l),
(327,95,l),
(270,95,ls),
(237,95,o),
(206,121,o),
(206,154,qs),
(206,401,l),
(327,401,l),
(327,496,l),
(206,496,l),
(206,616,l),
(92,616,l),
(92,496,l),
(21,496,l),
(21,401,l),
(92,401,l),
(92,155,ls),
(92,34,o),
(186,8,q),
(186,-116,l),
(243,-116,ls),
(301,-116,o),
(301,-155,qs),
(301,-195,o),
(243,-195,qs),
(138,-195,l),
(138,-262,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
7 1 8 7 1 76 0 4 3 4 133 0 9 0 1 0 9 1 106 0 0 0 10 0 10 99 6 1 2 2 3 95 5 1 3 3 36 77 0 7 7 8 95 0 8 8 34 8 78 34 32 28 27 17 35 17 17 17 17 20 34 32 11 8 31
CALL[ ]	/* CallFunction */";
};
width = 363;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = uni021B;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (225,-262);
},
{
name = top;
pos = (182,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (168,0);
ref = uni0326;
}
);
width = 363;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = u;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (283,0);
},
{
name = ogonek;
pos = (512,0);
},
{
name = top;
pos = (281,496);
},
{
name = topright;
pos = (545,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(292,-12,o),
(376,30,o),
(400,68,q),
(402,0,l),
(512,0,l),
(512,496,l),
(399,496,l),
(399,227,ls),
(399,160,o),
(333,84,o),
(274,84,qs),
(217,84,o),
(157,156,o),
(157,219,qs),
(157,496,l),
(44,496,l),
(44,203,ls),
(44,104,o),
(150,-12,o),
(243,-12,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
16 1 3 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
2 1 0 0 36 77 0 1 1 3 98 5 4 2 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 36 77 0 3 3 34 77 0 1 1 4 98 5 1 4 4 40 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 19 0 18 17 19 35 19 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 565;
}
);
note = u;
unicode = 117;
},
{
glyphname = uacute;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (283,0);
},
{
name = ogonek;
pos = (512,0);
},
{
name = top;
pos = (281,750);
},
{
name = topright;
pos = (545,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (171,0);
ref = acutecomb;
}
);
width = 565;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ubreve;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (283,0);
},
{
name = ogonek;
pos = (512,0);
},
{
name = top;
pos = (281,719);
},
{
name = topright;
pos = (545,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (130,0);
ref = uni0306;
}
);
width = 565;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = ucircumflex;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (283,0);
},
{
name = ogonek;
pos = (512,0);
},
{
name = top;
pos = (281,728);
},
{
name = topright;
pos = (545,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (138,0);
ref = uni0302;
}
);
width = 565;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (283,0);
},
{
name = ogonek;
pos = (512,0);
},
{
name = top;
pos = (281,724);
},
{
name = topright;
pos = (545,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (103,0);
ref = uni0308;
}
);
width = 565;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = ugrave;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (283,0);
},
{
name = ogonek;
pos = (512,0);
},
{
name = top;
pos = (281,750);
},
{
name = topright;
pos = (545,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (171,0);
ref = gravecomb;
}
);
width = 565;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uhungarumlaut;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (283,0);
},
{
name = ogonek;
pos = (512,0);
},
{
name = top;
pos = (281,715);
},
{
name = topright;
pos = (545,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (144,0);
ref = uni030B;
}
);
width = 565;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = umacron;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (283,0);
},
{
name = ogonek;
pos = (512,0);
},
{
name = top;
pos = (281,692);
},
{
name = topright;
pos = (545,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (105,0);
ref = uni0304;
}
);
width = 565;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = uogonek;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (283,0);
},
{
name = ogonek;
pos = (512,0);
},
{
name = top;
pos = (281,496);
},
{
name = topright;
pos = (545,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(292,-12,o),
(376,30,o),
(400,68,q),
(402,16,l),
(350,-11,o),
(306,-72,o),
(306,-107,qs),
(306,-157,o),
(378,-208,o),
(434,-208,qs),
(473,-208,o),
(517,-194,q),
(517,-125,l),
(480,-140,o),
(448,-140,qs),
(423,-140,o),
(393,-116,o),
(393,-96,qs),
(393,-77,o),
(424,-44,o),
(459,-27,qs),
(513,0,l),
(512,2,l),
(512,496,l),
(399,496,l),
(399,227,ls),
(399,160,o),
(333,84,o),
(274,84,qs),
(217,84,o),
(157,156,o),
(157,219,qs),
(157,496,l),
(44,496,l),
(44,203,ls),
(44,104,o),
(150,-12,o),
(243,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
34 33 14 3 5 1 24 1 3 5 25 1 4 3 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
2 1 0 0 36 77 0 1 1 5 98 6 1 5 5 40 77 0 3 3 4 97 0 4 4 38 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 0 4 3 4 101 2 1 0 0 36 77 0 1 1 5 98 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 37 0 36 35 40 19 35 19 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 565;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = uring;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (283,0);
},
{
name = ogonek;
pos = (512,0);
},
{
name = top;
pos = (281,767);
},
{
name = topright;
pos = (545,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (170,0);
ref = uni030A;
}
);
width = 565;
}
);
note = uring;
unicode = 367;
},
{
glyphname = utilde;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (283,0);
},
{
name = ogonek;
pos = (512,0);
},
{
name = top;
pos = (281,704);
},
{
name = topright;
pos = (545,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (114,0);
ref = tildecomb;
}
);
width = 565;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = v;
kernLeft = v;
kernRight = v;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,0,l),
(516,496,l),
(397,496,l),
(262,104,l),
(127,496,l),
(7,496,l),
(194,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 2 0 1 76 1 1 0 0 36 77 0 2 2 34 2 78 17 18 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 523;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (375,0);
},
{
name = top;
pos = (376,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(274,0,l),
(376,368,l),
(478,1,l),
(598,1,l),
(744,496,l),
(634,496,l),
(540,116,l),
(439,496,l),
(317,496,l),
(214,115,l),
(120,496,l),
(6,496,l),
(153,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
10 5 2 3 3 0 1 76 2 1 2 0 0 36 77 4 1 3 3 34 3 78 18 17 18 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 749;
}
);
note = w;
unicode = 119;
},
{
glyphname = wacute;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (375,0);
},
{
name = top;
pos = (376,750);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (265,0);
ref = acutecomb;
}
);
width = 749;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = wcircumflex;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (375,0);
},
{
name = top;
pos = (376,728);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (233,0);
ref = uni0302;
}
);
width = 749;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = wdieresis;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (375,0);
},
{
name = top;
pos = (376,724);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (197,0);
ref = uni0308;
}
);
width = 749;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = wgrave;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (375,0);
},
{
name = top;
pos = (376,750);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (265,0);
ref = gravecomb;
}
);
width = 749;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = x;
kernLeft = x;
kernRight = x;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(127,0,l),
(235,171,l),
(351,0,l),
(476,0,l),
(308,249,l),
(475,496,l),
(354,496,l),
(246,326,l),
(131,496,l),
(5,496,l),
(173,249,l),
(6,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 36 77 3 1 2 2 34 2 78 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 481;
}
);
note = x;
unicode = 120;
},
{
glyphname = y;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (271,0);
},
{
name = top;
pos = (271,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,-220,l),
(536,496,l),
(417,496,l),
(272,142,l),
(132,496,l),
(6,496,l),
(211,22,l),
(102,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
3 1 2 0 1 76 1 1 0 0 36 77 0 2 2 38 2 78 17 18 17 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 542;
}
);
note = y;
unicode = 121;
},
{
glyphname = yacute;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (271,0);
},
{
name = top;
pos = (271,750);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (161,0);
ref = acutecomb;
}
);
width = 542;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = ycircumflex;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (271,0);
},
{
name = top;
pos = (271,728);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (128,0);
ref = uni0302;
}
);
width = 542;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = ydieresis;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (271,0);
},
{
name = top;
pos = (271,724);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (93,0);
ref = uni0308;
}
);
width = 542;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = ygrave;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (271,0);
},
{
name = top;
pos = (271,750);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (161,0);
ref = gravecomb;
}
);
width = 542;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = uni1EF9;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (271,0);
},
{
name = top;
pos = (271,704);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (104,0);
ref = tildecomb;
}
);
width = 542;
}
);
note = uni1EF9;
unicode = 7929;
},
{
glyphname = z;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (213,0);
},
{
name = top;
pos = (213,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(397,0,l),
(397,93,l),
(154,93,l),
(394,405,l),
(394,496,l),
(29,496,l),
(29,403,l),
(265,403,l),
(26,92,l),
(26,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 0 1 0 1 3 2 2 76 0 0 0 1 95 0 1 1 36 77 0 2 2 3 95 0 3 3 34 3 78 17 18 17 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 426;
}
);
note = z;
unicode = 122;
},
{
glyphname = zacute;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (213,0);
},
{
name = top;
pos = (213,750);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (103,0);
ref = acutecomb;
}
);
width = 426;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = zcaron;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (213,0);
},
{
name = top;
pos = (213,728);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (70,0);
ref = uni030C;
}
);
width = 426;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = zdotaccent;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (213,0);
},
{
name = top;
pos = (213,724);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (139,0);
ref = uni0307;
}
);
width = 426;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = uniA78C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(165,333,l),
(183,700,l),
(62,700,l),
(79,333,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 245;
}
);
note = uniA78C;
unicode = 42892;
},
{
glyphname = fi;
layers = (
{
anchors = (
{
name = caret_1;
pos = (273,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(184,0,l),
(184,401,l),
(284,401,l),
(284,496,l),
(184,496,l),
(184,543,ls),
(184,575,o),
(214,603,o),
(248,603,qs),
(275,603,l),
(275,700,l),
(230,700,ls),
(152,700,o),
(71,625,o),
(71,543,qs),
(71,496,l),
(7,496,l),
(7,401,l),
(71,401,l),
(71,0,l)
);
},
{
closed = 1;
nodes = (
(485,0,l),
(485,496,l),
(372,496,l),
(372,0,l)
);
},
{
closed = 1;
nodes = (
(461,570,o),
(504,614,o),
(504,645,qs),
(504,676,o),
(460,719,o),
(429,719,qs),
(398,719,o),
(354,676,o),
(354,645,qs),
(354,614,o),
(398,570,o),
(429,570,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 3 3 2 97 9 1 2 2 33 77 11 1 10 10 2 97 9 1 2 2 33 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 3 2 97 0 2 2 33 77 11 1 10 10 9 97 0 9 9 41 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 3 3 2 97 0 2 2 33 77 11 1 10 10 9 97 0 9 9 39 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
24 24 24 35 24 34 30 28 17 17 17 17 19 33 35 17 16 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 545;
}
);
note = fi;
unicode = 64257;
},
{
glyphname = fl;
kernRight = fl;
layers = (
{
anchors = (
{
name = caret_1;
pos = (268,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(184,0,l),
(184,401,l),
(284,401,l),
(284,496,l),
(184,496,l),
(184,543,ls),
(184,575,o),
(214,603,o),
(248,603,qs),
(275,603,l),
(275,700,l),
(230,700,ls),
(152,700,o),
(71,625,o),
(71,543,qs),
(71,496,l),
(7,496,l),
(7,401,l),
(71,401,l),
(71,0,l)
);
},
{
closed = 1;
nodes = (
(483,0,l),
(483,700,l),
(369,700,l),
(369,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 2 97 7 1 2 2 33 77 5 1 0 0 1 95 4 1 1 1 36 77 8 1 6 6 34 6 78 17 17 17 17 19 33 35 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 536;
}
);
note = fl;
unicode = 64258;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(234,347,o),
(273,410,q),
(284,382,o),
(333,354,o),
(368,354,qs),
(382,354,l),
(382,421,l),
(345,421,o),
(345,458,qs),
(345,562,ls),
(345,633,o),
(262,710,o),
(194,710,qs),
(134,710,o),
(50,646,o),
(41,590,q),
(120,590,l),
(126,615,o),
(165,643,o),
(192,643,qs),
(226,643,o),
(264,601,o),
(265,562,q),
(179,562,ls),
(114,562,o),
(32,508,o),
(32,451,qs),
(32,402,o),
(102,347,o),
(152,347,qs)
);
},
{
closed = 1;
nodes = (
(146,411,o),
(113,435,o),
(113,459,qs),
(113,485,o),
(154,509,o),
(184,509,qs),
(265,509,l),
(265,467,o),
(213,411,o),
(173,411,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
27 1 5 4 1 76
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
27 1 5 8 1 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 10 8 2 4 4 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 9 6 2 5 5 58 77 10 1 8 8 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 0 5 5 58 77 10 1 8 8 6 97 9 1 6 6 58 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
30 30 0 0 30 39 30 38 34 32 0 29 0 28 33 20 34 18 34 36 11 10 28
CALL[ ]	/* CallFunction */";
};
width = 405;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(263,349,o),
(347,396,o),
(393,479,o),
(393,531,qs),
(393,586,o),
(345,668,o),
(263,712,o),
(212,712,qs),
(161,712,o),
(78,668,o),
(31,586,o),
(31,531,qs),
(31,476,o),
(78,393,o),
(160,349,o),
(210,349,qs)
);
},
{
closed = 1;
nodes = (
(167,419,o),
(114,481,o),
(114,531,qs),
(114,581,o),
(167,643,o),
(211,643,qs),
(256,643,o),
(310,582,o),
(310,531,qs),
(310,481,o),
(255,419,o),
(210,419,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 59 77 5 1 3 3 1 97 4 1 1 1 58 1 78 16 16 0 0 16 27 16 26 22 20 0 15 0 14 38 6 10 23
CALL[ ]	/* CallFunction */";
};
width = 424;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = uni042F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(26,0,l),
(162,0,l),
(336,300,l),
(427,300,l),
(427,0,l),
(540,0,l),
(540,700,l),
(309,700,ls),
(198,700,o),
(71,596,o),
(71,500,qs),
(71,425,o),
(151,335,o),
(223,319,q)
);
},
{
closed = 1;
nodes = (
(243,396,o),
(187,449,o),
(187,500,qs),
(187,551,o),
(243,604,o),
(312,604,qs),
(427,604,l),
(427,396,l),
(312,396,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
13 1 2 5 1 76 3 1 1 2 1 134 0 0 0 4 5 0 4 103 6 1 5 2 2 5 87 6 1 5 5 2 95 0 2 5 2 79 14 14 14 22 14 21 35 17 17 17 36 7 6 27
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = uni042F;
unicode = (1071,1103);
},
{
glyphname = uni0394;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(680,0,l),
(680,87,l),
(399,700,l),
(306,700,l),
(25,87,l),
(25,0,l)
);
},
{
closed = 1;
nodes = (
(352,571,l),
(565,87,l),
(141,87,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
7 1 2 0 1 76 3 0 2 2 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 23 77 3 1 2 2 1 95 0 1 1 24 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 2 0 133 3 1 2 2 1 95 0 1 1 24 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
6 6 6 8 6 8 18 17 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 706;
}
);
note = uni0394;
unicode = 916;
},
{
glyphname = Pi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,0,l),
(226,409,l),
(420,409,l),
(420,0,l),
(533,0,l),
(533,409,l),
(609,409,l),
(609,496,l),
(37,496,l),
(37,409,l),
(113,409,l),
(113,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 1 4 2 2 0 3 1 0 103 5 1 3 3 24 3 78 17 17 17 17 17 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
note = Pi;
unicode = 928;
},
{
glyphname = uni03A9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(324,0,l),
(324,91,l),
(247,119,o),
(155,257,o),
(155,351,qs),
(155,417,o),
(207,535,o),
(315,609,o),
(394,609,qs),
(461,609,o),
(570,549,o),
(634,432,o),
(634,351,qs),
(634,258,o),
(543,119,o),
(465,91,q),
(465,0,l),
(737,0,l),
(737,87,l),
(612,87,l),
(680,131,o),
(749,274,o),
(749,361,qs),
(749,464,o),
(656,623,o),
(494,712,o),
(394,712,qs),
(294,712,o),
(133,623,o),
(40,463,o),
(40,361,qs),
(40,274,o),
(109,131,o),
(176,87,q),
(51,87,l),
(51,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
33 19 2 0 4 1 76 0 4 4 1 97 0 1 1 23 77 2 1 0 0 3 95 5 1 3 3 24 3 78 23 39 17 22 38 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = uni03A9;
unicode = 937;
},
{
glyphname = uni03BC;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,-220,l),
(180,9,l),
(212,-12,o),
(260,-12,qs),
(317,-12,o),
(405,40,o),
(430,85,q),
(439,0,l),
(539,0,l),
(539,496,l),
(425,496,l),
(425,240,ls),
(425,167,o),
(353,84,o),
(294,84,qs),
(180,84,o),
(180,224,qs),
(180,496,l),
(66,496,l),
(66,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
12 1 1 0 17 1 3 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
2 1 0 1 0 133 0 3 3 24 77 0 1 1 4 97 0 4 4 24 77 0 5 5 25 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
2 1 0 1 0 133 0 1 0 4 5 1 4 105 0 3 3 24 77 0 5 5 25 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 35 17 19 34 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 606;
}
);
note = uni03BC;
unicode = 956;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(431,-12,o),
(557,183,o),
(557,350,qs),
(557,517,o),
(431,712,o),
(294,712,qs),
(158,712,o),
(30,514,o),
(30,350,qs),
(30,186,o),
(158,-12,o),
(294,-12,qs)
);
},
{
closed = 1;
nodes = (
(219,89,o),
(146,226,o),
(146,350,qs),
(146,474,o),
(219,611,o),
(294,611,qs),
(369,611,o),
(442,474,o),
(442,350,qs),
(442,226,o),
(369,89,o),
(294,89,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 39 77 5 1 3 3 1 97 4 1 1 1 40 1 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(556,0,l),
(556,96,l),
(387,96,l),
(387,700,l),
(328,700,l),
(87,612,l),
(87,517,l),
(279,581,l),
(279,96,l),
(82,96,l),
(82,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 1 33 77 2 1 0 0 3 96 0 3 3 34 3 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(60,0,l),
(535,0,l),
(535,96,l),
(206,96,l),
(220,110,o),
(305,198,o),
(363,256,qs),
(420,314,o),
(475,376,o),
(516,457,o),
(516,502,qs),
(516,597,o),
(401,712,o),
(294,712,qs),
(190,712,o),
(64,592,o),
(62,485,q),
(172,485,l),
(172,542,o),
(235,616,o),
(292,616,qs),
(345,616,o),
(404,553,o),
(404,500,qs),
(404,462,o),
(346,384,o),
(279,314,qs),
(251,285,l),
(60,86,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
28 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 39 77 0 3 3 4 95 0 4 4 34 4 78 17 25 34 18 38 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,-12,o),
(480,43,o),
(542,147,o),
(542,218,qs),
(542,278,o),
(489,372,o),
(392,427,o),
(328,428,q),
(520,607,l),
(520,700,l),
(69,700,l),
(69,604,l),
(380,604,l),
(158,398,l),
(222,323,l),
(258,344,o),
(297,344,qs),
(358,344,o),
(433,277,o),
(433,217,qs),
(433,155,o),
(359,85,o),
(296,85,qs),
(234,85,o),
(160,153,o),
(155,207,q),
(45,207,l),
(50,103,o),
(186,-12,o),
(296,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
20 1 3 4 15 1 2 5 14 1 0 2 3 76 0 0 2 1 2 0 1 128 0 5 0 2 0 5 2 105 0 3 3 4 95 0 4 4 33 77 0 1 1 6 97 7 1 6 6 40 6 78 0 0 0 29 0 28 18 17 19 36 34 18 8 8 28
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(476,0,l),
(476,137,l),
(564,137,l),
(564,235,l),
(476,235,l),
(476,423,l),
(370,423,l),
(370,235,l),
(155,235,l),
(385,700,l),
(273,700,l),
(35,226,l),
(35,137,l),
(363,137,l),
(363,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
2 1 0 2 1 76 0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 33 77 0 6 6 34 6 78 17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(373,-12,o),
(485,53,o),
(547,168,o),
(547,240,qs),
(547,306,o),
(520,361,qs),
(492,417,o),
(390,481,o),
(319,481,qs),
(271,481,o),
(191,449,o),
(168,422,q),
(203,601,l),
(498,601,l),
(498,700,l),
(117,700,l),
(57,305,l),
(166,305,l),
(182,342,o),
(254,388,o),
(302,388,qs),
(362,388,o),
(438,306,o),
(438,239,qs),
(438,172,o),
(362,85,o),
(300,85,qs),
(244,85,o),
(167,146,o),
(157,194,q),
(46,194,l),
(55,100,o),
(193,-12,o),
(299,-12,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 5 5 4 95 0 4 4 33 77 0 2 2 6 97 0 6 6 36 77 0 1 1 7 97 8 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 33 77 0 1 1 7 97 8 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 0 32 35 17 17 18 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(383,-12,o),
(435,21,qs),
(487,55,o),
(545,162,o),
(545,224,qs),
(545,291,o),
(514,344,qs),
(484,395,o),
(387,451,o),
(331,451,qs),
(274,451,o),
(181,396,o),
(158,352,q),
(161,485,o),
(241,617,o),
(309,617,qs),
(356,617,o),
(415,563,o),
(425,513,q),
(529,513,l),
(523,568,o),
(497,611,qs),
(470,658,o),
(374,712,o),
(310,712,qs),
(227,712,o),
(169,663,qs),
(110,615,o),
(49,442,o),
(49,325,qs),
(49,186,o),
(107,94,qs),
(139,44,o),
(242,-12,o),
(313,-12,qs)
);
},
{
closed = 1;
nodes = (
(250,86,o),
(177,162,o),
(177,221,qs),
(177,276,o),
(251,354,o),
(306,354,qs),
(362,354,o),
(434,280,o),
(434,220,qs),
(434,162,o),
(363,86,o),
(307,86,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
21 1 6 5 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 39 77 8 1 6 6 4 97 7 1 4 4 40 4 78 35 35 0 0 35 46 35 45 41 39 0 34 0 33 36 34 20 40 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(262,0,l),
(547,618,l),
(547,700,l),
(42,700,l),
(42,603,l),
(428,603,l),
(144,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 0 0 1 95 0 1 1 33 77 0 2 2 34 2 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(359,-12,o),
(469,37,o),
(535,130,o),
(535,193,qs),
(535,256,o),
(471,355,o),
(413,375,q),
(461,394,o),
(518,476,o),
(518,525,qs),
(518,582,o),
(459,667,o),
(357,712,o),
(294,712,qs),
(232,712,o),
(130,668,o),
(70,583,o),
(70,525,qs),
(70,476,o),
(125,396,o),
(174,375,q),
(116,354,o),
(52,256,o),
(52,193,qs),
(52,132,o),
(117,39,o),
(227,-12,o),
(294,-12,qs)
);
},
{
closed = 1;
nodes = (
(233,84,o),
(164,148,o),
(164,202,qs),
(164,260,o),
(236,324,o),
(295,324,qs),
(354,324,o),
(424,260,o),
(424,202,qs),
(424,147,o),
(354,84,o),
(295,84,qs)
);
},
{
closed = 1;
nodes = (
(245,410,o),
(183,467,o),
(183,514,qs),
(183,564,o),
(243,619,o),
(294,619,qs),
(345,619,o),
(406,563,o),
(406,514,qs),
(406,467,o),
(343,410,o),
(294,410,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
20 6 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 39 77 7 1 3 3 1 97 6 1 1 1 40 1 78 40 40 28 28 0 0 40 51 40 50 46 44 28 39 28 38 34 32 0 27 0 26 44 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,-12,o),
(419,37,qs),
(478,85,o),
(540,258,o),
(540,375,qs),
(540,439,o),
(511,559,o),
(482,606,qs),
(450,656,o),
(347,712,o),
(275,712,qs),
(206,712,o),
(153,679,qs),
(101,645,o),
(44,538,o),
(44,476,qs),
(44,407,o),
(74,356,qs),
(104,305,o),
(202,249,o),
(258,249,qs),
(315,249,o),
(407,304,o),
(430,348,q),
(428,216,o),
(347,83,o),
(279,83,qs),
(232,83,o),
(173,137,o),
(164,187,q),
(60,187,l),
(64,136,o),
(91,89,qs),
(119,42,o),
(214,-12,o),
(278,-12,qs)
);
},
{
closed = 1;
nodes = (
(227,346,o),
(154,420,o),
(154,480,qs),
(154,538,o),
(225,614,o),
(282,614,qs),
(338,614,o),
(411,538,o),
(411,479,qs),
(411,443,o),
(378,382,o),
(319,346,o),
(283,346,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
11 1 6 5 1 76 0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 39 77 0 1 1 4 97 7 1 4 4 40 4 78 36 36 0 0 36 48 36 47 43 41 0 35 0 34 40 36 34 20 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = nine;
unicode = 57;
},
{
glyphname = uni24EA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(307,53,o),
(171,131,o),
(93,267,o),
(93,350,qs),
(93,433,o),
(171,569,o),
(307,647,o),
(389,647,qs),
(472,647,o),
(608,569,o),
(686,433,o),
(686,350,qs),
(686,267,o),
(608,131,o),
(472,53,o),
(389,53,qs)
);
},
{
closed = 1;
nodes = (
(459,165,o),
(492,215,qs),
(524,265,o),
(524,350,qs),
(524,435,o),
(492,485,qs),
(459,535,o),
(390,535,qs),
(320,535,o),
(287,484,qs),
(255,436,o),
(255,350,qs),
(255,264,o),
(287,216,qs),
(320,165,o),
(390,165,qs)
);
},
{
closed = 1;
nodes = (
(360,232,o),
(345,263,qs),
(331,296,o),
(331,350,qs),
(331,404,o),
(345,437,qs),
(360,468,o),
(390,468,qs),
(419,468,o),
(434,437,qs),
(448,404,o),
(448,350,qs),
(448,296,o),
(434,263,qs),
(419,232,o),
(390,232,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
0 4 0 6 7 4 6 105 11 1 7 10 1 5 3 7 5 105 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 48 48 32 32 16 16 0 0 48 63 48 62 56 54 32 47 32 46 40 38 16 31 16 30 24 22 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni24EA;
unicode = 9450;
},
{
glyphname = uni2780;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(307,53,o),
(171,131,o),
(93,267,o),
(93,350,qs),
(93,433,o),
(171,569,o),
(307,647,o),
(389,647,qs),
(472,647,o),
(608,569,o),
(686,433,o),
(686,350,qs),
(686,267,o),
(608,131,o),
(472,53,o),
(389,53,qs)
);
},
{
closed = 1;
nodes = (
(518,176,l),
(518,241,l),
(437,241,l),
(437,533,l),
(398,533,l),
(280,491,l),
(280,432,l),
(367,449,l),
(367,241,l),
(277,241,l),
(277,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
36 35 34 3 4 5 1 76 0 5 2 4 2 5 4 128 6 1 4 0 7 3 4 7 104 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 16 16 0 0 42 41 40 39 38 37 33 32 16 31 16 30 24 22 0 15 0 14 38 10 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2780;
unicode = 10112;
},
{
glyphname = uni2781;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(306,53,o),
(170,132,o),
(92,268,o),
(92,350,qs),
(92,432,o),
(170,568,o),
(306,647,o),
(389,647,qs),
(472,647,o),
(608,569,o),
(686,433,o),
(686,350,qs),
(686,267,o),
(608,131,o),
(472,53,o),
(389,53,qs)
);
},
{
closed = 1;
nodes = (
(517,176,l),
(517,241,l),
(369,241,l),
(424,296,ls),
(465,336,o),
(509,396,o),
(509,432,qs),
(509,481,o),
(445,540,o),
(391,540,qs),
(335,540,o),
(266,479,o),
(265,419,q),
(338,419,l),
(338,443,o),
(364,476,o),
(389,476,qs),
(411,476,o),
(436,451,o),
(436,429,qs),
(436,409,o),
(402,368,o),
(370,336,qs),
(265,228,l),
(265,176,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
32 1 8 7 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 5 4 7 4 5 114 0 6 0 4 5 6 4 105 0 7 0 8 3 7 8 103 0 2 2 0 97 0 0 0 39 77 10 1 3 3 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 5 4 7 4 5 7 128 0 6 0 4 5 6 4 105 0 7 0 8 3 7 8 103 0 2 2 0 97 0 0 0 39 77 10 1 3 3 1 97 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
16 16 0 0 56 55 54 53 47 45 43 42 40 38 16 31 16 30 24 22 0 15 0 14 38 11 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2781;
unicode = 10113;
},
{
glyphname = uni2782;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(307,53,o),
(171,131,o),
(92,267,o),
(92,350,qs),
(92,433,o),
(171,569,o),
(307,647,o),
(389,647,qs),
(472,647,o),
(608,569,o),
(686,433,o),
(686,350,qs),
(686,267,o),
(608,131,o),
(472,53,o),
(389,53,qs)
);
},
{
closed = 1;
nodes = (
(448,158,o),
(519,224,o),
(519,279,qs),
(519,322,o),
(474,382,o),
(426,389,q),
(508,459,l),
(508,522,l),
(269,522,l),
(269,458,l),
(414,458,l),
(312,369,l),
(353,322,l),
(370,332,o),
(390,332,qs),
(414,332,o),
(447,304,o),
(447,278,qs),
(447,251,o),
(417,223,o),
(390,223,qs),
(365,223,o),
(332,252,o),
(332,280,q),
(260,280,l),
(259,221,o),
(331,158,o),
(390,158,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
52 1 7 8 53 47 2 6 7 46 1 4 6 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 6 7 4 7 6 114 0 4 5 7 4 5 126 0 8 0 7 6 8 7 103 0 5 12 1 9 3 5 9 105 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 98 10 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 6 7 4 7 6 4 128 0 4 5 7 4 5 126 0 8 0 7 6 8 7 103 0 5 12 1 9 3 5 9 105 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 98 10 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
32 32 16 16 0 0 32 59 32 58 51 50 49 48 45 43 39 37 35 34 16 31 16 30 24 22 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2782;
unicode = 10114;
},
{
glyphname = uni2783;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(478,176,l),
(478,238,l),
(515,238,l),
(515,303,l),
(478,303,l),
(478,392,l),
(408,392,l),
(408,303,l),
(318,303,l),
(431,533,l),
(357,533,l),
(238,299,l),
(238,238,l),
(402,238,l),
(402,176,l)
);
},
{
closed = 1;
nodes = (
(307,53,o),
(171,131,o),
(92,267,o),
(92,350,qs),
(92,433,o),
(171,569,o),
(307,647,o),
(389,647,qs),
(472,647,o),
(608,569,o),
(686,433,o),
(686,350,qs),
(686,267,o),
(608,131,o),
(472,53,o),
(389,53,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
18 1 2 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 3 9 5 9 3 5 128 0 5 4 4 5 112 0 8 2 10 2 8 114 6 1 4 7 1 2 8 4 2 104 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 3 9 5 9 3 5 128 0 5 4 9 5 4 126 0 8 2 10 2 8 114 6 1 4 7 1 2 8 4 2 104 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 3 9 5 9 3 5 128 0 5 4 9 5 4 126 0 8 2 10 2 8 10 128 6 1 4 7 1 2 8 4 2 104 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
31 31 0 0 31 46 31 45 39 37 30 29 28 27 26 25 24 23 22 21 20 19 17 16 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2783;
unicode = 10115;
},
{
glyphname = uni2784;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(307,53,o),
(171,131,o),
(92,267,o),
(92,350,qs),
(92,433,o),
(171,569,o),
(307,647,o),
(389,647,qs),
(472,647,o),
(608,569,o),
(686,433,o),
(686,350,qs),
(686,267,o),
(608,131,o),
(472,53,o),
(389,53,qs)
);
},
{
closed = 1;
nodes = (
(449,160,o),
(521,233,o),
(521,291,qs),
(521,342,o),
(462,413,o),
(406,413,qs),
(386,413,o),
(348,400,o),
(336,387,q),
(351,458,l),
(498,458,l),
(498,524,l),
(294,524,l),
(264,316,l),
(337,316,l),
(344,332,o),
(375,352,o),
(393,352,qs),
(419,352,o),
(449,317,o),
(449,290,qs),
(449,263,o),
(418,225,o),
(392,225,qs),
(371,225,o),
(338,248,o),
(333,269,q),
(260,269,l),
(262,219,o),
(336,160,o),
(392,160,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
53 1 6 10 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
0 7 6 4 9 7 114 0 4 5 6 4 5 126 0 8 0 9 10 8 9 103 0 10 0 6 7 10 6 105 0 5 14 1 11 3 5 11 105 0 2 2 0 97 0 0 0 39 77 13 1 3 3 1 98 12 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 63 values pushed */
0 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 8 0 9 10 8 9 103 0 10 0 6 7 10 6 105 0 5 14 1 11 3 5 11 105 0 2 2 0 97 0 0 0 39 77 13 1 3 3 1 98 12 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 38 values pushed */
32 32 16 16 0 0 32 62 32 61 57 55 52 51 50 49 48 47 45 43 39 37 35 34 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2784;
unicode = 10116;
},
{
glyphname = uni2785;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(307,53,o),
(171,131,o),
(93,267,o),
(93,350,qs),
(93,433,o),
(171,569,o),
(307,647,o),
(389,647,qs),
(472,647,o),
(608,569,o),
(686,433,o),
(686,350,qs),
(686,267,o),
(608,131,o),
(472,53,o),
(389,53,qs)
);
},
{
closed = 1;
nodes = (
(367,229,o),
(337,261,o),
(337,286,qs),
(337,309,o),
(368,340,o),
(390,340,qs),
(413,340,o),
(445,310,o),
(445,284,qs),
(445,258,o),
(412,229,o),
(392,229,qs)
);
},
{
closed = 1;
nodes = (
(450,165,o),
(516,237,o),
(516,287,qs),
(516,334,o),
(457,403,o),
(411,403,qs),
(384,403,o),
(340,376,o),
(330,357,q),
(332,474,o),
(393,474,qs),
(432,474,o),
(442,429,q),
(510,429,l),
(508,473,o),
(444,535,o),
(393,535,qs),
(323,535,o),
(255,421,o),
(255,339,qs),
(255,264,o),
(324,165,o),
(396,165,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 103 values pushed */
57 1 4 9 1 76 0 7 8 9 8 7 9 128 0 6 0 8 7 6 8 105 0 9 0 4 5 9 4 105 13 1 5 14 1 10 3 5 10 105 0 2 2 0 97 0 0 0 39 77 12 1 3 3 1 97 11 1 1 1 40 1 78 44 44 32 32 16 16 0 0 44 66 44 65 61 59 56 54 53 52 50 48 32 43 32 42 38 36 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2785;
unicode = 10117;
},
{
glyphname = uni2786;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(385,167,l),
(525,471,l),
(525,524,l),
(258,524,l),
(258,460,l),
(445,460,l),
(307,167,l)
);
},
{
closed = 1;
nodes = (
(307,53,o),
(171,131,o),
(93,267,o),
(93,350,qs),
(93,433,o),
(171,569,o),
(307,647,o),
(389,647,qs),
(472,647,o),
(608,569,o),
(686,433,o),
(686,350,qs),
(686,267,o),
(608,131,o),
(472,53,o),
(389,53,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
20 1 2 3 1 76 0 4 2 6 2 4 6 128 0 3 0 2 4 3 2 103 0 5 5 0 97 0 0 0 39 77 8 1 6 6 1 97 7 1 1 1 40 1 78 23 23 0 0 23 38 23 37 31 29 22 21 19 18 17 16 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2786;
unicode = 10118;
},
{
glyphname = uni2787;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(336,227,o),
(336,279,qs),
(336,305,o),
(366,331,o),
(391,331,qs),
(415,331,o),
(443,304,o),
(443,279,qs),
(443,254,o),
(415,227,o),
(391,227,qs)
);
},
{
closed = 1;
nodes = (
(307,53,o),
(171,131,o),
(93,267,o),
(93,350,qs),
(93,433,o),
(171,569,o),
(307,647,o),
(389,647,qs),
(472,647,o),
(608,568,o),
(686,432,o),
(686,350,qs),
(686,268,o),
(608,132,o),
(472,53,o),
(389,53,qs)
);
},
{
closed = 1;
nodes = (
(443,165,o),
(517,221,o),
(517,272,qs),
(517,304,o),
(489,352,o),
(461,364,q),
(482,374,o),
(508,414,o),
(508,439,qs),
(508,485,o),
(439,535,o),
(390,535,qs),
(337,535,o),
(270,484,o),
(270,439,qs),
(270,391,o),
(318,364,q),
(290,352,o),
(262,303,o),
(262,272,qs),
(262,223,o),
(338,165,o),
(390,165,qs)
);
},
{
closed = 1;
nodes = (
(369,385,o),
(345,409,o),
(345,429,qs),
(345,475,o),
(390,475,qs),
(411,475,o),
(434,451,o),
(434,429,qs),
(434,408,o),
(411,385,o),
(390,385,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 99 values pushed */
59 48 2 2 9 1 76 0 6 0 8 9 6 8 105 14 1 9 0 2 3 9 2 105 11 1 3 13 1 7 5 3 7 105 0 4 4 0 97 0 0 0 39 77 12 1 5 5 1 97 10 1 1 1 40 1 78 66 66 43 43 27 27 16 16 0 0 66 76 66 75 72 70 43 65 43 64 54 52 27 42 27 41 35 33 16 26 16 25 22 20 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2787;
unicode = 10119;
},
{
glyphname = uni2788;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(307,53,o),
(171,131,o),
(92,267,o),
(92,350,qs),
(92,433,o),
(171,569,o),
(307,647,o),
(389,647,qs),
(472,647,o),
(608,569,o),
(686,433,o),
(686,350,qs),
(686,267,o),
(608,131,o),
(472,53,o),
(389,53,qs)
);
},
{
closed = 1;
nodes = (
(453,165,o),
(522,276,o),
(522,361,qs),
(522,434,o),
(455,535,o),
(382,535,qs),
(329,535,o),
(262,463,o),
(262,413,qs),
(262,376,o),
(294,324,o),
(342,297,o),
(367,297,qs),
(394,297,o),
(436,323,o),
(448,343,q),
(446,226,o),
(385,226,qs),
(365,226,o),
(341,248,o),
(336,271,q),
(268,271,l),
(270,228,o),
(332,165,o),
(384,165,qs)
);
},
{
closed = 1;
nodes = (
(363,360,o),
(333,392,o),
(333,416,qs),
(333,440,o),
(364,471,o),
(386,471,qs),
(410,471,o),
(441,439,o),
(441,414,qs),
(441,391,o),
(410,360,o),
(387,360,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
40 1 6 10 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 4 6 5 5 4 114 0 7 0 9 10 7 9 105 14 1 10 0 6 4 10 6 105 0 5 13 1 8 3 5 8 106 0 2 2 0 97 0 0 0 39 77 12 1 3 3 1 97 11 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 4 6 5 6 4 5 128 0 7 0 9 10 7 9 105 14 1 10 0 6 4 10 6 105 0 5 13 1 8 3 5 8 106 0 2 2 0 97 0 0 0 39 77 12 1 3 3 1 97 11 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 40 values pushed */
57 57 32 32 16 16 0 0 57 68 57 67 63 61 32 56 32 55 51 49 44 42 39 37 35 34 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2788;
unicode = 10120;
},
{
glyphname = uni278A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(276,241,l),
(366,241,l),
(366,449,l),
(280,432,l),
(280,491,l),
(398,533,l),
(437,533,l),
(437,241,l),
(518,241,l),
(518,176,l),
(276,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
23 22 21 3 2 3 1 76 4 1 2 3 5 3 2 5 128 0 3 3 0 97 0 0 0 39 77 7 1 5 5 1 97 6 1 1 1 40 1 78 16 16 0 0 16 26 16 26 25 24 20 19 18 17 0 15 0 14 38 8 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278A;
unicode = 10122;
},
{
glyphname = uni278B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(265,228,l),
(370,336,ls),
(402,368,o),
(436,409,o),
(436,429,qs),
(436,451,o),
(411,476,o),
(389,476,qs),
(364,476,o),
(338,443,o),
(338,419,q),
(265,419,l),
(266,479,o),
(335,540,o),
(391,540,qs),
(445,540,o),
(509,481,o),
(509,432,qs),
(509,396,o),
(465,336,o),
(424,296,qs),
(369,241,l),
(517,241,l),
(517,176,l),
(265,176,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
39 1 6 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 5 2 5 4 2 128 0 3 3 0 97 0 0 0 39 77 0 2 2 5 97 0 5 5 36 77 8 1 6 6 1 98 7 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 5 2 5 4 2 128 0 5 0 2 6 5 2 103 0 3 3 0 97 0 0 0 39 77 8 1 6 6 1 98 7 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
16 16 0 0 16 40 16 40 33 31 29 28 26 24 18 17 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278B;
unicode = 10123;
},
{
glyphname = uni278C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(331,158,o),
(259,221,o),
(260,280,q),
(332,280,l),
(332,252,o),
(365,223,o),
(390,223,qs),
(417,223,o),
(447,251,o),
(447,278,qs),
(447,304,o),
(414,332,o),
(390,332,qs),
(370,332,o),
(353,322,q),
(312,369,l),
(414,458,l),
(269,458,l),
(269,522,l),
(508,522,l),
(508,459,l),
(426,389,l),
(474,382,o),
(519,322,o),
(519,279,qs),
(519,224,o),
(448,158,o),
(390,158,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 80 values pushed */
22 1 3 2 27 21 2 4 3 28 1 6 4 3 76 0 3 0 6 5 3 6 103 0 4 0 5 7 4 5 105 0 2 2 0 97 0 0 0 39 77 9 1 7 7 1 97 8 1 1 1 40 1 78 16 16 0 0 16 43 16 42 40 39 37 35 31 29 26 25 24 23 0 15 0 14 38 10 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278C;
unicode = 10124;
},
{
glyphname = uni278D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(402,238,l),
(239,238,l),
(239,299,l),
(357,533,l),
(431,533,l),
(318,303,l),
(408,303,l),
(408,392,l),
(478,392,l),
(478,303,l),
(515,303,l),
(515,238,l),
(478,238,l),
(478,176,l),
(402,176,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
27 1 2 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 4 6 3 6 4 114 5 1 3 2 6 3 2 126 7 1 2 8 8 2 112 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 4 6 3 6 4 3 128 5 1 3 2 6 3 2 126 7 1 2 8 8 2 112 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 4 6 3 6 4 3 128 5 1 3 2 6 3 2 126 7 1 2 8 6 2 8 126 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
16 16 0 0 16 30 16 30 29 28 26 25 24 23 22 21 20 19 18 17 0 15 0 14 38 11 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278D;
unicode = 10125;
},
{
glyphname = uni278E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(336,160,o),
(262,219,o),
(260,269,q),
(333,269,l),
(338,248,o),
(371,225,o),
(392,225,qs),
(418,225,o),
(449,263,o),
(449,290,qs),
(449,317,o),
(419,352,o),
(393,352,qs),
(375,352,o),
(344,332,o),
(337,316,q),
(264,316,l),
(294,524,l),
(498,524,l),
(498,458,l),
(351,458,l),
(336,387,l),
(348,400,o),
(386,413,o),
(406,413,qs),
(462,413,o),
(521,342,o),
(521,291,qs),
(521,233,o),
(449,160,o),
(392,160,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
24 1 6 2 1 76 0 3 0 2 6 3 2 105 0 5 0 8 7 5 8 103 0 6 0 7 9 6 7 105 0 4 4 0 97 0 0 0 39 77 11 1 9 9 1 97 10 1 1 1 40 1 78 16 16 0 0 16 46 16 45 43 42 40 38 34 32 30 29 28 27 26 25 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278E;
unicode = 10126;
},
{
glyphname = uni278F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(412,229,o),
(445,258,o),
(445,284,qs),
(445,310,o),
(413,340,o),
(390,340,qs),
(368,340,o),
(337,309,o),
(337,286,qs),
(337,261,o),
(367,229,o),
(392,229,qs)
);
},
{
closed = 1;
nodes = (
(324,165,o),
(255,264,o),
(255,339,qs),
(255,421,o),
(323,535,o),
(393,535,qs),
(444,535,o),
(508,473,o),
(510,429,q),
(442,429,l),
(432,474,o),
(393,474,qs),
(332,474,o),
(330,357,q),
(340,376,o),
(384,403,o),
(411,403,qs),
(457,403,o),
(516,334,o),
(516,287,qs),
(516,237,o),
(450,165,o),
(396,165,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
36 1 2 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 6 5 4 5 6 114 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 0 4 4 5 97 0 5 5 36 77 11 1 8 8 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 6 5 4 5 6 114 0 5 0 4 2 5 4 105 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 11 1 8 8 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 6 5 4 5 6 4 128 0 5 0 4 2 5 4 105 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 11 1 8 8 1 97 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
28 28 16 16 0 0 28 50 28 49 45 43 41 40 39 37 34 32 16 27 16 26 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278F;
unicode = 10127;
},
{
glyphname = uni2790;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(444,460,l),
(258,460,l),
(258,524,l),
(525,524,l),
(525,471,l),
(385,167,l),
(307,167,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
17 1 3 2 1 76 0 3 2 4 2 3 4 128 0 2 2 0 97 0 0 0 39 77 6 1 4 4 1 98 5 1 1 1 40 1 78 16 16 0 0 16 22 16 22 21 20 19 18 0 15 0 14 38 7 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2790;
unicode = 10128;
},
{
glyphname = uni2791;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(338,165,o),
(262,223,o),
(262,272,qs),
(262,303,o),
(290,352,o),
(318,364,q),
(270,391,o),
(270,439,qs),
(270,484,o),
(337,535,o),
(390,535,qs),
(439,535,o),
(508,485,o),
(508,439,qs),
(508,414,o),
(482,374,o),
(461,364,q),
(489,352,o),
(517,304,o),
(517,272,qs),
(517,221,o),
(443,165,o),
(390,165,qs)
);
},
{
closed = 1;
nodes = (
(415,227,o),
(443,254,o),
(443,279,qs),
(443,304,o),
(415,331,o),
(391,331,qs),
(366,331,o),
(336,305,o),
(336,279,qs),
(336,227,o),
(391,227,qs)
);
},
{
closed = 1;
nodes = (
(411,385,o),
(434,408,o),
(434,429,qs),
(434,451,o),
(411,475,o),
(390,475,qs),
(345,475,o),
(345,429,qs),
(345,409,o),
(369,385,o),
(390,385,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
32 21 2 4 7 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 4 10 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 11 1 7 7 6 97 0 6 6 36 77 9 1 3 3 1 97 8 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 6 11 1 7 4 6 7 105 0 4 10 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
50 50 39 39 16 16 0 0 50 60 50 59 55 53 39 49 39 48 44 42 16 38 16 37 28 26 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2791;
unicode = 10129;
},
{
glyphname = uni2792;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(332,165,o),
(270,228,o),
(268,271,q),
(336,271,l),
(341,248,o),
(365,226,o),
(385,226,qs),
(446,226,o),
(448,343,q),
(436,323,o),
(394,297,o),
(367,297,qs),
(342,297,o),
(294,324,o),
(262,376,o),
(262,413,qs),
(262,463,o),
(329,535,o),
(382,535,qs),
(455,535,o),
(522,434,o),
(522,361,qs),
(522,276,o),
(453,165,o),
(384,165,qs)
);
},
{
closed = 1;
nodes = (
(410,360,o),
(441,391,o),
(441,414,qs),
(441,439,o),
(410,471,o),
(386,471,qs),
(364,471,o),
(333,440,o),
(333,416,qs),
(333,392,o),
(363,360,o),
(387,360,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 86 values pushed */
31 1 3 8 1 76 0 5 3 4 3 5 4 128 0 7 11 1 8 3 7 8 105 0 3 0 4 6 3 4 105 0 2 2 0 97 0 0 0 39 77 10 1 6 6 1 97 9 1 1 1 40 1 78 41 41 16 16 0 0 41 52 41 51 47 45 16 40 16 39 37 36 34 32 29 27 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2792;
unicode = 10130;
},
{
glyphname = uni24EA.solid;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(320,165,o),
(287,216,qs),
(255,264,o),
(255,350,qs),
(255,436,o),
(287,484,qs),
(320,535,o),
(390,535,qs),
(459,535,o),
(492,485,qs),
(524,435,o),
(524,350,qs),
(524,265,o),
(492,215,qs),
(459,165,o),
(390,165,qs)
);
},
{
closed = 1;
nodes = (
(420,232,o),
(433,263,qs),
(448,295,o),
(448,350,qs),
(448,406,o),
(433,437,qs),
(420,468,o),
(390,468,qs),
(360,468,o),
(345,437,qs),
(331,408,o),
(331,350,qs),
(331,292,o),
(345,263,qs),
(360,232,o),
(390,232,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 4 8 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 7 1 3 3 1 97 6 1 1 1 40 1 78 32 32 16 16 0 0 32 47 32 46 40 38 16 31 16 30 24 22 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni24EA.solid;
},
{
glyphname = zero.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,-5,o),
(295,94,o),
(295,177,qs),
(295,259,o),
(231,358,o),
(162,358,qs),
(93,358,o),
(29,258,o),
(29,177,qs),
(29,95,o),
(93,-5,o),
(162,-5,qs)
);
},
{
closed = 1;
nodes = (
(102,61,o),
(102,177,qs),
(102,238,o),
(135,292,o),
(162,292,qs),
(194,292,o),
(222,227,o),
(222,177,qs),
(222,127,o),
(194,61,o),
(162,61,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 0 0 2 3 0 2 105 5 1 3 3 1 97 4 1 1 1 34 1 78 12 12 0 0 12 22 12 21 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = zero.dnom;
},
{
glyphname = one.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,0,l),
(283,64,l),
(202,64,l),
(202,353,l),
(163,353,l),
(44,309,l),
(44,251,l),
(132,272,l),
(132,64,l),
(41,64,l),
(41,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 0 1 133 2 1 0 0 3 96 0 3 3 34 3 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = one.dnom;
},
{
glyphname = two.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,0,l),
(277,0,l),
(277,64,l),
(131,64,l),
(193,126,ls),
(233,167,o),
(268,218,o),
(268,250,qs),
(268,300,o),
(207,358,o),
(153,358,qs),
(99,358,o),
(33,296,o),
(32,240,q),
(103,240,l),
(103,263,o),
(127,295,o),
(152,295,qs),
(173,295,o),
(197,270,o),
(197,249,qs),
(197,232,o),
(167,194,o),
(130,156,qs),
(97,121,l),
(31,52,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
25 1 4 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 3 0 1 114 0 2 0 0 1 2 0 105 0 3 3 4 95 0 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 1 0 3 0 1 3 128 0 2 0 0 1 2 0 105 0 3 3 4 95 0 4 4 34 4 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 22 34 18 38 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = two.dnom;
},
{
glyphname = three.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,-5,o),
(286,59,o),
(286,114,qs),
(286,155,o),
(237,214,o),
(195,221,q),
(275,294,l),
(275,353,l),
(42,353,l),
(42,289,l),
(180,289,l),
(82,201,l),
(123,154,l),
(141,165,o),
(160,165,qs),
(184,165,o),
(216,138,o),
(216,113,qs),
(216,87,o),
(186,59,o),
(160,59,qs),
(133,59,o),
(102,88,o),
(102,111,q),
(31,111,l),
(32,56,o),
(102,-5,o),
(160,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 3 0 3 2 114 0 0 1 3 0 1 126 0 4 0 3 2 4 3 103 0 1 1 5 97 6 1 5 5 34 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 4 0 3 2 4 3 103 0 1 1 5 97 6 1 5 5 34 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 317;
}
);
note = three.dnom;
},
{
glyphname = four.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(249,0,l),
(249,64,l),
(289,64,l),
(289,129,l),
(249,129,l),
(249,218,l),
(180,218,l),
(180,129,l),
(99,129,l),
(210,353,l),
(137,353,l),
(20,120,l),
(20,64,l),
(176,64,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
2 1 0 2 1 76 0 1 3 1 133 4 1 2 5 1 0 6 2 0 104 0 3 3 6 95 0 6 6 34 6 78 17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = four.dnom;
},
{
glyphname = five.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,-5,o),
(283,67,o),
(283,123,qs),
(283,176,o),
(221,246,o),
(167,246,qs),
(131,246,o),
(104,226,q),
(116,288,l),
(260,288,l),
(260,353,l),
(61,353,l),
(30,147,l),
(100,147,l),
(108,165,o),
(137,185,o),
(157,185,qs),
(182,185,o),
(213,151,o),
(213,123,qs),
(213,95,o),
(181,59,o),
(156,59,qs),
(134,59,o),
(102,83,o),
(98,103,q),
(26,103,l),
(30,54,o),
(99,-5,o),
(156,-5,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 4 0 5 6 4 5 103 0 6 0 2 3 6 2 105 0 1 1 7 97 8 1 7 7 34 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 4 0 5 6 4 5 103 0 6 0 2 3 6 2 105 0 1 1 7 97 8 1 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 29 0 28 34 17 17 18 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = five.dnom;
},
{
glyphname = six.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,-5,o),
(283,66,o),
(283,115,qs),
(283,168,o),
(219,231,o),
(175,231,qs),
(154,231,o),
(114,212,o),
(101,196,q),
(103,242,o),
(134,296,o),
(163,296,qs),
(201,296,o),
(209,255,q),
(277,255,l),
(272,301,o),
(211,358,o),
(163,358,qs),
(95,358,o),
(29,245,o),
(29,165,qs),
(29,91,o),
(97,-5,o),
(165,-5,qs)
);
},
{
closed = 1;
nodes = (
(139,59,o),
(108,90,o),
(108,114,qs),
(108,137,o),
(138,168,o),
(161,168,qs),
(184,168,o),
(213,138,o),
(213,113,qs),
(213,89,o),
(185,59,o),
(162,59,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
14 1 5 3 1 76 0 1 2 3 2 1 3 128 0 0 0 2 1 0 2 105 0 3 0 5 6 3 5 105 8 1 6 6 4 97 7 1 4 4 34 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 33 18 36 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = six.dnom;
},
{
glyphname = seven.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,-1,l),
(289,302,l),
(289,352,l),
(29,352,l),
(29,289,l),
(210,289,l),
(74,-1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
4 1 0 1 1 76 0 1 0 0 2 1 0 103 0 2 2 34 2 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = seven.dnom;
},
{
glyphname = eight.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,-5,o),
(276,52,o),
(276,101,qs),
(276,130,o),
(251,177,o),
(226,189,q),
(245,200,o),
(268,239,o),
(268,262,qs),
(268,307,o),
(201,358,o),
(152,358,qs),
(103,358,o),
(36,307,o),
(36,262,qs),
(36,239,o),
(59,201,o),
(79,189,q),
(55,177,o),
(28,131,o),
(28,101,qs),
(28,54,o),
(98,-5,o),
(152,-5,qs)
);
},
{
closed = 1;
nodes = (
(127,58,o),
(100,83,o),
(100,106,qs),
(100,130,o),
(128,156,o),
(153,156,qs),
(178,156,o),
(205,130,o),
(205,106,qs),
(205,83,o),
(177,58,o),
(153,58,qs)
);
},
{
closed = 1;
nodes = (
(132,213,o),
(108,235,o),
(108,254,qs),
(108,275,o),
(131,297,o),
(152,297,qs),
(173,297,o),
(197,274,o),
(197,254,qs),
(197,235,o),
(172,213,o),
(152,213,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
17 5 2 2 5 1 76 0 0 0 4 5 0 4 105 8 1 5 0 2 3 5 2 105 7 1 3 3 1 97 6 1 1 1 34 1 78 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 42 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = eight.dnom;
},
{
glyphname = nine.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,-5,o),
(284,108,o),
(284,188,qs),
(284,262,o),
(215,358,o),
(148,358,qs),
(96,358,o),
(29,287,o),
(29,238,qs),
(29,190,o),
(90,122,o),
(137,122,qs),
(159,122,o),
(199,141,o),
(212,157,q),
(210,111,o),
(179,57,o),
(150,57,qs),
(112,57,o),
(103,99,q),
(36,99,l),
(41,52,o),
(101,-5,o),
(150,-5,qs)
);
},
{
closed = 1;
nodes = (
(129,185,o),
(99,215,o),
(99,240,qs),
(99,264,o),
(128,294,o),
(151,294,qs),
(174,294,o),
(204,263,o),
(204,239,qs),
(204,216,o),
(174,185,o),
(152,185,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
8 1 2 6 1 76 0 0 2 1 2 0 1 128 0 3 0 5 6 3 5 105 8 1 6 0 2 0 6 2 105 0 1 1 4 97 7 1 4 4 34 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 36 33 18 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
note = nine.dnom;
},
{
glyphname = zero.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,342,o),
(295,441,o),
(295,524,qs),
(295,606,o),
(231,705,o),
(162,705,qs),
(93,705,o),
(29,605,o),
(29,524,qs),
(29,442,o),
(93,342,o),
(162,342,qs)
);
},
{
closed = 1;
nodes = (
(102,408,o),
(102,524,qs),
(102,585,o),
(135,639,o),
(162,639,qs),
(194,639,o),
(222,574,o),
(222,524,qs),
(222,474,o),
(194,408,o),
(162,408,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 3 4 1 1 3 1 101 0 2 2 0 97 0 0 0 33 2 78 12 12 0 0 12 22 12 21 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = zero.numr;
},
{
glyphname = one.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,347,l),
(283,411,l),
(202,411,l),
(202,700,l),
(163,700,l),
(44,656,l),
(44,598,l),
(132,619,l),
(132,411,l),
(41,411,l),
(41,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
4 3 2 3 0 1 1 76 2 1 0 0 3 0 3 100 0 1 1 33 1 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = one.numr;
},
{
glyphname = two.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,347,l),
(277,347,l),
(277,411,l),
(131,411,l),
(193,473,ls),
(233,514,o),
(268,565,o),
(268,597,qs),
(268,647,o),
(207,705,o),
(153,705,qs),
(99,705,o),
(33,643,o),
(32,587,q),
(103,587,l),
(103,610,o),
(127,642,o),
(152,642,qs),
(173,642,o),
(197,617,o),
(197,596,qs),
(197,579,o),
(167,541,o),
(130,503,qs),
(97,468,l),
(31,399,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
25 1 4 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 1 0 3 0 1 114 0 3 0 4 3 4 99 0 0 0 2 97 0 2 2 33 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 3 0 1 3 128 0 3 0 4 3 4 99 0 0 0 2 97 0 2 2 33 0 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 22 34 18 38 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = two.numr;
},
{
glyphname = three.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,342,o),
(286,406,o),
(286,461,qs),
(286,502,o),
(237,561,o),
(195,568,q),
(275,641,l),
(275,700,l),
(42,700,l),
(42,636,l),
(180,636,l),
(82,548,l),
(123,501,l),
(141,512,o),
(160,512,qs),
(184,512,o),
(216,485,o),
(216,460,qs),
(216,434,o),
(186,406,o),
(160,406,qs),
(133,406,o),
(102,435,o),
(102,458,q),
(31,458,l),
(32,403,o),
(102,342,o),
(160,342,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 2 3 0 3 2 114 0 0 1 3 0 1 126 0 1 6 1 5 1 5 101 0 3 3 4 95 0 4 4 33 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 1 6 1 5 1 5 101 0 3 3 4 95 0 4 4 33 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 317;
}
);
note = three.numr;
},
{
glyphname = four.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(249,347,l),
(249,411,l),
(289,411,l),
(289,476,l),
(249,476,l),
(249,565,l),
(180,565,l),
(180,476,l),
(99,476,l),
(210,700,l),
(137,700,l),
(20,467,l),
(20,411,l),
(176,411,l),
(176,347,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 3 0 6 3 6 99 0 1 1 33 77 5 1 0 0 2 95 4 1 2 2 36 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
4 1 2 5 1 0 6 2 0 104 0 3 0 6 3 6 99 0 1 1 33 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = four.numr;
},
{
glyphname = five.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,342,o),
(283,414,o),
(283,470,qs),
(283,523,o),
(221,593,o),
(167,593,qs),
(131,593,o),
(104,573,q),
(116,635,l),
(260,635,l),
(260,700,l),
(61,700,l),
(30,494,l),
(100,494,l),
(108,512,o),
(137,532,o),
(157,532,qs),
(182,532,o),
(213,498,o),
(213,470,qs),
(213,442,o),
(181,406,o),
(156,406,qs),
(134,406,o),
(102,430,o),
(98,450,q),
(26,450,l),
(30,401,o),
(99,342,o),
(156,342,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 1 8 1 7 1 7 101 0 5 5 4 95 0 4 4 33 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 1 8 1 7 1 7 101 0 5 5 4 95 0 4 4 33 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 29 0 28 34 17 17 18 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = five.numr;
},
{
glyphname = six.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,342,o),
(283,413,o),
(283,462,qs),
(283,515,o),
(219,578,o),
(175,578,qs),
(154,578,o),
(114,559,o),
(101,543,q),
(103,589,o),
(134,643,o),
(163,643,qs),
(201,643,o),
(209,602,q),
(277,602,l),
(272,648,o),
(211,705,o),
(163,705,qs),
(95,705,o),
(29,592,o),
(29,512,qs),
(29,438,o),
(97,342,o),
(165,342,qs)
);
},
{
closed = 1;
nodes = (
(139,406,o),
(108,437,o),
(108,461,qs),
(108,484,o),
(138,515,o),
(161,515,qs),
(184,515,o),
(213,485,o),
(213,460,qs),
(213,436,o),
(185,406,o),
(162,406,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
14 1 5 3 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 8 1 6 7 1 4 6 4 101 0 2 2 0 97 0 0 0 33 2 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 33 18 36 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = six.numr;
},
{
glyphname = seven.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,346,l),
(289,649,l),
(289,699,l),
(29,699,l),
(29,636,l),
(210,636,l),
(74,346,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 2 0 2 134 0 0 0 1 95 0 1 1 33 0 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = seven.numr;
},
{
glyphname = eight.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,342,o),
(276,399,o),
(276,448,qs),
(276,477,o),
(251,524,o),
(226,536,q),
(245,547,o),
(268,586,o),
(268,609,qs),
(268,654,o),
(201,705,o),
(152,705,qs),
(103,705,o),
(36,654,o),
(36,609,qs),
(36,586,o),
(59,548,o),
(79,536,q),
(55,524,o),
(28,478,o),
(28,448,qs),
(28,401,o),
(98,342,o),
(152,342,qs)
);
},
{
closed = 1;
nodes = (
(127,405,o),
(100,430,o),
(100,453,qs),
(100,477,o),
(128,503,o),
(153,503,qs),
(178,503,o),
(205,477,o),
(205,453,qs),
(205,430,o),
(177,405,o),
(153,405,qs)
);
},
{
closed = 1;
nodes = (
(132,560,o),
(108,582,o),
(108,601,qs),
(108,622,o),
(131,644,o),
(152,644,qs),
(173,644,o),
(197,621,o),
(197,601,qs),
(197,582,o),
(172,560,o),
(152,560,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
17 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 7 1 3 6 1 1 3 1 101 0 4 4 0 97 0 0 0 33 4 78 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 42 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = eight.numr;
},
{
glyphname = nine.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,342,o),
(284,455,o),
(284,535,qs),
(284,609,o),
(215,705,o),
(148,705,qs),
(96,705,o),
(29,634,o),
(29,585,qs),
(29,537,o),
(90,469,o),
(137,469,qs),
(159,469,o),
(199,488,o),
(212,504,q),
(210,458,o),
(179,404,o),
(150,404,qs),
(112,404,o),
(103,446,q),
(36,446,l),
(41,399,o),
(101,342,o),
(150,342,qs)
);
},
{
closed = 1;
nodes = (
(129,532,o),
(99,562,o),
(99,587,qs),
(99,611,o),
(128,641,o),
(151,641,qs),
(174,641,o),
(204,610,o),
(204,586,qs),
(204,563,o),
(174,532,o),
(152,532,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 0 2 1 2 0 1 128 0 1 7 1 4 1 4 101 0 5 5 3 97 0 3 3 33 77 0 2 2 6 97 8 1 6 6 42 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 1 7 1 4 1 4 101 0 5 5 3 97 0 3 3 33 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 36 33 18 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
note = nine.numr;
},
{
glyphname = fraction;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,0,l),
(602,700,l),
(513,700,l),
(-7,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = fraction;
unicode = 8260;
},
{
glyphname = onehalf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(279,347,l),
(279,411,l),
(198,411,l),
(198,700,l),
(159,700,l),
(40,656,l),
(40,598,l),
(128,619,l),
(128,411,l),
(37,411,l),
(37,347,l)
);
},
{
closed = 1;
nodes = (
(179,0,l),
(699,700,l),
(610,700,l),
(90,0,l)
);
},
{
closed = 1;
nodes = (
(723,0,l),
(723,64,l),
(578,64,l),
(640,126,ls),
(680,167,o),
(715,218,o),
(715,250,qs),
(715,300,o),
(653,358,o),
(599,358,qs),
(545,358,o),
(479,296,o),
(478,240,q),
(549,240,l),
(549,263,o),
(573,295,o),
(598,295,qs),
(619,295,o),
(644,270,o),
(644,249,qs),
(644,232,o),
(617,198,o),
(577,156,qs),
(477,52,l),
(477,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 12 values pushed */
4 3 2 3 0 1 15 1 5 9 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
4 1 1 0 1 133 0 7 6 9 6 7 114 2 1 0 0 3 6 0 3 104 0 8 0 6 7 8 6 105 0 9 5 5 9 87 0 9 9 5 95 10 1 5 9 5 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
4 1 1 0 1 133 0 7 6 9 6 7 9 128 2 1 0 0 3 6 0 3 104 0 8 0 6 7 8 6 105 0 9 5 5 9 87 0 9 9 5 95 10 1 5 9 5 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
39 38 37 36 34 18 39 17 17 17 17 20 16 11 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 768;
}
);
note = onehalf;
unicode = 189;
},
{
glyphname = onequarter;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,0,l),
(695,700,l),
(606,700,l),
(86,0,l)
);
},
{
closed = 1;
nodes = (
(279,347,l),
(279,411,l),
(198,411,l),
(198,700,l),
(159,700,l),
(40,656,l),
(40,598,l),
(128,619,l),
(128,411,l),
(37,411,l),
(37,347,l)
);
},
{
closed = 1;
nodes = (
(683,0,l),
(683,64,l),
(722,64,l),
(722,129,l),
(683,129,l),
(683,218,l),
(614,218,l),
(614,129,l),
(526,129,l),
(637,353,l),
(564,353,l),
(447,120,l),
(447,64,l),
(610,64,l),
(610,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 82 values pushed */
8 7 6 3 2 0 17 1 6 8 2 76 3 1 0 2 0 133 0 7 2 5 2 7 5 128 4 1 2 0 5 9 2 5 104 0 9 8 1 9 87 10 1 8 11 1 6 1 8 6 104 0 9 9 1 95 12 1 1 9 1 79 29 28 27 26 25 24 23 22 17 18 17 17 17 20 17 17 16 13 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 763;
}
);
note = onequarter;
unicode = 188;
},
{
glyphname = threequarters;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,0,l),
(701,700,l),
(612,700,l),
(92,0,l)
);
},
{
closed = 1;
nodes = (
(689,0,l),
(689,64,l),
(729,64,l),
(729,129,l),
(689,129,l),
(689,218,l),
(620,218,l),
(620,129,l),
(533,129,l),
(643,353,l),
(570,353,l),
(453,120,l),
(453,64,l),
(616,64,l),
(616,0,l)
);
},
{
closed = 1;
nodes = (
(225,342,o),
(295,407,o),
(295,461,qs),
(295,502,o),
(246,561,o),
(203,568,q),
(284,641,l),
(284,700,l),
(50,700,l),
(50,636,l),
(189,636,l),
(91,548,l),
(131,501,l),
(150,512,o),
(168,512,qs),
(193,512,o),
(225,485,o),
(225,460,qs),
(225,434,o),
(195,406,o),
(168,406,qs),
(142,406,o),
(111,435,o),
(111,458,q),
(40,458,l),
(41,403,o),
(111,342,o),
(168,342,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 19 values pushed */
39 1 12 0 40 34 2 11 12 33 1 9 11 6 1 2 4 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
0 11 12 9 12 11 114 0 9 10 12 9 10 126 0 3 10 14 10 3 14 128 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 105 0 5 4 1 5 87 6 1 4 7 1 2 1 4 2 104 0 5 5 1 95 8 1 1 5 1 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 68 values pushed */
0 11 12 9 12 11 9 128 0 9 10 12 9 10 126 0 3 10 14 10 3 14 128 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 105 0 5 4 1 5 87 6 1 4 7 1 2 1 4 2 104 0 5 5 1 95 8 1 1 5 1 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
19 19 19 46 19 45 38 37 36 35 32 30 26 24 22 21 17 17 17 17 17 18 17 17 16 16 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 769;
}
);
note = threequarters;
unicode = 190;
},
{
glyphname = oneeighth;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,-1,l),
(695,699,l),
(606,699,l),
(87,-1,l)
);
},
{
closed = 1;
nodes = (
(279,347,l),
(279,411,l),
(198,411,l),
(198,700,l),
(159,700,l),
(40,656,l),
(40,598,l),
(128,619,l),
(128,411,l),
(37,411,l),
(37,347,l)
);
},
{
closed = 1;
nodes = (
(569,58,o),
(541,83,o),
(541,106,qs),
(541,130,o),
(569,156,o),
(594,156,qs),
(619,156,o),
(647,130,o),
(647,106,qs),
(647,83,o),
(618,58,o),
(594,58,qs)
);
},
{
closed = 1;
nodes = (
(645,-5,o),
(718,52,o),
(718,101,qs),
(718,130,o),
(692,177,o),
(667,189,q),
(687,200,o),
(710,240,o),
(710,262,qs),
(710,307,o),
(643,358,o),
(594,358,qs),
(545,358,o),
(478,307,o),
(478,262,qs),
(478,239,o),
(500,201,o),
(520,189,q),
(496,177,o),
(470,130,o),
(470,101,qs),
(470,54,o),
(540,-5,o),
(594,-5,qs)
);
},
{
closed = 1;
nodes = (
(574,213,o),
(550,235,o),
(550,254,qs),
(550,275,o),
(573,297,o),
(594,297,qs),
(615,297,o),
(638,274,o),
(638,254,qs),
(638,235,o),
(614,213,o),
(594,213,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 91 values pushed */
8 7 6 3 2 0 44 32 2 6 11 2 76 4 1 2 0 5 10 2 5 104 0 8 0 10 11 8 10 106 14 1 11 0 6 7 11 6 105 3 1 0 0 33 77 12 1 7 7 1 97 13 9 2 1 1 34 1 78 51 51 27 27 15 15 51 62 51 61 57 55 27 50 27 49 39 37 15 26 15 25 37 17 17 20 17 17 16 15 8 29
CALL[ ]	/* CallFunction */";
};
width = 764;
}
);
note = oneeighth;
unicode = 8539;
},
{
glyphname = threeeighths;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,-1,l),
(694,699,l),
(605,699,l),
(85,-1,l)
);
},
{
closed = 1;
nodes = (
(225,342,o),
(294,406,o),
(294,461,qs),
(294,502,o),
(246,561,o),
(203,568,q),
(283,641,l),
(283,700,l),
(50,700,l),
(50,636,l),
(188,636,l),
(90,548,l),
(131,501,l),
(150,512,o),
(168,512,qs),
(193,512,o),
(224,485,o),
(224,460,qs),
(224,434,o),
(194,406,o),
(168,406,qs),
(142,406,o),
(111,435,o),
(111,458,q),
(40,458,l),
(41,403,o),
(110,342,o),
(168,342,qs)
);
},
{
closed = 1;
nodes = (
(569,58,o),
(541,83,o),
(541,106,qs),
(541,130,o),
(569,156,o),
(594,156,qs),
(619,156,o),
(647,130,o),
(647,106,qs),
(647,83,o),
(618,58,o),
(594,58,qs)
);
},
{
closed = 1;
nodes = (
(645,-5,o),
(718,52,o),
(718,101,qs),
(718,130,o),
(692,177,o),
(667,189,q),
(687,200,o),
(710,240,o),
(710,262,qs),
(710,307,o),
(643,358,o),
(594,358,qs),
(545,358,o),
(478,307,o),
(478,262,qs),
(478,239,o),
(500,201,o),
(520,189,q),
(496,177,o),
(470,130,o),
(470,101,qs),
(470,54,o),
(540,-5,o),
(594,-5,qs)
);
},
{
closed = 1;
nodes = (
(574,213,o),
(550,235,o),
(550,254,qs),
(550,275,o),
(573,297,o),
(594,297,qs),
(615,297,o),
(638,274,o),
(638,254,qs),
(638,235,o),
(614,213,o),
(594,213,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
24 1 5 0 25 19 2 4 5 18 1 2 4 61 49 2 8 13 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
0 4 5 2 5 4 114 0 2 3 5 2 3 126 0 3 14 1 7 12 3 7 105 0 10 0 12 13 10 12 106 17 1 13 0 8 9 13 8 105 0 5 5 0 95 6 1 0 0 33 77 15 1 9 9 1 97 16 11 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 66 values pushed */
0 4 5 2 5 4 2 128 0 2 3 5 2 3 126 0 3 14 1 7 12 3 7 105 0 10 0 12 13 10 12 106 17 1 13 0 8 9 13 8 105 0 5 5 0 95 6 1 0 0 33 77 15 1 9 9 1 97 16 11 2 1 1 34 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 40 values pushed */
68 68 44 44 32 32 4 4 68 79 68 78 74 72 44 67 44 66 56 54 32 43 32 42 38 36 4 31 4 30 17 19 36 34 19 17 16 18 8 29
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = threeeighths;
unicode = 8540;
},
{
glyphname = fiveeighths;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(178,-1,l),
(698,699,l),
(608,699,l),
(89,-1,l)
);
},
{
closed = 1;
nodes = (
(227,342,o),
(298,414,o),
(298,470,qs),
(298,523,o),
(236,593,o),
(182,593,qs),
(146,593,o),
(119,573,q),
(131,635,l),
(275,635,l),
(275,700,l),
(76,700,l),
(45,494,l),
(114,494,l),
(131,532,o),
(172,532,qs),
(197,532,o),
(228,498,o),
(228,470,qs),
(228,442,o),
(196,406,o),
(171,406,qs),
(149,406,o),
(117,430,o),
(112,450,q),
(41,450,l),
(45,401,o),
(114,342,o),
(171,342,qs)
);
},
{
closed = 1;
nodes = (
(573,58,o),
(545,83,o),
(545,106,qs),
(545,130,o),
(573,156,o),
(598,156,qs),
(623,156,o),
(651,130,o),
(651,106,qs),
(651,83,o),
(622,58,o),
(598,58,qs)
);
},
{
closed = 1;
nodes = (
(649,-5,o),
(722,53,o),
(722,101,qs),
(722,130,o),
(696,177,o),
(671,189,q),
(691,200,o),
(714,240,o),
(714,262,qs),
(714,307,o),
(647,358,o),
(598,358,qs),
(549,358,o),
(482,307,o),
(482,262,qs),
(482,239,o),
(504,201,o),
(524,189,q),
(500,177,o),
(474,130,o),
(474,101,qs),
(474,54,o),
(544,-5,o),
(598,-5,qs)
);
},
{
closed = 1;
nodes = (
(578,213,o),
(554,235,o),
(554,254,qs),
(554,275,o),
(577,297,o),
(598,297,qs),
(619,297,o),
(642,274,o),
(642,254,qs),
(642,235,o),
(618,213,o),
(598,213,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
24 1 4 8 62 50 2 10 15 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
0 5 4 2 7 5 114 0 2 3 4 2 3 126 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 105 0 12 0 14 15 12 14 106 19 1 15 0 10 11 15 10 105 0 7 7 0 95 6 1 0 0 33 77 17 1 11 11 1 97 18 13 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 74 values pushed */
0 5 4 2 4 5 2 128 0 2 3 4 2 3 126 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 105 0 12 0 14 15 12 14 106 19 1 15 0 10 11 15 10 105 0 7 7 0 95 6 1 0 0 33 77 17 1 11 11 1 97 18 13 2 1 1 34 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 42 values pushed */
69 69 45 45 33 33 4 4 69 80 69 79 75 73 45 68 45 67 57 55 33 44 33 43 39 37 4 32 4 31 34 17 17 17 36 34 19 17 16 20 8 31
CALL[ ]	/* CallFunction */";
};
width = 765;
}
);
note = fiveeighths;
unicode = 8541;
},
{
glyphname = seveneighths;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(145,-1,l),
(665,699,l),
(576,699,l),
(56,-1,l)
);
},
{
closed = 1;
nodes = (
(552,58,o),
(524,83,o),
(524,106,qs),
(524,130,o),
(552,156,o),
(577,156,qs),
(602,156,o),
(629,130,o),
(629,106,qs),
(629,83,o),
(601,58,o),
(577,58,qs)
);
},
{
closed = 1;
nodes = (
(175,346,l),
(314,649,l),
(314,699,l),
(54,699,l),
(54,636,l),
(235,636,l),
(99,346,l)
);
},
{
closed = 1;
nodes = (
(628,-5,o),
(701,52,o),
(701,101,qs),
(701,130,o),
(675,177,o),
(650,189,q),
(670,200,o),
(693,240,o),
(693,262,qs),
(693,307,o),
(626,358,o),
(577,358,qs),
(528,358,o),
(461,307,o),
(461,262,qs),
(461,239,o),
(483,201,o),
(503,189,q),
(479,177,o),
(452,131,o),
(452,101,qs),
(452,54,o),
(523,-5,o),
(577,-5,qs)
);
},
{
closed = 1;
nodes = (
(557,213,o),
(532,235,o),
(532,254,qs),
(532,275,o),
(556,297,o),
(577,297,qs),
(597,297,o),
(621,274,o),
(621,254,qs),
(621,235,o),
(597,213,o),
(577,213,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 95 values pushed */
20 1 4 0 40 28 2 2 10 2 76 0 6 7 9 7 6 9 128 0 7 0 9 10 7 9 106 13 1 10 0 2 3 10 2 105 0 4 4 0 95 5 1 0 0 33 77 11 1 3 3 1 97 12 8 2 1 1 34 1 78 47 47 23 23 4 4 47 58 47 57 53 51 23 46 23 45 35 33 22 21 19 18 17 16 4 15 4 14 37 17 16 14 8 25
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = seveneighths;
unicode = 8542;
},
{
glyphname = uni2080;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,-5,o),
(295,94,o),
(295,177,qs),
(295,259,o),
(231,358,o),
(162,358,qs),
(93,358,o),
(29,258,o),
(29,177,qs),
(29,95,o),
(93,-5,o),
(162,-5,qs)
);
},
{
closed = 1;
nodes = (
(102,61,o),
(102,177,qs),
(102,238,o),
(135,292,o),
(162,292,qs),
(194,292,o),
(222,227,o),
(222,177,qs),
(222,127,o),
(194,61,o),
(162,61,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 51 77 5 1 3 3 1 97 4 1 1 1 52 1 78 12 12 0 0 12 22 12 21 18 16 0 11 0 10 36 6 9 23
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = uni2080;
unicode = 8320;
},
{
glyphname = uni2081;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,0,l),
(283,64,l),
(202,64,l),
(202,353,l),
(163,353,l),
(44,309,l),
(44,251,l),
(132,272,l),
(132,64,l),
(41,64,l),
(41,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 1 49 77 2 1 0 0 3 96 0 3 3 50 3 78 17 17 20 16 4 9 26
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = uni2081;
unicode = 8321;
},
{
glyphname = uni2082;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,0,l),
(277,0,l),
(277,64,l),
(131,64,l),
(193,126,ls),
(233,167,o),
(268,218,o),
(268,250,qs),
(268,300,o),
(207,358,o),
(153,358,qs),
(99,358,o),
(33,296,o),
(32,240,q),
(103,240,l),
(103,263,o),
(127,295,o),
(152,295,qs),
(173,295,o),
(197,270,o),
(197,249,qs),
(197,232,o),
(167,194,o),
(130,156,qs),
(97,121,l),
(31,52,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
25 1 4 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 1 0 3 0 1 114 0 0 0 2 97 0 2 2 51 77 0 3 3 4 95 0 4 4 50 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 51 77 0 3 3 4 95 0 4 4 50 4 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 22 34 18 38 5 9 27
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = uni2082;
unicode = 8322;
},
{
glyphname = uni2083;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,-5,o),
(286,59,o),
(286,114,qs),
(286,155,o),
(237,214,o),
(195,221,q),
(275,294,l),
(275,353,l),
(42,353,l),
(42,289,l),
(180,289,l),
(82,201,l),
(123,154,l),
(141,165,o),
(160,165,qs),
(184,165,o),
(216,138,o),
(216,113,qs),
(216,87,o),
(186,59,o),
(160,59,qs),
(133,59,o),
(102,88,o),
(102,111,q),
(31,111,l),
(32,56,o),
(102,-5,o),
(160,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 3 0 3 2 114 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 49 77 0 1 1 5 97 6 1 5 5 52 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 49 77 0 1 1 5 97 6 1 5 5 52 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 9 27
CALL[ ]	/* CallFunction */";
};
width = 317;
}
);
note = uni2083;
unicode = 8323;
},
{
glyphname = uni2084;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(249,0,l),
(249,64,l),
(289,64,l),
(289,129,l),
(249,129,l),
(249,218,l),
(180,218,l),
(180,129,l),
(99,129,l),
(210,353,l),
(137,353,l),
(20,120,l),
(20,64,l),
(176,64,l),
(176,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 1 2 2 3 114 4 1 2 5 1 0 6 2 0 104 0 1 1 49 77 0 6 6 50 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 49 77 0 6 6 50 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 9 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = uni2084;
unicode = 8324;
},
{
glyphname = uni2085;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,-5,o),
(283,67,o),
(283,123,qs),
(283,176,o),
(221,246,o),
(167,246,qs),
(131,246,o),
(104,226,q),
(116,288,l),
(260,288,l),
(260,353,l),
(61,353,l),
(30,147,l),
(100,147,l),
(108,165,o),
(137,185,o),
(157,185,qs),
(182,185,o),
(213,151,o),
(213,123,qs),
(213,95,o),
(181,59,o),
(156,59,qs),
(134,59,o),
(102,83,o),
(98,103,q),
(26,103,l),
(30,54,o),
(99,-5,o),
(156,-5,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 49 77 0 1 1 7 97 8 1 7 7 52 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 49 77 0 1 1 7 97 8 1 7 7 52 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 29 0 28 34 17 17 18 36 34 18 9 9 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2085;
unicode = 8325;
},
{
glyphname = uni2086;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,-5,o),
(283,66,o),
(283,115,qs),
(283,168,o),
(219,231,o),
(175,231,qs),
(154,231,o),
(114,212,o),
(101,196,q),
(103,242,o),
(134,296,o),
(163,296,qs),
(201,296,o),
(209,255,q),
(277,255,l),
(272,301,o),
(211,358,o),
(163,358,qs),
(95,358,o),
(29,245,o),
(29,165,qs),
(29,91,o),
(97,-5,o),
(165,-5,qs)
);
},
{
closed = 1;
nodes = (
(139,59,o),
(108,90,o),
(108,114,qs),
(108,137,o),
(138,168,o),
(161,168,qs),
(184,168,o),
(213,138,o),
(213,113,qs),
(213,89,o),
(185,59,o),
(162,59,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
14 1 5 3 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 51 77 8 1 6 6 4 97 7 1 4 4 52 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 33 18 36 9 9 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2086;
unicode = 8326;
},
{
glyphname = uni2087;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,-1,l),
(289,302,l),
(289,352,l),
(29,352,l),
(29,289,l),
(210,289,l),
(74,-1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 0 0 1 95 0 1 1 49 77 0 2 2 50 2 78 18 17 16 3 9 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = uni2087;
unicode = 8327;
},
{
glyphname = uni2088;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,-5,o),
(276,52,o),
(276,101,qs),
(276,130,o),
(251,177,o),
(226,189,q),
(245,200,o),
(268,239,o),
(268,262,qs),
(268,307,o),
(201,358,o),
(152,358,qs),
(103,358,o),
(36,307,o),
(36,262,qs),
(36,239,o),
(59,201,o),
(79,189,q),
(55,177,o),
(28,131,o),
(28,101,qs),
(28,54,o),
(98,-5,o),
(152,-5,qs)
);
},
{
closed = 1;
nodes = (
(127,58,o),
(100,83,o),
(100,106,qs),
(100,130,o),
(128,156,o),
(153,156,qs),
(178,156,o),
(205,130,o),
(205,106,qs),
(205,83,o),
(177,58,o),
(153,58,qs)
);
},
{
closed = 1;
nodes = (
(132,213,o),
(108,235,o),
(108,254,qs),
(108,275,o),
(131,297,o),
(152,297,qs),
(173,297,o),
(197,274,o),
(197,254,qs),
(197,235,o),
(172,213,o),
(152,213,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
17 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 51 77 7 1 3 3 1 97 6 1 1 1 52 1 78 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 42 9 9 23
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = uni2088;
unicode = 8328;
},
{
glyphname = uni2089;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,-5,o),
(284,108,o),
(284,188,qs),
(284,262,o),
(215,358,o),
(148,358,qs),
(96,358,o),
(29,287,o),
(29,238,qs),
(29,190,o),
(90,122,o),
(137,122,qs),
(159,122,o),
(199,141,o),
(212,157,q),
(210,111,o),
(179,57,o),
(150,57,qs),
(112,57,o),
(103,99,q),
(36,99,l),
(41,52,o),
(101,-5,o),
(150,-5,qs)
);
},
{
closed = 1;
nodes = (
(129,185,o),
(99,215,o),
(99,240,qs),
(99,264,o),
(128,294,o),
(151,294,qs),
(174,294,o),
(204,263,o),
(204,239,qs),
(204,216,o),
(174,185,o),
(152,185,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
8 1 2 6 1 76 0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 51 77 0 1 1 4 97 7 1 4 4 52 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 36 33 18 9 9 26
CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
note = uni2089;
unicode = 8329;
},
{
glyphname = uni2070;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,342,o),
(295,441,o),
(295,524,qs),
(295,606,o),
(231,705,o),
(162,705,qs),
(93,705,o),
(29,605,o),
(29,524,qs),
(29,442,o),
(93,342,o),
(162,342,qs)
);
},
{
closed = 1;
nodes = (
(102,408,o),
(102,524,qs),
(102,585,o),
(135,639,o),
(162,639,qs),
(194,639,o),
(222,574,o),
(222,524,qs),
(222,474,o),
(194,408,o),
(162,408,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 59 77 5 1 3 3 1 97 4 1 1 1 60 1 78 12 12 0 0 12 22 12 21 18 16 0 11 0 10 36 6 10 23
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = uni2070;
unicode = 8304;
},
{
glyphname = uni00B9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,347,l),
(283,411,l),
(202,411,l),
(202,700,l),
(163,700,l),
(44,656,l),
(44,598,l),
(132,619,l),
(132,411,l),
(41,411,l),
(41,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 1 57 77 2 1 0 0 3 96 0 3 3 58 3 78 17 17 20 16 4 10 26
CALL[ ]	/* CallFunction */";
};
width = 309;
}
);
note = uni00B9;
unicode = 185;
},
{
glyphname = uni00B2;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,347,l),
(277,347,l),
(277,411,l),
(131,411,l),
(193,473,ls),
(233,514,o),
(268,565,o),
(268,597,qs),
(268,647,o),
(207,705,o),
(153,705,qs),
(99,705,o),
(33,643,o),
(32,587,q),
(103,587,l),
(103,610,o),
(127,642,o),
(152,642,qs),
(173,642,o),
(197,617,o),
(197,596,qs),
(197,579,o),
(167,541,o),
(130,503,qs),
(97,468,l),
(31,399,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
25 1 4 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 1 0 3 0 1 114 0 0 0 2 97 0 2 2 59 77 0 3 3 4 95 0 4 4 58 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 59 77 0 3 3 4 95 0 4 4 58 4 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 22 34 18 38 5 10 27
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = uni00B2;
unicode = 178;
},
{
glyphname = uni00B3;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,342,o),
(286,406,o),
(286,461,qs),
(286,502,o),
(237,561,o),
(195,568,q),
(275,641,l),
(275,700,l),
(42,700,l),
(42,636,l),
(180,636,l),
(82,548,l),
(123,501,l),
(141,512,o),
(160,512,qs),
(184,512,o),
(216,485,o),
(216,460,qs),
(216,434,o),
(186,406,o),
(160,406,qs),
(133,406,o),
(102,435,o),
(102,458,q),
(31,458,l),
(32,403,o),
(102,342,o),
(160,342,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 3 0 3 2 114 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 57 77 0 1 1 5 97 6 1 5 5 60 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 57 77 0 1 1 5 97 6 1 5 5 60 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 10 27
CALL[ ]	/* CallFunction */";
};
width = 317;
}
);
note = uni00B3;
unicode = 179;
},
{
glyphname = uni2074;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(248,347,l),
(248,411,l),
(289,411,l),
(289,475,l),
(248,475,l),
(248,564,l),
(181,564,l),
(181,475,l),
(98,475,l),
(209,700,l),
(137,700,l),
(20,467,l),
(20,411,l),
(177,411,l),
(177,347,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 1 2 2 3 114 4 1 2 5 1 0 6 2 0 104 0 1 1 57 77 0 6 6 58 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 57 77 0 6 6 58 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 10 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = uni2074;
unicode = 8308;
},
{
glyphname = uni2075;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,342,o),
(283,414,o),
(283,470,qs),
(283,523,o),
(221,593,o),
(167,593,qs),
(131,593,o),
(104,573,q),
(116,635,l),
(260,635,l),
(260,700,l),
(61,700,l),
(30,494,l),
(100,494,l),
(108,512,o),
(137,532,o),
(157,532,qs),
(182,532,o),
(213,498,o),
(213,470,qs),
(213,442,o),
(181,406,o),
(156,406,qs),
(134,406,o),
(102,430,o),
(98,450,q),
(26,450,l),
(30,401,o),
(99,342,o),
(156,342,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 57 77 0 1 1 7 97 8 1 7 7 60 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 57 77 0 1 1 7 97 8 1 7 7 60 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 29 0 28 34 17 17 18 36 34 18 9 10 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2075;
unicode = 8309;
},
{
glyphname = uni2076;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,342,o),
(283,413,o),
(283,462,qs),
(283,515,o),
(219,578,o),
(175,578,qs),
(154,578,o),
(114,559,o),
(101,543,q),
(103,589,o),
(134,643,o),
(163,643,qs),
(201,643,o),
(209,602,q),
(277,602,l),
(272,648,o),
(211,705,o),
(163,705,qs),
(95,705,o),
(29,592,o),
(29,512,qs),
(29,438,o),
(97,342,o),
(165,342,qs)
);
},
{
closed = 1;
nodes = (
(139,406,o),
(108,437,o),
(108,461,qs),
(108,484,o),
(138,515,o),
(161,515,qs),
(184,515,o),
(213,485,o),
(213,460,qs),
(213,436,o),
(185,406,o),
(162,406,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
14 1 5 3 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 59 77 8 1 6 6 4 97 7 1 4 4 60 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 33 18 36 9 10 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2076;
unicode = 8310;
},
{
glyphname = uni2077;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,346,l),
(289,649,l),
(289,699,l),
(29,699,l),
(29,636,l),
(210,636,l),
(74,346,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 0 0 1 95 0 1 1 57 77 0 2 2 58 2 78 18 17 16 3 10 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = uni2077;
unicode = 8311;
},
{
glyphname = uni2078;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,342,o),
(276,399,o),
(276,448,qs),
(276,477,o),
(251,524,o),
(226,536,q),
(245,547,o),
(268,586,o),
(268,609,qs),
(268,654,o),
(201,705,o),
(152,705,qs),
(103,705,o),
(36,654,o),
(36,609,qs),
(36,586,o),
(59,548,o),
(79,536,q),
(55,524,o),
(28,478,o),
(28,448,qs),
(28,401,o),
(98,342,o),
(152,342,qs)
);
},
{
closed = 1;
nodes = (
(127,405,o),
(100,430,o),
(100,453,qs),
(100,477,o),
(128,503,o),
(153,503,qs),
(178,503,o),
(205,477,o),
(205,453,qs),
(205,430,o),
(177,405,o),
(153,405,qs)
);
},
{
closed = 1;
nodes = (
(132,560,o),
(108,582,o),
(108,601,qs),
(108,622,o),
(131,644,o),
(152,644,qs),
(173,644,o),
(197,621,o),
(197,601,qs),
(197,582,o),
(172,560,o),
(152,560,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
17 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 59 77 7 1 3 3 1 97 6 1 1 1 60 1 78 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 42 9 10 23
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = uni2078;
unicode = 8312;
},
{
glyphname = uni2079;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,342,o),
(284,455,o),
(284,535,qs),
(284,609,o),
(215,705,o),
(148,705,qs),
(96,705,o),
(29,634,o),
(29,585,qs),
(29,537,o),
(90,469,o),
(137,469,qs),
(159,469,o),
(199,488,o),
(212,504,q),
(210,458,o),
(179,404,o),
(150,404,qs),
(112,404,o),
(103,446,q),
(36,446,l),
(41,399,o),
(101,342,o),
(150,342,qs)
);
},
{
closed = 1;
nodes = (
(129,532,o),
(99,562,o),
(99,587,qs),
(99,611,o),
(128,641,o),
(151,641,qs),
(174,641,o),
(204,610,o),
(204,586,qs),
(204,563,o),
(174,532,o),
(152,532,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
8 1 2 6 1 76 0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 59 77 0 1 1 4 97 7 1 4 4 60 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 36 33 18 9 10 26
CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
note = uni2079;
unicode = 8313;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 247;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = period;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(139,-10,o),
(182,34,o),
(182,65,qs),
(182,96,o),
(139,139,o),
(108,139,qs),
(77,139,o),
(33,96,o),
(33,65,qs),
(33,34,o),
(77,-10,o),
(108,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 97 2 1 1 1 40 1 78 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 216;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
kernLeft = comma;
kernRight = comma;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(85,-117,l),
(179,123,l),
(67,123,l),
(10,-117,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 213;
}
);
note = comma;
unicode = 44;
},
{
glyphname = colon;
kernLeft = colon;
kernRight = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(144,362,o),
(187,405,o),
(187,436,qs),
(187,467,o),
(144,511,o),
(113,511,qs),
(81,511,o),
(38,468,o),
(38,436,qs),
(38,405,o),
(81,362,o),
(113,362,qs)
);
},
{
closed = 1;
nodes = (
(144,-10,o),
(187,34,o),
(187,65,qs),
(187,96,o),
(144,139,o),
(113,139,qs),
(81,139,o),
(38,96,o),
(38,65,qs),
(38,33,o),
(81,-10,o),
(113,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
4 1 1 1 0 97 0 0 0 42 77 0 2 2 3 97 5 1 3 3 40 3 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 228;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
kernLeft = semicolon;
kernRight = semicolon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(99,-117,l),
(193,123,l),
(81,123,l),
(24,-117,l)
);
},
{
closed = 1;
nodes = (
(168,362,o),
(211,405,o),
(211,436,qs),
(211,467,o),
(168,511,o),
(137,511,qs),
(106,511,o),
(62,468,o),
(62,436,qs),
(62,405,o),
(106,362,o),
(137,362,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 0 1 99 4 1 3 3 2 97 0 2 2 42 3 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 252;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = ellipsis;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(563,-10,o),
(606,34,o),
(606,65,qs),
(606,96,o),
(563,139,o),
(532,139,qs),
(501,139,o),
(457,96,o),
(457,65,qs),
(457,34,o),
(501,-10,o),
(532,-10,qs)
);
},
{
closed = 1;
nodes = (
(146,-10,o),
(189,34,o),
(189,65,qs),
(189,96,o),
(146,139,o),
(115,139,qs),
(83,139,o),
(40,96,o),
(40,65,qs),
(40,33,o),
(83,-10,o),
(115,-10,qs)
);
},
{
closed = 1;
nodes = (
(355,-10,o),
(398,34,o),
(398,65,qs),
(398,96,o),
(354,139,o),
(323,139,qs),
(292,139,o),
(249,96,o),
(249,65,qs),
(249,33,o),
(292,-10,o),
(323,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
4 2 2 0 0 1 97 8 5 7 3 6 5 1 1 40 1 78 24 24 12 12 0 0 24 35 24 34 30 28 12 23 12 22 18 16 0 11 0 10 36 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 646;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,212,l),
(196,700,l),
(74,700,l),
(87,212,l)
);
},
{
closed = 1;
nodes = (
(168,-10,o),
(211,34,o),
(211,65,qs),
(211,96,o),
(168,139,o),
(137,139,qs),
(106,139,o),
(62,96,o),
(62,65,qs),
(62,34,o),
(106,-10,o),
(137,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 1 0 95 0 0 0 33 77 0 2 2 3 97 4 1 3 3 40 3 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 273;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = exclamdown;
kernLeft = exclamdown;
kernRight = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(199,-140,l),
(186,348,l),
(90,348,l),
(78,-140,l)
);
},
{
closed = 1;
nodes = (
(171,421,o),
(215,464,o),
(215,495,qs),
(215,526,o),
(171,569,o),
(140,569,qs),
(109,569,o),
(66,526,o),
(66,495,qs),
(66,464,o),
(109,421,o),
(140,421,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 2 4 1 3 0 2 3 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = question;
kernLeft = question;
kernRight = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(241,211,l),
(244,298,l),
(317,300,o),
(368,321,qs),
(423,343,o),
(483,435,o),
(483,504,qs),
(483,569,o),
(454,616,qs),
(425,663,o),
(323,712,o),
(256,712,qs),
(188,712,o),
(136,686,qs),
(86,660,o),
(31,567,o),
(32,507,q),
(139,507,l),
(139,558,o),
(201,618,o),
(256,618,qs),
(309,618,o),
(373,557,o),
(373,504,qs),
(373,449,o),
(346,422,qs),
(321,395,o),
(237,374,o),
(179,374,qs),
(138,374,l),
(142,211,l)
);
},
{
closed = 1;
nodes = (
(223,-10,o),
(266,34,o),
(266,65,qs),
(266,96,o),
(223,139,o),
(192,139,qs),
(160,139,o),
(117,96,o),
(117,65,qs),
(117,33,o),
(160,-10,o),
(192,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
0 2 1 0 1 2 0 128 0 4 0 5 0 4 5 128 0 0 0 5 6 0 5 103 0 1 1 3 97 0 3 3 39 77 0 6 6 7 97 8 1 7 7 40 7 78 31 31 31 42 31 41 37 17 24 36 18 38 32 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 523;
}
);
note = question;
unicode = 63;
},
{
glyphname = questiondown;
kernLeft = questiondown;
kernRight = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(336,-159,o),
(387,-132,qs),
(438,-106,o),
(492,-13,o),
(492,47,q),
(384,47,l),
(384,-5,o),
(323,-64,o),
(268,-64,qs),
(214,-64,o),
(150,-3,o),
(150,49,qs),
(150,104,o),
(177,132,qs),
(202,158,o),
(286,179,o),
(345,179,qs),
(386,179,l),
(382,343,l),
(282,343,l),
(279,255,l),
(208,253,o),
(155,233,qs),
(100,211,o),
(41,119,o),
(41,50,qs),
(41,-16,o),
(69,-63,qs),
(98,-109,o),
(201,-159,o),
(267,-159,qs)
);
},
{
closed = 1;
nodes = (
(363,414,o),
(406,457,o),
(406,489,qs),
(406,520,o),
(363,563,o),
(332,563,qs),
(301,563,o),
(257,520,o),
(257,489,qs),
(257,458,o),
(301,414,o),
(332,414,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
0 0 1 2 1 0 2 128 0 4 2 3 2 4 3 128 0 6 9 1 7 1 6 7 105 0 1 0 2 4 1 2 105 0 3 5 5 3 89 0 3 3 5 98 8 1 5 3 5 82 31 31 0 0 31 42 31 41 37 35 0 30 0 29 18 38 33 17 24 10 8 27
CALL[ ]	/* CallFunction */";
};
width = 523;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(144,265,o),
(187,308,o),
(187,339,qs),
(187,370,o),
(144,414,o),
(113,414,qs),
(81,414,o),
(38,371,o),
(38,339,qs),
(38,308,o),
(81,265,o),
(113,265,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 225;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(240,203,o),
(316,278,o),
(316,333,qs),
(316,388,o),
(240,464,o),
(185,464,qs),
(150,464,o),
(91,429,o),
(56,369,o),
(56,333,qs),
(56,298,o),
(91,238,o),
(150,203,o),
(185,203,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 13 0 12 38 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = asterisk;
kernLeft = asterisk;
kernRight = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,359,l),
(283,484,l),
(393,422,l),
(429,485,l),
(320,548,l),
(429,610,l),
(393,673,l),
(283,610,l),
(283,736,l),
(211,736,l),
(211,610,l),
(102,673,l),
(66,610,l),
(174,548,l),
(66,485,l),
(102,422,l),
(211,484,l),
(211,359,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
15 14 13 12 11 10 9 6 5 4 3 2 1 0 14 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 24 23 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 492;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(249,0,l),
(288,182,l),
(486,182,l),
(446,0,l),
(554,0,l),
(593,182,l),
(752,182,l),
(752,284,l),
(615,284,l),
(647,436,l),
(802,436,l),
(802,537,l),
(669,537,l),
(707,717,l),
(600,717,l),
(562,537,l),
(363,537,l),
(402,717,l),
(295,717,l),
(257,537,l),
(87,537,l),
(87,436,l),
(235,436,l),
(203,284,l),
(37,284,l),
(37,182,l),
(181,182,l),
(142,0,l)
);
},
{
closed = 1;
nodes = (
(342,436,l),
(540,436,l),
(507,284,l),
(309,284,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 5 2 3 14 8 2 2 1 3 2 104 16 15 9 3 1 12 10 2 0 11 1 0 103 6 1 4 4 33 77 13 1 11 11 34 11 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
6 1 4 3 4 133 7 5 2 3 14 8 2 2 1 3 2 104 16 15 9 3 1 12 10 2 0 11 1 0 103 13 1 11 11 34 11 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
28 28 28 31 28 31 30 29 27 26 25 24 23 22 21 20 19 18 17 17 17 17 17 17 17 17 16 17 8 31
CALL[ ]	/* CallFunction */";
};
width = 845;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = slash;
kernLeft = slash;
kernRight = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,-106,l),
(386,773,l),
(275,773,l),
(25,-106,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 411;
}
);
note = slash;
unicode = 47;
},
{
glyphname = backslash;
kernLeft = backslash;
kernRight = backslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(386,-106,l),
(136,773,l),
(25,773,l),
(275,-106,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 411;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = periodcentered.loclCAT;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(106,265,o),
(149,308,o),
(149,339,qs),
(149,370,o),
(106,414,o),
(75,414,qs),
(43,414,o),
(0,371,o),
(0,339,qs),
(0,308,o),
(43,265,o),
(75,265,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 149;
}
);
note = periodcentered.loclCAT;
},
{
glyphname = periodcentered.loclCAT.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-108,276,o),
(-64,319,o),
(-64,350,qs),
(-64,381,o),
(-107,424,o),
(-139,424,qs),
(-171,424,o),
(-213,382,o),
(-213,350,qs),
(-213,319,o),
(-170,276,o),
(-139,276,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = periodcentered.loclCAT.case;
},
{
glyphname = hyphen;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(404,242,l),
(404,337,l),
(56,337,l),
(56,242,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 460;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = endash;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(590,242,l),
(590,337,l),
(56,337,l),
(56,242,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 646;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(805,242,l),
(805,337,l),
(56,337,l),
(56,242,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 861;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = underscore;
kernLeft = underscore;
kernRight = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(612,-145,l),
(612,-37,l),
(56,-37,l),
(56,-145,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 668;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = parenleft;
kernRight = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(356,-145,l),
(356,-134,l),
(263,-38,o),
(158,202,o),
(158,333,qs),
(158,464,o),
(263,704,o),
(356,800,q),
(356,811,l),
(242,811,l),
(188,758,o),
(143,684,qs),
(97,608,o),
(46,430,o),
(46,333,qs),
(46,234,o),
(72,144,qs),
(98,58,o),
(185,-89,o),
(242,-145,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
17 11 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 24 25 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 390;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
kernLeft = parenright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(34,-145,l),
(148,-145,l),
(205,-88,o),
(293,58,o),
(319,144,qs),
(344,231,o),
(344,333,qs),
(344,431,o),
(294,609,o),
(248,684,qs),
(201,760,o),
(148,811,q),
(34,811,l),
(34,800,l),
(127,704,o),
(232,464,o),
(232,333,qs),
(232,202,o),
(127,-38,o),
(34,-134,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
19 5 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 26 22 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 390;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = braceleft;
kernLeft = braceleft;
kernRight = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(392,-166,l),
(392,-71,l),
(353,-71,ls),
(277,-71,o),
(277,4,qs),
(277,43,o),
(287,88,qs),
(296,127,o),
(296,181,qs),
(296,236,o),
(242,310,o),
(187,322,q),
(187,324,l),
(242,336,o),
(296,409,o),
(296,464,qs),
(296,519,o),
(287,559,qs),
(277,596,o),
(277,641,qs),
(277,716,o),
(353,716,qs),
(392,716,l),
(392,811,l),
(332,811,ls),
(256,811,o),
(167,729,o),
(167,651,qs),
(167,611,o),
(178,561,qs),
(182,541,o),
(189,494,o),
(189,469,qs),
(189,383,o),
(88,369,q),
(88,277,l),
(142,269,o),
(189,215,o),
(189,177,qs),
(189,152,o),
(182,104,o),
(178,83,qs),
(167,34,o),
(167,-5,qs),
(167,-83,o),
(256,-166,o),
(332,-166,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
33 11 10 3 2 1 1 76 0 0 0 1 2 0 1 105 0 2 3 3 2 89 0 2 2 3 97 4 1 3 2 3 81 0 0 0 46 0 45 44 42 25 23 22 20 5 8 22
CALL[ ]	/* CallFunction */";
};
width = 450;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = braceright;
kernLeft = braceright;
kernRight = braceright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(118,-166,ls),
(194,-166,o),
(282,-83,o),
(282,-5,qs),
(282,29,o),
(272,83,qs),
(261,134,o),
(261,177,qs),
(261,216,o),
(307,269,o),
(361,277,q),
(361,369,l),
(261,383,o),
(261,469,qs),
(261,512,o),
(272,561,qs),
(282,615,o),
(282,651,qs),
(282,729,o),
(194,811,o),
(118,811,qs),
(58,811,l),
(58,716,l),
(97,716,ls),
(173,716,o),
(173,641,qs),
(173,608,o),
(164,561,qs),
(153,517,o),
(153,464,qs),
(153,409,o),
(208,336,o),
(263,324,q),
(263,322,l),
(208,310,o),
(153,236,o),
(153,181,qs),
(153,128,o),
(165,80,qs),
(173,40,o),
(173,4,qs),
(173,-71,o),
(97,-71,qs),
(58,-71,l),
(58,-166,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
33 32 10 3 0 1 1 76 0 2 0 1 0 2 1 105 0 0 3 3 0 89 0 0 0 3 97 0 3 0 3 81 44 42 24 22 21 19 32 4 8 23
CALL[ ]	/* CallFunction */";
};
width = 450;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(287,-164,l),
(287,-70,l),
(176,-70,l),
(176,719,l),
(287,719,l),
(287,811,l),
(70,811,l),
(70,-164,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 342;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(272,-164,l),
(272,811,l),
(56,811,l),
(56,719,l),
(166,719,l),
(166,-70,l),
(56,-70,l),
(56,-164,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 2 0 1 0 2 1 103 0 0 3 3 0 87 0 0 0 3 95 0 3 0 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 342;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(89,-116,l),
(187,123,l),
(66,123,l),
(10,-116,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 221;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(89,-116,l),
(187,123,l),
(66,123,l),
(10,-116,l)
);
},
{
closed = 1;
nodes = (
(270,-116,l),
(368,123,l),
(247,123,l),
(192,-116,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 402;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(333,462,l),
(389,700,l),
(311,700,l),
(212,462,l)
);
},
{
closed = 1;
nodes = (
(153,462,l),
(208,700,l),
(130,700,l),
(32,462,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 427;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quotedblright;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(297,462,l),
(396,701,l),
(274,701,l),
(219,462,l)
);
},
{
closed = 1;
nodes = (
(117,462,l),
(216,701,l),
(94,701,l),
(38,462,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 427;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,462,l),
(208,700,l),
(130,700,l),
(32,462,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 247;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = quoteright;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,462,l),
(216,700,l),
(94,700,l),
(38,462,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 247;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = guillemotleft;
kernLeft = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(437,120,l),
(342,295,l),
(437,470,l),
(329,470,l),
(237,295,l),
(329,120,l)
);
},
{
closed = 1;
nodes = (
(243,120,l),
(148,295,l),
(243,470,l),
(136,470,l),
(43,295,l),
(136,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 3 2 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 487;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(352,120,l),
(445,295,l),
(352,470,l),
(244,470,l),
(339,295,l),
(244,120,l)
);
},
{
closed = 1;
nodes = (
(158,120,l),
(251,295,l),
(158,470,l),
(50,470,l),
(145,295,l),
(50,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 3 2 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 487;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = guilsinglleft;
kernLeft = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(243,120,l),
(148,295,l),
(243,470,l),
(136,470,l),
(43,295,l),
(136,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,120,l),
(251,295,l),
(158,470,l),
(50,470,l),
(145,295,l),
(50,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = quotedbl;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(297,462,l),
(396,701,l),
(274,701,l),
(219,462,l)
);
},
{
closed = 1;
nodes = (
(117,462,l),
(216,701,l),
(94,701,l),
(38,462,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 427;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
kernLeft = quotesingle;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(110,462,l),
(209,700,l),
(88,700,l),
(32,462,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 232;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = florin;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-24,-216,ls),
(54,-216,o),
(142,-145,o),
(151,-63,qs),
(206,457,l),
(314,457,l),
(322,551,l),
(216,551,l),
(220,591,ls),
(224,636,o),
(276,676,o),
(329,676,q),
(338,771,l),
(230,771,o),
(116,684,o),
(107,591,qs),
(103,551,l),
(36,551,l),
(27,457,l),
(92,457,l),
(38,-63,ls),
(34,-95,o),
(8,-121,o),
(-18,-121,qs),
(-41,-121,l),
(-51,-216,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
0 3 0 4 2 3 4 105 5 1 2 6 1 1 0 2 1 103 0 0 0 7 97 0 7 7 38 7 78 35 17 19 17 19 17 19 32 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 334;
}
);
note = florin;
unicode = 402;
},
{
glyphname = at;
kernLeft = at;
kernRight = at;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(575,-212,o),
(632,-200,qs),
(690,-187,o),
(727,-169,q),
(701,-92,l),
(622,-131,o),
(518,-131,qs),
(412,-131,o),
(248,-40,o),
(157,119,o),
(157,218,qs),
(157,321,o),
(253,483,o),
(420,574,o),
(522,574,qs),
(624,574,o),
(785,494,o),
(877,345,o),
(877,245,qs),
(877,183,o),
(833,86,o),
(784,86,qs),
(757,86,o),
(728,119,o),
(728,149,qs),
(728,430,l),
(630,430,l),
(630,373,l),
(606,407,o),
(533,440,o),
(489,440,qs),
(429,440,o),
(334,382,o),
(282,281,o),
(282,219,qs),
(282,157,o),
(333,55,o),
(428,-5,o),
(489,-5,qs),
(584,-5,o),
(642,79,q),
(658,40,o),
(724,-3,o),
(770,-3,qs),
(831,-3,o),
(918,63,o),
(963,176,o),
(963,247,qs),
(963,367,o),
(847,552,o),
(646,654,o),
(522,654,qs),
(394,654,o),
(189,543,o),
(71,345,o),
(71,218,qs),
(71,95,o),
(182,-101,o),
(385,-212,o),
(518,-212,qs)
);
},
{
closed = 1;
nodes = (
(452,84,o),
(382,160,o),
(382,219,qs),
(382,278,o),
(452,353,o),
(508,353,qs),
(563,353,o),
(633,276,o),
(633,218,qs),
(633,160,o),
(565,84,o),
(508,84,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
31 1 9 3 18 1 1 5 54 1 7 1 55 1 8 7 4 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
31 1 9 4 18 1 1 5 54 1 7 1 55 1 8 7 4 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 0 0 6 3 0 6 105 4 1 3 0 9 5 3 9 105 12 10 2 5 5 1 98 2 1 1 1 34 77 0 7 7 8 97 11 1 8 8 38 8 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 4 3 9 3 4 9 128 0 0 0 6 3 0 6 105 0 3 0 9 5 3 9 105 12 10 2 5 5 1 98 2 1 1 1 34 77 0 7 7 8 97 11 1 8 8 38 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
60 60 0 0 60 71 60 70 66 64 0 59 0 58 38 37 35 19 38 35 38 38 13 8 30
CALL[ ]	/* CallFunction */";
};
width = 1026;
}
);
note = at;
unicode = 64;
},
{
glyphname = ampersand;
kernLeft = ampersand;
kernRight = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(380,-12,o),
(455,68,qs),
(463,77,l),
(541,0,l),
(683,0,l),
(523,159,l),
(673,405,l),
(553,405,l),
(450,232,l),
(321,360,ls),
(260,421,o),
(211,486,o),
(211,523,qs),
(211,560,o),
(261,611,o),
(305,611,qs),
(353,611,o),
(404,557,o),
(404,514,q),
(516,514,l),
(516,605,o),
(401,712,o),
(307,712,qs),
(246,712,o),
(152,664,o),
(99,578,o),
(99,524,qs),
(99,459,o),
(144,399,qs),
(152,388,l),
(144,382,ls),
(98,347,o),
(44,251,o),
(44,197,qs),
(44,136,o),
(103,41,o),
(207,-12,o),
(271,-12,qs)
);
},
{
closed = 1;
nodes = (
(227,90,o),
(156,158,o),
(156,205,qs),
(156,270,o),
(222,316,q),
(393,147,l),
(364,117,o),
(310,90,o),
(278,90,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
41 40 31 28 7 5 6 3 34 1 4 6 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 1 2 3 2 1 3 128 0 2 2 0 97 0 0 0 39 77 0 3 3 4 97 7 5 2 4 4 34 77 8 1 6 6 4 97 7 5 2 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 1 2 3 2 1 3 128 0 2 2 0 97 0 0 0 39 77 0 3 3 4 95 0 4 4 34 77 8 1 6 6 5 97 7 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
38 38 0 0 38 46 38 45 0 37 0 36 18 23 34 18 45 9 8 27
CALL[ ]	/* CallFunction */";
};
width = 706;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(381,-100,l),
(381,613,l),
(456,613,l),
(456,-100,l),
(553,-100,l),
(553,700,l),
(269,700,ls),
(190,700,o),
(136,672,qs),
(85,644,o),
(33,551,o),
(33,493,qs),
(33,436,o),
(58,390,qs),
(84,341,o),
(189,287,o),
(269,287,qs),
(284,287,l),
(284,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 0 3 2 3 0 2 128 4 1 2 2 132 0 3 3 1 95 0 1 1 33 3 78 17 17 17 40 32 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(361,-232,o),
(466,-186,o),
(527,-98,o),
(527,-37,qs),
(527,20,o),
(500,59,q),
(529,86,o),
(542,122,qs),
(556,154,o),
(556,195,qs),
(556,255,o),
(531,293,qs),
(506,334,o),
(465,357,qs),
(424,382,o),
(371,400,qs),
(278,431,ls),
(237,445,o),
(214,465,qs),
(191,486,o),
(191,523,qs),
(191,568,o),
(253,618,o),
(300,616,qs),
(355,616,o),
(415,555,o),
(416,513,q),
(537,513,l),
(536,572,o),
(476,662,o),
(371,712,o),
(303,712,qs),
(237,712,o),
(132,665,o),
(72,578,o),
(72,519,qs),
(72,458,o),
(99,421,q),
(43,363,o),
(43,285,qs),
(43,204,o),
(141,111,o),
(228,80,qs),
(322,50,ls),
(365,35,o),
(408,-5,o),
(408,-43,qs),
(408,-89,o),
(346,-136,o),
(299,-136,qs),
(245,-136,o),
(185,-73,o),
(184,-33,q),
(63,-33,l),
(64,-93,o),
(126,-183,o),
(231,-232,o),
(297,-232,qs)
);
},
{
closed = 1;
nodes = (
(398,133,o),
(261,183,qs),
(215,201,o),
(163,250,o),
(163,293,qs),
(163,331,o),
(187,356,q),
(216,342,ls),
(228,336,o),
(277,319,qs),
(338,297,ls),
(386,279,o),
(437,230,o),
(437,187,qs),
(437,150,o),
(413,124,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
73 66 51 19 4 0 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 39 77 0 1 1 5 97 6 1 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 1 6 1 5 1 5 101 0 4 4 2 97 0 2 2 39 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 57 0 56 34 32 30 29 26 24 34 19 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = section;
unicode = 167;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(498,-5,o),
(577,41,qs),
(656,86,o),
(742,247,o),
(742,351,qs),
(742,456,o),
(699,536,qs),
(654,617,o),
(497,707,o),
(394,707,qs),
(291,707,o),
(213,662,qs),
(134,616,o),
(46,454,o),
(46,351,qs),
(46,247,o),
(91,167,qs),
(136,85,o),
(292,-5,o),
(394,-5,qs)
);
},
{
closed = 1;
nodes = (
(472,122,o),
(584,206,o),
(601,277,q),
(501,277,l),
(473,200,o),
(393,200,qs),
(340,200,o),
(272,279,o),
(272,351,qs),
(272,424,o),
(340,502,o),
(393,502,qs),
(432,502,o),
(489,462,o),
(501,425,q),
(601,425,l),
(584,498,o),
(472,582,o),
(395,582,qs),
(333,582,o),
(284,554,qs),
(233,526,o),
(177,422,o),
(177,352,qs),
(177,281,o),
(206,229,qs),
(234,177,o),
(333,122,o),
(395,122,qs)
);
},
{
closed = 1;
nodes = (
(301,38,o),
(234,78,qs),
(166,117,o),
(93,258,o),
(93,351,qs),
(93,445,o),
(130,516,qs),
(167,587,o),
(303,664,o),
(394,664,qs),
(488,664,o),
(555,625,qs),
(623,586,o),
(697,444,o),
(697,351,qs),
(697,258,o),
(660,188,qs),
(623,116,o),
(486,38,o),
(394,38,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 93 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 0 0 8 2 0 8 105 0 2 0 4 3 2 4 105 0 5 11 1 7 9 5 7 105 12 1 9 1 1 9 89 12 1 9 9 1 97 10 1 1 9 1 81 49 49 20 20 0 0 49 68 49 67 59 57 20 48 20 47 45 44 43 41 37 35 33 32 30 28 0 19 0 18 40 13 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 789;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = registered;
kernLeft = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(225,425,o),
(291,463,o),
(329,529,o),
(329,568,qs),
(329,607,o),
(291,673,o),
(225,712,o),
(186,712,qs),
(147,712,o),
(81,673,o),
(42,607,o),
(42,568,qs),
(42,529,o),
(81,463,o),
(147,425,o),
(186,425,qs)
);
},
{
closed = 1;
nodes = (
(137,448,o),
(66,519,o),
(66,568,qs),
(66,618,o),
(137,688,o),
(186,688,qs),
(236,688,o),
(306,618,o),
(306,568,qs),
(306,519,o),
(236,448,o),
(186,448,qs)
);
},
{
closed = 1;
nodes = (
(165,496,l),
(165,561,l),
(183,561,l),
(218,496,l),
(251,496,l),
(210,568,l),
(239,578,o),
(239,607,qs),
(239,625,o),
(217,651,o),
(191,651,qs),
(137,651,l),
(137,496,l)
);
},
{
closed = 1;
nodes = (
(165,585,l),
(165,628,l),
(187,628,ls),
(199,628,o),
(212,617,o),
(212,607,qs),
(212,596,o),
(197,585,o),
(184,585,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 6 values pushed */
34 1 6 9 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 63 values pushed */
0 4 2 8 0 4 114 0 8 9 2 8 112 12 1 9 6 2 9 6 126 0 6 5 2 6 5 126 7 1 5 3 2 5 3 126 0 0 0 2 4 0 2 105 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
0 4 2 8 2 4 8 128 0 8 9 2 8 9 126 12 1 9 6 2 9 6 126 0 6 5 2 6 5 126 7 1 5 3 2 5 3 126 0 0 0 2 4 0 2 105 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
41 41 16 16 0 0 41 49 41 48 47 45 40 39 38 37 36 35 30 28 16 27 16 26 22 20 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 370;
}
);
note = registered;
unicode = 174;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(414,350,l),
(414,571,l),
(491,394,l),
(546,394,l),
(624,570,l),
(624,350,l),
(696,350,l),
(696,700,l),
(613,700,l),
(520,486,l),
(428,700,l),
(343,700,l),
(343,350,l)
);
},
{
closed = 1;
nodes = (
(195,350,l),
(195,638,l),
(291,638,l),
(291,700,l),
(27,700,l),
(27,638,l),
(122,638,l),
(122,350,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
10 7 2 3 3 5 1 76 0 3 5 2 5 3 2 128 8 4 2 2 2 132 6 1 2 0 5 5 0 87 6 1 2 0 0 5 95 7 1 5 0 5 79 17 17 17 17 18 18 17 18 16 9 6 31
CALL[ ]	/* CallFunction */";
};
width = 744;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,432,o),
(318,509,o),
(318,572,qs),
(318,635,o),
(238,712,o),
(177,712,qs),
(118,712,o),
(37,634,o),
(37,572,qs),
(37,509,o),
(118,432,o),
(177,432,qs)
);
},
{
closed = 1;
nodes = (
(152,507,o),
(116,543,o),
(116,572,qs),
(116,602,o),
(152,637,o),
(177,637,qs),
(203,637,o),
(239,602,o),
(239,572,qs),
(239,543,o),
(203,507,o),
(177,507,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 354;
}
);
note = degree;
unicode = 176;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,-100,l),
(183,720,l),
(70,720,l),
(70,-100,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 95 0 0 0 33 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = bar;
unicode = 124;
},
{
glyphname = brokenbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,392,l),
(183,720,l),
(70,720,l),
(70,392,l)
);
},
{
closed = 1;
nodes = (
(183,-100,l),
(183,228,l),
(70,228,l),
(70,-100,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 2 0 3 2 3 99 0 1 1 0 95 0 0 0 33 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = brokenbar;
unicode = 166;
},
{
glyphname = dagger;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(342,-262,l),
(331,472,l),
(528,463,l),
(528,551,l),
(331,541,l),
(342,783,l),
(229,783,l),
(241,541,l),
(44,551,l),
(44,463,l),
(241,472,l),
(229,-262,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 1 2 133 0 5 0 5 134 3 1 1 0 0 1 87 3 1 1 1 0 96 4 1 0 1 0 80 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = dagger;
unicode = 8224;
},
{
glyphname = uni2113;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,-100,l),
(183,720,l),
(70,720,l),
(70,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = uni2113;
unicode = 8467;
},
{
glyphname = daggerdbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(342,-262,l),
(332,-20,l),
(529,-29,l),
(529,59,l),
(332,50,l),
(332,472,l),
(529,463,l),
(529,551,l),
(332,541,l),
(342,783,l),
(229,783,l),
(242,541,l),
(45,551,l),
(45,463,l),
(242,472,l),
(242,50,l),
(45,59,l),
(45,-29,l),
(242,-20,l),
(229,-262,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 19 18 17 17 17 17 17 17 17 17 16 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = daggerdbl;
unicode = 8225;
},
{
glyphname = estimated;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(554,-12,o),
(691,133,q),
(645,186,l),
(582,123,o),
(461,60,o),
(387,60,qs),
(324,60,o),
(230,102,o),
(190,144,q),
(190,317,l),
(719,317,l),
(719,380,ls),
(719,444,o),
(674,564,o),
(632,610,qs),
(587,659,o),
(459,712,o),
(378,712,qs),
(267,712,o),
(192,662,qs),
(117,612,o),
(37,440,o),
(37,333,qs),
(37,221,o),
(84,145,qs),
(129,69,o),
(287,-12,o),
(387,-12,qs)
);
},
{
closed = 1;
nodes = (
(190,556,l),
(257,641,o),
(378,641,qs),
(436,641,o),
(528,602,o),
(560,566,q),
(560,389,l),
(190,389,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
34 29 2 5 4 25 24 18 3 2 1 2 76 0 0 0 4 5 0 4 105 7 1 5 0 1 2 5 1 103 0 2 3 3 2 89 0 2 2 3 97 6 1 3 2 3 81 28 28 0 0 28 35 28 35 33 31 0 27 0 26 35 22 40 8 6 25
CALL[ ]	/* CallFunction */";
};
width = 757;
}
);
note = estimated;
unicode = 8494;
},
{
glyphname = at.case;
kernRight = at.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(575,-84,o),
(632,-72,qs),
(690,-59,o),
(727,-41,q),
(701,36,l),
(622,-3,o),
(518,-3,qs),
(412,-3,o),
(248,88,o),
(157,247,o),
(157,346,qs),
(157,449,o),
(253,611,o),
(420,702,o),
(522,702,qs),
(624,702,o),
(785,622,o),
(877,473,o),
(877,373,qs),
(877,311,o),
(833,214,o),
(784,214,qs),
(757,214,o),
(728,247,o),
(728,277,qs),
(728,558,l),
(630,558,l),
(630,501,l),
(606,535,o),
(533,568,o),
(489,568,qs),
(429,568,o),
(334,510,o),
(282,409,o),
(282,347,qs),
(282,285,o),
(333,183,o),
(428,123,o),
(489,123,qs),
(584,123,o),
(642,207,q),
(658,168,o),
(724,125,o),
(770,125,qs),
(831,125,o),
(918,191,o),
(963,304,o),
(963,375,qs),
(963,495,o),
(847,680,o),
(646,782,o),
(522,782,qs),
(394,782,o),
(189,671,o),
(71,473,o),
(71,346,qs),
(71,223,o),
(182,27,o),
(385,-84,o),
(518,-84,qs)
);
},
{
closed = 1;
nodes = (
(452,212,o),
(382,288,o),
(382,347,qs),
(382,406,o),
(452,481,o),
(508,481,qs),
(563,481,o),
(633,404,o),
(633,346,qs),
(633,288,o),
(565,212,o),
(508,212,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
31 1 9 3 18 1 1 5 54 1 7 1 55 1 8 7 4 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
31 1 9 4 18 1 1 5 54 1 7 1 55 1 8 7 4 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 6 3 0 6 105 4 1 3 0 9 5 3 9 105 12 10 2 5 2 1 1 7 5 1 106 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 4 3 9 3 4 9 128 0 0 0 6 3 0 6 105 0 3 0 9 5 3 9 105 12 10 2 5 2 1 1 7 5 1 106 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
60 60 0 0 60 71 60 70 66 64 0 59 0 58 38 37 35 19 38 35 38 38 13 8 30
CALL[ ]	/* CallFunction */";
};
width = 1024;
}
);
note = at.case;
},
{
glyphname = registered.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(228,629,o),
(294,667,o),
(332,733,o),
(332,772,qs),
(332,811,o),
(294,877,o),
(228,916,o),
(189,916,qs),
(150,916,o),
(84,877,o),
(45,811,o),
(45,772,qs),
(45,733,o),
(84,667,o),
(150,629,o),
(189,629,qs)
);
},
{
closed = 1;
nodes = (
(140,652,o),
(69,723,o),
(69,772,qs),
(69,822,o),
(140,892,o),
(189,892,qs),
(239,892,o),
(309,822,o),
(309,772,qs),
(309,723,o),
(239,652,o),
(189,652,qs)
);
},
{
closed = 1;
nodes = (
(168,700,l),
(168,765,l),
(186,765,l),
(221,700,l),
(254,700,l),
(213,772,l),
(242,782,o),
(242,811,qs),
(242,829,o),
(220,855,o),
(194,855,qs),
(140,855,l),
(140,700,l)
);
},
{
closed = 1;
nodes = (
(168,789,l),
(168,832,l),
(190,832,ls),
(202,832,o),
(215,821,o),
(215,811,qs),
(215,800,o),
(200,789,o),
(187,789,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
34 1 6 9 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 63 values pushed */
0 4 2 8 0 4 114 0 8 9 2 8 112 12 1 9 6 2 9 6 126 0 6 5 2 6 5 126 7 1 5 3 2 5 3 126 0 0 0 2 4 0 2 105 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
0 4 2 8 2 4 8 128 0 8 9 2 8 9 126 12 1 9 6 2 9 6 126 0 6 5 2 6 5 126 7 1 5 3 2 5 3 126 0 0 0 2 4 0 2 105 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
41 41 16 16 0 0 41 49 41 48 47 45 40 39 38 37 36 35 30 28 16 27 16 26 22 20 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 377;
}
);
note = registered.case;
},
{
glyphname = uni20BF;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(188,0,l),
(188,-86,l),
(257,-86,l),
(257,0,l),
(321,0,l),
(321,-86,l),
(390,-86,l),
(390,2,l),
(479,13,o),
(577,119,o),
(577,198,qs),
(577,259,o),
(503,355,o),
(444,376,q),
(489,394,o),
(545,470,o),
(545,526,qs),
(545,591,o),
(464,680,o),
(390,694,q),
(390,791,l),
(321,791,l),
(321,700,l),
(257,700,l),
(257,791,l),
(188,791,l),
(188,700,l),
(67,700,l),
(67,0,l)
);
},
{
closed = 1;
nodes = (
(181,96,l),
(181,320,l),
(331,320,ls),
(394,320,o),
(462,263,o),
(462,208,qs),
(462,96,o),
(333,96,qs)
);
},
{
closed = 1;
nodes = (
(181,415,l),
(181,604,l),
(313,604,ls),
(429,604,o),
(429,510,qs),
(429,464,o),
(372,415,o),
(315,415,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
8 1 10 0 14 1 8 11 20 1 5 9 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
3 1 1 0 0 1 112 6 1 4 5 5 4 113 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
3 1 1 0 1 133 6 1 4 5 5 4 113 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
3 1 1 0 1 133 6 1 4 5 4 134 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
37 37 29 29 37 44 37 43 42 40 29 36 29 35 36 17 17 17 30 17 17 17 16 14 8 31
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = uni20BF;
unicode = 8383;
},
{
glyphname = cent;
layers = (
{
anchors = (
{
name = bottom;
pos = (382,6);
},
{
name = top;
pos = (380,695);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(382,-86,l),
(396,-6,l),
(511,-2,o),
(660,114,o),
(679,215,q),
(556,215,l),
(544,165,o),
(471,102,o),
(414,95,q),
(498,572,l),
(542,538,o),
(556,479,q),
(679,479,l),
(666,553,o),
(582,657,o),
(517,683,q),
(536,791,l),
(467,791,l),
(451,701,l),
(432,705,o),
(391,707,q),
(406,791,l),
(337,791,l),
(321,703,l),
(235,690,o),
(112,592,o),
(49,441,o),
(49,349,qs),
(49,245,o),
(130,83,o),
(205,39,q),
(183,-86,l),
(252,-86,l),
(269,10,l),
(304,0,o),
(328,-2,q),
(313,-86,l)
);
},
{
closed = 1;
nodes = (
(163,441,o),
(235,569,o),
(302,593,q),
(226,157,l),
(163,226,o),
(163,349,qs)
);
},
{
closed = 1;
nodes = (
(373,606,l),
(381,606,ls),
(406,606,o),
(434,601,q),
(345,95,l),
(314,99,o),
(287,112,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
20 17 2 8 2 45 39 26 3 4 8 49 38 27 5 2 5 6 5 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
3 1 1 2 2 1 112 0 4 8 5 8 4 5 128 0 5 6 8 5 6 126 7 1 0 6 0 134 0 8 8 2 97 0 2 2 33 77 0 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
3 1 1 2 1 133 0 4 8 5 8 4 5 128 0 5 6 8 5 6 126 7 1 0 6 0 134 0 8 8 2 97 0 2 2 33 77 0 6 6 34 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
26 17 18 22 20 18 17 25 19 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 728;
}
);
note = cent;
unicode = 162;
},
{
glyphname = currency;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(171,145,l),
(214,120,o),
(274,120,qs),
(332,120,o),
(376,145,q),
(436,85,l),
(484,133,l),
(427,190,l),
(460,234,o),
(460,298,qs),
(460,361,o),
(426,406,q),
(484,465,l),
(436,512,l),
(375,450,l),
(332,474,o),
(275,474,qs),
(217,474,o),
(173,450,q),
(111,512,l),
(64,465,l),
(123,405,l),
(89,362,o),
(89,298,qs),
(89,236,o),
(121,190,q),
(64,133,l),
(111,85,l)
);
},
{
closed = 1;
nodes = (
(236,196,o),
(186,246,o),
(186,297,qs),
(186,348,o),
(236,399,o),
(274,399,qs),
(311,399,o),
(363,347,o),
(363,297,qs),
(363,248,o),
(311,196,o),
(274,196,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
15 14 12 8 6 5 6 2 0 26 22 20 19 1 5 1 3 2 76 13 7 2 0 74 27 21 2 1 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
4 1 3 0 1 3 1 101 0 2 2 0 97 0 0 0 36 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 2 3 0 2 105 4 1 3 1 1 3 89 4 1 3 3 1 97 0 1 3 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
28 28 28 39 28 38 39 44 41 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 547;
}
);
note = currency;
unicode = 164;
},
{
glyphname = dollar;
kernLeft = S;
kernRight = S;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(255,-86,l),
(324,-86,l),
(324,-11,l),
(420,-5,o),
(544,103,o),
(544,190,qs),
(544,252,o),
(488,334,o),
(406,379,o),
(349,398,qs),
(324,407,l),
(324,611,l),
(360,601,o),
(403,548,o),
(403,513,q),
(524,513,l),
(522,598,o),
(411,701,o),
(324,710,q),
(324,791,l),
(255,791,l),
(255,710,l),
(168,701,o),
(60,600,o),
(60,517,qs),
(60,447,o),
(146,352,o),
(240,321,qs),
(255,316,l),
(255,90,l),
(211,101,o),
(161,165,o),
(160,211,q),
(41,211,l),
(42,117,o),
(160,3,o),
(255,-9,q)
);
},
{
closed = 1;
nodes = (
(324,291,l),
(382,269,o),
(424,224,o),
(424,183,qs),
(424,142,o),
(370,90,o),
(324,85,q)
);
},
{
closed = 1;
nodes = (
(255,434,l),
(214,452,o),
(178,492,o),
(178,523,qs),
(178,559,o),
(220,606,o),
(255,613,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
50 24 17 14 4 2 1 49 42 25 7 4 0 2 43 6 2 3 0 36 1 4 3 4 76 0 2 1 0 1 2 0 128 0 0 3 1 0 3 126 0 1 0 4 1 4 99 0 3 3 40 3 78 17 27 20 28 18 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 586;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = Euro;
kernRight = C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(560,-12,o),
(718,107,o),
(738,213,q),
(613,213,l),
(599,155,o),
(509,89,o),
(436,89,qs),
(359,89,o),
(253,167,o),
(230,239,q),
(454,239,l),
(454,310,l),
(216,310,l),
(215,322,o),
(215,349,qs),
(215,376,o),
(216,389,q),
(454,389,l),
(454,461,l),
(231,461,l),
(254,533,o),
(359,610,o),
(436,610,qs),
(509,610,o),
(599,542,o),
(613,481,q),
(738,481,l),
(718,591,o),
(560,712,o),
(436,712,qs),
(310,712,o),
(140,577,o),
(112,461,q),
(22,461,l),
(22,389,l),
(101,389,l),
(99,363,o),
(99,349,qs),
(99,336,o),
(101,310,q),
(22,310,l),
(22,239,l),
(111,239,l),
(139,123,o),
(310,-12,o),
(436,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
0 5 6 3 6 5 3 128 0 12 0 11 0 12 11 128 7 1 3 8 1 2 1 3 2 103 9 1 1 10 1 0 12 1 0 103 0 6 6 4 97 0 4 4 39 77 0 11 11 13 97 14 1 13 13 40 13 78 0 0 0 45 0 44 42 41 39 37 35 34 33 32 17 18 34 18 34 17 20 17 18 15 8 31
CALL[ ]	/* CallFunction */";
};
width = 785;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = uni20BD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(235,0,l),
(235,110,l),
(435,110,l),
(435,205,l),
(235,205,l),
(235,284,l),
(368,284,ls),
(478,284,o),
(613,393,o),
(613,492,qs),
(613,590,o),
(479,700,o),
(368,700,qs),
(122,700,l),
(122,380,l),
(33,380,l),
(33,284,l),
(122,284,l),
(122,205,l),
(33,205,l),
(33,110,l),
(122,110,l),
(122,0,l)
);
},
{
closed = 1;
nodes = (
(235,380,l),
(235,605,l),
(365,605,ls),
(498,605,o),
(498,492,qs),
(498,380,o),
(365,380,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
11 10 2 3 5 1 2 1 3 2 103 6 1 1 7 1 0 8 1 0 103 0 9 9 4 95 0 4 4 33 77 0 8 8 34 8 78 23 23 23 29 23 28 27 25 17 17 17 36 33 17 17 17 16 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 645;
}
);
note = uni20BD;
unicode = 8381;
},
{
glyphname = uni20A8;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (824,0);
},
{
name = top;
pos = (817,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (575,0);
ref = s;
}
);
width = 1058;
}
);
note = uni20A8;
unicode = 8360;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(80,0,l),
(557,0,l),
(557,91,l),
(198,91,l),
(268,161,o),
(268,256,qs),
(268,281,o),
(263,302,q),
(429,302,l),
(429,380,l),
(241,380,l),
(228,415,o),
(213,471,o),
(213,498,qs),
(213,558,o),
(280,618,o),
(329,618,qs),
(386,618,o),
(448,552,o),
(450,500,q),
(554,500,l),
(549,594,o),
(433,712,o),
(328,712,qs),
(264,712,o),
(163,663,o),
(106,568,o),
(106,502,qs),
(106,471,o),
(118,416,o),
(130,380,q),
(42,380,l),
(42,302,l),
(156,302,l),
(161,274,o),
(161,255,qs),
(161,194,o),
(123,113,o),
(80,68,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
38 1 8 7 1 76 0 3 4 1 4 3 1 128 5 1 1 6 1 0 7 1 0 103 0 4 4 2 97 0 2 2 39 77 0 7 7 8 95 0 8 8 34 8 78 17 20 17 21 34 18 38 17 20 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = yen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(371,0,l),
(371,156,l),
(571,156,l),
(571,235,l),
(371,235,l),
(371,255,l),
(403,315,l),
(571,315,l),
(571,394,l),
(444,394,l),
(603,700,l),
(476,700,l),
(314,358,l),
(153,700,l),
(24,700,l),
(185,394,l),
(58,394,l),
(58,315,l),
(226,315,l),
(258,255,l),
(258,235,l),
(58,235,l),
(58,156,l),
(258,156,l),
(258,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
11 1 2 3 18 4 2 1 2 2 76 6 1 3 7 1 2 1 3 2 104 8 1 1 9 1 0 10 1 0 103 5 1 4 4 33 77 0 10 10 34 10 78 24 23 22 21 18 17 17 18 17 17 18 17 16 11 8 31
CALL[ ]	/* CallFunction */";
};
width = 628;
}
);
note = yen;
unicode = 165;
},
{
glyphname = cent.001;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(250,-104,l),
(355,-104,l),
(355,-8,l),
(428,5,o),
(527,99,o),
(541,168,q),
(423,168,l),
(413,129,o),
(348,84,o),
(303,84,qs),
(266,84,o),
(203,123,o),
(165,197,o),
(165,248,qs),
(165,321,o),
(241,411,o),
(303,411,qs),
(348,411,o),
(413,367,o),
(423,328,q),
(541,328,l),
(527,399,o),
(428,491,o),
(355,504,q),
(355,600,l),
(250,600,l),
(250,503,l),
(189,491,o),
(145,457,qs),
(99,421,o),
(49,314,o),
(49,248,qs),
(49,179,o),
(74,128,qs),
(100,74,o),
(190,4,o),
(250,-7,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
12 9 2 2 0 36 33 2 5 3 2 76 0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 3 5 5 3 89 0 3 3 5 95 0 5 3 5 79 20 18 37 34 20 26 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = cent.001;
},
{
glyphname = uni2215;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,-106,l),
(386,773,l),
(275,773,l),
(25,-106,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 411;
}
);
note = uni2215;
unicode = 8725;
},
{
glyphname = plus;
kernLeft = plus;
kernRight = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(349,59,l),
(349,242,l),
(538,242,l),
(538,337,l),
(349,337,l),
(349,520,l),
(252,520,l),
(252,337,l),
(63,337,l),
(63,242,l),
(252,242,l),
(252,59,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
3 1 1 4 1 0 5 1 0 103 0 5 5 2 95 0 2 2 36 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 2 1 5 2 87 3 1 1 4 1 0 5 1 0 103 0 2 2 5 95 0 5 2 5 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = plus;
unicode = 43;
},
{
glyphname = minus;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,242,l),
(506,337,l),
(95,337,l),
(95,242,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = multiply;
kernLeft = multiply;
kernRight = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(301,224,l),
(425,99,l),
(493,165,l),
(368,290,l),
(496,419,l),
(429,486,l),
(301,357,l),
(177,482,l),
(109,415,l),
(233,290,l),
(105,161,l),
(173,95,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
11 5 1 50
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(516,242,l),
(516,337,l),
(84,337,l),
(84,242,l)
);
},
{
closed = 1;
nodes = (
(332,44,o),
(374,87,o),
(374,118,qs),
(374,150,o),
(332,193,o),
(300,193,qs),
(267,193,o),
(225,150,o),
(225,118,qs),
(225,87,o),
(267,44,o),
(300,44,qs)
);
},
{
closed = 1;
nodes = (
(332,387,o),
(374,431,o),
(374,462,qs),
(374,494,o),
(332,536,o),
(300,536,qs),
(267,536,o),
(225,494,o),
(225,462,qs),
(225,431,o),
(268,387,o),
(300,387,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
0 4 7 1 5 0 4 5 105 0 0 0 1 2 0 1 103 0 2 3 3 2 89 0 2 2 3 97 6 1 3 2 3 81 16 16 4 4 16 27 16 26 22 20 4 15 4 14 37 17 16 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = divide;
unicode = 247;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(508,350,l),
(508,448,l),
(92,448,l),
(92,350,l)
);
},
{
closed = 1;
nodes = (
(508,132,l),
(508,231,l),
(92,231,l),
(92,132,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = equal;
unicode = 61;
},
{
glyphname = notequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(227,65,l),
(263,132,l),
(508,132,l),
(508,231,l),
(315,231,l),
(377,349,l),
(508,349,l),
(508,448,l),
(430,448,l),
(465,514,l),
(373,514,l),
(337,448,l),
(92,448,l),
(92,349,l),
(285,349,l),
(223,231,l),
(92,231,l),
(92,132,l),
(171,132,l),
(135,65,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 3 3 4 112 0 9 0 0 9 113 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 18 17 17 17 17 17 17 17 17 16 10 6 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = greater;
kernRight = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(257,134,l),
(487,362,l),
(257,589,l),
(114,589,l),
(345,362,l),
(114,134,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = greater;
unicode = 62;
},
{
glyphname = less;
kernLeft = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,134,l),
(256,362,l),
(487,589,l),
(344,589,l),
(114,362,l),
(344,134,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = less;
unicode = 60;
},
{
glyphname = greaterequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(257,209,l),
(489,398,l),
(257,589,l),
(112,589,l),
(341,399,l),
(112,209,l)
);
},
{
closed = 1;
nodes = (
(478,59,l),
(478,146,l),
(113,146,l),
(113,59,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lessequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(489,209,l),
(259,399,l),
(489,589,l),
(343,589,l),
(112,398,l),
(343,209,l)
);
},
{
closed = 1;
nodes = (
(487,59,l),
(487,146,l),
(122,146,l),
(122,59,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = plusminus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(349,144,l),
(349,277,l),
(544,277,l),
(544,372,l),
(349,372,l),
(349,503,l),
(252,503,l),
(252,372,l),
(57,372,l),
(57,277,l),
(252,277,l),
(252,144,l)
);
},
{
closed = 1;
nodes = (
(544,0,l),
(544,99,l),
(57,99,l),
(57,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
3 1 1 4 1 0 5 1 0 103 0 5 5 2 95 0 2 2 36 77 0 6 6 7 95 0 7 7 34 7 78 17 17 17 17 17 17 17 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = approxequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(449,316,o),
(529,399,o),
(542,484,q),
(457,484,l),
(453,453,o),
(419,418,o),
(393,418,qs),
(374,418,o),
(342,432,o),
(314,448,qs),
(286,466,o),
(241,484,o),
(214,484,qs),
(153,484,o),
(73,402,o),
(58,317,q),
(143,317,l),
(152,383,o),
(208,383,qs),
(228,383,o),
(263,367,o),
(287,352,qs),
(317,334,o),
(359,316,o),
(386,316,qs)
);
},
{
closed = 1;
nodes = (
(449,95,o),
(529,178,o),
(542,263,q),
(457,263,l),
(453,232,o),
(419,197,o),
(393,197,qs),
(374,197,o),
(342,211,o),
(314,227,qs),
(286,245,o),
(241,263,o),
(214,263,qs),
(153,263,o),
(73,181,o),
(58,96,q),
(143,96,l),
(152,162,o),
(208,162,qs),
(228,162,o),
(263,146,o),
(287,131,qs),
(317,113,o),
(359,95,o),
(386,95,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
4 1 2 0 0 1 2 0 105 0 3 12 5 2 1 8 3 1 105 0 9 6 7 9 89 10 1 8 0 6 7 8 6 105 0 9 9 7 97 13 11 2 7 9 7 81 25 25 0 0 25 49 25 48 46 45 43 41 37 35 33 32 31 29 0 24 0 23 18 36 34 17 36 14 6 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(449,235,o),
(529,317,o),
(542,402,q),
(457,402,l),
(453,371,o),
(419,336,o),
(393,336,qs),
(374,336,o),
(342,350,o),
(314,366,qs),
(286,384,o),
(241,402,o),
(214,402,qs),
(153,402,o),
(73,320,o),
(58,236,q),
(143,236,l),
(148,268,o),
(181,302,o),
(208,302,qs),
(228,302,o),
(263,286,o),
(287,271,qs),
(317,253,o),
(359,235,o),
(386,235,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 25 0 24 18 36 34 18 36 7 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = logicalnot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(553,208,l),
(553,435,l),
(44,435,l),
(44,347,l),
(440,347,l),
(440,208,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 0 0 2 113 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 2 134 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
17 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = logicalnot;
unicode = 172;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,173,l),
(326,565,l),
(501,173,l),
(616,173,l),
(379,700,l),
(272,700,l),
(34,173,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 0 1 76 0 0 1 0 133 2 1 1 1 118 18 17 16 3 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 650;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = infinity;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(246,132,o),
(331,184,o),
(359,227,q),
(396,183,o),
(477,132,o),
(530,132,qs),
(601,132,o),
(693,216,o),
(693,290,qs),
(693,360,o),
(604,443,o),
(535,443,qs),
(479,443,o),
(393,389,o),
(367,344,q),
(331,390,o),
(250,443,o),
(195,443,qs),
(126,443,o),
(34,357,o),
(34,285,qs),
(34,215,o),
(123,132,o),
(192,132,qs)
);
},
{
closed = 1;
nodes = (
(167,211,o),
(126,251,o),
(126,287,qs),
(126,322,o),
(167,365,o),
(199,365,qs),
(231,365,o),
(281,325,o),
(314,283,q),
(292,249,o),
(234,211,o),
(201,211,qs)
);
},
{
closed = 1;
nodes = (
(491,210,o),
(440,248,o),
(411,286,q),
(432,322,o),
(492,364,o),
(527,364,qs),
(560,364,o),
(601,323,o),
(601,288,qs),
(601,253,o),
(559,210,o),
(524,210,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
44 26 20 8 4 5 4 1 76 1 1 0 6 1 4 5 0 4 105 10 7 9 3 5 2 2 5 89 10 7 9 3 5 5 2 97 8 3 2 2 5 2 81 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 36 36 36 11 6 25
CALL[ ]	/* CallFunction */";
};
width = 728;
}
);
note = infinity;
unicode = 8734;
},
{
glyphname = integral;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-21,-216,ls),
(56,-216,o),
(140,-145,o),
(149,-63,qs),
(240,774,ls),
(243,803,o),
(267,828,o),
(290,828,qs),
(308,828,l),
(318,924,l),
(297,924,ls),
(222,924,o),
(135,854,o),
(127,774,qs),
(36,-63,ls),
(32,-95,o),
(11,-121,o),
(-13,-121,qs),
(-32,-121,l),
(-42,-216,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 1 0 2 0 1 2 105 0 0 3 3 0 89 0 0 0 3 97 0 3 0 3 81 37 33 37 32 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 269;
}
);
note = integral;
unicode = 8747;
},
{
glyphname = uni2126;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(324,0,l),
(324,91,l),
(247,119,o),
(155,257,o),
(155,351,qs),
(155,417,o),
(207,535,o),
(315,609,o),
(394,609,qs),
(461,609,o),
(570,549,o),
(634,432,o),
(634,351,qs),
(634,258,o),
(543,119,o),
(465,91,q),
(465,0,l),
(737,0,l),
(737,87,l),
(612,87,l),
(680,131,o),
(749,274,o),
(749,361,qs),
(749,464,o),
(656,623,o),
(494,712,o),
(394,712,qs),
(294,712,o),
(133,623,o),
(40,463,o),
(40,361,qs),
(40,274,o),
(109,131,o),
(176,87,q),
(51,87,l),
(51,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
33 19 2 0 4 1 76 0 1 0 4 0 1 4 105 2 1 0 3 3 0 87 2 1 0 0 3 95 5 1 3 0 3 79 23 39 17 22 38 16 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = uni2126;
unicode = 8486;
},
{
glyphname = uni2206;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(680,0,l),
(680,87,l),
(399,700,l),
(306,700,l),
(25,87,l),
(25,0,l)
);
},
{
closed = 1;
nodes = (
(352,571,l),
(565,87,l),
(141,87,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 1 2 0 1 76 3 0 2 2 1 75 0 0 2 0 133 3 1 2 1 1 2 87 3 1 2 2 1 95 0 1 2 1 79 6 6 6 8 6 8 18 17 4 6 24
CALL[ ]	/* CallFunction */";
};
width = 706;
}
);
note = uni2206;
unicode = 8710;
},
{
glyphname = product;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,0,l),
(221,613,l),
(512,613,l),
(512,0,l),
(625,0,l),
(625,613,l),
(701,613,l),
(701,700,l),
(32,700,l),
(32,613,l),
(108,613,l),
(108,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
5 1 3 0 3 134 0 1 0 0 1 87 0 1 1 0 95 4 2 2 0 1 0 79 17 17 17 17 17 16 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 732;
}
);
note = product;
unicode = 8719;
},
{
glyphname = summation;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(455,-50,l),
(455,37,l),
(138,37,l),
(401,288,l),
(401,371,l),
(134,613,l),
(456,613,l),
(456,700,l),
(43,700,l),
(43,569,l),
(296,329,l),
(42,82,l),
(42,-50,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
8 7 2 1 0 5 2 1 1 76 0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 19 17 19 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 479;
}
);
note = summation;
unicode = 8721;
},
{
glyphname = radical;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(308,-43,l),
(809,878,l),
(735,878,l),
(307,90,l),
(187,303,l),
(19,205,l),
(52,149,l),
(122,189,l),
(253,-43,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
4 3 2 1 4 1 0 1 76 0 0 1 0 133 0 1 1 118 17 21 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 759;
}
);
note = radical;
unicode = 8730;
},
{
glyphname = uni00B5;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,-220,l),
(180,9,l),
(212,-12,o),
(260,-12,qs),
(317,-12,o),
(405,40,o),
(430,85,q),
(439,0,l),
(539,0,l),
(539,496,l),
(425,496,l),
(425,240,ls),
(425,167,o),
(353,84,o),
(294,84,qs),
(180,84,o),
(180,224,qs),
(180,496,l),
(66,496,l),
(66,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
12 1 1 0 17 1 3 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 36 77 0 1 1 3 97 4 1 3 3 34 77 0 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
2 1 0 0 36 77 0 3 3 34 77 0 1 1 4 97 0 4 4 40 77 0 5 5 38 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 35 17 19 34 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 606;
}
);
note = uni00B5;
unicode = 181;
},
{
glyphname = partialdiff;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(332,-9,o),
(401,42,qs),
(470,93,o),
(546,282,o),
(546,410,qs),
(546,568,o),
(420,740,o),
(304,740,qs),
(252,740,o),
(202,725,q),
(202,663,l),
(244,674,o),
(277,674,qs),
(332,674,o),
(365,647,qs),
(427,598,o),
(435,469,q),
(404,558,o),
(306,558,qs),
(228,558,o),
(106,468,o),
(38,317,o),
(38,230,qs),
(38,148,o),
(66,96,qs),
(94,44,o),
(187,-9,o),
(245,-9,qs)
);
},
{
closed = 1;
nodes = (
(210,88,o),
(152,159,o),
(152,231,qs),
(152,297,o),
(173,349,qs),
(193,402,o),
(266,463,o),
(313,463,qs),
(363,463,o),
(420,392,o),
(420,323,qs),
(420,260,o),
(400,206,qs),
(378,151,o),
(305,88,o),
(257,88,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
17 1 1 2 16 1 0 1 10 1 4 0 3 76 0 2 0 1 0 2 1 105 0 0 0 4 5 0 4 105 7 1 5 3 3 5 89 7 1 5 5 3 97 6 1 3 5 3 81 28 28 0 0 28 43 28 42 36 34 0 27 0 26 35 36 39 8 6 25
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = partialdiff;
unicode = 8706;
},
{
glyphname = percent;
kernLeft = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(273,0,l),
(672,700,l),
(561,700,l),
(162,0,l)
);
},
{
closed = 1;
nodes = (
(256,362,o),
(293,384,qs),
(332,405,o),
(376,484,o),
(376,537,qs),
(376,589,o),
(354,630,qs),
(331,669,o),
(256,712,o),
(209,712,qs),
(162,712,o),
(123,691,qs),
(84,669,o),
(40,590,o),
(40,537,qs),
(40,485,o),
(62,444,qs),
(85,405,o),
(161,362,o),
(208,362,qs)
);
},
{
closed = 1;
nodes = (
(175,443,o),
(131,492,o),
(131,537,qs),
(131,582,o),
(175,632,o),
(208,632,qs),
(242,632,o),
(285,582,o),
(285,537,qs),
(285,492,o),
(241,443,o),
(208,443,qs)
);
},
{
closed = 1;
nodes = (
(680,-12,o),
(717,10,qs),
(755,31,o),
(799,110,o),
(799,163,qs),
(799,215,o),
(777,256,qs),
(754,295,o),
(679,337,o),
(632,337,qs),
(585,337,o),
(546,316,qs),
(507,294,o),
(463,215,o),
(463,163,qs),
(463,110,o),
(486,70,qs),
(509,31,o),
(585,-12,o),
(631,-12,qs)
);
},
{
closed = 1;
nodes = (
(598,69,o),
(554,118,o),
(554,163,qs),
(554,208,o),
(598,257,o),
(631,257,qs),
(665,257,o),
(708,208,o),
(708,163,qs),
(708,118,o),
(665,69,o),
(631,69,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 106 0 4 4 0 97 2 1 0 0 33 77 13 1 9 9 1 97 12 7 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 106 0 0 0 33 77 0 4 4 2 97 0 2 2 39 77 0 1 1 34 77 13 1 9 9 7 97 12 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 36 values pushed */
56 56 36 36 24 24 4 4 56 67 56 66 62 60 36 55 36 54 46 44 24 35 24 34 30 28 4 23 4 22 41 17 16 14 8 25
CALL[ ]	/* CallFunction */";
};
width = 839;
}
);
note = percent;
unicode = 37;
},
{
glyphname = perthousand;
kernLeft = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(273,0,l),
(672,700,l),
(561,700,l),
(162,0,l)
);
},
{
closed = 1;
nodes = (
(256,362,o),
(293,384,qs),
(332,405,o),
(376,484,o),
(376,537,qs),
(376,589,o),
(354,630,qs),
(331,669,o),
(256,712,o),
(209,712,qs),
(162,712,o),
(123,691,qs),
(84,669,o),
(40,590,o),
(40,537,qs),
(40,485,o),
(62,444,qs),
(85,405,o),
(161,362,o),
(208,362,qs)
);
},
{
closed = 1;
nodes = (
(174,442,o),
(130,492,o),
(130,537,qs),
(130,583,o),
(175,633,o),
(208,633,qs),
(242,633,o),
(285,583,o),
(285,537,qs),
(285,492,o),
(241,442,o),
(208,442,qs)
);
},
{
closed = 1;
nodes = (
(680,-12,o),
(717,10,qs),
(755,31,o),
(799,110,o),
(799,163,qs),
(799,215,o),
(777,256,qs),
(754,295,o),
(679,337,o),
(632,337,qs),
(585,337,o),
(546,316,qs),
(507,294,o),
(463,215,o),
(463,163,qs),
(463,110,o),
(486,70,qs),
(509,31,o),
(585,-12,o),
(631,-12,qs)
);
},
{
closed = 1;
nodes = (
(598,68,o),
(553,118,o),
(553,163,qs),
(553,208,o),
(598,259,o),
(631,259,qs),
(665,259,o),
(709,209,o),
(709,163,qs),
(709,118,o),
(665,68,o),
(631,68,qs)
);
},
{
closed = 1;
nodes = (
(1045,-12,o),
(1083,10,qs),
(1121,31,o),
(1165,110,o),
(1165,163,qs),
(1165,218,o),
(1143,256,qs),
(1121,294,o),
(1045,337,o),
(998,337,qs),
(951,337,o),
(913,316,qs),
(873,294,o),
(829,215,o),
(829,163,qs),
(829,110,o),
(852,70,qs),
(875,31,o),
(950,-12,o),
(997,-12,qs)
);
},
{
closed = 1;
nodes = (
(963,68,o),
(920,117,o),
(920,163,qs),
(920,208,o),
(964,259,o),
(997,259,qs),
(1031,259,o),
(1075,209,o),
(1075,163,qs),
(1075,118,o),
(1031,68,o),
(997,68,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
15 1 5 14 1 3 6 5 3 105 10 1 6 12 1 8 9 6 8 106 0 4 4 0 97 2 1 0 0 33 77 19 13 17 3 9 9 1 97 18 11 16 7 4 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
15 1 5 14 1 3 6 5 3 105 10 1 6 12 1 8 9 6 8 106 0 0 0 33 77 0 4 4 2 97 0 2 2 39 77 0 1 1 34 77 19 13 17 3 9 9 7 97 18 11 16 3 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 52 values pushed */
88 88 68 68 56 56 36 36 24 24 4 4 88 99 88 98 94 92 68 87 68 86 78 76 56 67 56 66 62 60 36 55 36 54 46 44 24 35 24 34 30 28 4 23 4 22 41 17 16 20 8 25
CALL[ ]	/* CallFunction */";
};
width = 1205;
}
);
note = perthousand;
unicode = 8240;
},
{
glyphname = plus.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(345,112,l),
(345,295,l),
(533,295,l),
(533,390,l),
(345,390,l),
(345,573,l),
(247,573,l),
(247,390,l),
(58,390,l),
(58,295,l),
(247,295,l),
(247,112,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
0 2 1 5 2 87 3 1 1 4 1 0 5 1 0 103 0 2 2 5 95 0 5 2 5 79 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 592;
}
);
note = plus.case;
},
{
glyphname = arrowup;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(303,0,l),
(303,540,l),
(341,496,l),
(419,417,l),
(484,483,l),
(255,712,l),
(25,483,l),
(91,417,l),
(168,496,l),
(207,540,l),
(207,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
8 6 5 4 3 2 0 7 0 74 0 0 0 34 0 78 25 1 8 23
CALL[ ]	/* CallFunction */";
};
width = 509;
}
);
note = arrowup;
unicode = 8593;
},
{
glyphname = arrowright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(777,350,l),
(548,580,l),
(482,514,l),
(561,437,l),
(605,398,l),
(64,398,l),
(64,302,l),
(605,302,l),
(561,263,l),
(482,186,l),
(548,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
9 1 0 1 1 76 8 7 2 1 74 10 1 0 73 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 18 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 821;
}
);
note = arrowright;
unicode = 8594;
},
{
glyphname = arrowdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(484,217,l),
(418,283,l),
(341,204,l),
(302,160,l),
(302,700,l),
(206,700,l),
(206,160,l),
(168,204,l),
(90,283,l),
(25,217,l),
(254,-12,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
10 9 8 6 3 1 6 0 73 0 0 0 33 0 78 20 1 8 23
CALL[ ]	/* CallFunction */";
};
width = 509;
}
);
note = arrowdown;
unicode = 8595;
},
{
glyphname = arrowleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(339,186,l),
(260,263,l),
(216,302,l),
(757,302,l),
(757,398,l),
(216,398,l),
(260,437,l),
(339,514,l),
(273,580,l),
(44,350,l),
(273,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
2 1 2 0 74 10 9 2 1 73 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 20 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 821;
}
);
note = arrowleft;
unicode = 8592;
},
{
glyphname = lozenge;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(526,351,l),
(279,598,l),
(32,351,l),
(279,103,l)
);
},
{
closed = 1;
nodes = (
(148,351,l),
(279,483,l),
(410,351,l),
(279,218,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 5 3 1 2 50
CALL[ ]	/* CallFunction */";
};
width = 557;
}
);
note = lozenge;
unicode = 9674;
},
{
glyphname = uni0308;
layers = (
{
anchors = (
{
name = _top;
pos = (178,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(106,575,o),
(149,618,o),
(149,650,qs),
(149,682,o),
(107,724,o),
(75,724,qs),
(43,724,o),
(0,682,o),
(0,650,qs),
(0,618,o),
(43,575,o),
(75,575,qs)
);
},
{
closed = 1;
nodes = (
(313,575,o),
(356,618,o),
(356,650,qs),
(356,682,o),
(314,724,o),
(282,724,qs),
(250,724,o),
(207,682,o),
(207,650,qs),
(207,618,o),
(250,575,o),
(282,575,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0308;
unicode = 776;
},
{
glyphname = uni0307;
layers = (
{
anchors = (
{
name = _top;
pos = (75,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(106,575,o),
(149,618,o),
(149,650,qs),
(149,682,o),
(107,724,o),
(75,724,qs),
(43,724,o),
(0,682,o),
(0,650,qs),
(0,618,o),
(43,575,o),
(75,575,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0307;
unicode = 775;
},
{
glyphname = gravecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (110,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,626,l),
(0,750,l),
(0,656,l),
(221,545,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = gravecomb;
unicode = 768;
},
{
glyphname = acutecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (110,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,655,l),
(221,750,l),
(0,626,l),
(0,544,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = acutecomb;
unicode = 769;
},
{
glyphname = uni030B;
layers = (
{
anchors = (
{
name = _top;
pos = (137,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(234,546,l),
(334,715,l),
(240,715,l),
(162,546,l)
);
},
{
closed = 1;
nodes = (
(73,546,l),
(163,715,l),
(69,715,l),
(0,546,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030B;
unicode = 779;
},
{
glyphname = uni030C.alt;
layers = (
{
anchors = (
{
name = _topright;
pos = (0,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,546,l),
(159,700,l),
(48,700,l),
(0,546,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.alt;
},
{
glyphname = uni0302;
layers = (
{
anchors = (
{
name = _top;
pos = (143,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,646,l),
(286,563,l),
(286,648,l),
(143,728,l),
(0,648,l),
(0,563,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0302;
unicode = 770;
},
{
glyphname = uni030C;
layers = (
{
anchors = (
{
name = _top;
pos = (143,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(286,645,l),
(286,728,l),
(143,644,l),
(0,728,l),
(0,645,l),
(143,565,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C;
unicode = 780;
},
{
glyphname = uni0306;
layers = (
{
anchors = (
{
name = _top;
pos = (151,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,559,o),
(301,638,o),
(301,703,qs),
(301,719,l),
(239,719,l),
(239,682,o),
(197,645,o),
(150,645,qs),
(103,645,o),
(62,682,o),
(62,719,q),
(0,719,l),
(0,703,ls),
(0,638,o),
(80,559,o),
(150,559,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 35 values pushed */
2 1 0 1 0 133 0 1 3 3 1 89 0 1 1 3 97 4 1 3 1 3 81 0 0 0 15 0 14 18 34 19 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0306;
unicode = 774;
},
{
glyphname = uni030A;
layers = (
{
anchors = (
{
name = _top;
pos = (111,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,549,o),
(222,609,o),
(222,658,qs),
(222,707,o),
(158,767,o),
(110,767,qs),
(64,767,o),
(0,707,o),
(0,658,qs),
(0,609,o),
(64,549,o),
(110,549,qs)
);
},
{
closed = 1;
nodes = (
(88,602,o),
(57,634,o),
(57,658,qs),
(57,683,o),
(88,714,o),
(110,714,qs),
(134,714,o),
(165,683,o),
(165,658,qs),
(165,633,o),
(134,602,o),
(110,602,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030A;
unicode = 778;
},
{
glyphname = tildecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (168,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(269,587,o),
(327,646,o),
(335,703,q),
(273,703,l),
(267,659,o),
(230,659,qs),
(215,659,o),
(190,669,o),
(174,680,qs),
(158,691,o),
(129,704,o),
(110,704,qs),
(66,704,o),
(9,646,o),
(0,588,q),
(62,588,l),
(68,632,o),
(104,632,qs),
(120,632,o),
(144,621,o),
(159,611,qs),
(179,599,o),
(206,587,o),
(225,587,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 23 0 22 17 36 34 17 36 7 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = tildecomb;
unicode = 771;
},
{
glyphname = uni0304;
layers = (
{
anchors = (
{
name = _top;
pos = (176,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(352,610,l),
(352,692,l),
(0,692,l),
(0,610,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0304;
unicode = 772;
},
{
glyphname = uni0312;
layers = (
{
anchors = (
{
name = _top;
pos = (60,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(112,810,l),
(57,810,o),
(0,746,o),
(0,684,qs),
(0,641,o),
(13,595,q),
(114,595,l),
(114,687,l),
(63,687,l),
(63,702,ls),
(63,762,o),
(112,762,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 37 values pushed */
0 2 4 1 3 0 2 3 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 0 0 0 11 0 11 20 17 18 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0312;
unicode = 786;
},
{
glyphname = uni0326;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = _bottom;
pos = (58,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(3,-262,l),
(115,-262,o),
(115,-135,qs),
(115,-93,o),
(102,-47,q),
(1,-47,l),
(1,-139,l),
(52,-139,l),
(52,-154,ls),
(52,-214,o),
(3,-214,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 38 values pushed */
0 1 0 0 3 1 0 103 4 1 3 2 2 3 89 4 1 3 3 2 97 0 2 3 2 81 0 0 0 10 0 10 19 17 18 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0326;
unicode = 806;
},
{
glyphname = uni0327;
layers = (
{
anchors = (
{
name = _bottom;
pos = (87,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,-262,ls),
(178,-262,o),
(250,-206,o),
(250,-156,qs),
(250,-106,o),
(177,-53,o),
(120,-54,q),
(120,17,l),
(48,17,l),
(48,-116,l),
(105,-116,ls),
(163,-116,o),
(163,-155,qs),
(163,-195,o),
(105,-195,qs),
(0,-195,l),
(0,-262,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 3 3 2 112 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 3 2 133 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 17 17 34 32 5 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0327;
unicode = 807;
},
{
glyphname = uni0328;
layers = (
{
anchors = (
{
name = _ogonek;
pos = (207,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(167,-208,o),
(211,-194,q),
(211,-125,l),
(174,-140,o),
(142,-140,qs),
(117,-140,o),
(87,-116,o),
(87,-96,qs),
(87,-77,o),
(118,-44,o),
(153,-27,qs),
(207,0,l),
(180,54,l),
(132,33,ls),
(60,2,o),
(0,-66,o),
(0,-107,qs),
(0,-157,o),
(72,-208,o),
(128,-208,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
17 1 1 0 1 76 16 7 6 3 0 74 0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 19 0 18 45 3 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0328;
unicode = 808;
},
{
glyphname = uni0308.case;
layers = (
{
anchors = (
{
name = _top;
pos = (178,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(106,770,o),
(149,813,o),
(149,845,qs),
(149,877,o),
(107,919,o),
(75,919,qs),
(43,919,o),
(0,877,o),
(0,845,qs),
(0,813,o),
(43,770,o),
(75,770,qs)
);
},
{
closed = 1;
nodes = (
(313,770,o),
(356,813,o),
(356,845,qs),
(356,877,o),
(314,919,o),
(282,919,qs),
(250,919,o),
(207,877,o),
(207,845,qs),
(207,813,o),
(250,770,o),
(282,770,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0308.case;
},
{
glyphname = uni0307.case;
layers = (
{
anchors = (
{
name = _top;
pos = (75,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(106,770,o),
(149,813,o),
(149,845,qs),
(149,877,o),
(107,919,o),
(75,919,qs),
(43,919,o),
(0,877,o),
(0,845,qs),
(0,813,o),
(43,770,o),
(75,770,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0307.case;
},
{
glyphname = gravecomb.case;
layers = (
{
anchors = (
{
name = _top;
pos = (110,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,821,l),
(0,945,l),
(0,851,l),
(221,740,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = gravecomb.case;
},
{
glyphname = acutecomb.case;
layers = (
{
anchors = (
{
name = _top;
pos = (110,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,851,l),
(221,945,l),
(0,821,l),
(0,740,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = acutecomb.case;
},
{
glyphname = uni030B.case;
layers = (
{
anchors = (
{
name = _top;
pos = (167,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(234,750,l),
(334,919,l),
(240,919,l),
(162,750,l)
);
},
{
closed = 1;
nodes = (
(73,750,l),
(163,919,l),
(69,919,l),
(0,750,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030B.case;
},
{
glyphname = uni030C.alt.case;
layers = (
{
anchors = (
{
name = _topright;
pos = (1,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,546,l),
(159,700,l),
(48,700,l),
(0,546,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.alt.case;
},
{
glyphname = uni0302.case;
layers = (
{
anchors = (
{
name = _top;
pos = (143,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,832,l),
(286,750,l),
(286,833,l),
(143,913,l),
(0,833,l),
(0,750,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0302.case;
},
{
glyphname = uni030C.case;
layers = (
{
anchors = (
{
name = _top;
pos = (143,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(286,829,l),
(286,912,l),
(143,828,l),
(0,912,l),
(0,829,l),
(143,749,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.case;
},
{
glyphname = uni0306.case;
layers = (
{
anchors = (
{
name = _top;
pos = (151,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,752,o),
(301,831,o),
(301,896,qs),
(301,912,l),
(239,912,l),
(239,875,o),
(197,838,o),
(150,838,qs),
(103,838,o),
(62,875,o),
(62,912,q),
(0,912,l),
(0,896,ls),
(0,831,o),
(80,752,o),
(150,752,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
2 1 0 1 0 133 0 1 3 3 1 89 0 1 1 3 97 4 1 3 1 3 81 0 0 0 15 0 14 18 34 19 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0306.case;
},
{
glyphname = uni030A.case;
layers = (
{
anchors = (
{
name = _top;
pos = (111,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,754,o),
(222,814,o),
(222,863,qs),
(222,913,o),
(158,972,o),
(110,972,qs),
(64,972,o),
(0,912,o),
(0,863,qs),
(0,814,o),
(64,754,o),
(110,754,qs)
);
},
{
closed = 1;
nodes = (
(88,807,o),
(57,839,o),
(57,863,qs),
(57,888,o),
(88,919,o),
(110,919,qs),
(134,919,o),
(165,888,o),
(165,863,qs),
(165,838,o),
(134,807,o),
(110,807,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030A.case;
},
{
glyphname = tildecomb.case;
layers = (
{
anchors = (
{
name = _top;
pos = (168,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(269,753,o),
(327,812,o),
(335,870,q),
(273,870,l),
(270,848,o),
(247,825,o),
(230,825,qs),
(215,825,o),
(192,836,o),
(174,847,qs),
(158,858,o),
(129,871,o),
(110,871,qs),
(66,871,o),
(9,813,o),
(0,755,q),
(62,755,l),
(68,800,o),
(104,800,qs),
(119,800,o),
(143,789,o),
(159,778,qs),
(180,765,o),
(206,753,o),
(225,753,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 24 0 23 18 36 34 17 36 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = tildecomb.case;
},
{
glyphname = uni0304.case;
layers = (
{
anchors = (
{
name = _top;
pos = (176,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(352,787,l),
(352,869,l),
(0,869,l),
(0,787,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0304.case;
},
{
glyphname = uni0327.case;
layers = (
{
anchors = (
{
name = _bottom;
pos = (85,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,-262,ls),
(178,-262,o),
(250,-206,o),
(250,-156,qs),
(250,-106,o),
(177,-53,o),
(120,-54,q),
(120,17,l),
(48,17,l),
(48,-116,l),
(105,-116,ls),
(163,-116,o),
(163,-155,qs),
(163,-195,o),
(105,-195,qs),
(0,-195,l),
(0,-262,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 3 3 2 112 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 3 2 133 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 17 17 34 32 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0327.case;
},
{
glyphname = uni0328.case;
layers = (
{
anchors = (
{
name = _ogonek;
pos = (207,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(167,-208,o),
(211,-194,q),
(211,-125,l),
(174,-140,o),
(142,-140,qs),
(117,-140,o),
(87,-116,o),
(87,-96,qs),
(87,-77,o),
(118,-44,o),
(153,-27,qs),
(207,0,l),
(180,54,l),
(132,33,ls),
(60,2,o),
(0,-66,o),
(0,-107,qs),
(0,-157,o),
(72,-208,o),
(128,-208,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
17 1 1 0 1 76 16 7 6 3 0 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 1 97 2 1 1 1 38 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 19 0 18 45 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0328.case;
},
{
glyphname = uni0308.narrow;
layers = (
{
anchors = (
{
name = _top;
pos = (178,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(116,575,o),
(159,618,o),
(159,650,qs),
(159,682,o),
(117,724,o),
(85,724,qs),
(53,724,o),
(10,682,o),
(10,650,qs),
(10,618,o),
(53,575,o),
(85,575,qs)
);
},
{
closed = 1;
nodes = (
(303,575,o),
(346,618,o),
(346,650,qs),
(346,682,o),
(304,724,o),
(272,724,qs),
(240,724,o),
(197,682,o),
(197,650,qs),
(197,618,o),
(240,575,o),
(272,575,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 1 0 97 2 1 0 0 41 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 1 0 97 2 1 0 0 39 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0308.narrow;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (3,0);
ref = uni0308;
}
);
width = 333;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (95,0);
ref = uni0307;
}
);
width = 333;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (46,0);
ref = gravecomb;
}
);
width = 333;
}
);
note = grave;
unicode = 96;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (56,0);
ref = acutecomb;
}
);
width = 333;
}
);
note = acute;
unicode = 180;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni030B;
}
);
width = 333;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (24,0);
ref = uni0302;
}
);
width = 333;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (24,0);
ref = uni030C;
}
);
width = 333;
}
);
note = caron;
unicode = 711;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (17,0);
ref = uni0306;
}
);
width = 333;
}
);
note = breve;
unicode = 728;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (56,0);
ref = uni030A;
}
);
width = 333;
}
);
note = ring;
unicode = 730;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = tildecomb;
}
);
width = 333;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-9,0);
ref = uni0304;
}
);
width = 333;
}
);
note = macron;
unicode = 175;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (42,0);
ref = uni0327;
}
);
width = 333;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (61,0);
ref = uni0328;
}
);
width = 333;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = uni02BA;
kernLeft = uni02BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,550,l),
(288,755,l),
(188,755,l),
(200,550,l)
);
},
{
closed = 1;
nodes = (
(127,550,l),
(138,755,l),
(38,755,l),
(49,550,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 327;
}
);
note = uni02BA;
unicode = 698;
},
{
glyphname = uni02B9;
kernLeft = uni02BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,550,l),
(141,755,l),
(38,755,l),
(51,550,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 178;
}
);
note = uni02B9;
unicode = 697;
},
{
glyphname = uniE000;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(214,0,l),
(214,214,l),
(419,0,l),
(565,0,l),
(321,260,l),
(550,511,l),
(406,511,l),
(214,309,l),
(214,700,l),
(100,700,l),
(100,0,l)
);
},
{
closed = 1;
nodes = (
(886,-12,o),
(1011,57,o),
(1082,179,o),
(1082,254,qs),
(1082,329,o),
(1011,452,o),
(886,523,o),
(808,523,qs),
(730,523,o),
(606,452,o),
(535,329,o),
(535,254,qs),
(535,179,o),
(606,57,o),
(730,-12,o),
(808,-12,qs)
);
},
{
closed = 1;
nodes = (
(759,95,o),
(688,137,o),
(649,210,o),
(649,254,qs),
(649,298,o),
(688,371,o),
(759,413,o),
(806,413,qs),
(853,413,o),
(925,371,o),
(965,298,o),
(965,254,qs),
(965,210,o),
(925,137,o),
(853,95,o),
(806,95,qs)
);
},
{
closed = 1;
nodes = (
(732,566,o),
(773,607,o),
(773,637,qs),
(773,667,o),
(733,707,o),
(702,707,qs),
(672,707,o),
(631,665,o),
(631,636,qs),
(631,607,o),
(672,566,o),
(702,566,qs)
);
},
{
closed = 1;
nodes = (
(943,566,o),
(984,607,o),
(984,637,qs),
(984,667,o),
(944,707,o),
(913,707,qs),
(883,707,o),
(842,665,o),
(842,636,qs),
(842,607,o),
(883,566,o),
(913,566,qs)
);
},
{
closed = 1;
nodes = (
(1262,0,l),
(1262,700,l),
(1152,700,l),
(1152,0,l)
);
},
{
closed = 1;
nodes = (
(1577,95,o),
(1505,140,o),
(1467,213,o),
(1467,254,qs),
(1467,297,o),
(1508,370,o),
(1580,413,o),
(1626,413,qs),
(1694,413,o),
(1782,323,o),
(1782,254,qs),
(1782,209,o),
(1742,136,o),
(1671,95,o),
(1626,95,qs)
);
},
{
closed = 1;
nodes = (
(1722,-12,o),
(1836,60,o),
(1898,182,o),
(1898,254,qs),
(1898,331,o),
(1832,454,o),
(1718,523,o),
(1647,523,qs),
(1590,523,o),
(1502,478,o),
(1467,431,q),
(1467,700,l),
(1357,700,l),
(1357,0,l),
(1467,0,l),
(1467,80,l),
(1502,33,o),
(1590,-12,o),
(1647,-12,qs)
);
},
{
closed = 1;
nodes = (
(2081,0,l),
(2081,511,l),
(1968,511,l),
(1968,0,l)
);
},
{
closed = 1;
nodes = (
(2054,566,o),
(2095,607,o),
(2095,637,qs),
(2095,667,o),
(2055,707,o),
(2024,707,qs),
(1994,707,o),
(1953,665,o),
(1953,636,qs),
(1953,607,o),
(1994,566,o),
(2024,566,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 171 values pushed */
93 1 6 1 8 5 2 3 7 6 88 1 2 7 3 76 17 12 2 0 8 9 8 0 9 128 20 1 1 4 6 4 1 6 128 21 16 13 3 4 2 7 5 7 2 5 128 22 10 2 8 30 23 27 11 26 5 9 4 8 9 105 18 1 4 14 1 6 7 4 6 105 28 15 25 3 7 2 5 7 89 28 15 25 3 7 7 5 97 29 19 24 3 5 7 5 81 109 109 86 86 71 71 55 55 43 43 27 27 11 11 109 120 109 119 115 113 108 107 106 105 86 104 86 103 97 95 92 91 90 89 71 85 71 84 78 76 70 69 68 67 55 66 55 65 61 59 43 54 43 53 49 47 27 42 27 41 35 33 11 26 11 25 39 18 18 18 16 31 6 27
CALL[ ]	/* CallFunction */";
};
width = 2195;
}
);
note = uniE000;
unicode = 57344;
},
{
glyphname = uniE001;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(211,225,l),
(233,173,o),
(306,118,o),
(353,118,qs),
(405,118,o),
(472,177,o),
(472,227,qs),
(472,278,o),
(404,339,o),
(349,339,qs),
(278,339,o),
(227,288,q),
(133,330,l),
(174,700,l),
(581,700,l),
(581,579,l),
(288,579,l),
(271,426,l),
(288,440,o),
(349,458,o),
(384,458,qs),
(456,458,o),
(561,400,o),
(617,296,o),
(617,229,qs),
(617,160,o),
(550,52,o),
(431,-8,o),
(355,-8,qs),
(266,-8,o),
(135,82,o),
(100,166,q)
);
},
{
closed = 1;
nodes = (
(936,-8,o),
(770,88,o),
(674,253,o),
(674,352,qs),
(674,449,o),
(764,614,o),
(928,711,o),
(1033,711,qs),
(1129,711,o),
(1290,620,o),
(1339,546,q),
(1229,468,l),
(1156,581,o),
(1033,581,qs),
(933,581,o),
(818,456,o),
(818,352,qs),
(818,283,o),
(876,177,o),
(975,120,o),
(1035,120,qs),
(1118,120,o),
(1220,203,o),
(1234,265,q),
(1021,265,l),
(1021,383,l),
(1373,383,l),
(1375,369,o),
(1375,328,qs),
(1375,238,o),
(1292,84,o),
(1137,-8,o),
(1035,-8,qs)
);
},
{
closed = 1;
nodes = (
(855,949,o),
(812,904,o),
(812,873,qs),
(812,843,o),
(855,798,o),
(888,798,qs),
(921,798,o),
(964,843,o),
(964,874,qs),
(964,904,o),
(921,949,o),
(888,949,qs)
);
},
{
closed = 1;
nodes = (
(1667,107,l),
(1714,157,o),
(1763,278,o),
(1763,342,qs),
(1763,405,o),
(1716,525,o),
(1670,575,q),
(1755,663,l),
(1818,597,o),
(1884,430,o),
(1884,342,qs),
(1884,254,o),
(1818,89,o),
(1755,23,q)
);
},
{
closed = 1;
nodes = (
(1839,-59,l),
(1919,23,o),
(2001,231,o),
(2001,342,qs),
(2001,453,o),
(1919,661,o),
(1839,742,q),
(1925,831,l),
(2023,731,o),
(2125,477,o),
(2125,342,qs),
(2125,208,o),
(2023,-47,o),
(1925,-148,q)
);
},
{
closed = 1;
nodes = (
(1088,949,o),
(1045,904,o),
(1045,873,qs),
(1045,843,o),
(1088,798,o),
(1121,798,qs),
(1154,798,o),
(1197,843,o),
(1197,874,qs),
(1197,904,o),
(1154,949,o),
(1121,949,qs)
);
},
{
closed = 1;
nodes = (
(1597,248,o),
(1652,303,o),
(1652,342,qs),
(1652,381,o),
(1597,436,o),
(1558,436,qs),
(1519,436,o),
(1464,381,o),
(1464,342,qs),
(1464,303,o),
(1519,248,o),
(1558,248,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
96 1 12 13 97 1 10 12 82 1 2 3 83 53 52 3 1 2 13 1 6 16 19 18 2 7 4 31 30 2 5 17 90 89 2 0 5 8 76 104 103 2 0 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
20 15 19 3 13 12 13 133 14 1 12 10 10 12 112 0 16 1 6 1 16 6 128 21 1 17 7 5 7 17 5 128 0 10 3 2 10 89 0 3 9 1 2 1 3 2 105 0 1 0 4 7 1 4 105 0 6 0 7 17 6 7 103 8 1 5 0 0 5 89 8 1 5 5 0 97 18 11 2 0 5 0 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 82 values pushed */
20 15 19 3 13 12 13 133 14 1 12 10 12 133 0 16 1 6 1 16 6 128 21 1 17 7 5 7 17 5 128 0 10 3 2 10 89 0 3 9 1 2 1 3 2 105 0 1 0 4 7 1 4 105 0 6 0 7 17 6 7 103 8 1 5 0 0 5 89 8 1 5 5 0 97 18 11 2 0 5 0 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 46 values pushed */
117 117 105 105 65 65 32 32 117 128 117 127 123 121 105 116 105 115 111 109 65 76 65 75 71 69 32 64 32 63 57 55 51 49 34 17 25 36 35 17 19 38 33 22 6 31
CALL[ ]	/* CallFunction */";
};
width = 2224;
}
);
note = uniE001;
unicode = 57345;
},
{
glyphname = uniE002;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,48,o),
(552,48,qs),
(559,48,o),
(564,53,qs),
(741,229,ls),
(800,288,o),
(800,367,qs),
(800,386,ls),
(800,393,o),
(803,399,o),
(809,401,qs),
(857,418,o),
(919,499,o),
(919,550,qs),
(919,594,o),
(877,667,o),
(805,710,o),
(760,710,qs),
(707,710,o),
(630,653,o),
(610,603,qs),
(606,592,o),
(594,584,o),
(585,584,qs),
(520,584,ls),
(509,584,o),
(497,592,o),
(493,603,qs),
(473,653,o),
(396,710,o),
(343,710,qs),
(298,710,o),
(226,667,o),
(184,594,o),
(184,550,qs),
(184,499,o),
(246,418,o),
(294,401,qs),
(300,399,o),
(303,393,o),
(303,386,qs),
(303,367,ls),
(303,294,o),
(362,229,q),
(539,53,l)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(521,0,o),
(528,7,o),
(528,12,qs),
(528,17,o),
(524,21,qs),
(321,222,ls),
(285,258,o),
(232,258,qs),
(198,258,o),
(138,227,o),
(100,168,o),
(100,130,qs),
(100,97,o),
(133,37,o),
(193,0,o),
(232,0,qs)
);
},
{
closed = 1;
nodes = (
(294,435,o),
(224,505,o),
(224,554,qs),
(224,603,o),
(294,672,o),
(343,672,qs),
(392,672,o),
(461,603,o),
(461,554,qs),
(461,505,o),
(392,435,o),
(343,435,qs)
);
},
{
closed = 1;
nodes = (
(383,456,o),
(440,514,o),
(440,554,qs),
(440,594,o),
(383,651,o),
(343,651,qs),
(303,651,o),
(245,594,o),
(245,554,qs),
(245,514,o),
(303,456,o),
(343,456,qs)
);
},
{
closed = 1;
nodes = (
(314,484,o),
(273,525,o),
(273,554,qs),
(273,583,o),
(314,623,o),
(343,623,qs),
(357,623,o),
(373,616,q),
(365,614,o),
(355,600,o),
(355,592,qs),
(355,581,o),
(370,566,o),
(381,566,qs),
(389,566,o),
(403,576,o),
(405,584,q),
(412,568,o),
(412,554,qs),
(412,525,o),
(372,484,o),
(343,484,qs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(910,0,o),
(970,37,o),
(1003,97,o),
(1003,130,qs),
(1003,168,o),
(965,227,o),
(905,258,o),
(871,258,qs),
(818,258,o),
(782,222,qs),
(579,21,ls),
(575,17,o),
(575,12,qs),
(575,7,o),
(582,0,o),
(588,0,qs)
);
},
{
closed = 1;
nodes = (
(712,435,o),
(642,505,o),
(642,554,qs),
(642,603,o),
(712,672,o),
(761,672,qs),
(810,672,o),
(879,603,o),
(879,554,qs),
(879,505,o),
(810,435,o),
(761,435,qs)
);
},
{
closed = 1;
nodes = (
(801,456,o),
(858,514,o),
(858,554,qs),
(858,594,o),
(801,651,o),
(761,651,qs),
(721,651,o),
(663,594,o),
(663,554,qs),
(663,514,o),
(721,456,o),
(761,456,qs)
);
},
{
closed = 1;
nodes = (
(732,484,o),
(691,525,o),
(691,554,qs),
(691,583,o),
(732,623,o),
(761,623,qs),
(775,623,o),
(791,616,q),
(783,614,o),
(773,600,o),
(773,592,qs),
(773,581,o),
(788,566,o),
(799,566,qs),
(807,566,o),
(821,576,o),
(823,584,q),
(830,568,o),
(830,554,qs),
(830,525,o),
(790,484,o),
(761,484,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
162 159 99 96 4 1 11 3 1 4 7 2 76 153 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
0 1 11 10 11 1 10 128 19 1 10 12 11 10 112 26 16 23 3 7 9 4 9 7 4 128 13 1 4 3 9 4 3 126 0 3 5 9 3 5 126 14 22 2 5 5 132 2 1 0 15 1 6 8 0 6 105 17 1 8 20 1 11 1 8 11 105 28 21 25 3 12 9 9 12 89 28 21 25 3 12 12 9 97 27 18 24 3 9 12 9 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 93 values pushed */
0 1 11 10 11 1 10 128 19 1 10 12 11 10 12 126 26 16 23 3 7 9 4 9 7 4 128 13 1 4 3 9 4 3 126 0 3 5 9 3 5 126 14 22 2 5 5 132 2 1 0 15 1 6 8 0 6 105 17 1 8 20 1 11 1 8 11 105 28 21 25 3 12 9 9 12 89 28 21 25 3 12 12 9 97 27 18 24 3 9 12 9 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 70 values pushed */
149 149 137 137 125 125 86 86 74 74 62 62 45 45 149 170 149 169 165 163 157 155 137 148 137 147 143 141 125 136 125 135 131 129 124 122 116 114 86 107 86 106 102 100 94 92 74 85 74 84 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 29 6 27
CALL[ ]	/* CallFunction */";
};
width = 1103;
}
);
note = uniE002;
unicode = 57346;
},
{
glyphname = uniE003;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,48,o),
(552,48,qs),
(559,48,o),
(564,53,qs),
(741,229,ls),
(800,288,o),
(800,367,qs),
(800,386,ls),
(800,393,o),
(803,399,o),
(809,401,qs),
(857,418,o),
(919,499,o),
(919,550,qs),
(919,594,o),
(877,667,o),
(805,710,o),
(760,710,qs),
(707,710,o),
(630,653,o),
(610,603,qs),
(606,592,o),
(594,584,o),
(585,584,qs),
(520,584,ls),
(509,584,o),
(497,592,o),
(493,603,qs),
(473,653,o),
(396,710,o),
(343,710,qs),
(298,710,o),
(226,667,o),
(184,594,o),
(184,550,qs),
(184,499,o),
(246,418,o),
(294,401,qs),
(300,399,o),
(303,393,o),
(303,386,qs),
(303,367,ls),
(303,294,o),
(362,229,q),
(539,53,l)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(521,0,o),
(528,7,o),
(528,12,qs),
(528,17,o),
(524,21,qs),
(321,222,ls),
(285,258,o),
(232,258,qs),
(198,258,o),
(138,227,o),
(100,168,o),
(100,130,qs),
(100,97,o),
(133,37,o),
(193,0,o),
(232,0,qs)
);
},
{
closed = 1;
nodes = (
(303,456,o),
(245,514,o),
(245,554,qs),
(245,594,o),
(303,651,o),
(343,651,qs),
(383,651,o),
(440,594,o),
(440,554,qs),
(440,514,o),
(383,456,o),
(343,456,qs)
);
},
{
closed = 1;
nodes = (
(372,484,o),
(412,525,o),
(412,554,qs),
(412,568,o),
(405,584,q),
(403,576,o),
(389,566,o),
(381,566,qs),
(370,566,o),
(355,581,o),
(355,592,qs),
(355,600,o),
(365,614,o),
(373,616,q),
(357,623,o),
(343,623,qs),
(314,623,o),
(273,583,o),
(273,554,qs),
(273,525,o),
(314,484,o),
(343,484,qs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(910,0,o),
(970,37,o),
(1003,97,o),
(1003,130,qs),
(1003,168,o),
(965,227,o),
(905,258,o),
(871,258,qs),
(818,258,o),
(782,222,qs),
(579,21,ls),
(575,17,o),
(575,12,qs),
(575,7,o),
(582,0,o),
(588,0,qs)
);
},
{
closed = 1;
nodes = (
(721,456,o),
(663,514,o),
(663,554,qs),
(663,594,o),
(721,651,o),
(761,651,qs),
(801,651,o),
(858,594,o),
(858,554,qs),
(858,514,o),
(801,456,o),
(761,456,qs)
);
},
{
closed = 1;
nodes = (
(790,484,o),
(830,525,o),
(830,554,qs),
(830,568,o),
(823,584,q),
(821,576,o),
(807,566,o),
(799,566,qs),
(788,566,o),
(773,581,o),
(773,592,qs),
(773,600,o),
(783,614,o),
(791,616,q),
(775,623,o),
(761,623,qs),
(732,623,o),
(691,583,o),
(691,554,qs),
(691,525,o),
(732,484,o),
(761,484,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 150 values pushed */
132 81 2 1 8 3 1 4 7 2 76 141 90 2 1 1 75 0 1 8 9 8 1 9 128 16 1 9 10 8 9 10 126 21 14 19 3 7 10 4 10 7 4 128 11 1 4 3 10 4 3 126 0 3 5 10 3 5 126 12 18 2 5 5 132 2 1 0 13 1 6 8 0 6 105 15 1 8 1 10 8 89 15 1 8 8 10 97 22 17 20 3 10 8 10 81 125 125 113 113 74 74 62 62 45 45 125 146 125 145 138 137 131 129 113 124 113 123 119 117 112 110 104 102 74 95 74 94 87 86 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 23 6 27
CALL[ ]	/* CallFunction */";
};
width = 1103;
}
);
note = uniE003;
unicode = 57347;
},
{
glyphname = uniE004;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,48,o),
(552,48,qs),
(559,48,o),
(564,53,qs),
(741,229,ls),
(800,288,o),
(800,367,qs),
(800,386,ls),
(800,393,o),
(803,399,o),
(809,401,qs),
(857,418,o),
(919,499,o),
(919,550,qs),
(919,594,o),
(877,667,o),
(805,710,o),
(760,710,qs),
(707,710,o),
(630,653,o),
(610,603,qs),
(606,592,o),
(594,584,o),
(585,584,qs),
(520,584,ls),
(509,584,o),
(497,592,o),
(493,603,qs),
(473,653,o),
(396,710,o),
(343,710,qs),
(298,710,o),
(226,667,o),
(184,594,o),
(184,550,qs),
(184,499,o),
(246,418,o),
(294,401,qs),
(300,399,o),
(303,393,o),
(303,386,qs),
(303,367,ls),
(303,294,o),
(362,229,q),
(539,53,l)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(521,0,o),
(528,7,o),
(528,12,qs),
(528,17,o),
(524,21,qs),
(321,222,ls),
(285,258,o),
(232,258,qs),
(198,258,o),
(138,227,o),
(100,168,o),
(100,130,qs),
(100,97,o),
(133,37,o),
(193,0,o),
(232,0,qs)
);
},
{
closed = 1;
nodes = (
(294,435,o),
(224,505,o),
(224,554,qs),
(224,603,o),
(294,672,o),
(343,672,qs),
(392,672,o),
(461,603,o),
(461,554,qs),
(461,505,o),
(392,435,o),
(343,435,qs)
);
},
{
closed = 1;
nodes = (
(383,456,o),
(440,514,o),
(440,554,qs),
(440,594,o),
(383,651,o),
(343,651,qs),
(303,651,o),
(245,594,o),
(245,554,qs),
(245,514,o),
(303,456,o),
(343,456,qs)
);
},
{
closed = 1;
nodes = (
(314,484,o),
(273,525,o),
(273,554,qs),
(273,583,o),
(314,623,o),
(343,623,qs),
(357,623,o),
(373,616,q),
(365,614,o),
(355,600,o),
(355,592,qs),
(355,581,o),
(370,566,o),
(381,566,qs),
(389,566,o),
(403,576,o),
(405,584,q),
(412,568,o),
(412,554,qs),
(412,525,o),
(372,484,o),
(343,484,qs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(910,0,o),
(970,37,o),
(1003,97,o),
(1003,130,qs),
(1003,168,o),
(965,227,o),
(905,258,o),
(871,258,qs),
(818,258,o),
(782,222,qs),
(579,21,ls),
(575,17,o),
(575,12,qs),
(575,7,o),
(582,0,o),
(588,0,qs)
);
},
{
closed = 1;
nodes = (
(1255,0,l),
(1255,214,l),
(1460,0,l),
(1606,0,l),
(1362,260,l),
(1591,511,l),
(1447,511,l),
(1255,309,l),
(1255,700,l),
(1141,700,l),
(1141,0,l)
);
},
{
closed = 1;
nodes = (
(1927,-12,o),
(2052,57,o),
(2123,179,o),
(2123,254,qs),
(2123,329,o),
(2052,452,o),
(1927,523,o),
(1849,523,qs),
(1771,523,o),
(1647,452,o),
(1576,329,o),
(1576,254,qs),
(1576,179,o),
(1647,57,o),
(1771,-12,o),
(1849,-12,qs)
);
},
{
closed = 1;
nodes = (
(1800,95,o),
(1729,137,o),
(1690,210,o),
(1690,254,qs),
(1690,298,o),
(1729,371,o),
(1800,413,o),
(1847,413,qs),
(1894,413,o),
(1966,371,o),
(2006,298,o),
(2006,254,qs),
(2006,210,o),
(1966,137,o),
(1894,95,o),
(1847,95,qs)
);
},
{
closed = 1;
nodes = (
(1773,566,o),
(1814,607,o),
(1814,637,qs),
(1814,667,o),
(1774,707,o),
(1743,707,qs),
(1713,707,o),
(1672,665,o),
(1672,636,qs),
(1672,607,o),
(1713,566,o),
(1743,566,qs)
);
},
{
closed = 1;
nodes = (
(1984,566,o),
(2025,607,o),
(2025,637,qs),
(2025,667,o),
(1985,707,o),
(1954,707,qs),
(1924,707,o),
(1883,665,o),
(1883,636,qs),
(1883,607,o),
(1924,566,o),
(1954,566,qs)
);
},
{
closed = 1;
nodes = (
(2303,0,l),
(2303,700,l),
(2193,700,l),
(2193,0,l)
);
},
{
closed = 1;
nodes = (
(2618,95,o),
(2546,140,o),
(2508,213,o),
(2508,254,qs),
(2508,297,o),
(2549,370,o),
(2621,413,o),
(2667,413,qs),
(2735,413,o),
(2823,323,o),
(2823,254,qs),
(2823,209,o),
(2783,136,o),
(2712,95,o),
(2667,95,qs)
);
},
{
closed = 1;
nodes = (
(2763,-12,o),
(2877,60,o),
(2939,182,o),
(2939,254,qs),
(2939,331,o),
(2873,454,o),
(2759,523,o),
(2688,523,qs),
(2631,523,o),
(2543,478,o),
(2508,431,q),
(2508,700,l),
(2398,700,l),
(2398,0,l),
(2508,0,l),
(2508,80,l),
(2543,33,o),
(2631,-12,o),
(2688,-12,qs)
);
},
{
closed = 1;
nodes = (
(3122,0,l),
(3122,511,l),
(3009,511,l),
(3009,0,l)
);
},
{
closed = 1;
nodes = (
(3095,566,o),
(3136,607,o),
(3136,637,qs),
(3136,667,o),
(3096,707,o),
(3065,707,qs),
(3035,707,o),
(2994,665,o),
(2994,636,qs),
(2994,607,o),
(3035,566,o),
(3065,566,qs)
);
},
{
closed = 1;
nodes = (
(712,435,o),
(642,505,o),
(642,554,qs),
(642,603,o),
(712,672,o),
(761,672,qs),
(810,672,o),
(879,603,o),
(879,554,qs),
(879,505,o),
(810,435,o),
(761,435,qs)
);
},
{
closed = 1;
nodes = (
(801,456,o),
(858,514,o),
(858,554,qs),
(858,594,o),
(801,651,o),
(761,651,qs),
(721,651,o),
(663,594,o),
(663,554,qs),
(663,514,o),
(721,456,o),
(761,456,qs)
);
},
{
closed = 1;
nodes = (
(732,484,o),
(691,525,o),
(691,554,qs),
(691,583,o),
(732,623,o),
(761,623,qs),
(775,623,o),
(791,616,q),
(783,614,o),
(773,600,o),
(773,592,qs),
(773,581,o),
(788,566,o),
(799,566,qs),
(807,566,o),
(821,576,o),
(823,584,q),
(830,568,o),
(830,554,qs),
(830,525,o),
(790,484,o),
(761,484,qs)
);
}
);
userData = {
assembly = "NPUSHW[ ]	/* 33 values pushed */
283 280 99 96 4 1 11 218 1 21 7 130 127 3 3 4 21 133 1 22 4 213 1 3 22 5 76 274 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 154 values pushed */
32 27 2 15 0 6 0 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 39 1 6 8 0 6 89 41 1 8 44 1 11 1 8 11 105 37 25 23 2 4 0 43 56 38 53 26 52 24 7 10 19 0 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 155 values pushed */
32 27 2 15 23 6 23 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 2 1 0 39 1 6 8 0 6 105 41 1 8 44 1 11 1 8 11 105 37 25 2 23 43 56 38 53 26 52 24 7 10 19 23 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 154 values pushed */
32 27 2 15 0 6 0 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 39 1 6 8 0 6 89 41 1 8 44 1 11 1 8 11 105 37 25 23 2 4 0 43 56 38 53 26 52 24 7 10 19 0 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 146 values pushed */
270 270 258 258 246 246 234 234 211 211 196 196 180 180 168 168 152 152 136 136 86 86 74 74 62 62 45 45 270 291 270 290 286 284 278 276 258 269 258 268 264 262 246 257 246 256 252 250 234 245 234 244 240 238 233 232 231 230 211 229 211 228 222 220 217 216 215 214 196 210 196 209 203 201 195 194 193 192 180 191 180 190 186 184 168 179 168 178 174 172 152 167 152 166 160 158 136 151 136 150 144 142 135 134 132 131 129 128 126 125 124 122 116 114 86 107 86 106 102 100 94 92 74 85 74 84 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 60 6 27
CALL[ ]	/* CallFunction */";
};
width = 3236;
}
);
note = uniE004;
},
{
glyphname = uniE005;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,48,o),
(552,48,qs),
(559,48,o),
(564,53,qs),
(741,229,ls),
(800,288,o),
(800,367,qs),
(800,386,ls),
(800,393,o),
(803,399,o),
(809,401,qs),
(857,418,o),
(919,499,o),
(919,550,qs),
(919,594,o),
(877,667,o),
(805,710,o),
(760,710,qs),
(707,710,o),
(630,653,o),
(610,603,qs),
(606,592,o),
(594,584,o),
(585,584,qs),
(520,584,ls),
(509,584,o),
(497,592,o),
(493,603,qs),
(473,653,o),
(396,710,o),
(343,710,qs),
(298,710,o),
(226,667,o),
(184,594,o),
(184,550,qs),
(184,499,o),
(246,418,o),
(294,401,qs),
(300,399,o),
(303,393,o),
(303,386,qs),
(303,367,ls),
(303,294,o),
(362,229,q),
(539,53,l)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(521,0,o),
(528,7,o),
(528,12,qs),
(528,17,o),
(524,21,qs),
(321,222,ls),
(285,258,o),
(232,258,qs),
(198,258,o),
(138,227,o),
(100,168,o),
(100,130,qs),
(100,97,o),
(133,37,o),
(193,0,o),
(232,0,qs)
);
},
{
closed = 1;
nodes = (
(303,456,o),
(245,514,o),
(245,554,qs),
(245,594,o),
(303,651,o),
(343,651,qs),
(383,651,o),
(440,594,o),
(440,554,qs),
(440,514,o),
(383,456,o),
(343,456,qs)
);
},
{
closed = 1;
nodes = (
(372,484,o),
(412,525,o),
(412,554,qs),
(412,568,o),
(405,584,q),
(403,576,o),
(389,566,o),
(381,566,qs),
(370,566,o),
(355,581,o),
(355,592,qs),
(355,600,o),
(365,614,o),
(373,616,q),
(357,623,o),
(343,623,qs),
(314,623,o),
(273,583,o),
(273,554,qs),
(273,525,o),
(314,484,o),
(343,484,qs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(910,0,o),
(970,37,o),
(1003,97,o),
(1003,130,qs),
(1003,168,o),
(965,227,o),
(905,258,o),
(871,258,qs),
(818,258,o),
(782,222,qs),
(579,21,ls),
(575,17,o),
(575,12,qs),
(575,7,o),
(582,0,o),
(588,0,qs)
);
},
{
closed = 1;
nodes = (
(721,456,o),
(663,514,o),
(663,554,qs),
(663,594,o),
(721,651,o),
(761,651,qs),
(801,651,o),
(858,594,o),
(858,554,qs),
(858,514,o),
(801,456,o),
(761,456,qs)
);
},
{
closed = 1;
nodes = (
(790,484,o),
(830,525,o),
(830,554,qs),
(830,568,o),
(823,584,q),
(821,576,o),
(807,566,o),
(799,566,qs),
(788,566,o),
(773,581,o),
(773,592,qs),
(773,600,o),
(783,614,o),
(791,616,q),
(775,623,o),
(761,623,qs),
(732,623,o),
(691,583,o),
(691,554,qs),
(691,525,o),
(732,484,o),
(761,484,qs)
);
},
{
closed = 1;
nodes = (
(1255,0,l),
(1255,214,l),
(1460,0,l),
(1606,0,l),
(1362,260,l),
(1591,511,l),
(1447,511,l),
(1255,309,l),
(1255,700,l),
(1141,700,l),
(1141,0,l)
);
},
{
closed = 1;
nodes = (
(1927,-12,o),
(2052,57,o),
(2123,179,o),
(2123,254,qs),
(2123,329,o),
(2052,452,o),
(1927,523,o),
(1849,523,qs),
(1771,523,o),
(1647,452,o),
(1576,329,o),
(1576,254,qs),
(1576,179,o),
(1647,57,o),
(1771,-12,o),
(1849,-12,qs)
);
},
{
closed = 1;
nodes = (
(1800,95,o),
(1729,137,o),
(1690,210,o),
(1690,254,qs),
(1690,298,o),
(1729,371,o),
(1800,413,o),
(1847,413,qs),
(1894,413,o),
(1966,371,o),
(2006,298,o),
(2006,254,qs),
(2006,210,o),
(1966,137,o),
(1894,95,o),
(1847,95,qs)
);
},
{
closed = 1;
nodes = (
(1773,566,o),
(1814,607,o),
(1814,637,qs),
(1814,667,o),
(1774,707,o),
(1743,707,qs),
(1713,707,o),
(1672,665,o),
(1672,636,qs),
(1672,607,o),
(1713,566,o),
(1743,566,qs)
);
},
{
closed = 1;
nodes = (
(1984,566,o),
(2025,607,o),
(2025,637,qs),
(2025,667,o),
(1985,707,o),
(1954,707,qs),
(1924,707,o),
(1883,665,o),
(1883,636,qs),
(1883,607,o),
(1924,566,o),
(1954,566,qs)
);
},
{
closed = 1;
nodes = (
(2303,0,l),
(2303,700,l),
(2193,700,l),
(2193,0,l)
);
},
{
closed = 1;
nodes = (
(2618,95,o),
(2546,140,o),
(2508,213,o),
(2508,254,qs),
(2508,297,o),
(2549,370,o),
(2621,413,o),
(2667,413,qs),
(2735,413,o),
(2823,323,o),
(2823,254,qs),
(2823,209,o),
(2783,136,o),
(2712,95,o),
(2667,95,qs)
);
},
{
closed = 1;
nodes = (
(2763,-12,o),
(2877,60,o),
(2939,182,o),
(2939,254,qs),
(2939,331,o),
(2873,454,o),
(2759,523,o),
(2688,523,qs),
(2631,523,o),
(2543,478,o),
(2508,431,q),
(2508,700,l),
(2398,700,l),
(2398,0,l),
(2508,0,l),
(2508,80,l),
(2543,33,o),
(2631,-12,o),
(2688,-12,qs)
);
},
{
closed = 1;
nodes = (
(3122,0,l),
(3122,511,l),
(3009,511,l),
(3009,0,l)
);
},
{
closed = 1;
nodes = (
(3095,566,o),
(3136,607,o),
(3136,637,qs),
(3136,667,o),
(3096,707,o),
(3065,707,qs),
(3035,707,o),
(2994,665,o),
(2994,636,qs),
(2994,607,o),
(3035,566,o),
(3065,566,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
132 81 2 1 8 240 1 24 7 152 149 3 3 4 24 155 1 25 4 235 1 3 25 5 76 141 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 149 values pushed */
35 30 2 18 0 6 0 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 13 1 6 8 0 6 89 40 28 26 2 4 0 53 41 50 29 49 5 27 9 0 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 150 values pushed */
35 30 2 18 26 6 26 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 2 1 0 13 1 6 8 0 6 105 40 28 2 26 53 41 50 29 49 5 27 9 26 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 149 values pushed */
35 30 2 18 0 6 0 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 13 1 6 8 0 6 89 40 28 26 2 4 0 53 41 50 29 49 5 27 9 0 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 130 values pushed */
256 256 233 233 218 218 202 202 190 190 174 174 158 158 125 125 113 113 74 74 62 62 45 45 256 267 256 266 262 260 255 254 253 252 233 251 233 250 244 242 239 238 237 236 218 232 218 231 225 223 217 216 215 214 202 213 202 212 208 206 190 201 190 200 196 194 174 189 174 188 182 180 158 173 158 172 166 164 157 156 154 153 151 150 148 147 125 146 125 145 138 137 131 129 113 124 113 123 119 117 112 110 104 102 74 95 74 94 87 86 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 54 6 27
CALL[ ]	/* CallFunction */";
};
width = 3236;
}
);
note = uniE005;
},
{
glyphname = REbackwards;
kernRight = REbackwards;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(26,0,l),
(162,0,l),
(336,300,l),
(427,300,l),
(427,0,l),
(540,0,l),
(540,700,l),
(309,700,ls),
(198,700,o),
(71,596,o),
(71,500,qs),
(71,425,o),
(151,335,o),
(223,319,q)
);
},
{
closed = 1;
nodes = (
(243,396,o),
(187,449,o),
(187,500,qs),
(187,551,o),
(243,604,o),
(312,604,qs),
(427,604,l),
(427,396,l),
(312,396,ls)
);
},
{
closed = 1;
nodes = (
(1106,0,l),
(1106,700,l),
(662,700,l),
(662,604,l),
(993,604,l),
(993,417,l),
(708,417,l),
(708,322,l),
(993,322,l),
(993,96,l),
(662,96,l),
(662,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
13 1 2 7 1 76 0 8 0 7 2 8 7 103 12 1 5 0 2 6 5 2 103 9 1 4 4 0 95 10 1 0 0 33 77 0 6 6 1 95 11 3 2 1 1 34 1 78 14 14 34 33 32 31 30 29 28 27 26 25 24 23 14 22 14 21 35 17 17 17 36 13 8 27
CALL[ ]	/* CallFunction */";
};
width = 1180;
}
);
note = REbackwards;
},
{
glyphname = RethinkWordmark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(3258,0,l),
(3258,488,l),
(3587,0,l),
(3715,0,l),
(3715,700,l),
(3587,700,l),
(3587,211,l),
(3258,700,l),
(3130,700,l),
(3130,0,l)
);
},
{
closed = 1;
nodes = (
(22,0,l),
(173,0,l),
(345,295,l),
(423,295,l),
(423,0,l),
(551,0,l),
(551,700,l),
(308,700,ls),
(200,700,o),
(133,647,qs),
(68,594,o),
(68,498,qs),
(68,426,o),
(107,379,qs),
(146,333,o),
(217,316,q)
);
},
{
closed = 1;
nodes = (
(249,404,o),
(223,428,qs),
(198,455,o),
(198,498,qs),
(198,542,o),
(224,566,qs),
(249,591,o),
(311,591,qs),
(423,591,l),
(423,404,l),
(311,404,ls)
);
},
{
closed = 1;
nodes = (
(1185,0,l),
(1185,700,l),
(736,700,l),
(736,591,l),
(1057,591,l),
(1057,424,l),
(782,424,l),
(782,315,l),
(1057,315,l),
(1057,109,l),
(736,109,l),
(736,0,l)
);
},
{
closed = 1;
nodes = (
(1680,0,l),
(1680,591,l),
(1885,591,l),
(1885,700,l),
(1348,700,l),
(1348,591,l),
(1552,591,l),
(1552,0,l)
);
},
{
closed = 1;
nodes = (
(2170,0,l),
(2170,316,l),
(2484,316,l),
(2484,0,l),
(2612,0,l),
(2612,700,l),
(2484,700,l),
(2484,425,l),
(2170,425,l),
(2170,700,l),
(2042,700,l),
(2042,0,l)
);
},
{
closed = 1;
nodes = (
(2935,0,l),
(2935,700,l),
(2807,700,l),
(2807,0,l)
);
},
{
closed = 1;
nodes = (
(4037,0,l),
(4037,261,l),
(4108,339,l),
(4310,0,l),
(4461,0,l),
(4194,433,l),
(4438,700,l),
(4277,700,l),
(4037,431,l),
(4037,700,l),
(3909,700,l),
(3909,0,l)
);
},
{
closed = 1;
nodes = (
(4611,700,l),
(4644,700,l),
(4679,765,l),
(4697,765,l),
(4697,700,l),
(4725,700,l),
(4725,855,l),
(4671,855,ls),
(4645,855,o),
(4623,830,o),
(4623,811,qs),
(4623,783,o),
(4652,772,q)
);
},
{
closed = 1;
nodes = (
(4718,629,o),
(4783,667,o),
(4821,733,o),
(4821,772,qs),
(4821,811,o),
(4783,877,o),
(4717,916,o),
(4678,916,qs),
(4635,916,o),
(4570,874,o),
(4534,808,o),
(4534,772,qs),
(4534,734,o),
(4572,668,o),
(4638,629,o),
(4678,629,qs)
);
},
{
closed = 1;
nodes = (
(4646,652,o),
(4591,685,o),
(4558,740,o),
(4558,772,qs),
(4558,822,o),
(4629,892,o),
(4678,892,qs),
(4728,892,o),
(4798,822,o),
(4798,772,qs),
(4798,723,o),
(4728,652,o),
(4678,652,qs)
);
},
{
closed = 1;
nodes = (
(4666,789,o),
(4650,800,o),
(4650,811,qs),
(4650,832,o),
(4675,832,qs),
(4697,832,l),
(4697,789,l),
(4678,789,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
97 1 34 41 78 75 7 3 12 8 81 25 2 11 9 82 2 2 10 6 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 110 values pushed */
45 1 41 40 34 40 41 34 128 0 34 33 40 34 112 35 1 33 0 40 33 112 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 44 1 39 43 1 37 8 39 37 105 21 1 12 24 1 11 6 12 11 103 42 1 9 0 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 111 values pushed */
45 1 41 40 34 40 41 34 128 0 34 33 40 34 112 35 1 33 0 40 33 0 126 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 44 1 39 43 1 37 8 39 37 105 21 1 12 24 1 11 6 12 11 103 42 1 9 0 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 112 values pushed */
45 1 41 40 34 40 41 34 128 0 34 33 40 34 33 126 35 1 33 0 40 33 0 126 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 44 1 39 43 1 37 8 39 37 105 21 1 12 24 1 11 6 12 11 103 42 1 9 0 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 94 values pushed */
127 127 114 114 98 98 26 26 127 134 127 133 130 128 114 126 114 125 120 118 98 113 98 112 106 104 96 95 94 93 92 91 90 88 84 83 80 79 77 76 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 26 36 26 35 35 17 17 17 39 18 17 18 16 46 8 31
CALL[ ]	/* CallFunction */";
};
width = 4877;
}
);
note = RethinkWordmark;
},
{
glyphname = Rlogobig;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(501,-12,o),
(668,85,o),
(765,252,o),
(765,350,qs),
(765,448,o),
(668,615,o),
(501,712,o),
(403,712,qs),
(305,712,o),
(138,615,o),
(41,448,o),
(41,350,qs),
(41,252,o),
(138,85,o),
(305,-12,o),
(403,-12,qs)
);
},
{
closed = 1;
nodes = (
(318,168,l),
(332,196,o),
(392,308,o),
(405,333,q),
(450,333,l),
(450,168,l),
(523,168,l),
(523,559,l),
(386,559,ls),
(320,559,o),
(263,493,o),
(263,447,qs),
(263,411,o),
(303,361,o),
(337,349,q),
(234,168,l)
);
},
{
closed = 1;
nodes = (
(321,47,o),
(182,129,o),
(100,268,o),
(100,350,qs),
(100,432,o),
(182,571,o),
(321,652,o),
(403,652,qs),
(485,652,o),
(624,571,o),
(705,432,o),
(705,350,qs),
(705,268,o),
(624,129,o),
(485,47,o),
(403,47,qs)
);
},
{
closed = 1;
nodes = (
(371,392,o),
(332,420,o),
(332,447,qs),
(332,473,o),
(367,501,o),
(395,501,qs),
(450,501,l),
(450,392,l),
(404,392,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
5 1 3 4 7 4 3 7 128 0 2 0 8 9 2 8 105 12 1 9 0 4 3 9 4 103 0 6 6 0 97 0 0 0 39 77 11 1 7 7 1 97 10 1 1 1 40 1 78 48 48 32 32 0 0 48 56 48 55 51 49 32 47 32 46 40 38 31 30 27 26 25 24 23 21 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 806;
}
);
note = Rlogobig;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = SemiBold;
properties = (
{
key = postscriptFontName;
value = "KolbiSans-SemiBold";
},
{
key = postscriptFullNames;
values = (
{
language = ENG;
value = "Kolbi Sans SemiBold";
}
);
}
);
weightClass = 600;
}
);
kerningLTR = {
m01 = {
"@MMK_L_A" = {
"@MMK_R_C" = -40;
"@MMK_R_N" = -10;
"@MMK_R_S" = -13;
"@MMK_R_T" = -76;
"@MMK_R_U" = -30;
"@MMK_R_V" = -92;
"@MMK_R_W" = -70;
"@MMK_R_X" = -13;
"@MMK_R_Y" = -84;
"@MMK_R_a" = -20;
"@MMK_R_ampersand" = -15;
"@MMK_R_asterisk" = -94;
"@MMK_R_at" = -12;
"@MMK_R_backslash" = -60;
"@MMK_R_braceleft" = -52;
"@MMK_R_c" = -24;
"@MMK_R_f" = -12;
"@MMK_R_g" = -15;
"@MMK_R_hyphen" = -30;
"@MMK_R_multiply" = -24;
"@MMK_R_parenright" = -23;
"@MMK_R_plus" = -32;
"@MMK_R_question" = -36;
"@MMK_R_space" = -13;
"@MMK_R_t" = -47;
"@MMK_R_u" = -10;
"@MMK_R_v" = -54;
"@MMK_R_w" = -36;
"@MMK_R_y" = -60;
};
"@MMK_L_B" = {
"@MMK_R_A" = -14;
"@MMK_R_AE" = -32;
"@MMK_R_T" = -12;
"@MMK_R_V" = -21;
"@MMK_R_W" = -20;
"@MMK_R_Y" = -30;
"@MMK_R_a" = -7;
"@MMK_R_c" = -7;
"@MMK_R_y" = -23;
};
"@MMK_L_C" = {
"@MMK_R_A" = -12;
"@MMK_R_AE" = -20;
"@MMK_R_T" = -12;
"@MMK_R_W" = -12;
"@MMK_R_X" = -20;
"@MMK_R_Y" = -34;
"@MMK_R_a" = -10;
"@MMK_R_ampersand" = -3;
"@MMK_R_parenright" = -30;
};
"@MMK_L_D" = {
"@MMK_R_A" = -40;
"@MMK_R_AE" = -46;
"@MMK_R_T" = -29;
"@MMK_R_V" = -24;
"@MMK_R_W" = -40;
"@MMK_R_X" = -50;
"@MMK_R_Y" = -50;
"@MMK_R_a" = -10;
"@MMK_R_ampersand" = -8;
"@MMK_R_backslash" = -17;
"@MMK_R_braceright" = -34;
"@MMK_R_comma" = -40;
"@MMK_R_g" = -17;
"@MMK_R_parenright" = -62;
"@MMK_R_period" = -30;
"@MMK_R_slash" = -44;
"@MMK_R_underscore" = -28;
};
"@MMK_L_E" = {
"@MMK_R_a" = -7;
};
"@MMK_L_F" = {
"@MMK_R_A" = -74;
"@MMK_R_a" = -39;
"@MMK_R_c" = -24;
"@MMK_R_period" = -60;
"@MMK_R_s" = -20;
};
"@MMK_L_G" = {
"@MMK_R_T" = -3;
"@MMK_R_W" = -17;
"@MMK_R_Y" = -40;
};
"@MMK_L_H" = {
"@MMK_R_a" = -11;
"@MMK_R_c" = -10;
};
"@MMK_L_I" = {
"@MMK_R_a" = -7;
};
"@MMK_L_J" = {
"@MMK_R_A" = -30;
"@MMK_R_a" = -13;
"@MMK_R_c" = -10;
"@MMK_R_period" = -20;
};
"@MMK_L_K" = {
"@MMK_R_C" = -48;
"@MMK_R_Y" = -13;
"@MMK_R_a" = -30;
"@MMK_R_ampersand" = -23;
"@MMK_R_c" = -44;
"@MMK_R_guillemotleft" = -40;
"@MMK_R_hyphen" = -60;
"@MMK_R_plus" = -50;
"@MMK_R_question" = -15;
"@MMK_R_registered" = -27;
"@MMK_R_s" = -7;
"@MMK_R_t" = -24;
"@MMK_R_u" = -12;
"@MMK_R_v" = -30;
"@MMK_R_w" = -30;
"@MMK_R_y" = -63;
};
"@MMK_L_L" = {
"@MMK_R_C" = -64;
"@MMK_R_S" = -30;
"@MMK_R_T" = -114;
"@MMK_R_U" = -30;
"@MMK_R_V" = -120;
"@MMK_R_W" = -77;
"@MMK_R_X" = -13;
"@MMK_R_Y" = -100;
"@MMK_R_a" = -13;
"@MMK_R_ampersand" = -7;
"@MMK_R_asterisk" = -98;
"@MMK_R_backslash" = -40;
"@MMK_R_c" = -27;
"@MMK_R_hyphen" = -66;
"@MMK_R_i" = -10;
"@MMK_R_percent" = -57;
"@MMK_R_plus" = -52;
"@MMK_R_question" = -26;
"@MMK_R_t" = -50;
"@MMK_R_u" = -13;
"@MMK_R_uni018F" = -30;
"@MMK_R_uni02BA" = -60;
"@MMK_R_v" = -62;
"@MMK_R_w" = -30;
"@MMK_R_y" = -64;
};
"@MMK_L_M" = {
"@MMK_R_A" = -7;
"@MMK_R_a" = -7;
"@MMK_R_c" = -10;
};
"@MMK_L_N" = {
"@MMK_R_a" = -7;
"@MMK_R_c" = -10;
};
"@MMK_L_Oslash" = {
"@MMK_R_period" = -23;
};
"@MMK_L_P" = {
"@MMK_R_A" = -79;
"@MMK_R_AE" = -123;
"@MMK_R_Y" = -8;
"@MMK_R_a" = -34;
"@MMK_R_c" = -26;
"@MMK_R_dotlessi" = -7;
"@MMK_R_g" = -34;
"@MMK_R_period" = -70;
};
"@MMK_L_Q" = {
"@MMK_R_A" = -17;
"@MMK_R_T" = -28;
"@MMK_R_V" = -24;
"@MMK_R_W" = -25;
"@MMK_R_Y" = -42;
"@MMK_R_a" = -3;
"@MMK_R_g" = -10;
"@MMK_R_u" = 8;
"@MMK_R_w" = 8;
};
"@MMK_L_R" = {
"@MMK_R_C" = -20;
"@MMK_R_S" = -7;
"@MMK_R_T" = -25;
"@MMK_R_U" = -7;
"@MMK_R_V" = -33;
"@MMK_R_W" = -33;
"@MMK_R_X" = -22;
"@MMK_R_Y" = -33;
"@MMK_R_a" = -28;
"@MMK_R_ampersand" = -10;
"@MMK_R_c" = -47;
"@MMK_R_g" = -8;
"@MMK_R_i" = -13;
"@MMK_R_plus" = -12;
"@MMK_R_s" = -32;
"@MMK_R_u" = -13;
};
"@MMK_L_REbackwards" = {
"@MMK_R_T" = 3;
};
"@MMK_L_S" = {
"@MMK_R_A" = -7;
"@MMK_R_T" = -19;
"@MMK_R_V" = -20;
"@MMK_R_W" = -14;
"@MMK_R_Y" = -30;
"@MMK_R_a" = -10;
"@MMK_R_c" = -7;
};
"@MMK_L_T" = {
"@MMK_R_A" = -76;
"@MMK_R_AE" = -96;
"@MMK_R_C" = -28;
"@MMK_R_J" = -88;
"@MMK_R_S" = -18;
"@MMK_R_a" = -98;
"@MMK_R_ampersand" = -27;
"@MMK_R_at" = -92;
"@MMK_R_backslash" = 13;
"@MMK_R_braceleft" = -30;
"@MMK_R_c" = -103;
"@MMK_R_comma" = -80;
"@MMK_R_dotlessi" = -86;
"@MMK_R_exclamdown" = -42;
"@MMK_R_g" = -90;
"@MMK_R_hyphen" = -50;
"@MMK_R_iacute" = 10;
"@MMK_R_ibreve" = 58;
"@MMK_R_multiply" = -60;
"@MMK_R_p" = -47;
"@MMK_R_period" = -80;
"@MMK_R_plus" = -56;
"@MMK_R_question" = 20;
"@MMK_R_questiondown" = -92;
"@MMK_R_s" = -103;
"@MMK_R_semicolon" = -54;
"@MMK_R_slash" = -64;
"@MMK_R_t" = -23;
"@MMK_R_u" = -77;
"@MMK_R_underscore" = -60;
"@MMK_R_v" = -60;
"@MMK_R_w" = -56;
"@MMK_R_x" = -42;
"@MMK_R_y" = -80;
"@MMK_R_z" = -80;
};
"@MMK_L_Thorn" = {
"@MMK_R_A" = -46;
"@MMK_R_T" = -63;
"@MMK_R_V" = -46;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -66;
"@MMK_R_period" = -52;
};
"@MMK_L_U" = {
"@MMK_R_A" = -30;
"@MMK_R_AE" = -46;
"@MMK_R_a" = -10;
"@MMK_R_g" = -20;
"@MMK_R_period" = -20;
"@MMK_R_slash" = -30;
"@MMK_R_underscore" = -40;
};
"@MMK_L_V" = {
"@MMK_R_A" = -85;
"@MMK_R_AE" = -117;
"@MMK_R_C" = -24;
"@MMK_R_J" = -60;
"@MMK_R_S" = -30;
"@MMK_R_a" = -75;
"@MMK_R_ampersand" = -60;
"@MMK_R_at" = -94;
"@MMK_R_backslash" = 17;
"@MMK_R_c" = -88;
"@MMK_R_colon" = -30;
"@MMK_R_comma" = -74;
"@MMK_R_dotlessi" = -26;
"@MMK_R_exclamdown" = -34;
"@MMK_R_g" = -75;
"@MMK_R_hyphen" = -36;
"@MMK_R_multiply" = -66;
"@MMK_R_period" = -80;
"@MMK_R_plus" = -52;
"@MMK_R_s" = -59;
"@MMK_R_slash" = -76;
"@MMK_R_t" = -20;
"@MMK_R_u" = -8;
"@MMK_R_underscore" = -96;
"@MMK_R_v" = -12;
"@MMK_R_y" = -13;
};
"@MMK_L_W" = {
"@MMK_R_A" = -93;
"@MMK_R_AE" = -92;
"@MMK_R_C" = -41;
"@MMK_R_J" = -40;
"@MMK_R_Oslash" = -20;
"@MMK_R_S" = -14;
"@MMK_R_a" = -82;
"@MMK_R_ampersand" = -50;
"@MMK_R_at" = -80;
"@MMK_R_braceleft" = -30;
"@MMK_R_c" = -95;
"@MMK_R_comma" = -60;
"@MMK_R_dotlessi" = -36;
"@MMK_R_exclamdown" = -30;
"@MMK_R_g" = -73;
"@MMK_R_hyphen" = -36;
"@MMK_R_i" = -18;
"@MMK_R_multiply" = -28;
"@MMK_R_period" = -70;
"@MMK_R_plus" = -52;
"@MMK_R_s" = -58;
"@MMK_R_semicolon" = -34;
"@MMK_R_slash" = -60;
"@MMK_R_u" = -38;
"@MMK_R_underscore" = -70;
"@MMK_R_v" = -12;
};
"@MMK_L_X" = {
"@MMK_R_A" = -13;
"@MMK_R_C" = -50;
"@MMK_R_a" = -30;
"@MMK_R_c" = -34;
"@MMK_R_s" = -18;
"@MMK_R_u" = -28;
"@MMK_R_w" = -30;
"@MMK_R_y" = -53;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -83;
"@MMK_R_AE" = -126;
"@MMK_R_C" = -50;
"@MMK_R_J" = -84;
"@MMK_R_Oslash" = -46;
"@MMK_R_S" = -40;
"@MMK_R_a" = -101;
"@MMK_R_ampersand" = -43;
"@MMK_R_at" = -110;
"@MMK_R_braceleft" = -50;
"@MMK_R_c" = -106;
"@MMK_R_colon" = -34;
"@MMK_R_comma" = -73;
"@MMK_R_dotlessi" = -36;
"@MMK_R_exclamdown" = -34;
"@MMK_R_g" = -84;
"@MMK_R_hyphen" = -56;
"@MMK_R_multiply" = -60;
"@MMK_R_period" = -88;
"@MMK_R_plus" = -74;
"@MMK_R_questiondown" = -86;
"@MMK_R_s" = -70;
"@MMK_R_semicolon" = -47;
"@MMK_R_slash" = -64;
"@MMK_R_t" = -30;
"@MMK_R_u" = -28;
"@MMK_R_underscore" = -70;
"@MMK_R_uni02BA" = 36;
"@MMK_R_v" = -38;
"@MMK_R_w" = -12;
"@MMK_R_y" = -20;
"@MMK_R_z" = -20;
};
"@MMK_L_Z" = {
"@MMK_R_C" = -20;
"@MMK_R_a" = -7;
"@MMK_R_c" = -13;
};
"@MMK_L_a" = {
"@MMK_R_asterisk" = -28;
"@MMK_R_backslash" = -40;
"@MMK_R_g" = -5;
"@MMK_R_registered" = -45;
"@MMK_R_uni02BA" = -50;
"@MMK_R_v" = -7;
"@MMK_R_y" = -16;
};
"@MMK_L_aacute" = {
"@MMK_R_asterisk" = -38;
"@MMK_R_backslash" = -44;
"@MMK_R_c" = -9;
"@MMK_R_g" = -3;
"@MMK_R_i" = -3;
"@MMK_R_quotesingle" = -20;
"@MMK_R_registered" = -45;
"@MMK_R_s" = -5;
"@MMK_R_t" = -21;
"@MMK_R_v" = -37;
"@MMK_R_w" = -20;
"@MMK_R_y" = -16;
"@MMK_R_z" = 13;
};
"@MMK_L_ae" = {
"@MMK_R_Y" = -103;
"@MMK_R_asterisk" = -28;
"@MMK_R_backslash" = -54;
"@MMK_R_g" = -7;
"@MMK_R_question" = -20;
"@MMK_R_registered" = -45;
"@MMK_R_t" = -12;
"@MMK_R_uni02BA" = -48;
"@MMK_R_v" = -20;
"@MMK_R_w" = -20;
"@MMK_R_x" = -25;
"@MMK_R_y" = -23;
};
"@MMK_L_ampersand" = {
"@MMK_R_C" = -8;
"@MMK_R_T" = -48;
"@MMK_R_V" = -54;
"@MMK_R_W" = -48;
"@MMK_R_Y" = -64;
"@MMK_R_percent" = -28;
"@MMK_R_uni02BA" = -15;
"@MMK_R_w" = -8;
"@MMK_R_y" = -8;
};
"@MMK_L_asterisk" = {
"@MMK_R_A" = -94;
"@MMK_R_AE" = -118;
"@MMK_R_a" = -23;
"@MMK_R_c" = -28;
"@MMK_R_s" = -26;
};
"@MMK_L_at" = {
"@MMK_R_A" = -44;
"@MMK_R_AE" = -60;
"@MMK_R_T" = -52;
"@MMK_R_V" = -60;
"@MMK_R_W" = -44;
"@MMK_R_Y" = -86;
"@MMK_R_percent" = -40;
"@MMK_R_period" = -30;
"@MMK_R_uni02BA" = -16;
"@MMK_R_w" = -12;
"@MMK_R_y" = -20;
};
"@MMK_L_at.case" = {
"@MMK_R_A" = -17;
};
"@MMK_L_b" = {
"@MMK_R_T" = -103;
"@MMK_R_V" = -88;
"@MMK_R_asterisk" = -43;
"@MMK_R_backslash" = -76;
"@MMK_R_braceright" = -50;
"@MMK_R_g" = -8;
"@MMK_R_i" = -3;
"@MMK_R_parenright" = -44;
"@MMK_R_question" = -30;
"@MMK_R_registered" = -45;
"@MMK_R_slash" = -14;
"@MMK_R_t" = -20;
"@MMK_R_uni02BA" = -48;
"@MMK_R_v" = -24;
"@MMK_R_w" = -18;
"@MMK_R_x" = -24;
"@MMK_R_y" = -37;
};
"@MMK_L_backslash" = {
"@MMK_R_C" = -12;
"@MMK_R_T" = -22;
"@MMK_R_V" = -60;
"@MMK_R_W" = -52;
"@MMK_R_Y" = -70;
"@MMK_R_c" = -23;
"@MMK_R_hyphen" = -30;
"@MMK_R_uni02BA" = -30;
};
"@MMK_L_braceleft" = {
"@MMK_R_C" = -34;
"@MMK_R_c" = -50;
};
"@MMK_L_braceright" = {
"@MMK_R_A" = -52;
"@MMK_R_AE" = -62;
"@MMK_R_T" = -30;
"@MMK_R_W" = -30;
"@MMK_R_Y" = -50;
"@MMK_R_period" = -50;
};
"@MMK_L_c" = {
"@MMK_R_asterisk" = -28;
"@MMK_R_backslash" = -48;
"@MMK_R_parenright" = -13;
"@MMK_R_question" = -30;
"@MMK_R_registered" = -45;
"@MMK_R_t" = -8;
"@MMK_R_v" = -17;
};
"@MMK_L_colon" = {
"@MMK_R_V" = -30;
"@MMK_R_Y" = -34;
};
"@MMK_L_comma" = {
"@MMK_R_C" = -20;
"@MMK_R_T" = -80;
"@MMK_R_V" = -74;
"@MMK_R_W" = -54;
"@MMK_R_Y" = -83;
"@MMK_R_percent" = -53;
"@MMK_R_t" = -30;
"@MMK_R_w" = -30;
"@MMK_R_y" = -54;
};
"@MMK_L_dcaron" = {
"@MMK_R_b" = 107;
};
"@MMK_L_exclamdown" = {
"@MMK_R_T" = -42;
"@MMK_R_V" = -34;
"@MMK_R_W" = -30;
"@MMK_R_Y" = -34;
};
"@MMK_L_f" = {
"@MMK_R_a" = -20;
"@MMK_R_c" = -20;
"@MMK_R_g" = -40;
"@MMK_R_period" = -30;
"@MMK_R_s" = -18;
};
"@MMK_L_fl" = {
"@MMK_R_c" = -3;
};
"@MMK_L_g" = {
"@MMK_R_a" = -7;
"@MMK_R_c" = -13;
"@MMK_R_f" = 15;
"@MMK_R_j" = 20;
"@MMK_R_v" = 8;
};
"@MMK_L_germandbls" = {
"@MMK_R_c" = -8;
"@MMK_R_y" = -37;
};
"@MMK_L_greater" = {
"@MMK_R_period" = -60;
};
"@MMK_L_hyphen" = {
"@MMK_R_A" = -30;
"@MMK_R_T" = -53;
"@MMK_R_V" = -38;
"@MMK_R_W" = -47;
"@MMK_R_X" = -38;
"@MMK_R_Y" = -63;
"@MMK_R_backslash" = -46;
"@MMK_R_slash" = -46;
};
"@MMK_L_i" = {
"@MMK_R_g" = -3;
"@MMK_R_z" = 17;
};
"@MMK_L_iacute" = {
"@MMK_R_T" = 10;
"@MMK_R_b" = 13;
"@MMK_R_uni02BA" = 6;
};
"@MMK_L_ibreve" = {
"@MMK_R_T" = 58;
"@MMK_R_b" = 40;
};
"@MMK_L_igrave" = {
"@MMK_R_T" = 10;
};
"@MMK_L_k" = {
"@MMK_R_a" = -31;
"@MMK_R_c" = -39;
"@MMK_R_g" = -20;
"@MMK_R_quotesingle" = -7;
"@MMK_R_s" = -26;
"@MMK_R_y" = -7;
};
"@MMK_L_l" = {
"@MMK_R_c" = -3;
"@MMK_R_ibreve" = 27;
};
"@MMK_L_lslash" = {
"@MMK_R_c" = 3;
"@MMK_R_t" = 17;
"@MMK_R_u" = 13;
"@MMK_R_y" = 7;
"@MMK_R_z" = 18;
};
"@MMK_L_multiply" = {
"@MMK_R_A" = -24;
"@MMK_R_AE" = -35;
"@MMK_R_T" = -60;
"@MMK_R_V" = -66;
"@MMK_R_W" = -28;
"@MMK_R_Y" = -60;
"@MMK_R_y" = -12;
};
"@MMK_L_parenleft" = {
"@MMK_R_A" = -23;
"@MMK_R_C" = -62;
"@MMK_R_a" = -44;
"@MMK_R_c" = -44;
"@MMK_R_s" = -20;
"@MMK_R_t" = -12;
};
"@MMK_L_period" = {
"@MMK_R_C" = -30;
"@MMK_R_T" = -80;
"@MMK_R_U" = -20;
"@MMK_R_V" = -80;
"@MMK_R_W" = -70;
"@MMK_R_Y" = -88;
"@MMK_R_backslash" = -60;
"@MMK_R_braceleft" = -50;
"@MMK_R_less" = -60;
"@MMK_R_question" = -36;
"@MMK_R_v" = -40;
"@MMK_R_w" = -23;
"@MMK_R_y" = -40;
};
"@MMK_L_plus" = {
"@MMK_R_A" = -32;
"@MMK_R_T" = -56;
"@MMK_R_V" = -52;
"@MMK_R_W" = -52;
"@MMK_R_Y" = -74;
};
"@MMK_L_question" = {
"@MMK_R_A" = -70;
"@MMK_R_AE" = -96;
"@MMK_R_period" = -94;
};
"@MMK_L_questiondown" = {
"@MMK_R_T" = -56;
"@MMK_R_Y" = -56;
"@MMK_R_c" = -20;
"@MMK_R_percent" = -25;
"@MMK_R_z" = 20;
};
"@MMK_L_quotedblright" = {
"@MMK_R_J" = -77;
"@MMK_R_ampersand" = -54;
"@MMK_R_at" = -100;
"@MMK_R_c" = -47;
"@MMK_R_s" = -74;
"@MMK_R_slash" = -116;
};
"@MMK_L_r" = {
"@MMK_R_a" = -7;
"@MMK_R_c" = -13;
"@MMK_R_colon" = 12;
"@MMK_R_comma" = -34;
"@MMK_R_f" = 17;
"@MMK_R_g" = -8;
"@MMK_R_period" = -40;
"@MMK_R_t" = 7;
"@MMK_R_u" = 9;
};
"@MMK_L_s" = {
"@MMK_R_asterisk" = -38;
"@MMK_R_backslash" = -50;
"@MMK_R_parenright" = -8;
"@MMK_R_question" = -26;
"@MMK_R_registered" = -45;
"@MMK_R_t" = -11;
"@MMK_R_v" = -24;
"@MMK_R_w" = -16;
"@MMK_R_y" = -24;
};
"@MMK_L_semicolon" = {
"@MMK_R_T" = -46;
"@MMK_R_Y" = -8;
};
"@MMK_L_slash" = {
"@MMK_R_C" = -30;
"@MMK_R_T" = 20;
"@MMK_R_V" = 30;
"@MMK_R_W" = 8;
"@MMK_R_Y" = 24;
"@MMK_R_a" = -54;
"@MMK_R_c" = -48;
"@MMK_R_dotlessi" = -19;
"@MMK_R_g" = -38;
"@MMK_R_hyphen" = -59;
"@MMK_R_period" = -119;
"@MMK_R_s" = -30;
};
"@MMK_L_space" = {
"@MMK_R_A" = -3;
"@MMK_R_T" = -35;
"@MMK_R_V" = -13;
"@MMK_R_W" = -17;
};
"@MMK_L_t" = {
"@MMK_R_c" = -13;
"@MMK_R_comma" = 35;
"@MMK_R_f" = 13;
"@MMK_R_space" = 10;
};
"@MMK_L_underscore" = {
"@MMK_R_C" = -28;
"@MMK_R_T" = -60;
"@MMK_R_U" = -40;
"@MMK_R_V" = -96;
"@MMK_R_W" = -70;
"@MMK_R_Y" = -70;
};
"@MMK_L_uni018E" = {
"@MMK_R_T" = 3;
};
"@MMK_L_v" = {
"@MMK_R_A" = -54;
"@MMK_R_a" = -25;
"@MMK_R_c" = -24;
"@MMK_R_g" = -24;
"@MMK_R_period" = -40;
"@MMK_R_s" = -21;
"@MMK_R_t" = 8;
};
"@MMK_L_w" = {
"@MMK_R_a" = -23;
"@MMK_R_at" = -40;
"@MMK_R_c" = -18;
"@MMK_R_comma" = -30;
"@MMK_R_g" = -20;
"@MMK_R_period" = -23;
"@MMK_R_questiondown" = -17;
"@MMK_R_t" = 7;
};
"@MMK_L_x" = {
"@MMK_R_a" = -8;
"@MMK_R_c" = -24;
"@MMK_R_t" = 10;
};
"@MMK_L_y" = {
"@MMK_R_T" = -63;
"@MMK_R_a" = -36;
"@MMK_R_ampersand" = -8;
"@MMK_R_at" = -56;
"@MMK_R_c" = -39;
"@MMK_R_comma" = -64;
"@MMK_R_g" = -34;
"@MMK_R_multiply" = -12;
"@MMK_R_period" = -74;
"@MMK_R_questiondown" = -56;
"@MMK_R_quotesingle" = 10;
"@MMK_R_s" = -20;
"@MMK_R_slash" = -40;
};
A = {
T = -73;
Tcaron = -73;
W = -90;
Wacute = -90;
Wcircumflex = -90;
Wdieresis = -90;
Wgrave = -90;
uni0162 = -73;
uni021A = -73;
};
AE = {
ibreve = 36;
imacron = 54;
itilde = 38;
};
AEacute = {
ibreve = 36;
imacron = 54;
itilde = 38;
};
Aacute = {
asterisk = -94;
at = -12;
backslash = -60;
braceleft = -52;
f = -12;
multiply = -24;
parenright = -23;
plus = -32;
question = -36;
v = -54;
};
Abreve = {
asterisk = -94;
at = -12;
backslash = -60;
braceleft = -52;
f = -12;
multiply = -24;
parenright = -23;
plus = -32;
question = -36;
v = -54;
};
Acircumflex = {
asterisk = -94;
at = -12;
backslash = -60;
braceleft = -52;
f = -12;
multiply = -24;
parenright = -23;
plus = -32;
question = -36;
v = -54;
};
Adieresis = {
asterisk = -94;
at = -12;
backslash = -60;
braceleft = -52;
f = -12;
multiply = -24;
parenright = -23;
plus = -32;
question = -36;
v = -54;
};
Agrave = {
asterisk = -94;
at = -12;
backslash = -60;
braceleft = -52;
f = -12;
multiply = -24;
parenright = -23;
plus = -32;
question = -36;
v = -54;
};
Amacron = {
asterisk = -94;
at = -12;
backslash = -60;
braceleft = -52;
f = -12;
multiply = -24;
parenright = -23;
plus = -32;
question = -36;
v = -54;
};
Aogonek = {
asterisk = -94;
at = -12;
backslash = -60;
braceleft = -52;
f = -12;
multiply = -24;
parenright = -23;
plus = -32;
question = -36;
v = -54;
};
Aring = {
asterisk = -94;
at = -12;
backslash = -60;
braceleft = -52;
f = -12;
multiply = -24;
parenright = -23;
plus = -32;
question = -36;
v = -54;
};
Atilde = {
asterisk = -94;
at = -12;
backslash = -60;
braceleft = -52;
f = -12;
multiply = -24;
parenright = -23;
plus = -32;
question = -36;
v = -54;
};
B = {
Aacute = -8;
Abreve = -8;
Acircumflex = -8;
Adieresis = -8;
Agrave = -8;
Amacron = -8;
Aogonek = -8;
Aring = -8;
Atilde = -8;
X = -22;
imacron = 20;
};
C = {
imacron = 30;
itilde = 30;
};
Cacute = {
imacron = 30;
itilde = 30;
};
Ccaron = {
imacron = 30;
itilde = 30;
};
Ccedilla = {
imacron = 30;
itilde = 30;
};
Cdotaccent = {
imacron = 30;
itilde = 30;
};
E = {
imacron = 54;
itilde = 38;
};
Eacute = {
ibreve = 36;
imacron = 54;
itilde = 38;
};
Ebreve = {
ibreve = 36;
imacron = 54;
itilde = 38;
};
Ecaron = {
ibreve = 36;
imacron = 54;
itilde = 38;
};
Ecircumflex = {
ibreve = 36;
imacron = 54;
itilde = 38;
};
Edieresis = {
ibreve = 36;
imacron = 54;
itilde = 38;
};
Edotaccent = {
ibreve = 36;
imacron = 54;
itilde = 38;
};
Egrave = {
ibreve = 36;
imacron = 54;
itilde = 38;
};
Emacron = {
ibreve = 36;
imacron = 54;
itilde = 38;
};
Eogonek = {
ibreve = 36;
imacron = 54;
itilde = 38;
};
Euro = {
imacron = 30;
itilde = 30;
};
F = {
J = -52;
ampersand = -20;
at = -40;
comma = -60;
i = 0;
imacron = 70;
multiply = -20;
underscore = -40;
};
G = {
imacron = 20;
};
Gbreve = {
imacron = 20;
};
Gdotaccent = {
imacron = 20;
};
H = {
imacron = 40;
itilde = 18;
};
I = {
imacron = 40;
itilde = 18;
};
Iacute = {
imacron = 40;
itilde = 13;
};
Ibreve = {
imacron = 40;
itilde = 13;
};
Icircumflex = {
imacron = 40;
itilde = 13;
};
Idieresis = {
imacron = 40;
itilde = 13;
};
Idotaccent = {
imacron = 40;
itilde = 13;
};
Igrave = {
imacron = 40;
itilde = 13;
};
Imacron = {
imacron = 40;
itilde = 13;
};
Iogonek = {
imacron = 40;
itilde = 13;
};
Itilde = {
imacron = 40;
itilde = 13;
};
J = {
igrave = 0;
imacron = 64;
};
K = {
ibreve = 20;
icircumflex = 0;
imacron = 60;
};
L = {
V = -82;
};
Lacute = {
V = -82;
};
Lcaron = {
V = -82;
};
Ldot = {
V = -82;
};
Lslash = {
V = -82;
};
M = {
imacron = 40;
itilde = 18;
};
N = {
i = -3;
imacron = 40;
itilde = 13;
};
Nacute = {
imacron = 40;
itilde = 13;
};
Ncaron = {
imacron = 40;
itilde = 13;
};
Ntilde = {
imacron = 40;
itilde = 13;
};
OE = {
ibreve = 36;
imacron = 54;
itilde = 38;
};
Oslash = {
igrave = 56;
imacron = 58;
slash = -44;
underscore = -40;
};
P = {
J = -72;
X = -30;
Z = -20;
Zacute = -20;
Zcaron = -20;
Zdotaccent = -20;
aacute = -28;
abreve = -28;
acircumflex = -28;
adieresis = -28;
ae = -28;
agrave = -28;
amacron = -28;
ampersand = -36;
aogonek = -28;
aring = -28;
at = -42;
atilde = -28;
comma = -88;
e = -33;
icircumflex = 13;
itilde = 40;
parenright = -30;
plus = -12;
slash = -76;
underscore = -72;
};
Q = {
Wacute = -23;
Wcircumflex = -23;
Wdieresis = -23;
Wgrave = -23;
X = -23;
at = -17;
};
R = {
imacron = 17;
itilde = 18;
};
Racute = {
imacron = 17;
itilde = 18;
};
Rcaron = {
imacron = 17;
itilde = 18;
};
S = {
imacron = 40;
itilde = 20;
};
Sacute = {
imacron = 40;
itilde = 20;
};
Scaron = {
imacron = 40;
itilde = 20;
};
Scedilla = {
imacron = 40;
itilde = 20;
};
T = {
adieresis = -65;
amacron = -78;
atilde = -88;
edieresis = -83;
emacron = -90;
odieresis = -90;
omacron = -97;
racute = -59;
rcaron = -39;
scaron = -90;
udieresis = -63;
uni1EBD = -97;
ydieresis = -67;
};
Tcaron = {
adieresis = -65;
amacron = -78;
atilde = -88;
edieresis = -83;
emacron = -90;
odieresis = -90;
omacron = -97;
racute = -59;
rcaron = -39;
scaron = -90;
udieresis = -63;
uni1EBD = -97;
ydieresis = -67;
};
Thorn = {
X = -70;
parenright = -36;
};
U = {
imacron = 45;
itilde = 23;
};
Uacute = {
imacron = 45;
itilde = 23;
};
Ubreve = {
imacron = 45;
itilde = 23;
};
Ucircumflex = {
imacron = 45;
itilde = 23;
};
Udieresis = {
imacron = 45;
itilde = 23;
};
Ugrave = {
imacron = 45;
itilde = 23;
};
Uhungarumlaut = {
imacron = 45;
itilde = 23;
};
Umacron = {
imacron = 45;
itilde = 23;
};
Uogonek = {
imacron = 45;
itilde = 23;
};
Uring = {
imacron = 45;
itilde = 23;
};
Utilde = {
imacron = 45;
itilde = 23;
};
V = {
adieresis = -58;
edieresis = -78;
emacron = -82;
ibreve = 33;
imacron = 64;
rcaron = -23;
};
W = {
edieresis = -85;
ibreve = 13;
icircumflex = 13;
imacron = 64;
itilde = 33;
rcaron = -22;
uni1EF9 = -20;
y = -20;
yacute = -20;
ycircumflex = -20;
ydieresis = -20;
ygrave = -20;
};
Wacute = {
edieresis = -85;
ibreve = 13;
icircumflex = 13;
imacron = 64;
itilde = 33;
rcaron = -22;
};
Wcircumflex = {
edieresis = -85;
ibreve = 13;
icircumflex = 13;
imacron = 64;
itilde = 33;
rcaron = -22;
};
Wdieresis = {
edieresis = -85;
ibreve = 13;
icircumflex = 13;
imacron = 64;
itilde = 33;
rcaron = -22;
};
Wgrave = {
edieresis = -85;
ibreve = 13;
icircumflex = 13;
imacron = 64;
itilde = 33;
rcaron = -22;
};
X = {
X = -7;
aacute = -24;
abreve = -24;
acircumflex = -24;
adieresis = -24;
ae = -24;
agrave = -24;
amacron = -24;
ampersand = -27;
aogonek = -24;
aring = -24;
at = -17;
atilde = -24;
ibreve = 30;
imacron = 50;
itilde = 20;
multiply = -36;
question = -24;
v = -30;
};
Y = {
ibreve = 40;
imacron = 68;
itilde = 20;
};
Yacute = {
ibreve = 40;
imacron = 68;
itilde = 20;
};
Ycircumflex = {
ibreve = 40;
imacron = 68;
itilde = 20;
};
Ydieresis = {
ibreve = 40;
imacron = 68;
itilde = 20;
};
Ygrave = {
ibreve = 40;
imacron = 68;
itilde = 20;
};
Z = {
imacron = 64;
itilde = 34;
};
Zacute = {
imacron = 64;
itilde = 34;
};
Zcaron = {
imacron = 64;
itilde = 34;
};
Zdotaccent = {
imacron = 64;
itilde = 34;
};
a = {
uni1EF9 = -28;
y = -28;
yacute = -28;
ycircumflex = -28;
ydieresis = -28;
ygrave = -28;
};
aacute = {
v = -17;
};
abreve = {
v = -17;
};
acircumflex = {
v = -17;
};
adieresis = {
v = -17;
};
ae = {
lslash = 7;
};
aeacute = {
lslash = 7;
};
agrave = {
v = -17;
};
amacron = {
v = -17;
};
ampersand = {
Wacute = -34;
Wcircumflex = -34;
Wdieresis = -34;
Wgrave = -34;
asterisk = -55;
backslash = -48;
question = -40;
quotedblright = -25;
quoteright = -25;
v = -8;
};
aogonek = {
v = -17;
};
aring = {
v = -17;
};
asterisk = {
J = -66;
ampersand = -44;
at = -54;
exclam = -17;
imacron = 72;
itilde = 17;
questiondown = -90;
slash = -113;
underscore = -87;
};
at = {
X = -52;
asterisk = -38;
backslash = -50;
comma = -38;
greater = -46;
less = -30;
parenright = -66;
question = -30;
slash = -50;
underscore = -60;
};
atilde = {
v = -17;
};
b = {
l = -3;
lslash = 10;
};
backslash = {
backslash = -132;
comma = 52;
question = -30;
quotedblbase = 42;
quotedblleft = -72;
quotedblright = -70;
quoteleft = -72;
quoteright = -70;
quotesinglbase = 42;
underscore = 44;
};
bar = {
imacron = 40;
itilde = 13;
};
braceright = {
comma = -34;
};
bracketleft = {
imacron = 25;
};
bracketright = {
imacron = 60;
itilde = 28;
};
brokenbar = {
imacron = 40;
itilde = 13;
};
comma = {
backslash = -58;
v = -46;
};
d = {
imacron = 46;
};
dcaron = {
questiondown = -53;
};
dcroat = {
imacron = 84;
};
dollar = {
imacron = 40;
itilde = 20;
};
e = {
T = -103;
Tcaron = -103;
lslash = 7;
uni0162 = -103;
uni021A = -103;
};
eacute = {
lslash = 7;
};
ebreve = {
lslash = 7;
};
ecaron = {
lslash = 7;
};
ecircumflex = {
lslash = 7;
};
edieresis = {
lslash = 7;
};
edotaccent = {
lslash = 7;
};
egrave = {
lslash = 7;
};
emacron = {
lslash = 7;
};
eogonek = {
lslash = 7;
};
eth = {
imacron = 30;
};
exclam = {
asterisk = -17;
igrave = 46;
imacron = 60;
};
f = {
at = -32;
e = -23;
f = 7;
i = -3;
ibreve = 30;
igrave = 40;
imacron = 60;
itilde = 38;
};
fl = {
imacron = 46;
};
g = {
lslash = 8;
};
gbreve = {
lslash = 8;
};
gdotaccent = {
lslash = 8;
};
germandbls = {
asterisk = -60;
v = -46;
};
greater = {
at = -62;
parenright = -56;
};
i = {
lslash = 10;
};
iacute = {
asterisk = 35;
b = 60;
backslash = 74;
braceright = 13;
bracketleft = 60;
bracketright = 25;
exclam = 46;
f = 40;
idieresis = 80;
imacron = 57;
itilde = 44;
k = 60;
lacute = 60;
lcaron = 60;
ldot = 60;
lslash = 52;
parenright = 25;
question = 62;
quotedblleft = 42;
quotedblright = 63;
quoteleft = 42;
quoteright = 63;
uni0137 = 60;
uni013C = 60;
};
ibreve = {
backslash = 60;
l = 27;
question = 34;
};
icircumflex = {
l = 27;
};
idieresis = {
b = 50;
f = 33;
h = 50;
i = 67;
j = 73;
k = 50;
l = 27;
t = 20;
tcaron = 20;
uni0163 = 20;
uni021B = 20;
};
imacron = {
B = 40;
D = 40;
Dcaron = 40;
E = 40;
Eacute = 40;
Ebreve = 40;
Ecaron = 40;
Ecircumflex = 40;
Edieresis = 40;
Edotaccent = 40;
Egrave = 40;
Emacron = 40;
Eogonek = 40;
F = 40;
H = 40;
I = 40;
Iacute = 40;
Ibreve = 40;
Icircumflex = 40;
Idieresis = 40;
Idotaccent = 40;
Igrave = 40;
Imacron = 40;
Itilde = 40;
K = 40;
L = 40;
Lacute = 40;
Lcaron = 40;
Ldot = 40;
M = 40;
N = 40;
Nacute = 40;
Ncaron = 40;
Ntilde = 40;
P = 40;
R = 40;
Racute = 40;
Rcaron = 40;
Thorn = 40;
asterisk = 72;
b = 60;
backslash = 78;
bar = 40;
bracketleft = 60;
bracketright = 25;
brokenbar = 40;
exclam = 60;
f = 13;
germandbls = 60;
k = 60;
l = 60;
lacute = 60;
lcaron = 60;
ldot = 60;
lslash = 60;
question = 68;
quotedblleft = 66;
quotedblright = 52;
quoteleft = 66;
quoteright = 52;
thorn = 60;
uni0136 = 40;
uni0137 = 60;
uni013B = 40;
uni013C = 60;
uni0145 = 40;
uni0156 = 40;
uni02B9 = 33;
uni02BA = 33;
uni1EBC = 40;
z = 44;
zacute = 44;
zcaron = 44;
zdotaccent = 44;
};
itilde = {
asterisk = 13;
b = 17;
bracketleft = 28;
f = 30;
j = 34;
k = 17;
l = 17;
lacute = 17;
lcaron = 17;
ldot = 17;
question = 40;
quotedblleft = 12;
quotedblright = 32;
quoteleft = 12;
quoteright = 32;
uni0137 = 17;
uni013C = 17;
uni02B9 = 20;
uni02BA = 20;
};
j = {
itilde = 34;
};
l = {
f = 3;
imacron = 46;
};
lacute = {
imacron = 46;
};
lcaron = {
questiondown = -53;
};
less = {
at = -40;
parenright = -40;
};
lslash = {
imacron = 60;
};
multiply = {
X = -36;
};
n = {
T = -82;
Tcaron = -82;
uni0162 = -82;
uni021A = -82;
};
o = {
l = -3;
lslash = 10;
};
oacute = {
l = -3;
lslash = 10;
};
obreve = {
l = -3;
lslash = 10;
};
ocircumflex = {
l = -3;
lslash = 10;
};
odieresis = {
l = -3;
lslash = 10;
};
oe = {
lslash = 7;
};
ograve = {
l = -3;
lslash = 10;
};
ohungarumlaut = {
l = -3;
lslash = 10;
};
omacron = {
l = -3;
lslash = 10;
};
otilde = {
l = -3;
lslash = 10;
};
p = {
l = -3;
lslash = 10;
};
parenleft = {
ampersand = -40;
at = -36;
};
plus = {
slash = -42;
};
q = {
backslash = -36;
j = 29;
};
question = {
J = -46;
X = -20;
at = -52;
comma = -70;
ibreve = 34;
igrave = 40;
imacron = 60;
itilde = 44;
parenright = -63;
questiondown = -110;
quotedblbase = -40;
quotesinglbase = -40;
slash = -74;
underscore = -90;
};
questiondown = {
backslash = -34;
question = -36;
quotedblbase = 36;
quotesinglbase = 36;
v = -17;
};
quotedbl = {
ibreve = 32;
imacron = 52;
itilde = 26;
};
quotedblbase = {
backslash = -84;
question = -8;
};
quotedblleft = {
J = -80;
at = -86;
ibreve = 17;
imacron = 66;
itilde = 24;
questiondown = -84;
slash = -100;
};
quotedblright = {
ibreve = 32;
imacron = 52;
itilde = 26;
};
quoteleft = {
J = -80;
at = -86;
ibreve = 17;
imacron = 66;
itilde = 24;
questiondown = -84;
slash = -100;
};
quoteright = {
ibreve = 32;
imacron = 52;
itilde = 26;
};
quotesinglbase = {
backslash = -84;
question = -8;
};
quotesingle = {
ibreve = 32;
imacron = 52;
itilde = 26;
};
s = {
lslash = 7;
};
sacute = {
lslash = 7;
};
scaron = {
lslash = 7;
};
scedilla = {
lslash = 7;
};
slash = {
B = 52;
D = 52;
Dcaron = 52;
E = 52;
Eacute = 52;
Ebreve = 52;
Ecaron = 52;
Ecircumflex = 52;
Edieresis = 52;
Edotaccent = 52;
Egrave = 52;
Emacron = 52;
Eogonek = 52;
F = 52;
H = 52;
I = 52;
Iacute = 52;
Ibreve = 52;
Icircumflex = 60;
Idieresis = 48;
Idotaccent = 52;
Igrave = 52;
Imacron = 68;
Itilde = 52;
J = -40;
K = 52;
L = 52;
Lacute = 52;
Lcaron = 52;
Ldot = 52;
M = 52;
N = 52;
Nacute = 52;
Ncaron = 52;
Ntilde = 52;
Oslash = -30;
P = 52;
R = 52;
Racute = 52;
Rcaron = 52;
Thorn = 52;
ampersand = -50;
asterisk = -17;
at = -87;
bar = 52;
brokenbar = 52;
comma = -60;
ibreve = 40;
icircumflex = 37;
idieresis = 36;
igrave = 70;
imacron = 78;
plus = -52;
questiondown = -64;
quotedblbase = -86;
quotesinglbase = -86;
slash = -120;
underscore = -146;
uni0136 = 52;
uni013B = 52;
uni0145 = 52;
uni0156 = 52;
uni1EBC = 52;
};
space = {
X = -18;
};
thorn = {
l = -3;
lslash = 10;
};
underscore = {
ampersand = -40;
asterisk = -87;
backslash = -157;
j = 25;
question = -46;
underscore = -113;
};
uni0122 = {
imacron = 20;
};
uni0123 = {
lslash = 8;
};
uni0136 = {
ibreve = 20;
icircumflex = 0;
imacron = 60;
};
uni013B = {
V = -82;
};
uni013C = {
imacron = 46;
};
uni0145 = {
imacron = 40;
itilde = 13;
};
uni0156 = {
imacron = 17;
itilde = 18;
};
uni0162 = {
adieresis = -65;
amacron = -78;
atilde = -88;
edieresis = -83;
emacron = -90;
odieresis = -90;
omacron = -97;
racute = -59;
rcaron = -39;
scaron = -90;
udieresis = -63;
uni1EBD = -97;
ydieresis = -67;
};
uni0218 = {
imacron = 40;
itilde = 20;
};
uni0219 = {
lslash = 7;
};
uni021A = {
adieresis = -65;
amacron = -78;
atilde = -88;
edieresis = -83;
emacron = -90;
odieresis = -90;
omacron = -97;
racute = -59;
rcaron = -39;
scaron = -90;
udieresis = -63;
uni1EBD = -97;
ydieresis = -67;
};
uni0259 = {
l = -3;
lslash = 10;
};
uni02B9 = {
J = -23;
at = -27;
imacron = 33;
itilde = 20;
};
uni02BA = {
J = -23;
at = -27;
imacron = 33;
itilde = 20;
};
uni1EBC = {
ibreve = 36;
imacron = 54;
itilde = 38;
};
uni1EBD = {
lslash = 7;
};
uni1EF8 = {
ibreve = 40;
imacron = 68;
itilde = 20;
};
uni20A8 = {
lslash = 7;
};
v = {
aacute = -28;
abreve = -28;
acircumflex = -28;
adieresis = -28;
ae = -28;
agrave = -28;
amacron = -28;
ampersand = -18;
aogonek = -28;
aring = -28;
at = -46;
atilde = -28;
comma = -50;
f = 20;
questiondown = -42;
};
x = {
i = 7;
};
z = {
imacron = 40;
};
zacute = {
imacron = 40;
};
zcaron = {
imacron = 40;
};
zdotaccent = {
imacron = 40;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2022 The Rethink Sans Project Authors (https://github.com/hans-thiessen/Rethink-Sans)";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "The Rethink Sans project authors (Hans Thiessen). DM Sans designed by Colophon Foundry.";
}
);
},
{
key = designerURL;
value = "https://www.hansthiessen.com/";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://scripts.sil.org/OFL";
}
);
},
{
key = licenseURL;
value = "https://scripts.sil.org/OFL";
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Rethink Communications LLC";
}
);
},
{
key = manufacturerURL;
value = "https://rethinkideas.com/";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 1;
}
