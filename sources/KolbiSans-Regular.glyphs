{
.appVersion = "3343";
.formatVersion = 3;
customParameters = (
{
name = panose;
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
4,
5,
6,
7,
9,
29,
31,
32,
33,
35,
36,
37,
38,
42,
45,
47,
60,
62
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
CR,
space,
A,
Aacute,
Abreve,
uni01CD,
Acircumflex,
Adieresis,
Agrave,
Amacron,
Aogonek,
Aring,
Atilde,
AE,
AEacute,
B,
C,
Cacute,
Ccaron,
Ccedilla,
Cdotaccent,
D,
Dcaron,
Dcroat,
Eth,
E,
Eacute,
Ebreve,
Ecaron,
Ecircumflex,
Edieresis,
Edotaccent,
Egrave,
Emacron,
Eogonek,
uni018E,
uni1EBC,
uni018F,
F,
G,
Gbreve,
uni0122,
Gdotaccent,
H,
Hbar,
I,
IJ,
Iacute,
Ibreve,
Icircumflex,
Idieresis,
Idotaccent,
Igrave,
Imacron,
Iogonek,
Itilde,
J,
uni004A0301,
K,
uni0136,
L,
Lacute,
Lcaron,
uni013B,
Ldot,
Lslash,
M,
N,
Nacute,
Ncaron,
uni0145,
Ntilde,
Eng,
O,
Oacute,
Obreve,
Ocircumflex,
Odieresis,
Ograve,
Ohungarumlaut,
Omacron,
Oslash,
Otilde,
OE,
P,
Thorn,
Q,
R,
Racute,
Rcaron,
uni0156,
S,
Sacute,
Scaron,
Scedilla,
uni0218,
uni1E9E,
T,
Tcaron,
uni0162,
uni021A,
U,
Uacute,
Ubreve,
Ucircumflex,
Udieresis,
Ugrave,
Uhungarumlaut,
Umacron,
Uogonek,
Uring,
Utilde,
V,
W,
Wacute,
Wcircumflex,
Wdieresis,
Wgrave,
X,
Y,
Yacute,
Ycircumflex,
Ydieresis,
Ygrave,
uni1EF8,
Z,
Zacute,
Zcaron,
Zdotaccent,
uniA78B,
a,
aacute,
abreve,
uni01CE,
acircumflex,
adieresis,
agrave,
amacron,
aogonek,
aring,
atilde,
ae,
aeacute,
b,
c,
cacute,
ccaron,
ccedilla,
cdotaccent,
d,
dcaron,
dcroat,
eth,
e,
eacute,
ebreve,
ecaron,
ecircumflex,
edieresis,
edotaccent,
egrave,
emacron,
eogonek,
uni1EBD,
uni0259,
f,
g,
gbreve,
uni0123,
gdotaccent,
h,
hbar,
i,
dotlessi,
iacute,
ibreve,
icircumflex,
idieresis,
i.loclTRK,
igrave,
imacron,
iogonek,
itilde,
ij,
j,
uni0237,
uni006A0301,
k,
uni0137,
l,
lacute,
lcaron,
uni013C,
ldot,
lslash,
m,
n,
nacute,
ncaron,
uni0146,
ntilde,
eng,
o,
oacute,
obreve,
ocircumflex,
odieresis,
ograve,
ohungarumlaut,
omacron,
oslash,
otilde,
oe,
p,
thorn,
q,
r,
racute,
rcaron,
uni0157,
s,
sacute,
scaron,
scedilla,
uni0219,
germandbls,
t,
tcaron,
uni0163,
uni021B,
u,
uacute,
ubreve,
ucircumflex,
udieresis,
ugrave,
uhungarumlaut,
umacron,
uogonek,
uring,
utilde,
v,
w,
wacute,
wcircumflex,
wdieresis,
wgrave,
x,
y,
yacute,
ycircumflex,
ydieresis,
ygrave,
uni1EF9,
z,
zacute,
zcaron,
zdotaccent,
uniA78C,
fi,
fl,
ordfeminine,
ordmasculine,
uni042F,
uni0394,
Pi,
uni03A9,
uni03BC,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
uni24EA,
uni2780,
uni2781,
uni2782,
uni2783,
uni2784,
uni2785,
uni2786,
uni2787,
uni2788,
uni278A,
uni278B,
uni278C,
uni278D,
uni278E,
uni278F,
uni2790,
uni2791,
uni2792,
uni24EA.solid,
zero.dnom,
one.dnom,
two.dnom,
three.dnom,
four.dnom,
five.dnom,
six.dnom,
seven.dnom,
eight.dnom,
nine.dnom,
zero.numr,
one.numr,
two.numr,
three.numr,
four.numr,
five.numr,
six.numr,
seven.numr,
eight.numr,
nine.numr,
fraction,
onehalf,
onequarter,
threequarters,
oneeighth,
threeeighths,
fiveeighths,
seveneighths,
uni2080,
uni2081,
uni2082,
uni2083,
uni2084,
uni2085,
uni2086,
uni2087,
uni2088,
uni2089,
uni2070,
uni00B9,
uni00B2,
uni00B3,
uni2074,
uni2075,
uni2076,
uni2077,
uni2078,
uni2079,
uni00A0,
period,
comma,
colon,
semicolon,
ellipsis,
exclam,
exclamdown,
question,
questiondown,
periodcentered,
bullet,
asterisk,
numbersign,
slash,
backslash,
periodcentered.loclCAT,
periodcentered.loclCAT.case,
hyphen,
endash,
emdash,
underscore,
parenleft,
parenright,
braceleft,
braceright,
bracketleft,
bracketright,
quotesinglbase,
quotedblbase,
quotedblleft,
quotedblright,
quoteleft,
quoteright,
guillemotleft,
guillemotright,
guilsinglleft,
guilsinglright,
quotedbl,
quotesingle,
florin,
at,
ampersand,
paragraph,
section,
copyright,
registered,
trademark,
degree,
bar,
brokenbar,
dagger,
uni2113,
daggerdbl,
estimated,
at.case,
registered.case,
uni20BF,
cent,
currency,
dollar,
Euro,
uni20BD,
uni20A8,
sterling,
yen,
cent.001,
uni2215,
plus,
minus,
multiply,
divide,
equal,
notequal,
greater,
less,
greaterequal,
lessequal,
plusminus,
approxequal,
asciitilde,
logicalnot,
asciicircum,
infinity,
integral,
uni2126,
uni2206,
product,
summation,
radical,
uni00B5,
partialdiff,
percent,
perthousand,
plus.case,
arrowup,
arrowright,
arrowdown,
arrowleft,
lozenge,
uni0308,
uni0307,
gravecomb,
acutecomb,
uni030B,
uni030C.alt,
uni0302,
uni030C,
uni0306,
uni030A,
tildecomb,
uni0304,
uni0312,
uni0326,
uni0327,
uni0328,
uni0308.case,
uni0307.case,
gravecomb.case,
acutecomb.case,
uni030B.case,
uni030C.alt.case,
uni0302.case,
uni030C.case,
uni0306.case,
uni030A.case,
tildecomb.case,
uni0304.case,
uni0327.case,
uni0328.case,
uni0308.narrow,
dieresis,
dotaccent,
grave,
acute,
hungarumlaut,
circumflex,
caron,
breve,
ring,
tilde,
macron,
cedilla,
ogonek,
uni02BA,
uni02B9,
uniE000,
uniE001,
uniE002,
uniE003,
uniE004,
uniE005,
REbackwards,
RethinkWordmark,
Rlogobig
);
}
);
date = "2021-03-04 17:58:23 +0000";
familyName = "Kolbi Sans";
featurePrefixes = (
{
code = "lookup SUB_19 {
	sub i by dotlessi;
	sub j by uni0237;
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_19;
lookup SUB_20 {
	sub iogonek by dotlessi uni0328;
} SUB_20;
lookup SUB_21 {
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_21;
lookup SUB_22 {
	sub periodcentered by periodcentered.loclCAT;
} SUB_22;
lookup SUB_23 {
	sub J by uni004A0301;
	sub j by uni006A0301;
	sub periodcentered by periodcentered.loclCAT.case;
} SUB_23;
lookup SUB_24 {
	sub zero.numr by zero.dnom;
	sub one.numr by one.dnom;
	sub two.numr by two.dnom;
	sub three.numr by three.dnom;
	sub four.numr by four.dnom;
	sub five.numr by five.dnom;
	sub six.numr by six.dnom;
	sub seven.numr by seven.dnom;
	sub eight.numr by eight.dnom;
	sub nine.numr by nine.dnom;
} SUB_24;
lookup SUB_25 {
	sub A by ordfeminine;
	sub O by ordmasculine;
	sub a by ordfeminine;
	sub o by ordmasculine;
} SUB_25;
";
name = Prefix;
}
);
features = (
{
automatic = 1;
code = "";
tag = aalt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_1 {
	@SUB_1_0_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub [i j]' lookup SUB_19 @SUB_1_0_LA_0;
	@SUB_1_1_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub [i j]' lookup SUB_19 [uni0327 uni0328] @SUB_1_1_LA_0;
	@SUB_1_2_BT_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	@SUB_1_2_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_1_2_BT_0 @SUB_1_2_1' lookup SUB_19;
	@SUB_1_3_BT_0 = [A Aacute Abreve uni01CD Acircumflex Adieresis Agrave Amacron Aogonek Aring Atilde AE AEacute B C Cacute Ccaron Ccedilla Cdotaccent D Dcaron Dcroat Eth E Eacute Ebreve Ecaron Ecircumflex Edieresis Edotaccent Egrave Emacron Eogonek uni018E uni1EBC uni018F F G Gbreve uni0122 Gdotaccent H Hbar I IJ Iacute Ibreve Icircumflex Idieresis Idotaccent Igrave Imacron Iogonek Itilde J uni004A0301 K uni0136 L Lacute Lcaron uni013B Ldot Lslash M N Nacute Ncaron uni0145 Ntilde Eng O Oacute Obreve Ocircumflex Odieresis Ograve Ohungarumlaut Omacron Oslash Otilde OE P Thorn Q R Racute Rcaron uni0156 S Sacute Scaron Scedilla uni0218 uni1E9E T Tcaron uni0162 uni021A U Uacute Ubreve Ucircumflex Udieresis Ugrave Uhungarumlaut Umacron Uogonek Uring Utilde V W Wacute Wcircumflex Wdieresis Wgrave X Y Yacute Ycircumflex Ydieresis Ygrave uni1EF8 Z Zacute Zcaron Zdotaccent uniA78B uni042F uni0394 Pi uni03A9];
	@SUB_1_3_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_1_3_BT_0 @SUB_1_3_1' lookup SUB_19;
	@SUB_1_4_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub iogonek' lookup SUB_20 @SUB_1_4_LA_0;
} SUB_1;
lookup SUB_2 {
	@SUB_2_0_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	@SUB_2_0_LA_1 = [uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni030C.alt.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0327.case uni0328.case];
	sub @SUB_2_0_0' lookup SUB_21 @SUB_2_0_LA_1;
	@SUB_2_1_BT_0 = [uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni030C.alt.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0327.case uni0328.case];
	@SUB_2_1_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_2_1_BT_0 @SUB_2_1_1' lookup SUB_21;
} SUB_2;
lookup SUB_3 {
	sub Ldot by L periodcentered.loclCAT.case;
	sub fi by f i;
	sub fl by f l;
} SUB_3;
script latn;
language dflt;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language AZE;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language CAT;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language CRT;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language KAZ;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language MOL;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language NLD;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language ROM;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language TAT;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language TRK;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
";
tag = ccmp;
},
{
code = "script latn;
language AZE;
lookup SUB_4 {
	sub i by i.loclTRK;
} SUB_4;
language CRT;
lookup SUB_4;
language KAZ;
lookup SUB_4;
language TAT;
lookup SUB_4;
language TRK;
lookup SUB_4;
language MOL;
lookup SUB_5 {
	sub Scedilla by uni0218;
	sub uni0162 by uni021A;
	sub scedilla by uni0219;
	sub uni0163 by uni021B;
} SUB_5;
language ROM;
lookup SUB_5;
language CAT;
lookup SUB_6 {
	sub L periodcentered' lookup SUB_23 L;
	sub l periodcentered' lookup SUB_22 l;
} SUB_6;
language NLD;
lookup SUB_7 {
	sub Iacute J' lookup SUB_23;
	sub iacute j' lookup SUB_23;
} SUB_7;
";
tag = locl;
},
{
code = "script DFLT;
language dflt;
lookup SUB_8 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_8;
script latn;
language dflt;
lookup SUB_8;
language AZE;
lookup SUB_8;
language CAT;
lookup SUB_8;
language CRT;
lookup SUB_8;
language KAZ;
lookup SUB_8;
language MOL;
lookup SUB_8;
language NLD;
lookup SUB_8;
language ROM;
lookup SUB_8;
language TAT;
lookup SUB_8;
language TRK;
lookup SUB_8;
";
tag = subs;
},
{
code = "script DFLT;
language dflt;
lookup SUB_9 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_9;
script latn;
language dflt;
lookup SUB_9;
language AZE;
lookup SUB_9;
language CAT;
lookup SUB_9;
language CRT;
lookup SUB_9;
language KAZ;
lookup SUB_9;
language MOL;
lookup SUB_9;
language NLD;
lookup SUB_9;
language ROM;
lookup SUB_9;
language TAT;
lookup SUB_9;
language TRK;
lookup SUB_9;
";
tag = sinf;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	sub zero by uni2070;
	sub one by uni00B9;
	sub two by uni00B2;
	sub three by uni00B3;
	sub four by uni2074;
	sub five by uni2075;
	sub six by uni2076;
	sub seven by uni2077;
	sub eight by uni2078;
	sub nine by uni2079;
} SUB_10;
script latn;
language dflt;
lookup SUB_10;
language AZE;
lookup SUB_10;
language CAT;
lookup SUB_10;
language CRT;
lookup SUB_10;
language KAZ;
lookup SUB_10;
language MOL;
lookup SUB_10;
language NLD;
lookup SUB_10;
language ROM;
lookup SUB_10;
language TAT;
lookup SUB_10;
language TRK;
lookup SUB_10;
";
tag = sups;
},
{
code = "script DFLT;
language dflt;
lookup SUB_11 {
	sub zero by zero.numr;
	sub one by one.numr;
	sub two by two.numr;
	sub three by three.numr;
	sub four by four.numr;
	sub five by five.numr;
	sub six by six.numr;
	sub seven by seven.numr;
	sub eight by eight.numr;
	sub nine by nine.numr;
} SUB_11;
script latn;
language dflt;
lookup SUB_11;
language AZE;
lookup SUB_11;
language CAT;
lookup SUB_11;
language CRT;
lookup SUB_11;
language KAZ;
lookup SUB_11;
language MOL;
lookup SUB_11;
language NLD;
lookup SUB_11;
language ROM;
lookup SUB_11;
language TAT;
lookup SUB_11;
language TRK;
lookup SUB_11;
";
tag = numr;
},
{
code = "script DFLT;
language dflt;
lookup SUB_12 {
	sub zero by zero.dnom;
	sub one by one.dnom;
	sub two by two.dnom;
	sub three by three.dnom;
	sub four by four.dnom;
	sub five by five.dnom;
	sub six by six.dnom;
	sub seven by seven.dnom;
	sub eight by eight.dnom;
	sub nine by nine.dnom;
} SUB_12;
script latn;
language dflt;
lookup SUB_12;
language AZE;
lookup SUB_12;
language CAT;
lookup SUB_12;
language CRT;
lookup SUB_12;
language KAZ;
lookup SUB_12;
language MOL;
lookup SUB_12;
language NLD;
lookup SUB_12;
language ROM;
lookup SUB_12;
language TAT;
lookup SUB_12;
language TRK;
lookup SUB_12;
";
tag = dnom;
},
{
code = "script DFLT;
language dflt;
lookup SUB_13 {
	sub slash by fraction;
} SUB_13;
lookup SUB_14 {
	sub zero by zero.numr;
	sub one by one.numr;
	sub two by two.numr;
	sub three by three.numr;
	sub four by four.numr;
	sub five by five.numr;
	sub six by six.numr;
	sub seven by seven.numr;
	sub eight by eight.numr;
	sub nine by nine.numr;
} SUB_14;
lookup SUB_15 {
	@SUB_15_0_0 = [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
	sub fraction @SUB_15_0_0' lookup SUB_24;
	@SUB_15_1_BT_0 = [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];
	@SUB_15_1_1 = [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
	sub @SUB_15_1_BT_0 @SUB_15_1_1' lookup SUB_24;
} SUB_15;
script latn;
language dflt;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language AZE;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language CAT;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language CRT;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language KAZ;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language MOL;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language NLD;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language ROM;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language TAT;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language TRK;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
";
tag = frac;
},
{
code = "script DFLT;
language dflt;
lookup SUB_16 {
	lookupflag IgnoreMarks;
	sub E less by uni018E;
	sub R E less by REbackwards;
	sub R less E by REbackwards;
	sub R greater by RethinkWordmark;
	sub R less by uni042F;
	sub f i by fi;
	sub f l by fl;
	sub hyphen hyphen hyphen greater by arrowdown;
	sub hyphen hyphen greater by arrowright;
	sub parenleft R parenright by Rlogobig;
	sub parenleft zero parenright by uni24EA;
	sub parenleft one parenright by uni2780;
	sub parenleft two parenright by uni2781;
	sub parenleft three parenright by uni2782;
	sub parenleft four parenright by uni2783;
	sub parenleft five parenright by uni2784;
	sub parenleft six parenright by uni2785;
	sub parenleft seven parenright by uni2786;
	sub parenleft eight parenright by uni2787;
	sub parenleft nine parenright by uni2788;
	sub braceleft zero braceright by uni24EA.solid;
	sub braceleft one braceright by uni278A;
	sub braceleft two braceright by uni278B;
	sub braceleft three braceright by uni278C;
	sub braceleft four braceright by uni278D;
	sub braceleft five braceright by uni278E;
	sub braceleft six braceright by uni278F;
	sub braceleft seven braceright by uni2790;
	sub braceleft eight braceright by uni2791;
	sub braceleft nine braceright by uni2792;
	sub registered plus by registered.case;
	sub less hyphen hyphen hyphen by arrowup;
	sub less hyphen hyphen by arrowleft;
} SUB_16;
script latn;
language dflt;
lookup SUB_16;
language AZE;
lookup SUB_16;
language CAT;
lookup SUB_16;
language CRT;
lookup SUB_16;
language KAZ;
lookup SUB_16;
language MOL;
lookup SUB_16;
language NLD;
lookup SUB_16;
language ROM;
lookup SUB_16;
language TAT;
lookup SUB_16;
language TRK;
lookup SUB_16;
";
tag = liga;
},
{
code = "script DFLT;
language dflt;
lookup SUB_17 {
	@SUB_17_0_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_17_0_BT_0 [A a]' lookup SUB_25;
	@SUB_17_1_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_17_1_BT_0 [O o]' lookup SUB_25;
} SUB_17;
script latn;
language dflt;
lookup SUB_17;
language AZE;
lookup SUB_17;
language CAT;
lookup SUB_17;
language CRT;
lookup SUB_17;
language KAZ;
lookup SUB_17;
language MOL;
lookup SUB_17;
language NLD;
lookup SUB_17;
language ROM;
lookup SUB_17;
language TAT;
lookup SUB_17;
language TRK;
lookup SUB_17;
";
tag = ordn;
},
{
code = "script DFLT;
language dflt;
lookup SUB_18 {
	sub periodcentered.loclCAT by periodcentered.loclCAT.case;
	sub at by at.case;
	sub registered by registered.case;
	sub plus by plus.case;
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_18;
script latn;
language dflt;
lookup SUB_18;
language AZE;
lookup SUB_18;
language CAT;
lookup SUB_18;
language CRT;
lookup SUB_18;
language KAZ;
lookup SUB_18;
language MOL;
lookup SUB_18;
language NLD;
lookup SUB_18;
language ROM;
lookup SUB_18;
language TAT;
lookup SUB_18;
language TRK;
lookup SUB_18;
";
tag = case;
},
{
code = "script DFLT;
language dflt;
lookup POS_2 {
	markClass uni0326 <anchor 49 0> @POS_2_0_MARK_0;
	markClass uni0327 <anchor 74 0> @POS_2_0_MARK_0;
	markClass uni0327.case <anchor 72 0> @POS_2_0_MARK_0;
	markClass uni0308 <anchor 147 496> @POS_2_0_MARK_1;
	markClass uni0307 <anchor 58 496> @POS_2_0_MARK_1;
	markClass gravecomb <anchor 105 496> @POS_2_0_MARK_1;
	markClass acutecomb <anchor 105 496> @POS_2_0_MARK_1;
	markClass uni030B <anchor 116 496> @POS_2_0_MARK_1;
	markClass uni0302 <anchor 137 496> @POS_2_0_MARK_1;
	markClass uni030C <anchor 137 496> @POS_2_0_MARK_1;
	markClass uni0306 <anchor 141 496> @POS_2_0_MARK_1;
	markClass uni030A <anchor 105 496> @POS_2_0_MARK_1;
	markClass tildecomb <anchor 151 496> @POS_2_0_MARK_1;
	markClass uni0304 <anchor 174 496> @POS_2_0_MARK_1;
	markClass uni0312 <anchor 51 496> @POS_2_0_MARK_1;
	markClass uni0308.case <anchor 147 700> @POS_2_0_MARK_1;
	markClass uni0307.case <anchor 58 700> @POS_2_0_MARK_1;
	markClass gravecomb.case <anchor 105 700> @POS_2_0_MARK_1;
	markClass acutecomb.case <anchor 105 700> @POS_2_0_MARK_1;
	markClass uni030B.case <anchor 146 700> @POS_2_0_MARK_1;
	markClass uni0302.case <anchor 137 700> @POS_2_0_MARK_1;
	markClass uni030C.case <anchor 137 700> @POS_2_0_MARK_1;
	markClass uni0306.case <anchor 141 700> @POS_2_0_MARK_1;
	markClass uni030A.case <anchor 105 700> @POS_2_0_MARK_1;
	markClass tildecomb.case <anchor 151 700> @POS_2_0_MARK_1;
	markClass uni0304.case <anchor 174 700> @POS_2_0_MARK_1;
	markClass uni0308.narrow <anchor 147 496> @POS_2_0_MARK_1;
	pos base cent <anchor 375 7> mark @POS_2_0_MARK_0 <anchor 375 693> mark @POS_2_0_MARK_1;
	pos base uni20A8 <anchor 831 0> mark @POS_2_0_MARK_0 <anchor 826 496> mark @POS_2_0_MARK_1;
} POS_2;
lookup POS_3 {
	markClass uni0326 <anchor 49 0> @POS_3_0_MARK_0;
	markClass uni0327 <anchor 74 0> @POS_3_0_MARK_0;
	markClass uni0327.case <anchor 72 0> @POS_3_0_MARK_0;
	markClass uni0308 <anchor 147 496> @POS_3_0_MARK_1;
	markClass uni0307 <anchor 58 496> @POS_3_0_MARK_1;
	markClass gravecomb <anchor 105 496> @POS_3_0_MARK_1;
	markClass acutecomb <anchor 105 496> @POS_3_0_MARK_1;
	markClass uni030B <anchor 116 496> @POS_3_0_MARK_1;
	markClass uni0302 <anchor 137 496> @POS_3_0_MARK_1;
	markClass uni030C <anchor 137 496> @POS_3_0_MARK_1;
	markClass uni0306 <anchor 141 496> @POS_3_0_MARK_1;
	markClass uni030A <anchor 105 496> @POS_3_0_MARK_1;
	markClass tildecomb <anchor 151 496> @POS_3_0_MARK_1;
	markClass uni0304 <anchor 174 496> @POS_3_0_MARK_1;
	markClass uni0312 <anchor 51 496> @POS_3_0_MARK_1;
	markClass uni0308.case <anchor 147 700> @POS_3_0_MARK_1;
	markClass uni0307.case <anchor 58 700> @POS_3_0_MARK_1;
	markClass gravecomb.case <anchor 105 700> @POS_3_0_MARK_1;
	markClass acutecomb.case <anchor 105 700> @POS_3_0_MARK_1;
	markClass uni030B.case <anchor 146 700> @POS_3_0_MARK_1;
	markClass uni0302.case <anchor 137 700> @POS_3_0_MARK_1;
	markClass uni030C.case <anchor 137 700> @POS_3_0_MARK_1;
	markClass uni0306.case <anchor 141 700> @POS_3_0_MARK_1;
	markClass uni030A.case <anchor 105 700> @POS_3_0_MARK_1;
	markClass tildecomb.case <anchor 151 700> @POS_3_0_MARK_1;
	markClass uni0304.case <anchor 174 700> @POS_3_0_MARK_1;
	markClass uni0308.narrow <anchor 147 496> @POS_3_0_MARK_1;
	pos base A <anchor 332 0> mark @POS_3_0_MARK_0 <anchor 332 700> mark @POS_3_0_MARK_1;
	pos base Aacute <anchor 332 0> mark @POS_3_0_MARK_0 <anchor 332 931> mark @POS_3_0_MARK_1;
	pos base Abreve <anchor 332 0> mark @POS_3_0_MARK_0 <anchor 332 901> mark @POS_3_0_MARK_1;
	pos base uni01CD <anchor 332 0> mark @POS_3_0_MARK_0 <anchor 332 901> mark @POS_3_0_MARK_1;
	pos base Acircumflex <anchor 332 0> mark @POS_3_0_MARK_0 <anchor 332 902> mark @POS_3_0_MARK_1;
	pos base Adieresis <anchor 332 0> mark @POS_3_0_MARK_0 <anchor 332 889> mark @POS_3_0_MARK_1;
	pos base Agrave <anchor 332 0> mark @POS_3_0_MARK_0 <anchor 332 931> mark @POS_3_0_MARK_1;
	pos base Amacron <anchor 332 0> mark @POS_3_0_MARK_0 <anchor 332 859> mark @POS_3_0_MARK_1;
	pos base Aogonek <anchor 332 0> mark @POS_3_0_MARK_0 <anchor 332 700> mark @POS_3_0_MARK_1;
	pos base Aring <anchor 332 0> mark @POS_3_0_MARK_0 <anchor 332 967> mark @POS_3_0_MARK_1;
	pos base Atilde <anchor 332 0> mark @POS_3_0_MARK_0 <anchor 332 859> mark @POS_3_0_MARK_1;
	pos base AE <anchor 456 0> mark @POS_3_0_MARK_0 <anchor 526 700> mark @POS_3_0_MARK_1;
	pos base AEacute <anchor 456 0> mark @POS_3_0_MARK_0 <anchor 526 931> mark @POS_3_0_MARK_1;
	pos base C <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 381 700> mark @POS_3_0_MARK_1;
	pos base Cacute <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 381 931> mark @POS_3_0_MARK_1;
	pos base Ccaron <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 381 901> mark @POS_3_0_MARK_1;
	pos base Ccedilla <anchor 381 -259> mark @POS_3_0_MARK_0 <anchor 381 700> mark @POS_3_0_MARK_1;
	pos base Cdotaccent <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 381 889> mark @POS_3_0_MARK_1;
	pos base D <anchor 342 0> mark @POS_3_0_MARK_0 <anchor 342 700> mark @POS_3_0_MARK_1;
	pos base Dcaron <anchor 342 0> mark @POS_3_0_MARK_0 <anchor 342 901> mark @POS_3_0_MARK_1;
	pos base E <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 700> mark @POS_3_0_MARK_1;
	pos base Eacute <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 931> mark @POS_3_0_MARK_1;
	pos base Ebreve <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 901> mark @POS_3_0_MARK_1;
	pos base Ecaron <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 901> mark @POS_3_0_MARK_1;
	pos base Ecircumflex <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 902> mark @POS_3_0_MARK_1;
	pos base Edieresis <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 889> mark @POS_3_0_MARK_1;
	pos base Edotaccent <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 889> mark @POS_3_0_MARK_1;
	pos base Egrave <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 931> mark @POS_3_0_MARK_1;
	pos base Emacron <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 859> mark @POS_3_0_MARK_1;
	pos base Eogonek <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 700> mark @POS_3_0_MARK_1;
	pos base uni1EBC <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 859> mark @POS_3_0_MARK_1;
	pos base G <anchor 379 0> mark @POS_3_0_MARK_0 <anchor 379 700> mark @POS_3_0_MARK_1;
	pos base Gbreve <anchor 379 0> mark @POS_3_0_MARK_0 <anchor 379 901> mark @POS_3_0_MARK_1;
	pos base uni0122 <anchor 379 -238> mark @POS_3_0_MARK_0 <anchor 379 700> mark @POS_3_0_MARK_1;
	pos base Gdotaccent <anchor 379 0> mark @POS_3_0_MARK_0 <anchor 379 889> mark @POS_3_0_MARK_1;
	pos base I <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 116 700> mark @POS_3_0_MARK_1;
	pos base IJ <anchor 482 0> mark @POS_3_0_MARK_0 <anchor 616 700> mark @POS_3_0_MARK_1;
	pos base Iacute <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 116 931> mark @POS_3_0_MARK_1;
	pos base Ibreve <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 116 901> mark @POS_3_0_MARK_1;
	pos base Icircumflex <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 116 902> mark @POS_3_0_MARK_1;
	pos base Idieresis <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 116 889> mark @POS_3_0_MARK_1;
	pos base Idotaccent <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 116 889> mark @POS_3_0_MARK_1;
	pos base Igrave <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 116 931> mark @POS_3_0_MARK_1;
	pos base Imacron <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 116 859> mark @POS_3_0_MARK_1;
	pos base Iogonek <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 116 700> mark @POS_3_0_MARK_1;
	pos base Itilde <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 116 859> mark @POS_3_0_MARK_1;
	pos base J <anchor 250 0> mark @POS_3_0_MARK_0 <anchor 384 700> mark @POS_3_0_MARK_1;
	pos base uni004A0301 <anchor 250 0> mark @POS_3_0_MARK_0 <anchor 384 931> mark @POS_3_0_MARK_1;
	pos base K <anchor 288 0> mark @POS_3_0_MARK_0 <anchor 288 700> mark @POS_3_0_MARK_1;
	pos base uni0136 <anchor 288 -238> mark @POS_3_0_MARK_0 <anchor 288 700> mark @POS_3_0_MARK_1;
	pos base L <anchor 263 0> mark @POS_3_0_MARK_0 <anchor 178 700> mark @POS_3_0_MARK_1;
	pos base Lacute <anchor 263 0> mark @POS_3_0_MARK_0 <anchor 178 931> mark @POS_3_0_MARK_1;
	pos base Lcaron <anchor 263 0> mark @POS_3_0_MARK_0 <anchor 178 700> mark @POS_3_0_MARK_1;
	pos base uni013B <anchor 263 -238> mark @POS_3_0_MARK_0 <anchor 178 700> mark @POS_3_0_MARK_1;
	pos base N <anchor 345 0> mark @POS_3_0_MARK_0 <anchor 345 700> mark @POS_3_0_MARK_1;
	pos base Nacute <anchor 345 0> mark @POS_3_0_MARK_0 <anchor 345 931> mark @POS_3_0_MARK_1;
	pos base Ncaron <anchor 345 0> mark @POS_3_0_MARK_0 <anchor 345 901> mark @POS_3_0_MARK_1;
	pos base uni0145 <anchor 345 -238> mark @POS_3_0_MARK_0 <anchor 345 700> mark @POS_3_0_MARK_1;
	pos base Ntilde <anchor 345 0> mark @POS_3_0_MARK_0 <anchor 345 859> mark @POS_3_0_MARK_1;
	pos base O <anchor 392 0> mark @POS_3_0_MARK_0 <anchor 392 700> mark @POS_3_0_MARK_1;
	pos base Oacute <anchor 392 0> mark @POS_3_0_MARK_0 <anchor 392 931> mark @POS_3_0_MARK_1;
	pos base Obreve <anchor 392 0> mark @POS_3_0_MARK_0 <anchor 392 901> mark @POS_3_0_MARK_1;
	pos base Ocircumflex <anchor 392 0> mark @POS_3_0_MARK_0 <anchor 392 902> mark @POS_3_0_MARK_1;
	pos base Odieresis <anchor 392 0> mark @POS_3_0_MARK_0 <anchor 392 889> mark @POS_3_0_MARK_1;
	pos base Ograve <anchor 392 0> mark @POS_3_0_MARK_0 <anchor 392 931> mark @POS_3_0_MARK_1;
	pos base Ohungarumlaut <anchor 392 0> mark @POS_3_0_MARK_0 <anchor 392 902> mark @POS_3_0_MARK_1;
	pos base Omacron <anchor 392 0> mark @POS_3_0_MARK_0 <anchor 392 859> mark @POS_3_0_MARK_1;
	pos base Otilde <anchor 392 0> mark @POS_3_0_MARK_0 <anchor 392 859> mark @POS_3_0_MARK_1;
	pos base R <anchor 302 0> mark @POS_3_0_MARK_0 <anchor 283 700> mark @POS_3_0_MARK_1;
	pos base Racute <anchor 302 0> mark @POS_3_0_MARK_0 <anchor 283 931> mark @POS_3_0_MARK_1;
	pos base Rcaron <anchor 302 0> mark @POS_3_0_MARK_0 <anchor 283 901> mark @POS_3_0_MARK_1;
	pos base uni0156 <anchor 302 -238> mark @POS_3_0_MARK_0 <anchor 283 700> mark @POS_3_0_MARK_1;
	pos base S <anchor 289 0> mark @POS_3_0_MARK_0 <anchor 289 700> mark @POS_3_0_MARK_1;
	pos base Sacute <anchor 289 0> mark @POS_3_0_MARK_0 <anchor 289 931> mark @POS_3_0_MARK_1;
	pos base Scaron <anchor 289 0> mark @POS_3_0_MARK_0 <anchor 289 901> mark @POS_3_0_MARK_1;
	pos base Scedilla <anchor 289 -259> mark @POS_3_0_MARK_0 <anchor 289 700> mark @POS_3_0_MARK_1;
	pos base uni0218 <anchor 289 -238> mark @POS_3_0_MARK_0 <anchor 289 700> mark @POS_3_0_MARK_1;
	pos base T <anchor 280 0> mark @POS_3_0_MARK_0 <anchor 280 700> mark @POS_3_0_MARK_1;
	pos base Tcaron <anchor 280 0> mark @POS_3_0_MARK_0 <anchor 280 901> mark @POS_3_0_MARK_1;
	pos base uni0162 <anchor 280 -259> mark @POS_3_0_MARK_0 <anchor 280 700> mark @POS_3_0_MARK_1;
	pos base uni021A <anchor 280 -238> mark @POS_3_0_MARK_0 <anchor 280 700> mark @POS_3_0_MARK_1;
	pos base U <anchor 328 0> mark @POS_3_0_MARK_0 <anchor 328 700> mark @POS_3_0_MARK_1;
	pos base Uacute <anchor 328 0> mark @POS_3_0_MARK_0 <anchor 328 931> mark @POS_3_0_MARK_1;
	pos base Ubreve <anchor 328 0> mark @POS_3_0_MARK_0 <anchor 328 901> mark @POS_3_0_MARK_1;
	pos base Ucircumflex <anchor 328 0> mark @POS_3_0_MARK_0 <anchor 328 902> mark @POS_3_0_MARK_1;
	pos base Udieresis <anchor 328 0> mark @POS_3_0_MARK_0 <anchor 328 889> mark @POS_3_0_MARK_1;
	pos base Ugrave <anchor 328 0> mark @POS_3_0_MARK_0 <anchor 328 931> mark @POS_3_0_MARK_1;
	pos base Uhungarumlaut <anchor 328 0> mark @POS_3_0_MARK_0 <anchor 328 902> mark @POS_3_0_MARK_1;
	pos base Umacron <anchor 328 0> mark @POS_3_0_MARK_0 <anchor 328 859> mark @POS_3_0_MARK_1;
	pos base Uogonek <anchor 328 0> mark @POS_3_0_MARK_0 <anchor 328 700> mark @POS_3_0_MARK_1;
	pos base Uring <anchor 328 0> mark @POS_3_0_MARK_0 <anchor 328 967> mark @POS_3_0_MARK_1;
	pos base Utilde <anchor 328 0> mark @POS_3_0_MARK_0 <anchor 328 859> mark @POS_3_0_MARK_1;
	pos base W <anchor 493 0> mark @POS_3_0_MARK_0 <anchor 493 700> mark @POS_3_0_MARK_1;
	pos base Wacute <anchor 493 0> mark @POS_3_0_MARK_0 <anchor 493 931> mark @POS_3_0_MARK_1;
	pos base Wcircumflex <anchor 493 0> mark @POS_3_0_MARK_0 <anchor 493 902> mark @POS_3_0_MARK_1;
	pos base Wdieresis <anchor 493 0> mark @POS_3_0_MARK_0 <anchor 493 889> mark @POS_3_0_MARK_1;
	pos base Wgrave <anchor 493 0> mark @POS_3_0_MARK_0 <anchor 493 931> mark @POS_3_0_MARK_1;
	pos base Y <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 290 700> mark @POS_3_0_MARK_1;
	pos base Yacute <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 290 931> mark @POS_3_0_MARK_1;
	pos base Ycircumflex <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 290 902> mark @POS_3_0_MARK_1;
	pos base Ydieresis <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 290 889> mark @POS_3_0_MARK_1;
	pos base Ygrave <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 290 931> mark @POS_3_0_MARK_1;
	pos base uni1EF8 <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 290 859> mark @POS_3_0_MARK_1;
	pos base Z <anchor 268 0> mark @POS_3_0_MARK_0 <anchor 268 700> mark @POS_3_0_MARK_1;
	pos base Zacute <anchor 268 0> mark @POS_3_0_MARK_0 <anchor 268 931> mark @POS_3_0_MARK_1;
	pos base Zcaron <anchor 268 0> mark @POS_3_0_MARK_0 <anchor 268 901> mark @POS_3_0_MARK_1;
	pos base Zdotaccent <anchor 268 0> mark @POS_3_0_MARK_0 <anchor 268 889> mark @POS_3_0_MARK_1;
	pos base a <anchor 247 0> mark @POS_3_0_MARK_0 <anchor 275 496> mark @POS_3_0_MARK_1;
	pos base aacute <anchor 247 0> mark @POS_3_0_MARK_0 <anchor 275 747> mark @POS_3_0_MARK_1;
	pos base abreve <anchor 247 0> mark @POS_3_0_MARK_0 <anchor 275 732> mark @POS_3_0_MARK_1;
	pos base uni01CE <anchor 247 0> mark @POS_3_0_MARK_0 <anchor 275 733> mark @POS_3_0_MARK_1;
	pos base acircumflex <anchor 247 0> mark @POS_3_0_MARK_0 <anchor 275 733> mark @POS_3_0_MARK_1;
	pos base adieresis <anchor 247 0> mark @POS_3_0_MARK_0 <anchor 275 720> mark @POS_3_0_MARK_1;
	pos base agrave <anchor 247 0> mark @POS_3_0_MARK_0 <anchor 275 747> mark @POS_3_0_MARK_1;
	pos base amacron <anchor 247 0> mark @POS_3_0_MARK_0 <anchor 275 695> mark @POS_3_0_MARK_1;
	pos base aogonek <anchor 247 0> mark @POS_3_0_MARK_0 <anchor 275 496> mark @POS_3_0_MARK_1;
	pos base aring <anchor 247 0> mark @POS_3_0_MARK_0 <anchor 275 763> mark @POS_3_0_MARK_1;
	pos base atilde <anchor 247 0> mark @POS_3_0_MARK_0 <anchor 275 705> mark @POS_3_0_MARK_1;
	pos base ae <anchor 457 0> mark @POS_3_0_MARK_0 <anchor 457 496> mark @POS_3_0_MARK_1;
	pos base aeacute <anchor 457 0> mark @POS_3_0_MARK_0 <anchor 457 747> mark @POS_3_0_MARK_1;
	pos base c <anchor 296 0> mark @POS_3_0_MARK_0 <anchor 293 496> mark @POS_3_0_MARK_1;
	pos base cacute <anchor 296 0> mark @POS_3_0_MARK_0 <anchor 293 747> mark @POS_3_0_MARK_1;
	pos base ccaron <anchor 296 0> mark @POS_3_0_MARK_0 <anchor 293 733> mark @POS_3_0_MARK_1;
	pos base ccedilla <anchor 296 -259> mark @POS_3_0_MARK_0 <anchor 293 496> mark @POS_3_0_MARK_1;
	pos base cdotaccent <anchor 296 0> mark @POS_3_0_MARK_0 <anchor 293 720> mark @POS_3_0_MARK_1;
	pos base d <anchor 314 0> mark @POS_3_0_MARK_0 <anchor 314 992> mark @POS_3_0_MARK_1;
	pos base dcaron <anchor 314 0> mark @POS_3_0_MARK_0 <anchor 314 992> mark @POS_3_0_MARK_1;
	pos base e <anchor 292 0> mark @POS_3_0_MARK_0 <anchor 289 496> mark @POS_3_0_MARK_1;
	pos base eacute <anchor 292 0> mark @POS_3_0_MARK_0 <anchor 289 747> mark @POS_3_0_MARK_1;
	pos base ebreve <anchor 292 0> mark @POS_3_0_MARK_0 <anchor 289 732> mark @POS_3_0_MARK_1;
	pos base ecaron <anchor 292 0> mark @POS_3_0_MARK_0 <anchor 289 733> mark @POS_3_0_MARK_1;
	pos base ecircumflex <anchor 292 0> mark @POS_3_0_MARK_0 <anchor 289 733> mark @POS_3_0_MARK_1;
	pos base edieresis <anchor 292 0> mark @POS_3_0_MARK_0 <anchor 289 720> mark @POS_3_0_MARK_1;
	pos base edotaccent <anchor 292 0> mark @POS_3_0_MARK_0 <anchor 289 720> mark @POS_3_0_MARK_1;
	pos base egrave <anchor 292 0> mark @POS_3_0_MARK_0 <anchor 289 747> mark @POS_3_0_MARK_1;
	pos base emacron <anchor 292 0> mark @POS_3_0_MARK_0 <anchor 289 695> mark @POS_3_0_MARK_1;
	pos base eogonek <anchor 292 0> mark @POS_3_0_MARK_0 <anchor 289 496> mark @POS_3_0_MARK_1;
	pos base uni1EBD <anchor 292 0> mark @POS_3_0_MARK_0 <anchor 289 705> mark @POS_3_0_MARK_1;
	pos base g <anchor 264 -310> mark @POS_3_0_MARK_0 <anchor 254 496> mark @POS_3_0_MARK_1;
	pos base gbreve <anchor 264 -310> mark @POS_3_0_MARK_0 <anchor 254 732> mark @POS_3_0_MARK_1;
	pos base uni0123 <anchor 264 -310> mark @POS_3_0_MARK_0 <anchor 254 783> mark @POS_3_0_MARK_1;
	pos base gdotaccent <anchor 264 -310> mark @POS_3_0_MARK_0 <anchor 254 720> mark @POS_3_0_MARK_1;
	pos base i <anchor 120 0> mark @POS_3_0_MARK_0;
	pos base dotlessi <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 496> mark @POS_3_0_MARK_1;
	pos base iacute <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 747> mark @POS_3_0_MARK_1;
	pos base ibreve <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 732> mark @POS_3_0_MARK_1;
	pos base icircumflex <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 733> mark @POS_3_0_MARK_1;
	pos base idieresis <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 720> mark @POS_3_0_MARK_1;
	pos base i.loclTRK <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 720> mark @POS_3_0_MARK_1;
	pos base igrave <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 747> mark @POS_3_0_MARK_1;
	pos base imacron <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 695> mark @POS_3_0_MARK_1;
	pos base iogonek <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 720> mark @POS_3_0_MARK_1;
	pos base itilde <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 705> mark @POS_3_0_MARK_1;
	pos base ij <anchor 120 0> mark @POS_3_0_MARK_0;
	pos base uni0237 <anchor 121 -310> mark @POS_3_0_MARK_0 <anchor 121 496> mark @POS_3_0_MARK_1;
	pos base uni006A0301 <anchor 121 -310> mark @POS_3_0_MARK_0 <anchor 121 747> mark @POS_3_0_MARK_1;
	pos base k <anchor 252 0> mark @POS_3_0_MARK_0 <anchor 252 992> mark @POS_3_0_MARK_1;
	pos base uni0137 <anchor 252 -238> mark @POS_3_0_MARK_0 <anchor 252 992> mark @POS_3_0_MARK_1;
	pos base l <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 700> mark @POS_3_0_MARK_1;
	pos base lacute <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 951> mark @POS_3_0_MARK_1;
	pos base lcaron <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 700> mark @POS_3_0_MARK_1;
	pos base uni013C <anchor 111 -238> mark @POS_3_0_MARK_0 <anchor 111 700> mark @POS_3_0_MARK_1;
	pos base n <anchor 300 0> mark @POS_3_0_MARK_0 <anchor 306 496> mark @POS_3_0_MARK_1;
	pos base nacute <anchor 300 0> mark @POS_3_0_MARK_0 <anchor 306 747> mark @POS_3_0_MARK_1;
	pos base ncaron <anchor 300 0> mark @POS_3_0_MARK_0 <anchor 306 733> mark @POS_3_0_MARK_1;
	pos base uni0146 <anchor 300 -238> mark @POS_3_0_MARK_0 <anchor 306 496> mark @POS_3_0_MARK_1;
	pos base ntilde <anchor 300 0> mark @POS_3_0_MARK_0 <anchor 306 705> mark @POS_3_0_MARK_1;
	pos base o <anchor 302 0> mark @POS_3_0_MARK_0 <anchor 302 496> mark @POS_3_0_MARK_1;
	pos base oacute <anchor 302 0> mark @POS_3_0_MARK_0 <anchor 302 747> mark @POS_3_0_MARK_1;
	pos base obreve <anchor 302 0> mark @POS_3_0_MARK_0 <anchor 302 732> mark @POS_3_0_MARK_1;
	pos base ocircumflex <anchor 302 0> mark @POS_3_0_MARK_0 <anchor 302 733> mark @POS_3_0_MARK_1;
	pos base odieresis <anchor 302 0> mark @POS_3_0_MARK_0 <anchor 302 720> mark @POS_3_0_MARK_1;
	pos base ograve <anchor 302 0> mark @POS_3_0_MARK_0 <anchor 302 747> mark @POS_3_0_MARK_1;
	pos base ohungarumlaut <anchor 302 0> mark @POS_3_0_MARK_0 <anchor 302 698> mark @POS_3_0_MARK_1;
	pos base omacron <anchor 302 0> mark @POS_3_0_MARK_0 <anchor 302 695> mark @POS_3_0_MARK_1;
	pos base otilde <anchor 302 0> mark @POS_3_0_MARK_0 <anchor 302 705> mark @POS_3_0_MARK_1;
	pos base r <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 182 496> mark @POS_3_0_MARK_1;
	pos base racute <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 182 747> mark @POS_3_0_MARK_1;
	pos base rcaron <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 182 733> mark @POS_3_0_MARK_1;
	pos base uni0157 <anchor 116 -238> mark @POS_3_0_MARK_0 <anchor 182 496> mark @POS_3_0_MARK_1;
	pos base s <anchor 255 0> mark @POS_3_0_MARK_0 <anchor 250 496> mark @POS_3_0_MARK_1;
	pos base sacute <anchor 255 0> mark @POS_3_0_MARK_0 <anchor 250 747> mark @POS_3_0_MARK_1;
	pos base scaron <anchor 255 0> mark @POS_3_0_MARK_0 <anchor 250 733> mark @POS_3_0_MARK_1;
	pos base scedilla <anchor 255 -259> mark @POS_3_0_MARK_0 <anchor 250 496> mark @POS_3_0_MARK_1;
	pos base uni0219 <anchor 255 -238> mark @POS_3_0_MARK_0 <anchor 250 496> mark @POS_3_0_MARK_1;
	pos base t <anchor 238 0> mark @POS_3_0_MARK_0 <anchor 194 496> mark @POS_3_0_MARK_1;
	pos base tcaron <anchor 238 0> mark @POS_3_0_MARK_0 <anchor 194 496> mark @POS_3_0_MARK_1;
	pos base uni0163 <anchor 238 -259> mark @POS_3_0_MARK_0 <anchor 194 496> mark @POS_3_0_MARK_1;
	pos base uni021B <anchor 238 -238> mark @POS_3_0_MARK_0 <anchor 194 496> mark @POS_3_0_MARK_1;
	pos base u <anchor 286 0> mark @POS_3_0_MARK_0 <anchor 284 496> mark @POS_3_0_MARK_1;
	pos base uacute <anchor 286 0> mark @POS_3_0_MARK_0 <anchor 284 747> mark @POS_3_0_MARK_1;
	pos base ubreve <anchor 286 0> mark @POS_3_0_MARK_0 <anchor 284 732> mark @POS_3_0_MARK_1;
	pos base ucircumflex <anchor 286 0> mark @POS_3_0_MARK_0 <anchor 284 733> mark @POS_3_0_MARK_1;
	pos base udieresis <anchor 286 0> mark @POS_3_0_MARK_0 <anchor 284 720> mark @POS_3_0_MARK_1;
	pos base ugrave <anchor 286 0> mark @POS_3_0_MARK_0 <anchor 284 747> mark @POS_3_0_MARK_1;
	pos base uhungarumlaut <anchor 286 0> mark @POS_3_0_MARK_0 <anchor 284 698> mark @POS_3_0_MARK_1;
	pos base umacron <anchor 286 0> mark @POS_3_0_MARK_0 <anchor 284 695> mark @POS_3_0_MARK_1;
	pos base uogonek <anchor 286 0> mark @POS_3_0_MARK_0 <anchor 284 496> mark @POS_3_0_MARK_1;
	pos base uring <anchor 286 0> mark @POS_3_0_MARK_0 <anchor 284 763> mark @POS_3_0_MARK_1;
	pos base utilde <anchor 286 0> mark @POS_3_0_MARK_0 <anchor 284 705> mark @POS_3_0_MARK_1;
	pos base w <anchor 377 0> mark @POS_3_0_MARK_0 <anchor 377 496> mark @POS_3_0_MARK_1;
	pos base wacute <anchor 377 0> mark @POS_3_0_MARK_0 <anchor 377 747> mark @POS_3_0_MARK_1;
	pos base wcircumflex <anchor 377 0> mark @POS_3_0_MARK_0 <anchor 377 733> mark @POS_3_0_MARK_1;
	pos base wdieresis <anchor 377 0> mark @POS_3_0_MARK_0 <anchor 377 720> mark @POS_3_0_MARK_1;
	pos base wgrave <anchor 377 0> mark @POS_3_0_MARK_0 <anchor 377 747> mark @POS_3_0_MARK_1;
	pos base y <anchor 278 0> mark @POS_3_0_MARK_0 <anchor 278 496> mark @POS_3_0_MARK_1;
	pos base yacute <anchor 278 0> mark @POS_3_0_MARK_0 <anchor 278 747> mark @POS_3_0_MARK_1;
	pos base ycircumflex <anchor 278 0> mark @POS_3_0_MARK_0 <anchor 278 733> mark @POS_3_0_MARK_1;
	pos base ydieresis <anchor 278 0> mark @POS_3_0_MARK_0 <anchor 278 720> mark @POS_3_0_MARK_1;
	pos base ygrave <anchor 278 0> mark @POS_3_0_MARK_0 <anchor 278 747> mark @POS_3_0_MARK_1;
	pos base uni1EF9 <anchor 278 0> mark @POS_3_0_MARK_0 <anchor 278 705> mark @POS_3_0_MARK_1;
	pos base z <anchor 226 0> mark @POS_3_0_MARK_0 <anchor 226 496> mark @POS_3_0_MARK_1;
	pos base zacute <anchor 226 0> mark @POS_3_0_MARK_0 <anchor 226 747> mark @POS_3_0_MARK_1;
	pos base zcaron <anchor 226 0> mark @POS_3_0_MARK_0 <anchor 226 733> mark @POS_3_0_MARK_1;
	pos base zdotaccent <anchor 226 0> mark @POS_3_0_MARK_0 <anchor 226 720> mark @POS_3_0_MARK_1;
} POS_3;
lookup POS_4 {
	markClass uni0328 <anchor 190 0> @POS_4_0_MARK_0;
	markClass uni0328.case <anchor 190 0> @POS_4_0_MARK_0;
	pos base A <anchor 634 0> mark @POS_4_0_MARK_0;
	pos base Aacute <anchor 634 0> mark @POS_4_0_MARK_0;
	pos base Abreve <anchor 634 0> mark @POS_4_0_MARK_0;
	pos base uni01CD <anchor 634 0> mark @POS_4_0_MARK_0;
	pos base Acircumflex <anchor 634 0> mark @POS_4_0_MARK_0;
	pos base Adieresis <anchor 634 0> mark @POS_4_0_MARK_0;
	pos base Agrave <anchor 634 0> mark @POS_4_0_MARK_0;
	pos base Amacron <anchor 634 0> mark @POS_4_0_MARK_0;
	pos base Aogonek <anchor 634 0> mark @POS_4_0_MARK_0;
	pos base Aring <anchor 634 0> mark @POS_4_0_MARK_0;
	pos base Atilde <anchor 634 0> mark @POS_4_0_MARK_0;
	pos base E <anchor 507 0> mark @POS_4_0_MARK_0;
	pos base Eacute <anchor 507 0> mark @POS_4_0_MARK_0;
	pos base Ebreve <anchor 507 0> mark @POS_4_0_MARK_0;
	pos base Ecaron <anchor 507 0> mark @POS_4_0_MARK_0;
	pos base Ecircumflex <anchor 507 0> mark @POS_4_0_MARK_0;
	pos base Edieresis <anchor 507 0> mark @POS_4_0_MARK_0;
	pos base Edotaccent <anchor 507 0> mark @POS_4_0_MARK_0;
	pos base Egrave <anchor 507 0> mark @POS_4_0_MARK_0;
	pos base Emacron <anchor 507 0> mark @POS_4_0_MARK_0;
	pos base Eogonek <anchor 507 0> mark @POS_4_0_MARK_0;
	pos base uni1EBC <anchor 507 0> mark @POS_4_0_MARK_0;
	pos base I <anchor 158 0> mark @POS_4_0_MARK_0;
	pos base IJ <anchor 158 0> mark @POS_4_0_MARK_0;
	pos base Iacute <anchor 158 0> mark @POS_4_0_MARK_0;
	pos base Ibreve <anchor 158 0> mark @POS_4_0_MARK_0;
	pos base Icircumflex <anchor 158 0> mark @POS_4_0_MARK_0;
	pos base Idieresis <anchor 158 0> mark @POS_4_0_MARK_0;
	pos base Idotaccent <anchor 158 0> mark @POS_4_0_MARK_0;
	pos base Igrave <anchor 158 0> mark @POS_4_0_MARK_0;
	pos base Imacron <anchor 158 0> mark @POS_4_0_MARK_0;
	pos base Iogonek <anchor 158 0> mark @POS_4_0_MARK_0;
	pos base Itilde <anchor 158 0> mark @POS_4_0_MARK_0;
	pos base O <anchor 464 10> mark @POS_4_0_MARK_0;
	pos base Oacute <anchor 464 10> mark @POS_4_0_MARK_0;
	pos base Obreve <anchor 464 10> mark @POS_4_0_MARK_0;
	pos base Ocircumflex <anchor 464 10> mark @POS_4_0_MARK_0;
	pos base Odieresis <anchor 464 10> mark @POS_4_0_MARK_0;
	pos base Ograve <anchor 464 10> mark @POS_4_0_MARK_0;
	pos base Ohungarumlaut <anchor 464 10> mark @POS_4_0_MARK_0;
	pos base Omacron <anchor 464 10> mark @POS_4_0_MARK_0;
	pos base Otilde <anchor 464 10> mark @POS_4_0_MARK_0;
	pos base U <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Uacute <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Ubreve <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Ucircumflex <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Udieresis <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Ugrave <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Uhungarumlaut <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Umacron <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Uogonek <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Uring <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Utilde <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base a <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base aacute <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base abreve <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base uni01CE <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base acircumflex <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base adieresis <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base agrave <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base amacron <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base aogonek <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base aring <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base atilde <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base e <anchor 397 10> mark @POS_4_0_MARK_0;
	pos base eacute <anchor 397 10> mark @POS_4_0_MARK_0;
	pos base ebreve <anchor 397 10> mark @POS_4_0_MARK_0;
	pos base ecaron <anchor 397 10> mark @POS_4_0_MARK_0;
	pos base ecircumflex <anchor 397 10> mark @POS_4_0_MARK_0;
	pos base edieresis <anchor 397 10> mark @POS_4_0_MARK_0;
	pos base edotaccent <anchor 397 10> mark @POS_4_0_MARK_0;
	pos base egrave <anchor 397 10> mark @POS_4_0_MARK_0;
	pos base emacron <anchor 397 10> mark @POS_4_0_MARK_0;
	pos base eogonek <anchor 397 10> mark @POS_4_0_MARK_0;
	pos base uni1EBD <anchor 397 10> mark @POS_4_0_MARK_0;
	pos base dotlessi <anchor 153 0> mark @POS_4_0_MARK_0;
	pos base iacute <anchor 153 0> mark @POS_4_0_MARK_0;
	pos base ibreve <anchor 153 0> mark @POS_4_0_MARK_0;
	pos base icircumflex <anchor 153 0> mark @POS_4_0_MARK_0;
	pos base idieresis <anchor 153 0> mark @POS_4_0_MARK_0;
	pos base i.loclTRK <anchor 153 0> mark @POS_4_0_MARK_0;
	pos base igrave <anchor 153 0> mark @POS_4_0_MARK_0;
	pos base imacron <anchor 153 0> mark @POS_4_0_MARK_0;
	pos base iogonek <anchor 153 0> mark @POS_4_0_MARK_0;
	pos base itilde <anchor 153 0> mark @POS_4_0_MARK_0;
	pos base o <anchor 408 10> mark @POS_4_0_MARK_0;
	pos base oacute <anchor 408 10> mark @POS_4_0_MARK_0;
	pos base obreve <anchor 408 10> mark @POS_4_0_MARK_0;
	pos base ocircumflex <anchor 408 10> mark @POS_4_0_MARK_0;
	pos base odieresis <anchor 408 10> mark @POS_4_0_MARK_0;
	pos base ograve <anchor 408 10> mark @POS_4_0_MARK_0;
	pos base ohungarumlaut <anchor 408 10> mark @POS_4_0_MARK_0;
	pos base omacron <anchor 408 10> mark @POS_4_0_MARK_0;
	pos base otilde <anchor 408 10> mark @POS_4_0_MARK_0;
	pos base u <anchor 503 0> mark @POS_4_0_MARK_0;
	pos base uacute <anchor 503 0> mark @POS_4_0_MARK_0;
	pos base ubreve <anchor 503 0> mark @POS_4_0_MARK_0;
	pos base ucircumflex <anchor 503 0> mark @POS_4_0_MARK_0;
	pos base udieresis <anchor 503 0> mark @POS_4_0_MARK_0;
	pos base ugrave <anchor 503 0> mark @POS_4_0_MARK_0;
	pos base uhungarumlaut <anchor 503 0> mark @POS_4_0_MARK_0;
	pos base umacron <anchor 503 0> mark @POS_4_0_MARK_0;
	pos base uogonek <anchor 503 0> mark @POS_4_0_MARK_0;
	pos base uring <anchor 503 0> mark @POS_4_0_MARK_0;
	pos base utilde <anchor 503 0> mark @POS_4_0_MARK_0;
} POS_4;
lookup POS_5 {
	markClass uni030C.alt <anchor 0 992> @POS_5_0_MARK_0;
	markClass uni030C.alt.case <anchor 4 700> @POS_5_0_MARK_0;
	pos base L <anchor 261 700> mark @POS_5_0_MARK_0;
	pos base Lacute <anchor 261 700> mark @POS_5_0_MARK_0;
	pos base Lcaron <anchor 261 700> mark @POS_5_0_MARK_0;
	pos base uni013B <anchor 261 700> mark @POS_5_0_MARK_0;
	pos base O <anchor 764 700> mark @POS_5_0_MARK_0;
	pos base Oacute <anchor 764 700> mark @POS_5_0_MARK_0;
	pos base Obreve <anchor 764 700> mark @POS_5_0_MARK_0;
	pos base Ocircumflex <anchor 764 700> mark @POS_5_0_MARK_0;
	pos base Odieresis <anchor 764 700> mark @POS_5_0_MARK_0;
	pos base Ograve <anchor 764 700> mark @POS_5_0_MARK_0;
	pos base Ohungarumlaut <anchor 764 700> mark @POS_5_0_MARK_0;
	pos base Omacron <anchor 764 700> mark @POS_5_0_MARK_0;
	pos base Otilde <anchor 764 700> mark @POS_5_0_MARK_0;
	pos base U <anchor 636 700> mark @POS_5_0_MARK_0;
	pos base Uacute <anchor 636 700> mark @POS_5_0_MARK_0;
	pos base Ubreve <anchor 636 700> mark @POS_5_0_MARK_0;
	pos base Ucircumflex <anchor 636 700> mark @POS_5_0_MARK_0;
	pos base Udieresis <anchor 636 700> mark @POS_5_0_MARK_0;
	pos base Ugrave <anchor 636 700> mark @POS_5_0_MARK_0;
	pos base Uhungarumlaut <anchor 636 700> mark @POS_5_0_MARK_0;
	pos base Umacron <anchor 636 700> mark @POS_5_0_MARK_0;
	pos base Uogonek <anchor 636 700> mark @POS_5_0_MARK_0;
	pos base Uring <anchor 636 700> mark @POS_5_0_MARK_0;
	pos base Utilde <anchor 636 700> mark @POS_5_0_MARK_0;
	pos base d <anchor 608 992> mark @POS_5_0_MARK_0;
	pos base dcaron <anchor 608 992> mark @POS_5_0_MARK_0;
	pos base l <anchor 202 992> mark @POS_5_0_MARK_0;
	pos base lacute <anchor 202 992> mark @POS_5_0_MARK_0;
	pos base lcaron <anchor 202 992> mark @POS_5_0_MARK_0;
	pos base uni013C <anchor 202 992> mark @POS_5_0_MARK_0;
	pos base o <anchor 584 496> mark @POS_5_0_MARK_0;
	pos base oacute <anchor 584 496> mark @POS_5_0_MARK_0;
	pos base obreve <anchor 584 496> mark @POS_5_0_MARK_0;
	pos base ocircumflex <anchor 584 496> mark @POS_5_0_MARK_0;
	pos base odieresis <anchor 584 496> mark @POS_5_0_MARK_0;
	pos base ograve <anchor 584 496> mark @POS_5_0_MARK_0;
	pos base ohungarumlaut <anchor 584 496> mark @POS_5_0_MARK_0;
	pos base omacron <anchor 584 496> mark @POS_5_0_MARK_0;
	pos base otilde <anchor 584 496> mark @POS_5_0_MARK_0;
	pos base t <anchor 253 992> mark @POS_5_0_MARK_0;
	pos base tcaron <anchor 253 992> mark @POS_5_0_MARK_0;
	pos base uni0163 <anchor 253 992> mark @POS_5_0_MARK_0;
	pos base uni021B <anchor 253 992> mark @POS_5_0_MARK_0;
	pos base u <anchor 552 496> mark @POS_5_0_MARK_0;
	pos base uacute <anchor 552 496> mark @POS_5_0_MARK_0;
	pos base ubreve <anchor 552 496> mark @POS_5_0_MARK_0;
	pos base ucircumflex <anchor 552 496> mark @POS_5_0_MARK_0;
	pos base udieresis <anchor 552 496> mark @POS_5_0_MARK_0;
	pos base ugrave <anchor 552 496> mark @POS_5_0_MARK_0;
	pos base uhungarumlaut <anchor 552 496> mark @POS_5_0_MARK_0;
	pos base umacron <anchor 552 496> mark @POS_5_0_MARK_0;
	pos base uogonek <anchor 552 496> mark @POS_5_0_MARK_0;
	pos base uring <anchor 552 496> mark @POS_5_0_MARK_0;
	pos base utilde <anchor 552 496> mark @POS_5_0_MARK_0;
} POS_5;
script latn;
language dflt;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language AZE;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language CAT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language CRT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language KAZ;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language MOL;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language NLD;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language ROM;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language TAT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language TRK;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
";
tag = mark;
},
{
code = "script DFLT;
language dflt;
lookup POS_6 {
	lookupflag UseMarkFilteringSet [uni0326 uni0327 uni0327.case];
	markClass uni0326 <anchor 49 0> @POS_6_0_MARK_0;
	markClass uni0327 <anchor 74 0> @POS_6_0_MARK_0;
	markClass uni0327.case <anchor 72 0> @POS_6_0_MARK_0;
	pos mark uni0326 <anchor 49 -238> mark @POS_6_0_MARK_0;
	pos mark uni0327 <anchor 74 -259> mark @POS_6_0_MARK_0;
	pos mark uni0327.case <anchor 72 -259> mark @POS_6_0_MARK_0;
} POS_6;
lookup POS_7 {
	lookupflag UseMarkFilteringSet [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312 uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0308.narrow];
	markClass uni0308 <anchor 147 496> @POS_7_0_MARK_0;
	markClass uni0307 <anchor 58 496> @POS_7_0_MARK_0;
	markClass gravecomb <anchor 105 496> @POS_7_0_MARK_0;
	markClass acutecomb <anchor 105 496> @POS_7_0_MARK_0;
	markClass uni030B <anchor 116 496> @POS_7_0_MARK_0;
	markClass uni0302 <anchor 137 496> @POS_7_0_MARK_0;
	markClass uni030C <anchor 137 496> @POS_7_0_MARK_0;
	markClass uni0306 <anchor 141 496> @POS_7_0_MARK_0;
	markClass uni030A <anchor 105 496> @POS_7_0_MARK_0;
	markClass tildecomb <anchor 151 496> @POS_7_0_MARK_0;
	markClass uni0304 <anchor 174 496> @POS_7_0_MARK_0;
	markClass uni0312 <anchor 51 496> @POS_7_0_MARK_0;
	markClass uni0308.case <anchor 147 700> @POS_7_0_MARK_0;
	markClass uni0307.case <anchor 58 700> @POS_7_0_MARK_0;
	markClass gravecomb.case <anchor 105 700> @POS_7_0_MARK_0;
	markClass acutecomb.case <anchor 105 700> @POS_7_0_MARK_0;
	markClass uni030B.case <anchor 146 700> @POS_7_0_MARK_0;
	markClass uni0302.case <anchor 137 700> @POS_7_0_MARK_0;
	markClass uni030C.case <anchor 137 700> @POS_7_0_MARK_0;
	markClass uni0306.case <anchor 141 700> @POS_7_0_MARK_0;
	markClass uni030A.case <anchor 105 700> @POS_7_0_MARK_0;
	markClass tildecomb.case <anchor 151 700> @POS_7_0_MARK_0;
	markClass uni0304.case <anchor 174 700> @POS_7_0_MARK_0;
	markClass uni0308.narrow <anchor 147 496> @POS_7_0_MARK_0;
	pos mark uni0308 <anchor 147 720> mark @POS_7_0_MARK_0;
	pos mark uni0307 <anchor 58 720> mark @POS_7_0_MARK_0;
	pos mark gravecomb <anchor 105 747> mark @POS_7_0_MARK_0;
	pos mark acutecomb <anchor 105 747> mark @POS_7_0_MARK_0;
	pos mark uni030B <anchor 116 698> mark @POS_7_0_MARK_0;
	pos mark uni0302 <anchor 137 733> mark @POS_7_0_MARK_0;
	pos mark uni030C <anchor 137 733> mark @POS_7_0_MARK_0;
	pos mark uni0306 <anchor 141 732> mark @POS_7_0_MARK_0;
	pos mark uni030A <anchor 105 763> mark @POS_7_0_MARK_0;
	pos mark tildecomb <anchor 151 705> mark @POS_7_0_MARK_0;
	pos mark uni0304 <anchor 174 695> mark @POS_7_0_MARK_0;
	pos mark uni0312 <anchor 51 783> mark @POS_7_0_MARK_0;
	pos mark uni0308.case <anchor 147 889> mark @POS_7_0_MARK_0;
	pos mark uni0307.case <anchor 58 889> mark @POS_7_0_MARK_0;
	pos mark gravecomb.case <anchor 105 931> mark @POS_7_0_MARK_0;
	pos mark acutecomb.case <anchor 105 931> mark @POS_7_0_MARK_0;
	pos mark uni030B.case <anchor 146 902> mark @POS_7_0_MARK_0;
	pos mark uni0302.case <anchor 137 902> mark @POS_7_0_MARK_0;
	pos mark uni030C.case <anchor 137 901> mark @POS_7_0_MARK_0;
	pos mark uni0306.case <anchor 141 901> mark @POS_7_0_MARK_0;
	pos mark uni030A.case <anchor 105 967> mark @POS_7_0_MARK_0;
	pos mark tildecomb.case <anchor 151 859> mark @POS_7_0_MARK_0;
	pos mark uni0304.case <anchor 174 859> mark @POS_7_0_MARK_0;
	pos mark uni0308.narrow <anchor 147 720> mark @POS_7_0_MARK_0;
} POS_7;
script latn;
language dflt;
lookup POS_6;
lookup POS_7;
language AZE;
lookup POS_6;
lookup POS_7;
language CAT;
lookup POS_6;
lookup POS_7;
language CRT;
lookup POS_6;
lookup POS_7;
language KAZ;
lookup POS_6;
lookup POS_7;
language MOL;
lookup POS_6;
lookup POS_7;
language NLD;
lookup POS_6;
lookup POS_7;
language ROM;
lookup POS_6;
lookup POS_7;
language TAT;
lookup POS_6;
lookup POS_7;
language TRK;
lookup POS_6;
lookup POS_7;
";
tag = mkmk;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 992;
},
{
name = typoDescender;
value = -310;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 992;
},
{
name = winDescent;
value = 310;
},
{
name = hheaAscender;
value = 992;
},
{
name = hheaDescender;
value = -310;
},
{
name = strikeoutPosition;
value = 297;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
200
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 1
INSTCTRL[ ]	/* SetInstrExecControl */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
WCVTF[ ]	/* WriteCVTInFUnits */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 6 values pushed */
0 0 42 0 4 0
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
NPUSHB[ ]	/* 10 values pushed */
55 4 47 4 31 8 21 5 4 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
NPUSHB[ ]	/* 10 values pushed */
59 2 51 2 39 6 26 3 4 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 11
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 6 values pushed */
3584 3072 2048 1408 4 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 15
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 6 values pushed */
64 64 64 64 4 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
36 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
40 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 1 value pushed */
2048
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
39 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 3 values pushed */
2176 1 1088
GETINFO[ ]	/* GetInfo */
MUL[ ]	/* Multiply */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
57 2 49 2 33 6 23 3 4 14
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 1 value pushed */
511
SCANCTRL[ ]	/* ScanConversionControl */
PUSHB[ ]	/* 1 value pushed */
4
SCANTYPE[ ]	/* ScanType */
PUSHB[ ]	/* 2 values pushed */
2 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
5 100 6 0
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */
0
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
RCVT[ ]	/* ReadCVT */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
14
LTEQ[ ]	/* LessThenOrEqual */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
6
GTEQ[ ]	/* GreaterThanOrEqual */
AND[ ]	/* LogicalAnd */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
52
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
40
EIF[ ]	/* EndIf */
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
2
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 4 values pushed */
3 20 21 0
WS[ ]	/* WriteStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
19
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
2 20
RS[ ]	/* ReadStore */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
37 3
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
EQ[ ]	/* Equal */
JROT[ ]	/* JumpRelativeOnTrue */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
4
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 3 values pushed */
2 2 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
33
NEG[ ]	/* Negate */
JMPR[ ]	/* Jump */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 3 values pushed */
14 21 1
WS[ ]	/* WriteStore */
JMPR[ ]	/* Jump */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
19 1 19
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 3 values pushed */
22 1 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
4
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
21
RS[ ]	/* ReadStore */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
AND[ ]	/* LogicalAnd */
PUSHB[ ]	/* 3 values pushed */
40 1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
EIF[ ]	/* EndIf */
GT[ ]	/* GreaterThan */
OR[ ]	/* LogicalOr */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
ROLL[ ]	/* RollTopThreeStack */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
80
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
56
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
56
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
48
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
54
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
54
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
30
MPPEM[ ]	/* MeasurePixelPerEm */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 1 value pushed */
4096
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1280
DIV[ ]	/* Divide */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ABS[ ]	/* Absolute */
SUB[ ]	/* Subtract */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
7
RS[ ]	/* ReadStore */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
7
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
6
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 2 values pushed */
7 98
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
5
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
48 5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
ADD[ ]	/* Add */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
SUB[ ]	/* Subtract */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
EIF[ ]	/* EndIf */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 3 values pushed */
0 2 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
7
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
9 14 0
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
11
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
12
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
13
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
36
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
14
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 4 values pushed */
13 12 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
15
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 2
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
100
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
16
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
17
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHW[ ]	/* 1 value pushed */
1024
MUL[ ]	/* Multiply */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
18
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
13
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
19
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
MPPEM[ ]	/* MeasurePixelPerEm */
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
19
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 18
RS[ ]	/* ReadStore */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
18 18
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
17
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
15 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
16 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
0 0
SZP0[ ]	/* SetZonePointer0 */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
0
MIAP[0]	/* MoveIndirectAbsPt */
PUSHB[ ]	/* 3 values pushed */
1 1 1
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 8 values pushed */
24 24 1 0 17 0 19 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
20
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
27
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
28
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
29
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
30
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
31
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
43
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
6
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP1[ ]	/* DeltaExceptionP1 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
44
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
22
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP2[ ]	/* DeltaExceptionP2 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
38
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP3[ ]	/* DeltaExceptionP3 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 6 values pushed */
24 24 1 0 17 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
33
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
34
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
35
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
36
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
37
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
38
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
39
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
40
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
41
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
42
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
46
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
24
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
46
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
48
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
47
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
49
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
50
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
51
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
52
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
SHC[1]	/* ShiftContourByLastPt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
53
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 5 values pushed */
0 0 0 0 0
WCVTP[ ]	/* WriteCVTInPixels */
MIAP[0]	/* MoveIndirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
52 1
SZP2[ ]	/* SetZonePointer2 */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
54
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55
FDEF[ ]	/* FunctionDefinition */
MDAP[0]	/* MoveDirectAbsPt */
SLOOP[ ]	/* SetLoopVariable */
ALIGNRP[ ]	/* AlignRelativePt */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 0
SZPS[ ]	/* SetZonePointerS */
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
56 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
NEG[ ]	/* Negate */
ROLL[ ]	/* RollTopThreeStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
60
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
61
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
62
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
0
EQ[ ]	/* Equal */
IF[ ]	/* If */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
63
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
64
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
65
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
66
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
67
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
68
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
69
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
70
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
10 4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
71
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
72
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
73
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
74
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
75
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 1
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
PUSHB[ ]	/* 1 value pushed */
55
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
76
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
77
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
RCVT[ ]	/* ReadCVT */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
78
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
77
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
79
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
80
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
81
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
82
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
83
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
84
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
85
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
86
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
87
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
88
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
89
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
90
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
91
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
92
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
93
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
94
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
95
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
96
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
97
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
98
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
99
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
100
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
101
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
102
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
103
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
104
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
105
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
106
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
107
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
108
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
109
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
110
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
111
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
112
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
113
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
114
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
115
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
116
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
117
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
118
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
119
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
120
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
121
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
122
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
123
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
124
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
125
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
126
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
127
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
128
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
129
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
130
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
131
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
132
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
133
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
134
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
135
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
136
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
137
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
138
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
139
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
11 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
6
ELSE[ ]	/* Else */
PUSHB[ ]	/* 3 values pushed */
4 2 3
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
8
NEG[ ]	/* Negate */
PUSHB[ ]	/* 1 value pushed */
3
DEPTH[ ]	/* GetDepthStack */
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    24,
    24,
    24,
    24,
    712,
    0,
    \"-220\",
    712,
    0,
    \"-220\",
    85,
    85,
    73,
    73,
    700,
    0,
    700,
    496,
    0,
    \"-220\",
    712,
    \"-12\",
    720,
    508,
    \"-12\",
    \"-220\",
    65,
    65,
    57,
    57,
    353,
    0,
    358,
    \"-5\",
    65,
    65,
    57,
    57,
    700,
    347,
    705,
    342
)";
}
);
id = m01;
metricValues = (
{
pos = 992;
},
{
pos = 700;
},
{
pos = 496;
},
{
},
{
pos = -310;
},
{
}
);
name = Regular;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(465,0,l),
(465,700,l),
(64,700,l),
(64,0,l)
);
},
{
closed = 1;
nodes = (
(134,643,l),
(395,643,l),
(395,57,l),
(134,57,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 0 0 2 3 0 2 103 4 1 3 1 1 3 87 4 1 3 3 1 95 0 1 3 1 79 4 4 4 7 4 7 18 17 16 5 6 25
CALL[ ]	/* CallFunction */";
};
width = 529;
}
);
note = .notdef;
},
{
glyphname = CR;
layers = (
{
layerId = m01;
width = 600;
}
);
note = CR;
unicode = 13;
},
{
glyphname = space;
kernLeft = space;
kernRight = space;
layers = (
{
layerId = m01;
width = 265;
}
);
note = space;
unicode = 32;
},
{
glyphname = A;
kernLeft = A;
kernRight = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(118,0,l),
(183,180,l),
(481,180,l),
(545,0,l),
(634,0,l),
(377,700,l),
(288,700,l),
(30,0,l)
);
},
{
closed = 1;
nodes = (
(332,594,l),
(456,248,l),
(208,248,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
9 1 4 0 1 76 5 1 4 0 2 1 4 2 104 0 0 0 33 77 3 1 1 1 34 1 78 8 8 8 10 8 10 17 17 17 16 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = A;
unicode = 65;
},
{
glyphname = Aacute;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (227,0);
ref = acutecomb.case;
}
);
width = 664;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Abreve;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (191,0);
ref = uni0306.case;
}
);
width = 664;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = uni01CD;
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (195,0);
ref = uni030C.case;
}
);
width = 664;
}
);
note = uni01CD;
unicode = 461;
},
{
glyphname = Acircumflex;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,902);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (195,0);
ref = uni0302.case;
}
);
width = 664;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Adieresis;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (185,0);
ref = uni0308.case;
}
);
width = 664;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Agrave;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (227,0);
ref = gravecomb.case;
}
);
width = 664;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Amacron;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,859);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (158,0);
ref = uni0304.case;
}
);
width = 664;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = Aogonek;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(118,0,l),
(183,180,l),
(481,180,l),
(541,11,l),
(489,-15,o),
(444,-74,o),
(444,-108,qs),
(444,-155,o),
(512,-203,o),
(562,-203,qs),
(601,-203,o),
(637,-190,q),
(637,-134,l),
(603,-149,o),
(572,-149,qs),
(545,-149,o),
(512,-123,o),
(512,-100,qs),
(512,-59,o),
(576,-28,qs),
(634,0,l),
(377,700,l),
(288,700,l),
(30,0,l)
);
},
{
closed = 1;
nodes = (
(332,594,l),
(456,248,l),
(208,248,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
25 1 5 0 19 1 4 3 10 1 1 4 11 1 2 1 4 76 2 1 4 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 5 0 3 4 5 3 104 0 0 0 33 77 0 4 4 34 77 0 1 1 2 97 0 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
6 1 5 0 3 4 5 3 104 0 1 0 2 1 2 101 0 0 0 33 77 0 4 4 34 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
24 24 24 26 24 26 17 22 35 38 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = Aring;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,967);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (227,0);
ref = uni030A.case;
}
);
width = 664;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = Atilde;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,859);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (181,0);
ref = tildecomb.case;
}
);
width = 664;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = AE;
kernLeft = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (456,0);
},
{
name = top;
pos = (526,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(122,0,l),
(212,159,l),
(481,159,l),
(481,0,l),
(854,0,l),
(854,67,l),
(565,67,l),
(565,338,l),
(808,338,l),
(808,406,l),
(565,406,l),
(565,633,l),
(854,633,l),
(854,700,l),
(429,700,l),
(30,0,l)
);
},
{
closed = 1;
nodes = (
(481,631,l),
(481,226,l),
(250,226,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
17 1 2 1 1 76 0 2 0 3 8 2 3 103 9 1 8 0 6 4 8 6 103 0 1 1 0 95 0 0 0 33 77 0 4 4 5 95 7 1 5 5 34 5 78 16 16 16 18 16 18 17 17 17 17 17 17 17 16 10 8 30
CALL[ ]	/* CallFunction */";
};
width = 911;
}
);
note = AE;
unicode = 198;
},
{
glyphname = AEacute;
kernLeft = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (456,0);
},
{
name = top;
pos = (526,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = AE;
},
{
alignment = -1;
pos = (421,0);
ref = acutecomb.case;
}
);
width = 911;
}
);
note = AEacute;
unicode = 508;
},
{
glyphname = B;
kernRight = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(338,0,ls),
(448,0,o),
(561,108,o),
(561,199,qs),
(561,263,o),
(489,355,o),
(421,377,q),
(468,391,o),
(529,473,o),
(529,529,qs),
(529,579,o),
(477,657,o),
(380,700,o),
(315,700,qs),
(74,700,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(158,70,l),
(158,339,l),
(310,339,ls),
(386,339,o),
(476,272,o),
(476,204,qs),
(476,136,o),
(391,70,o),
(312,70,qs)
);
},
{
closed = 1;
nodes = (
(158,406,l),
(158,630,l),
(306,630,ls),
(373,630,o),
(444,571,o),
(444,518,qs),
(444,466,o),
(373,406,o),
(309,406,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
8 1 2 5 1 76 7 1 5 0 2 3 5 2 103 0 4 4 0 95 0 0 0 33 77 6 1 3 3 1 95 0 1 1 34 1 78 25 25 16 16 25 33 25 32 31 29 16 24 16 23 37 43 32 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = B;
unicode = 66;
},
{
glyphname = C;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (381,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,-12,o),
(652,101,o),
(673,203,q),
(580,203,l),
(564,137,o),
(463,62,o),
(381,62,qs),
(302,62,o),
(190,136,o),
(133,266,o),
(133,350,qs),
(133,433,o),
(189,563,o),
(301,638,o),
(381,638,qs),
(463,638,o),
(564,561,o),
(580,494,q),
(673,494,l),
(652,597,o),
(500,712,o),
(381,712,qs),
(276,712,o),
(125,617,o),
(47,453,o),
(47,350,qs),
(47,246,o),
(126,82,o),
(277,-12,o),
(381,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 39 77 0 3 3 5 97 6 1 5 5 40 5 78 0 0 0 29 0 28 18 38 34 18 38 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = C;
unicode = 67;
},
{
glyphname = Cacute;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (381,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (276,0);
ref = acutecomb.case;
}
);
width = 720;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = Ccaron;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (381,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (244,0);
ref = uni030C.case;
}
);
width = 720;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = Ccedilla;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (381,-259);
},
{
name = top;
pos = (381,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(416,-259,ls),
(470,-259,o),
(537,-205,o),
(537,-159,qs),
(537,-112,o),
(467,-62,o),
(408,-63,q),
(408,-11,l),
(516,-5,o),
(653,107,o),
(673,203,q),
(580,203,l),
(564,137,o),
(463,62,o),
(381,62,qs),
(302,62,o),
(190,136,o),
(133,266,o),
(133,350,qs),
(133,433,o),
(189,563,o),
(301,638,o),
(381,638,qs),
(463,638,o),
(564,561,o),
(580,494,q),
(673,494,l),
(652,597,o),
(500,712,o),
(381,712,qs),
(276,712,o),
(125,617,o),
(47,453,o),
(47,350,qs),
(47,251,o),
(119,92,o),
(257,-4,o),
(352,-11,q),
(352,-113,l),
(401,-113,ls),
(469,-113,o),
(469,-158,qs),
(469,-206,o),
(401,-206,qs),
(309,-206,l),
(309,-259,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
7 1 8 7 1 76 0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 99 0 4 4 2 97 0 2 2 39 77 0 5 5 7 97 0 7 7 40 7 78 45 43 17 18 18 38 34 18 40 34 32 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = Cdotaccent;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (381,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (323,0);
ref = uni0307.case;
}
);
width = 720;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = D;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (342,0);
},
{
name = top;
pos = (342,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(289,0,ls),
(470,0,o),
(649,182,o),
(649,348,qs),
(649,517,o),
(470,700,o),
(289,700,qs),
(74,700,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(158,70,l),
(158,630,l),
(287,630,ls),
(429,630,o),
(562,492,o),
(562,348,qs),
(562,210,o),
(432,70,o),
(287,70,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 2 2 0 95 0 0 0 33 77 4 1 3 3 1 95 0 1 1 34 1 78 9 9 9 17 9 16 37 36 32 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 696;
}
);
note = D;
unicode = 68;
},
{
glyphname = Dcaron;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (342,0);
},
{
name = top;
pos = (342,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = D;
},
{
alignment = -1;
pos = (205,0);
ref = uni030C.case;
}
);
width = 696;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = Dcroat;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(310,0,ls),
(491,0,o),
(670,182,o),
(670,348,qs),
(670,517,o),
(491,700,o),
(310,700,qs),
(95,700,l),
(95,387,l),
(8,387,l),
(8,311,l),
(95,311,l),
(95,0,l)
);
},
{
closed = 1;
nodes = (
(179,70,l),
(179,311,l),
(381,311,l),
(381,387,l),
(179,387,l),
(179,630,l),
(309,630,ls),
(451,630,o),
(584,491,o),
(584,348,qs),
(584,215,o),
(459,70,o),
(309,70,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
5 1 1 6 1 0 7 1 0 103 0 4 4 2 95 0 2 2 33 77 8 1 7 7 3 95 0 3 3 34 3 78 13 13 13 25 13 24 17 17 37 36 33 17 16 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 717;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = Eth;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(310,0,ls),
(491,0,o),
(670,182,o),
(670,348,qs),
(670,517,o),
(491,700,o),
(310,700,qs),
(95,700,l),
(95,387,l),
(8,387,l),
(8,311,l),
(95,311,l),
(95,0,l)
);
},
{
closed = 1;
nodes = (
(179,70,l),
(179,311,l),
(381,311,l),
(381,387,l),
(179,387,l),
(179,630,l),
(309,630,ls),
(451,630,o),
(584,491,o),
(584,348,qs),
(584,215,o),
(459,70,o),
(309,70,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
5 1 1 6 1 0 7 1 0 103 0 4 4 2 95 0 2 2 33 77 8 1 7 7 3 95 0 3 3 34 3 78 13 13 13 25 13 24 17 17 37 36 33 17 16 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 717;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = E;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(507,0,l),
(507,69,l),
(158,69,l),
(158,336,l),
(463,336,l),
(463,404,l),
(158,404,l),
(158,631,l),
(507,631,l),
(507,700,l),
(74,700,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 5 95 0 5 5 34 5 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 564;
}
);
note = E;
unicode = 69;
},
{
glyphname = Eacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (177,0);
ref = acutecomb.case;
}
);
width = 564;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ebreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (141,0);
ref = uni0306.case;
}
);
width = 564;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = Ecaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (145,0);
ref = uni030C.case;
}
);
width = 564;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = Ecircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,902);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (145,0);
ref = uni0302.case;
}
);
width = 564;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (135,0);
ref = uni0308.case;
}
);
width = 564;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Edotaccent;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (224,0);
ref = uni0307.case;
}
);
width = 564;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = Egrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (177,0);
ref = gravecomb.case;
}
);
width = 564;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Emacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,859);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (108,0);
ref = uni0304.case;
}
);
width = 564;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = Eogonek;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(393,0,l),
(317,-45,o),
(317,-108,qs),
(317,-155,o),
(385,-203,o),
(435,-203,qs),
(474,-203,o),
(510,-190,q),
(510,-134,l),
(476,-149,o),
(445,-149,qs),
(418,-149,o),
(385,-123,o),
(385,-100,qs),
(385,-59,o),
(449,-28,qs),
(507,0,l),
(507,69,l),
(158,69,l),
(158,336,l),
(463,336,l),
(463,404,l),
(158,404,l),
(158,631,l),
(507,631,l),
(507,700,l),
(74,700,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
18 1 5 7 19 1 6 5 2 76 10 1 7 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 7 95 0 7 7 34 77 0 5 5 6 97 0 6 6 38 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 2 0 3 4 2 3 103 0 5 0 6 5 6 101 0 1 1 0 95 0 0 0 33 77 0 4 4 7 95 0 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
20 35 38 17 17 17 17 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 564;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = uni018E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(507,0,l),
(507,700,l),
(74,700,l),
(74,631,l),
(423,631,l),
(423,404,l),
(118,404,l),
(118,336,l),
(423,336,l),
(423,69,l),
(74,69,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 1 0 2 1 103 0 3 3 4 95 0 4 4 33 77 0 0 0 5 95 0 5 5 34 5 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni018E;
unicode = (398,477);
},
{
glyphname = uni1EBC;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,859);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (131,0);
ref = tildecomb.case;
}
);
width = 564;
}
);
note = uni1EBC;
unicode = 7868;
},
{
glyphname = uni018F;
kernLeft = uni018F;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(473,-12,o),
(549,33,qs),
(625,79,o),
(708,240,o),
(708,346,qs),
(708,456,o),
(666,538,qs),
(624,621,o),
(473,712,o),
(375,712,qs),
(296,712,o),
(230,683,qs),
(164,654,o),
(73,549,o),
(52,479,q),
(147,479,l),
(170,553,o),
(293,636,o),
(375,636,qs),
(444,636,o),
(497,605,qs),
(552,573,o),
(615,455,o),
(618,375,q),
(50,375,l),
(47,344,o),
(47,316,qs),
(47,213,o),
(89,139,qs),
(130,66,o),
(277,-12,o),
(372,-12,qs)
);
},
{
closed = 1;
nodes = (
(300,64,o),
(246,94,qs),
(192,123,o),
(134,231,o),
(135,303,q),
(618,303,l),
(613,226,o),
(581,174,qs),
(548,121,o),
(439,64,o),
(372,64,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 2 1 0 1 2 0 128 0 0 0 5 6 0 5 103 0 1 1 3 97 0 3 3 39 77 8 1 6 6 4 97 7 1 4 4 40 4 78 32 32 0 0 32 42 32 41 37 36 0 31 0 30 36 18 36 22 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = uni018F;
unicode = 399;
},
{
glyphname = F;
kernRight = F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,327,l),
(449,327,l),
(449,395,l),
(158,395,l),
(158,631,l),
(500,631,l),
(500,700,l),
(74,700,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 34 4 78 17 17 17 17 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 534;
}
);
note = F;
unicode = 70;
},
{
glyphname = G;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (379,0);
},
{
name = top;
pos = (379,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(462,-12,o),
(574,51,o),
(614,115,q),
(621,0,l),
(698,0,l),
(698,374,l),
(360,374,l),
(360,308,l),
(612,308,l),
(604,191,o),
(487,63,o),
(378,63,qs),
(302,63,o),
(191,136,o),
(133,266,o),
(133,349,qs),
(133,431,o),
(191,560,o),
(306,635,o),
(387,635,qs),
(468,635,o),
(574,562,o),
(588,498,q),
(685,498,l),
(662,598,o),
(504,712,o),
(387,712,qs),
(282,712,o),
(128,618,o),
(47,453,o),
(47,349,qs),
(47,244,o),
(128,80,o),
(277,-12,o),
(375,-12,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
31 1 3 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 1 2 5 2 1 5 128 0 5 0 4 3 5 4 103 0 2 2 0 97 0 0 0 39 77 0 3 3 6 97 8 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 1 2 5 2 1 5 128 0 5 0 4 3 5 4 103 0 2 2 0 97 0 0 0 39 77 0 6 6 34 77 0 3 3 7 97 8 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 34 0 33 17 17 18 38 34 18 38 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 757;
}
);
note = G;
unicode = 71;
},
{
glyphname = Gbreve;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (379,0);
},
{
name = top;
pos = (379,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (238,0);
ref = uni0306.case;
}
);
width = 757;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = uni0122;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (379,-238);
},
{
name = top;
pos = (379,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (330,0);
ref = uni0326;
}
);
width = 757;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = Gdotaccent;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (379,0);
},
{
name = top;
pos = (379,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (321,0);
ref = uni0307.case;
}
);
width = 757;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = H;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,336,l),
(521,336,l),
(521,0,l),
(605,0,l),
(605,700,l),
(521,700,l),
(521,405,l),
(158,405,l),
(158,700,l),
(74,700,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 1 0 4 3 1 4 103 2 1 0 0 33 77 5 1 3 3 34 3 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 679;
}
);
note = H;
unicode = 72;
},
{
glyphname = Hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,336,l),
(521,336,l),
(521,0,l),
(605,0,l),
(605,513,l),
(655,513,l),
(655,582,l),
(605,582,l),
(605,700,l),
(521,700,l),
(521,582,l),
(158,582,l),
(158,700,l),
(74,700,l),
(74,582,l),
(24,582,l),
(24,513,l),
(74,513,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(158,513,l),
(521,513,l),
(521,405,l),
(158,405,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
5 3 2 1 10 6 2 0 11 1 0 103 12 1 11 0 8 7 11 8 103 4 1 2 2 33 77 9 1 7 7 34 7 78 20 20 20 23 20 23 22 21 19 18 17 17 17 17 17 17 17 17 16 13 8 31
CALL[ ]	/* CallFunction */";
};
width = 679;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = I;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,700,l),
(74,700,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 232;
}
);
note = I;
unicode = 73;
},
{
glyphname = IJ;
layers = (
{
anchors = (
{
name = bottom;
pos = (482,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (616,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (232,0);
ref = J;
}
);
width = 731;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = Iacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (11,0);
ref = acutecomb.case;
}
);
width = 232;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-25,0);
ref = uni0306.case;
}
);
width = 232;
}
);
note = Ibreve;
unicode = 300;
},
{
glyphname = Icircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,902);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-21,0);
ref = uni0302.case;
}
);
width = 232;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-31,0);
ref = uni0308.case;
}
);
width = 232;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Idotaccent;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (58,0);
ref = uni0307.case;
}
);
width = 232;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = Igrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (11,0);
ref = gravecomb.case;
}
);
width = 232;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Imacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,859);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-58,0);
ref = uni0304.case;
}
);
width = 232;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = Iogonek;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(125,-203,o),
(161,-190,q),
(161,-134,l),
(127,-149,o),
(96,-149,qs),
(69,-149,o),
(36,-123,o),
(36,-100,qs),
(36,-59,o),
(100,-28,qs),
(158,0,l),
(158,700,l),
(74,700,l),
(74,15,l),
(-32,-33,o),
(-32,-108,qs),
(-32,-155,o),
(36,-203,o),
(86,-203,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
15 7 4 3 1 0 16 1 2 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 33 77 0 1 1 2 97 3 1 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 1 3 1 2 1 2 101 0 0 0 33 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 18 0 17 38 21 4 8 24
CALL[ ]	/* CallFunction */";
};
width = 232;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = Itilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,859);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-35,0);
ref = tildecomb.case;
}
);
width = 232;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = J;
kernLeft = J;
kernRight = J;
layers = (
{
anchors = (
{
name = bottom;
pos = (250,0);
},
{
name = top;
pos = (384,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(322,-12,o),
(425,92,o),
(425,185,qs),
(425,700,l),
(341,700,l),
(341,185,ls),
(341,63,o),
(229,63,qs),
(167,63,o),
(112,130,o),
(112,188,q),
(27,188,l),
(27,94,o),
(135,-12,o),
(230,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 0 2 1 2 0 1 128 0 2 2 33 77 0 1 1 3 97 4 1 3 3 40 3 78 0 0 0 14 0 13 18 34 18 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 499;
}
);
note = J;
unicode = 74;
},
{
glyphname = uni004A0301;
layers = (
{
anchors = (
{
name = bottom;
pos = (250,0);
},
{
name = top;
pos = (384,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = J;
},
{
alignment = -1;
pos = (279,0);
ref = acutecomb.case;
}
);
width = 499;
}
);
note = uni004A0301;
},
{
glyphname = K;
kernRight = K;
layers = (
{
anchors = (
{
name = bottom;
pos = (288,0);
},
{
name = top;
pos = (288,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,333,l),
(457,0,l),
(576,0,l),
(248,357,l),
(561,700,l),
(454,700,l),
(158,367,l),
(158,700,l),
(74,700,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
8 5 2 3 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = K;
unicode = 75;
},
{
glyphname = uni0136;
kernRight = K;
layers = (
{
anchors = (
{
name = bottom;
pos = (288,-238);
},
{
name = top;
pos = (288,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = K;
},
{
alignment = -1;
pos = (239,0);
ref = uni0326;
}
);
width = 580;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = L;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (263,0);
},
{
name = top;
pos = (178,700);
},
{
name = topright;
pos = (261,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(484,0,l),
(484,67,l),
(158,67,l),
(158,700,l),
(74,700,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 17 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 525;
}
);
note = L;
unicode = 76;
},
{
glyphname = Lacute;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (263,0);
},
{
name = top;
pos = (178,931);
},
{
name = topright;
pos = (261,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (73,0);
ref = acutecomb.case;
}
);
width = 525;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = Lcaron;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (263,0);
},
{
name = top;
pos = (178,700);
},
{
name = topright;
pos = (261,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (257,0);
ref = uni030C.alt.case;
}
);
width = 525;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = uni013B;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (263,-238);
},
{
name = top;
pos = (178,700);
},
{
name = topright;
pos = (261,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (214,0);
ref = uni0326;
}
);
width = 525;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = Ldot;
kernRight = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(484,0,l),
(484,67,l),
(158,67,l),
(158,700,l),
(74,700,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(381,293,o),
(414,326,o),
(414,350,qs),
(414,375,o),
(381,407,o),
(357,407,qs),
(332,407,o),
(299,375,o),
(299,350,qs),
(299,326,o),
(332,293,o),
(357,293,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 3 5 1 4 1 3 4 105 0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 6 6 6 17 6 16 37 17 17 16 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 525;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = Lslash;
kernRight = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(510,0,l),
(510,67,l),
(184,67,l),
(184,346,l),
(306,392,l),
(306,459,l),
(184,413,l),
(184,700,l),
(100,700,l),
(100,381,l),
(20,351,l),
(20,284,l),
(100,314,l),
(100,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
9 8 7 6 3 2 1 0 8 1 0 1 76 0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 17 21 20 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = M;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,547,l),
(382,100,l),
(445,100,l),
(669,548,l),
(669,0,l),
(753,0,l),
(753,700,l),
(654,700,l),
(414,214,l),
(172,700,l),
(74,700,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
10 7 2 3 3 0 1 76 0 3 0 2 0 3 2 128 1 1 0 0 33 77 4 1 2 2 34 2 78 18 18 17 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 827;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
layers = (
{
anchors = (
{
name = bottom;
pos = (345,0);
},
{
name = top;
pos = (345,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,561,l),
(531,0,l),
(615,0,l),
(615,700,l),
(531,700,l),
(531,139,l),
(158,700,l),
(74,700,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
7 2 2 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 17 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = N;
unicode = 78;
},
{
glyphname = Nacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (345,0);
},
{
name = top;
pos = (345,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (240,0);
ref = acutecomb.case;
}
);
width = 689;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = Ncaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (345,0);
},
{
name = top;
pos = (345,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (208,0);
ref = uni030C.case;
}
);
width = 689;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = uni0145;
layers = (
{
anchors = (
{
name = bottom;
pos = (345,-238);
},
{
name = top;
pos = (345,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (296,0);
ref = uni0326;
}
);
width = 689;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = Ntilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (345,0);
},
{
name = top;
pos = (345,859);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (194,0);
ref = tildecomb.case;
}
);
width = 689;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,561,l),
(531,0,l),
(531,-80,ls),
(531,-116,o),
(498,-148,o),
(461,-148,qs),
(422,-148,l),
(422,-220,l),
(474,-220,ls),
(544,-220,o),
(615,-153,o),
(615,-82,qs),
(615,700,l),
(531,700,l),
(531,139,l),
(158,700,l),
(74,700,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
16 2 2 4 0 1 76 15 1 4 1 75 1 1 0 0 33 77 0 4 4 34 77 0 3 3 2 97 0 2 2 38 2 78 21 33 35 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = O;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = ogonek;
pos = (464,10);
},
{
name = top;
pos = (392,700);
},
{
name = topright;
pos = (764,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(497,-12,o),
(653,80,o),
(737,245,o),
(737,350,qs),
(737,455,o),
(653,620,o),
(496,712,o),
(392,712,qs),
(287,712,o),
(131,618,o),
(47,453,o),
(47,350,qs),
(47,247,o),
(131,82,o),
(287,-12,o),
(392,-12,qs)
);
},
{
closed = 1;
nodes = (
(312,62,o),
(195,136,o),
(133,266,o),
(133,350,qs),
(133,434,o),
(195,564,o),
(312,637,o),
(392,637,qs),
(473,637,o),
(590,566,o),
(651,436,o),
(651,350,qs),
(651,265,o),
(589,135,o),
(472,62,o),
(392,62,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 39 77 5 1 3 3 1 97 4 1 1 1 40 1 78 16 16 0 0 16 31 16 30 24 22 0 15 0 14 38 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 784;
}
);
note = O;
unicode = 79;
},
{
glyphname = Oacute;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = ogonek;
pos = (464,10);
},
{
name = top;
pos = (392,931);
},
{
name = topright;
pos = (764,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (287,0);
ref = acutecomb.case;
}
);
width = 784;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Obreve;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = ogonek;
pos = (464,10);
},
{
name = top;
pos = (392,901);
},
{
name = topright;
pos = (764,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (251,0);
ref = uni0306.case;
}
);
width = 784;
}
);
note = Obreve;
unicode = 334;
},
{
glyphname = Ocircumflex;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = ogonek;
pos = (464,10);
},
{
name = top;
pos = (392,902);
},
{
name = topright;
pos = (764,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (255,0);
ref = uni0302.case;
}
);
width = 784;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Odieresis;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = ogonek;
pos = (464,10);
},
{
name = top;
pos = (392,889);
},
{
name = topright;
pos = (764,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (245,0);
ref = uni0308.case;
}
);
width = 784;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = Ograve;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = ogonek;
pos = (464,10);
},
{
name = top;
pos = (392,931);
},
{
name = topright;
pos = (764,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (287,0);
ref = gravecomb.case;
}
);
width = 784;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Ohungarumlaut;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = ogonek;
pos = (464,10);
},
{
name = top;
pos = (392,902);
},
{
name = topright;
pos = (764,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (246,0);
ref = uni030B.case;
}
);
width = 784;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = Omacron;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = ogonek;
pos = (464,10);
},
{
name = top;
pos = (392,859);
},
{
name = topright;
pos = (764,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (218,0);
ref = uni0304.case;
}
);
width = 784;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = Oslash;
kernLeft = Oslash;
kernRight = Oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(497,-12,o),
(653,80,o),
(737,245,o),
(737,350,qs),
(737,423,o),
(695,548,o),
(655,596,q),
(747,700,l),
(658,700,l),
(607,643,l),
(564,676,o),
(455,712,o),
(392,712,qs),
(287,712,o),
(131,618,o),
(47,453,o),
(47,350,qs),
(47,276,o),
(90,150,o),
(130,102,q),
(39,0,l),
(129,0,l),
(179,56,l),
(266,-12,o),
(392,-12,qs)
);
},
{
closed = 1;
nodes = (
(296,62,o),
(231,115,q),
(601,534,l),
(651,461,o),
(651,350,qs),
(651,265,o),
(589,135,o),
(472,62,o),
(392,62,qs)
);
},
{
closed = 1;
nodes = (
(184,164,l),
(133,241,o),
(133,350,qs),
(133,434,o),
(195,564,o),
(312,637,o),
(392,637,qs),
(488,637,o),
(555,584,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
14 1 5 1 42 41 31 30 17 4 6 4 5 1 1 0 4 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
14 1 5 2 42 41 31 30 17 4 6 4 5 1 1 0 4 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 39 77 7 1 4 4 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 33 77 0 5 5 1 97 0 1 1 39 77 0 0 0 34 77 7 1 4 4 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
25 25 0 0 36 34 25 33 25 32 0 24 0 23 19 39 18 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Otilde;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = ogonek;
pos = (464,10);
},
{
name = top;
pos = (392,859);
},
{
name = topright;
pos = (764,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (241,0);
ref = tildecomb.case;
}
);
width = 784;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = OE;
kernLeft = C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(475,-12,o),
(614,58,o),
(659,124,q),
(659,0,l),
(1061,0,l),
(1061,69,l),
(743,69,l),
(743,336,l),
(1021,336,l),
(1021,404,l),
(743,404,l),
(743,631,l),
(1061,631,l),
(1061,700,l),
(659,700,l),
(659,575,l),
(614,641,o),
(475,712,o),
(393,712,qs),
(294,712,o),
(136,618,o),
(47,453,o),
(47,350,qs),
(47,249,o),
(135,83,o),
(293,-12,o),
(393,-12,qs)
);
},
{
closed = 1;
nodes = (
(328,62,o),
(208,127,o),
(133,258,o),
(133,350,qs),
(133,427,o),
(195,559,o),
(314,637,o),
(395,637,qs),
(468,637,o),
(587,569,o),
(657,439,o),
(657,350,qs),
(657,275,o),
(598,143,o),
(479,62,o),
(395,62,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
10 1 3 2 23 1 5 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 1 1 0 0 39 77 11 9 2 5 5 6 97 10 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 0 0 0 39 77 8 1 2 2 1 95 0 1 1 33 77 11 9 2 5 5 6 95 0 6 6 34 77 11 9 2 5 5 7 97 10 1 7 7 40 7 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 0 0 0 39 77 8 1 2 2 1 95 0 1 1 33 77 0 5 5 6 95 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 3 0 4 5 3 4 103 0 8 8 0 97 0 0 0 39 77 0 2 2 1 95 0 1 1 33 77 0 5 5 6 95 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
27 27 0 0 27 42 27 41 35 33 0 26 0 25 17 17 17 17 17 19 38 12 8 29
CALL[ ]	/* CallFunction */";
};
width = 1118;
}
);
note = OE;
unicode = 338;
},
{
glyphname = P;
kernRight = P;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,304,l),
(305,304,ls),
(414,304,o),
(543,403,o),
(543,502,qs),
(543,599,o),
(417,700,o),
(305,700,qs),
(74,700,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(158,375,l),
(158,630,l),
(303,630,ls),
(385,630,o),
(457,567,o),
(457,502,qs),
(457,438,o),
(385,375,o),
(303,375,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 4 0 1 2 4 1 103 0 3 3 0 95 0 0 0 33 77 0 2 2 34 2 78 11 11 11 19 11 18 37 17 36 32 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = P;
unicode = 80;
},
{
glyphname = Thorn;
kernRight = Thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,147,l),
(304,147,ls),
(388,147,o),
(440,174,qs),
(492,200,o),
(543,291,o),
(543,350,qs),
(543,409,o),
(518,455,qs),
(492,503,o),
(384,554,o),
(304,554,qs),
(158,554,l),
(158,700,l),
(74,700,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(158,217,l),
(158,484,l),
(302,484,ls),
(383,484,o),
(457,416,o),
(457,350,qs),
(457,217,o),
(302,217,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 0 4 5 1 4 103 6 1 5 0 2 3 5 2 103 0 0 0 33 77 0 3 3 34 3 78 17 17 17 24 17 23 36 17 40 33 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = Q;
kernLeft = C;
kernRight = Q;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(677,-11,l),
(727,41,l),
(658,106,l),
(697,154,o),
(737,278,o),
(737,350,qs),
(737,455,o),
(653,620,o),
(496,712,o),
(392,712,qs),
(287,712,o),
(131,618,o),
(47,453,o),
(47,350,qs),
(47,247,o),
(131,82,o),
(287,-12,o),
(392,-12,qs),
(518,-12,o),
(607,56,q)
);
},
{
closed = 1;
nodes = (
(133,434,o),
(195,564,o),
(312,637,o),
(392,637,qs),
(473,637,o),
(590,566,o),
(651,436,o),
(651,350,qs),
(651,236,o),
(601,162,q),
(494,267,l),
(443,215,l),
(552,110,l),
(489,62,o),
(392,62,qs),
(312,62,o),
(195,136,o),
(133,266,o),
(133,350,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
28 27 26 25 16 5 2 3 19 18 17 3 0 2 2 76 0 3 3 1 97 0 1 1 39 77 0 2 2 0 97 0 0 0 40 0 78 41 44 38 32 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 789;
}
);
note = Q;
unicode = 81;
},
{
glyphname = R;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = top;
pos = (283,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,310,l),
(274,310,l),
(454,0,l),
(558,0,l),
(357,326,l),
(515,354,o),
(515,505,qs),
(515,602,o),
(393,700,o),
(281,700,qs),
(74,700,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(158,381,l),
(158,630,l),
(279,630,ls),
(361,630,o),
(429,570,o),
(429,505,qs),
(429,441,o),
(361,381,o),
(279,381,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
6 1 2 5 1 76 6 1 5 0 2 1 5 2 103 0 4 4 0 95 0 0 0 33 77 3 1 1 1 34 1 78 13 13 13 21 13 20 37 17 17 21 32 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = R;
unicode = 82;
},
{
glyphname = Racute;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = top;
pos = (283,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (178,0);
ref = acutecomb.case;
}
);
width = 593;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = Rcaron;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = top;
pos = (283,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (146,0);
ref = uni030C.case;
}
);
width = 593;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = uni0156;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (302,-238);
},
{
name = top;
pos = (283,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (253,0);
ref = uni0326;
}
);
width = 593;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = S;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = top;
pos = (289,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(362,-12,o),
(470,34,o),
(533,122,o),
(533,183,qs),
(533,243,o),
(486,320,o),
(400,369,o),
(329,393,qs),
(252,419,o),
(185,449,o),
(155,491,o),
(155,528,qs),
(155,582,o),
(229,642,o),
(285,640,qs),
(345,640,o),
(422,571,o),
(422,518,q),
(510,518,l),
(508,609,o),
(384,712,o),
(288,712,qs),
(226,712,o),
(124,667,o),
(67,580,o),
(68,520,qs),
(68,452,o),
(147,370,o),
(227,342,qs),
(278,325,ls),
(347,302,o),
(411,272,o),
(446,222,o),
(446,178,qs),
(446,122,o),
(363,59,o),
(297,59,qs),
(223,59,o),
(132,141,o),
(132,210,q),
(44,210,l),
(44,141,o),
(110,40,o),
(225,-12,o),
(297,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 39 77 0 1 1 5 97 6 1 5 5 40 5 78 0 0 0 44 0 43 34 18 45 34 19 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = S;
unicode = 83;
},
{
glyphname = Sacute;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = top;
pos = (289,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (184,0);
ref = acutecomb.case;
}
);
width = 578;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = Scaron;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = top;
pos = (289,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (152,0);
ref = uni030C.case;
}
);
width = 578;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = Scedilla;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (289,-259);
},
{
name = top;
pos = (289,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(324,-259,ls),
(378,-259,o),
(445,-205,o),
(445,-159,qs),
(445,-112,o),
(375,-62,o),
(316,-63,q),
(316,-11,l),
(410,-6,o),
(533,96,o),
(533,183,qs),
(533,243,o),
(486,320,o),
(400,369,o),
(329,393,qs),
(252,419,o),
(185,449,o),
(155,491,o),
(155,528,qs),
(155,582,o),
(229,642,o),
(285,640,qs),
(345,640,o),
(422,571,o),
(422,518,q),
(510,518,l),
(508,609,o),
(384,712,o),
(288,712,qs),
(226,712,o),
(124,667,o),
(67,580,o),
(68,520,qs),
(68,452,o),
(147,370,o),
(227,342,qs),
(278,325,ls),
(347,302,o),
(411,272,o),
(446,222,o),
(446,178,qs),
(446,122,o),
(363,59,o),
(297,59,qs),
(223,59,o),
(132,141,o),
(132,210,q),
(44,210,l),
(44,116,o),
(163,0,o),
(260,-10,q),
(260,-113,l),
(309,-113,ls),
(377,-113,o),
(377,-158,qs),
(377,-206,o),
(309,-206,qs),
(217,-206,l),
(217,-259,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
7 1 8 7 1 76 0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 99 0 6 6 4 97 0 4 4 39 77 0 3 3 7 97 0 7 7 40 7 78 58 56 17 28 34 18 45 34 20 34 32 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = uni0218;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (289,-238);
},
{
name = top;
pos = (289,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (240,0);
ref = uni0326;
}
);
width = 578;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni1E9E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(522,-10,o),
(626,74,o),
(626,150,qs),
(626,212,o),
(557,283,o),
(489,307,qs),
(436,325,o),
(375,357,o),
(375,386,qs),
(375,405,o),
(399,428,o),
(425,445,qs),
(467,469,o),
(516,523,o),
(516,569,qs),
(516,645,o),
(393,732,o),
(302,732,qs),
(197,732,o),
(71,621,o),
(71,520,qs),
(71,0,l),
(154,0,l),
(154,512,ls),
(154,580,o),
(223,661,o),
(300,661,qs),
(358,661,o),
(432,612,o),
(432,562,qs),
(432,537,o),
(407,501,o),
(383,486,qs),
(340,458,ls),
(317,443,o),
(290,404,o),
(290,375,qs),
(290,326,o),
(369,270,o),
(438,246,qs),
(489,230,o),
(541,186,o),
(541,144,qs),
(541,101,o),
(486,56,o),
(440,56,qs),
(386,56,o),
(325,120,o),
(321,169,q),
(238,169,l),
(245,85,o),
(356,-10,o),
(441,-10,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 1 1 3 97 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 2 1 2 0 1 128 0 4 0 2 0 4 2 105 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 52 0 51 35 33 30 29 26 24 34 18 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uni1E9E;
unicode = 7838;
},
{
glyphname = T;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (280,0);
},
{
name = top;
pos = (280,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(322,0,l),
(322,631,l),
(531,631,l),
(531,700,l),
(29,700,l),
(29,631,l),
(238,631,l),
(238,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 1 95 0 1 1 33 77 0 3 3 34 3 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 560;
}
);
note = T;
unicode = 84;
},
{
glyphname = Tcaron;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (280,0);
},
{
name = top;
pos = (280,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (143,0);
ref = uni030C.case;
}
);
width = 560;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = uni0162;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (280,-259);
},
{
name = top;
pos = (280,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(251,0,l),
(251,-113,l),
(300,-113,ls),
(368,-113,o),
(368,-158,qs),
(368,-206,o),
(300,-206,qs),
(208,-206,l),
(208,-259,l),
(315,-259,ls),
(369,-259,o),
(436,-205,o),
(436,-159,qs),
(436,-112,o),
(366,-62,o),
(307,-63,q),
(307,0,l),
(322,0,l),
(322,631,l),
(531,631,l),
(531,700,l),
(29,700,l),
(29,631,l),
(238,631,l),
(238,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 0 7 6 4 7 105 0 6 0 5 6 5 99 2 1 0 0 1 95 0 1 1 33 77 8 1 3 3 34 3 78 17 34 33 36 17 17 17 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 560;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni021A;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (280,-238);
},
{
name = top;
pos = (280,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (231,0);
ref = uni0326;
}
);
width = 560;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = U;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,700);
},
{
name = topright;
pos = (636,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(395,-12,o),
(512,40,o),
(588,161,o),
(588,258,qs),
(588,700,l),
(504,700,l),
(504,257,ls),
(504,159,o),
(411,63,o),
(329,63,qs),
(247,63,o),
(152,159,o),
(152,257,qs),
(152,700,l),
(68,700,l),
(68,258,ls),
(68,183,o),
(123,61,o),
(239,-12,o),
(327,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 0 0 33 77 0 1 1 3 97 4 1 3 3 40 3 78 0 0 0 19 0 18 19 35 20 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 656;
}
);
note = U;
unicode = 85;
},
{
glyphname = Uacute;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,931);
},
{
name = topright;
pos = (636,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (223,0);
ref = acutecomb.case;
}
);
width = 656;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ubreve;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,901);
},
{
name = topright;
pos = (636,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (187,0);
ref = uni0306.case;
}
);
width = 656;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = Ucircumflex;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,902);
},
{
name = topright;
pos = (636,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (191,0);
ref = uni0302.case;
}
);
width = 656;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,889);
},
{
name = topright;
pos = (636,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (181,0);
ref = uni0308.case;
}
);
width = 656;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Ugrave;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,931);
},
{
name = topright;
pos = (636,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (223,0);
ref = gravecomb.case;
}
);
width = 656;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uhungarumlaut;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,902);
},
{
name = topright;
pos = (636,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (182,0);
ref = uni030B.case;
}
);
width = 656;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = Umacron;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,859);
},
{
name = topright;
pos = (636,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (154,0);
ref = uni0304.case;
}
);
width = 656;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = Uogonek;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,700);
},
{
name = topright;
pos = (636,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(370,-193,o),
(406,-180,q),
(406,-124,l),
(372,-139,o),
(341,-139,qs),
(314,-139,o),
(281,-113,o),
(281,-90,qs),
(281,-49,o),
(345,-18,qs),
(361,-10,l),
(458,-1,o),
(588,128,o),
(588,258,qs),
(588,700,l),
(504,700,l),
(504,257,ls),
(504,159,o),
(411,63,o),
(329,63,qs),
(247,63,o),
(152,159,o),
(152,257,qs),
(152,700,l),
(68,700,l),
(68,258,ls),
(68,157,o),
(166,12,o),
(264,-7,q),
(213,-46,o),
(213,-98,qs),
(213,-145,o),
(281,-193,o),
(331,-193,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
30 4 2 3 1 31 1 4 3 2 76 0 1 0 3 0 1 3 128 0 3 5 1 4 3 4 102 2 1 0 0 33 0 78 0 0 0 33 0 32 41 19 35 24 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 656;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = Uring;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,967);
},
{
name = topright;
pos = (636,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (223,0);
ref = uni030A.case;
}
);
width = 656;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = Utilde;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,859);
},
{
name = topright;
pos = (636,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (177,0);
ref = tildecomb.case;
}
);
width = 656;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = V;
kernLeft = V;
kernRight = V;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(383,0,l),
(646,700,l),
(557,700,l),
(334,89,l),
(113,700,l),
(22,700,l),
(285,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 2 0 1 76 1 1 0 0 33 77 0 2 2 34 2 78 17 18 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 668;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (493,0);
},
{
name = top;
pos = (493,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(491,586,l),
(658,0,l),
(755,0,l),
(950,700,l),
(860,700,l),
(707,97,l),
(542,700,l),
(445,700,l),
(275,102,l),
(124,700,l),
(34,700,l),
(224,0,l),
(320,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 33 77 5 4 2 3 3 34 3 78 0 0 0 12 0 12 17 18 18 17 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 985;
}
);
note = W;
unicode = 87;
},
{
glyphname = Wacute;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (493,0);
},
{
name = top;
pos = (493,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (388,0);
ref = acutecomb.case;
}
);
width = 985;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = Wcircumflex;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (493,0);
},
{
name = top;
pos = (493,902);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (356,0);
ref = uni0302.case;
}
);
width = 985;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = Wdieresis;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (493,0);
},
{
name = top;
pos = (493,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (346,0);
ref = uni0308.case;
}
);
width = 985;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = Wgrave;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (493,0);
},
{
name = top;
pos = (493,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (388,0);
ref = gravecomb.case;
}
);
width = 985;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = X;
kernLeft = X;
kernRight = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(127,0,l),
(297,300,l),
(477,0,l),
(571,0,l),
(346,377,l),
(537,700,l),
(442,700,l),
(301,451,l),
(152,700,l),
(58,700,l),
(252,376,l),
(31,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = top;
pos = (290,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(332,0,l),
(332,266,l),
(559,700,l),
(465,700,l),
(290,346,l),
(115,700,l),
(20,700,l),
(248,266,l),
(248,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
6 3 0 3 2 0 1 76 1 1 0 0 33 77 0 2 2 34 2 78 18 18 17 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Yacute;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = top;
pos = (290,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (185,0);
ref = acutecomb.case;
}
);
width = 579;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Ycircumflex;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = top;
pos = (290,902);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (153,0);
ref = uni0302.case;
}
);
width = 579;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = Ydieresis;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = top;
pos = (290,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (143,0);
ref = uni0308.case;
}
);
width = 579;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Ygrave;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = top;
pos = (290,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (185,0);
ref = gravecomb.case;
}
);
width = 579;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = uni1EF8;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = top;
pos = (290,859);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (139,0);
ref = tildecomb.case;
}
);
width = 579;
}
);
note = uni1EF8;
unicode = 7928;
},
{
glyphname = Z;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = top;
pos = (268,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(491,0,l),
(491,73,l),
(141,73,l),
(487,634,l),
(487,700,l),
(49,700,l),
(49,627,l),
(389,627,l),
(44,66,l),
(44,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 0 1 0 1 3 2 2 76 0 0 0 1 95 0 1 1 33 77 0 2 2 3 95 0 3 3 34 3 78 17 18 17 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 535;
}
);
note = Z;
unicode = 90;
},
{
glyphname = Zacute;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = top;
pos = (268,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (163,0);
ref = acutecomb.case;
}
);
width = 535;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = Zcaron;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = top;
pos = (268,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (131,0);
ref = uni030C.case;
}
);
width = 535;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = Zdotaccent;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = top;
pos = (268,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (210,0);
ref = uni0307.case;
}
);
width = 535;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = uniA78B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(146,229,l),
(156,700,l),
(65,700,l),
(75,229,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 221;
}
);
note = uniA78B;
unicode = 42891;
},
{
glyphname = a;
kernLeft = a;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(290,-12,o),
(379,41,o),
(404,84,q),
(408,0,l),
(484,0,l),
(484,305,ls),
(484,396,o),
(382,508,o),
(275,508,qs),
(221,508,o),
(126,468,o),
(64,393,o),
(60,341,q),
(146,341,l),
(155,388,o),
(224,437,o),
(275,437,qs),
(330,437,o),
(400,371,o),
(400,299,q),
(266,299,ls),
(172,299,o),
(50,222,o),
(50,141,qs),
(50,68,o),
(152,-12,o),
(232,-12,qs)
);
},
{
closed = 1;
nodes = (
(199,59,o),
(138,102,o),
(138,145,qs),
(138,193,o),
(213,234,o),
(273,234,qs),
(400,234,l),
(400,233,ls),
(400,189,o),
(364,109,o),
(294,59,o),
(247,59,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
23 1 7 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 2 1 0 1 2 0 128 0 0 0 6 7 0 6 103 0 1 1 3 97 0 3 3 42 77 9 1 7 7 4 97 8 5 2 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 2 1 0 1 2 0 128 0 0 0 6 7 0 6 103 0 1 1 3 97 0 3 3 42 77 0 4 4 34 77 9 1 7 7 5 97 8 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
27 27 0 0 27 38 27 37 33 30 0 26 0 25 19 35 18 34 36 10 8 27
CALL[ ]	/* CallFunction */";
};
width = 543;
}
);
note = a;
unicode = 97;
},
{
glyphname = aacute;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (170,0);
ref = acutecomb;
}
);
width = 543;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = abreve;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,732);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (134,0);
ref = uni0306;
}
);
width = 543;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = uni01CE;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (138,0);
ref = uni030C;
}
);
width = 543;
}
);
note = uni01CE;
unicode = 462;
},
{
glyphname = acircumflex;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (138,0);
ref = uni0302;
}
);
width = 543;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = adieresis;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (128,0);
ref = uni0308;
}
);
width = 543;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = agrave;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (170,0);
ref = gravecomb;
}
);
width = 543;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = amacron;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,695);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (101,0);
ref = uni0304;
}
);
width = 543;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = aogonek;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(290,-12,o),
(379,41,o),
(404,84,q),
(408,0,l),
(425,0,l),
(349,-45,o),
(349,-108,qs),
(349,-155,o),
(417,-203,o),
(467,-203,qs),
(506,-203,o),
(542,-190,q),
(542,-134,l),
(508,-149,o),
(477,-149,qs),
(450,-149,o),
(417,-123,o),
(417,-100,qs),
(417,-59,o),
(481,-28,qs),
(539,0,l),
(518,43,l),
(484,28,l),
(484,305,ls),
(484,396,o),
(382,508,o),
(275,508,qs),
(221,508,o),
(126,468,o),
(64,393,o),
(60,341,q),
(146,341,l),
(155,388,o),
(224,437,o),
(275,437,qs),
(330,437,o),
(400,371,o),
(400,299,q),
(266,299,ls),
(172,299,o),
(50,222,o),
(50,141,qs),
(50,68,o),
(152,-12,o),
(232,-12,qs)
);
},
{
closed = 1;
nodes = (
(199,59,o),
(138,102,o),
(138,145,qs),
(138,193,o),
(213,234,o),
(273,234,qs),
(400,234,l),
(400,233,ls),
(400,189,o),
(364,109,o),
(294,59,o),
(247,59,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
41 1 9 8 22 21 2 6 9 31 1 4 6 32 1 5 4 4 76 23 1 6 1 75
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
41 1 9 8 22 21 2 6 9 31 1 4 7 32 1 5 4 4 76 23 1 6 1 75
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 2 1 0 1 2 0 128 0 0 0 8 9 0 8 103 0 1 1 3 97 0 3 3 42 77 11 1 9 9 6 97 10 7 2 6 6 34 77 0 4 4 5 97 0 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 2 1 0 1 2 0 128 0 0 0 8 9 0 8 103 0 1 1 3 97 0 3 3 42 77 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 77 0 4 4 5 97 0 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 2 1 0 1 2 0 128 0 0 0 8 9 0 8 103 0 4 0 5 4 5 101 0 1 1 3 97 0 3 3 42 77 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
45 45 0 0 45 56 45 55 51 48 0 44 0 43 20 35 42 35 18 34 36 12 8 29
CALL[ ]	/* CallFunction */";
};
width = 543;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = aring;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,763);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (170,0);
ref = uni030A;
}
);
width = 543;
}
);
note = aring;
unicode = 229;
},
{
glyphname = atilde;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (124,0);
ref = tildecomb;
}
);
width = 543;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = ae;
kernLeft = a;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (457,0);
},
{
name = top;
pos = (457,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(305,-12,o),
(405,52,o),
(436,106,q),
(467,51,o),
(575,-12,o),
(641,-12,qs),
(722,-12,o),
(837,77,o),
(859,148,q),
(776,148,l),
(739,59,o),
(640,59,qs),
(598,59,o),
(528,102,o),
(486,181,o),
(484,232,q),
(869,232,l),
(871,278,ls),
(871,341,o),
(814,446,o),
(710,508,o),
(642,508,qs),
(584,508,o),
(487,461,o),
(455,417,q),
(431,460,o),
(339,508,o),
(277,508,qs),
(227,508,o),
(136,470,o),
(74,394,o),
(68,341,q),
(155,341,l),
(163,387,o),
(230,437,o),
(277,437,qs),
(332,437,o),
(399,366,o),
(399,297,q),
(261,297,ls),
(163,297,o),
(50,216,o),
(50,141,qs),
(50,70,o),
(153,-12,o),
(237,-12,qs)
);
},
{
closed = 1;
nodes = (
(195,59,o),
(138,107,o),
(138,146,qs),
(138,232,o),
(269,232,qs),
(398,232,l),
(398,212,l),
(394,171,o),
(350,101,o),
(282,59,o),
(243,59,qs)
);
},
{
closed = 1;
nodes = (
(485,297,l),
(493,363,o),
(582,437,o),
(642,437,qs),
(702,437,o),
(784,361,o),
(788,297,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 97 values pushed */
20 1 2 1 49 1 7 5 42 1 6 7 3 76 0 2 1 0 1 2 0 128 0 7 5 6 5 7 6 128 13 1 0 10 1 5 7 0 5 103 12 1 1 1 3 97 4 1 3 3 42 77 15 11 2 6 6 8 97 14 9 2 8 8 40 8 78 46 46 0 0 63 62 60 58 46 56 46 55 52 50 0 45 0 44 34 17 35 20 36 35 18 34 36 16 8 31
CALL[ ]	/* CallFunction */";
};
width = 913;
}
);
note = ae;
unicode = 230;
},
{
glyphname = aeacute;
kernLeft = a;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (457,0);
},
{
name = top;
pos = (457,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = ae;
},
{
alignment = -1;
pos = (352,0);
ref = acutecomb;
}
);
width = 913;
}
);
note = aeacute;
unicode = 509;
},
{
glyphname = b;
kernLeft = b;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(408,-12,o),
(519,55,o),
(580,173,o),
(580,247,qs),
(580,322,o),
(520,441,o),
(409,508,o),
(335,508,qs),
(271,508,o),
(180,455,o),
(153,414,q),
(153,700,l),
(69,700,l),
(69,0,l),
(145,0,l),
(153,83,l),
(178,38,o),
(273,-12,o),
(334,-12,qs)
);
},
{
closed = 1;
nodes = (
(274,61,o),
(197,110,o),
(155,195,o),
(155,248,qs),
(155,331,o),
(249,435,o),
(325,435,qs),
(403,435,o),
(495,329,o),
(495,248,qs),
(495,165,o),
(401,61,o),
(325,61,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 2 2 5 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 1 33 77 0 4 4 2 97 0 2 2 42 77 7 1 5 5 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 33 77 0 4 4 2 97 0 2 2 42 77 0 0 0 34 77 7 1 5 5 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
19 19 0 0 19 31 19 30 25 23 0 18 0 17 35 17 19 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 628;
}
);
note = b;
unicode = 98;
},
{
glyphname = c;
kernLeft = c;
kernRight = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (296,0);
},
{
name = top;
pos = (293,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(384,-12,o),
(507,81,o),
(522,157,q),
(436,157,l),
(426,111,o),
(349,59,o),
(296,59,qs),
(249,59,o),
(176,107,o),
(134,193,o),
(134,248,qs),
(134,299,o),
(172,385,o),
(245,436,o),
(296,436,qs),
(349,436,o),
(426,384,o),
(436,339,q),
(522,339,l),
(506,416,o),
(385,508,o),
(297,508,qs),
(225,508,o),
(111,442,o),
(48,324,o),
(48,248,qs),
(48,171,o),
(113,53,o),
(227,-12,o),
(297,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 42 77 0 3 3 5 97 6 1 5 5 40 5 78 0 0 0 29 0 28 18 38 34 18 38 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 570;
}
);
note = c;
unicode = 99;
},
{
glyphname = cacute;
kernLeft = c;
kernRight = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (296,0);
},
{
name = top;
pos = (293,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (188,0);
ref = acutecomb;
}
);
width = 570;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = ccaron;
kernLeft = c;
kernRight = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (296,0);
},
{
name = top;
pos = (293,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (156,0);
ref = uni030C;
}
);
width = 570;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = ccedilla;
layers = (
{
anchors = (
{
name = bottom;
pos = (296,-259);
},
{
name = top;
pos = (293,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,-259,ls),
(383,-259,o),
(450,-205,o),
(450,-159,qs),
(450,-112,o),
(380,-62,o),
(321,-63,q),
(321,-11,l),
(399,-4,o),
(508,87,o),
(522,157,q),
(436,157,l),
(426,111,o),
(349,59,o),
(296,59,qs),
(249,59,o),
(176,107,o),
(134,193,o),
(134,248,qs),
(134,299,o),
(172,385,o),
(245,436,o),
(296,436,qs),
(349,436,o),
(426,384,o),
(436,339,q),
(522,339,l),
(506,416,o),
(385,508,o),
(297,508,qs),
(225,508,o),
(111,442,o),
(48,324,o),
(48,248,qs),
(48,177,o),
(104,65,o),
(203,-3,o),
(265,-10,q),
(265,-113,l),
(314,-113,ls),
(382,-113,o),
(382,-158,qs),
(382,-206,o),
(314,-206,qs),
(222,-206,l),
(222,-259,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
37 7 2 7 5 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 5 7 7 5 112 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 42 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 5 7 4 5 7 126 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 42 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 20 18 38 34 18 40 34 32 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 570;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = cdotaccent;
kernLeft = c;
kernRight = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (296,0);
},
{
name = top;
pos = (293,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (235,0);
ref = uni0307;
}
);
width = 570;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = d;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (314,0);
},
{
name = top;
pos = (314,992);
},
{
name = topright;
pos = (608,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(357,-12,o),
(449,41,o),
(476,82,q),
(484,0,l),
(560,0,l),
(560,700,l),
(476,700,l),
(476,413,l),
(450,458,o),
(355,508,o),
(295,508,qs),
(219,508,o),
(107,440,o),
(48,322,o),
(48,249,qs),
(48,176,o),
(108,57,o),
(220,-12,o),
(294,-12,qs)
);
},
{
closed = 1;
nodes = (
(257,61,o),
(179,106,o),
(134,191,o),
(134,248,qs),
(134,304,o),
(178,389,o),
(255,435,o),
(303,435,qs),
(382,435,o),
(473,330,o),
(473,248,qs),
(473,167,o),
(383,61,o),
(303,61,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
15 10 2 5 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 1 33 77 0 4 4 0 97 0 0 0 42 77 7 1 5 5 2 97 6 3 2 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 33 77 0 4 4 0 97 0 0 0 42 77 0 2 2 34 77 7 1 5 5 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
19 19 0 0 19 32 19 31 25 23 0 18 0 17 17 19 38 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 628;
}
);
note = d;
unicode = 100;
},
{
glyphname = dcaron;
kernLeft = c;
kernRight = dcaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (314,0);
},
{
name = top;
pos = (314,992);
},
{
name = topright;
pos = (608,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = d;
},
{
alignment = -1;
pos = (608,0);
ref = uni030C.alt;
}
);
width = 628;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = dcroat;
kernLeft = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(357,-12,o),
(449,41,o),
(476,82,q),
(484,0,l),
(560,0,l),
(560,571,l),
(607,571,l),
(607,634,l),
(560,634,l),
(560,700,l),
(476,700,l),
(476,634,l),
(305,634,l),
(305,571,l),
(476,571,l),
(476,413,l),
(450,458,o),
(355,508,o),
(295,508,qs),
(219,508,o),
(107,440,o),
(48,322,o),
(48,249,qs),
(48,176,o),
(108,57,o),
(220,-12,o),
(294,-12,qs)
);
},
{
closed = 1;
nodes = (
(134,304,o),
(178,389,o),
(255,435,o),
(303,435,qs),
(382,435,o),
(473,330,o),
(473,248,qs),
(473,167,o),
(383,61,o),
(303,61,qs),
(257,61,o),
(179,106,o),
(134,191,o),
(134,248,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
23 10 2 8 9 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
4 1 2 5 1 1 0 2 1 103 0 3 3 33 77 0 9 9 0 97 0 0 0 42 77 0 8 8 6 97 10 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
4 1 2 5 1 1 0 2 1 103 0 3 3 33 77 0 9 9 0 97 0 0 0 42 77 0 6 6 34 77 0 8 8 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 37 35 31 29 0 26 0 25 17 17 17 17 17 19 38 11 8 29
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = eth;
kernLeft = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(386,-12,o),
(447,24,qs),
(508,61,o),
(578,190,o),
(578,272,qs),
(578,468,o),
(449,619,q),
(539,651,l),
(539,708,l),
(408,663,l),
(387,684,o),
(367,700,q),
(283,700,l),
(320,669,o),
(347,641,q),
(252,608,l),
(252,551,l),
(386,598,l),
(451,518,o),
(483,429,q),
(451,469,o),
(357,507,o),
(305,507,qs),
(234,507,o),
(175,474,qs),
(116,440,o),
(48,321,o),
(48,247,qs),
(48,175,o),
(82,117,qs),
(117,57,o),
(235,-12,o),
(311,-12,qs)
);
},
{
closed = 1;
nodes = (
(266,59,o),
(184,105,o),
(134,191,o),
(134,248,qs),
(134,299,o),
(179,385,o),
(260,436,o),
(313,436,qs),
(359,436,o),
(442,391,o),
(492,305,o),
(492,248,qs),
(492,197,o),
(447,111,o),
(366,59,o),
(313,59,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
25 24 22 17 16 15 14 7 0 1 12 1 4 3 2 76 23 1 1 74 0 1 1 33 77 0 3 3 0 97 0 0 0 42 77 6 1 4 4 2 97 5 1 2 2 40 2 78 33 33 0 0 33 48 33 47 41 39 0 32 0 31 25 40 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 626;
}
);
note = eth;
unicode = 240;
},
{
glyphname = e;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,-12,o),
(492,76,o),
(513,148,q),
(430,148,l),
(414,106,o),
(343,59,o),
(292,59,qs),
(224,59,o),
(135,155,o),
(131,229,q),
(526,229,l),
(527,276,ls),
(527,341,o),
(468,447,o),
(362,508,o),
(294,508,qs),
(221,508,o),
(109,443,o),
(48,325,o),
(48,248,qs),
(48,170,o),
(112,52,o),
(223,-12,o),
(292,-12,qs)
);
},
{
closed = 1;
nodes = (
(132,294,l),
(139,361,o),
(229,437,o),
(292,437,qs),
(356,437,o),
(441,360,o),
(444,294,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
0 3 1 2 1 3 2 128 0 6 0 1 3 6 1 103 0 5 5 0 97 0 0 0 42 77 0 2 2 4 97 7 1 4 4 40 4 78 0 0 30 29 27 25 0 23 0 22 18 34 20 38 8 8 26
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = e;
unicode = 101;
},
{
glyphname = eacute;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (184,0);
ref = acutecomb;
}
);
width = 569;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ebreve;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,732);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (148,0);
ref = uni0306;
}
);
width = 569;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = ecaron;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (152,0);
ref = uni030C;
}
);
width = 569;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = ecircumflex;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (152,0);
ref = uni0302;
}
);
width = 569;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (142,0);
ref = uni0308;
}
);
width = 569;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = edotaccent;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (231,0);
ref = uni0307;
}
);
width = 569;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = egrave;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (184,0);
ref = gravecomb;
}
);
width = 569;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = emacron;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,695);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (115,0);
ref = uni0304;
}
);
width = 569;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = eogonek;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(132,294,l),
(139,361,o),
(229,437,o),
(292,437,qs),
(356,437,o),
(441,360,o),
(444,294,q)
);
},
{
closed = 1;
nodes = (
(364,-193,o),
(400,-180,q),
(400,-124,l),
(366,-139,o),
(335,-139,qs),
(308,-139,o),
(275,-113,o),
(275,-90,qs),
(275,-49,o),
(339,-18,qs),
(392,7,ls),
(437,27,o),
(499,100,o),
(513,148,q),
(430,148,l),
(414,106,o),
(343,59,o),
(292,59,qs),
(224,59,o),
(135,155,o),
(131,229,q),
(526,229,l),
(527,276,ls),
(527,341,o),
(468,447,o),
(362,508,o),
(294,508,qs),
(221,508,o),
(109,443,o),
(48,325,o),
(48,248,qs),
(48,177,o),
(101,67,o),
(195,-1,o),
(255,-9,q),
(207,-47,o),
(207,-98,qs),
(207,-145,o),
(275,-193,o),
(325,-193,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
43 11 2 6 4 44 1 7 6 2 76 0 5 3 4 3 5 4 128 0 4 6 3 4 6 126 0 1 0 3 5 1 3 103 0 6 8 1 7 6 7 102 0 0 0 2 97 0 2 2 42 0 78 7 7 7 46 7 45 40 18 34 20 44 18 33 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = uni1EBD;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (138,0);
ref = tildecomb;
}
);
width = 569;
}
);
note = uni1EBD;
unicode = 7869;
},
{
glyphname = uni0259;
kernLeft = c;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,-12,o),
(459,54,o),
(521,172,o),
(521,248,qs),
(521,323,o),
(461,441,o),
(350,508,o),
(277,508,qs),
(192,508,o),
(77,420,o),
(56,348,q),
(139,348,l),
(155,390,o),
(226,437,o),
(277,437,qs),
(345,437,o),
(434,343,o),
(438,267,q),
(43,267,l),
(42,220,ls),
(42,155,o),
(101,49,o),
(207,-12,o),
(275,-12,qs)
);
},
{
closed = 1;
nodes = (
(213,59,o),
(128,136,o),
(125,202,q),
(437,202,l),
(430,135,o),
(340,59,o),
(277,59,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 2 1 0 1 2 0 128 0 0 0 5 6 0 5 103 0 1 1 3 97 0 3 3 42 77 8 1 6 6 4 97 7 1 4 4 40 4 78 24 24 0 0 24 30 24 29 27 26 0 23 0 22 34 18 34 20 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = uni0259;
unicode = 601;
},
{
glyphname = f;
kernLeft = f;
kernRight = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,0,l),
(180,425,l),
(302,425,l),
(302,496,l),
(180,496,l),
(180,560,ls),
(180,597,o),
(212,628,o),
(250,628,qs),
(287,628,l),
(287,700,l),
(237,700,ls),
(167,700,o),
(96,633,o),
(96,562,qs),
(96,496,l),
(21,496,l),
(21,425,l),
(96,425,l),
(96,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 3 3 2 97 0 2 2 33 77 5 1 0 0 1 95 4 1 1 1 36 77 0 6 6 34 6 78 17 17 19 33 35 17 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 333;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (254,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(326,-232,o),
(428,-193,o),
(490,-116,o),
(490,-61,qs),
(490,89,o),
(299,89,qs),
(216,89,ls),
(132,89,o),
(132,139,qs),
(132,152,o),
(146,173,o),
(158,179,q),
(204,156,o),
(255,156,qs),
(340,156,o),
(452,249,o),
(452,332,qs),
(452,384,o),
(426,425,q),
(503,425,l),
(503,496,l),
(334,496,l),
(297,508,o),
(255,508,qs),
(168,508,o),
(58,413,o),
(58,332,qs),
(58,265,o),
(101,217,q),
(47,180,o),
(47,120,qs),
(47,94,o),
(76,51,o),
(101,37,q),
(32,6,o),
(32,-72,qs),
(32,-155,o),
(166,-232,o),
(266,-232,qs)
);
},
{
closed = 1;
nodes = (
(198,-162,o),
(114,-118,o),
(114,-71,qs),
(114,-29,o),
(169,15,o),
(219,15,qs),
(304,15,ls),
(408,15,o),
(408,-71,qs),
(408,-115,o),
(327,-162,o),
(264,-162,qs)
);
},
{
closed = 1;
nodes = (
(200,226,o),
(138,285,o),
(138,332,qs),
(138,378,o),
(201,438,o),
(253,438,qs),
(305,438,o),
(371,378,o),
(371,332,qs),
(371,286,o),
(305,226,o),
(253,226,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
26 9 2 3 9 4 1 6 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
12 1 9 0 3 4 9 3 105 8 1 2 2 0 97 1 1 0 0 42 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
12 1 9 0 3 4 9 3 105 0 8 8 0 97 1 1 0 0 42 77 0 2 2 0 97 1 1 0 0 42 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
12 1 9 0 3 4 9 3 105 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
12 1 9 0 3 4 9 3 105 0 4 0 6 7 4 6 103 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
12 1 9 0 3 4 9 3 105 0 4 0 6 7 4 6 103 11 1 7 10 1 5 7 5 101 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
51 51 39 39 0 0 51 62 51 61 57 55 39 50 39 49 45 42 0 38 0 37 53 36 17 17 45 13 8 27
CALL[ ]	/* CallFunction */";
};
width = 529;
}
);
note = g;
unicode = 103;
},
{
glyphname = gbreve;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (254,732);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (113,0);
ref = uni0306;
}
);
width = 529;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = uni0123;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (254,783);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (203,0);
ref = uni0312;
}
);
width = 529;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = gdotaccent;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (254,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (196,0);
ref = uni0307;
}
);
width = 529;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = h;
kernLeft = b;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,0,l),
(153,257,ls),
(153,341,o),
(239,436,o),
(306,436,qs),
(431,436,o),
(431,281,qs),
(431,0,l),
(514,0,l),
(514,290,ls),
(514,398,o),
(413,508,o),
(324,508,qs),
(270,508,o),
(178,456,o),
(153,411,q),
(153,700,l),
(69,700,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 1 2 3 1 76 0 0 0 33 77 0 3 3 1 97 0 1 1 42 77 4 1 2 2 34 2 78 19 34 19 35 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = h;
unicode = 104;
},
{
glyphname = hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,0,l),
(153,257,ls),
(153,341,o),
(239,436,o),
(306,436,qs),
(431,436,o),
(431,281,qs),
(431,0,l),
(514,0,l),
(514,290,ls),
(514,398,o),
(413,508,o),
(324,508,qs),
(270,508,o),
(178,456,o),
(153,411,q),
(153,571,l),
(324,571,l),
(324,634,l),
(153,634,l),
(153,700,l),
(69,700,l),
(69,634,l),
(22,634,l),
(22,571,l),
(69,571,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
10 1 6 7 1 76 3 1 1 4 1 0 5 1 0 103 0 2 2 33 77 0 7 7 5 97 0 5 5 42 77 8 1 6 6 34 6 78 19 34 19 35 17 17 17 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = i;
kernLeft = i;
layers = (
{
anchors = (
{
name = bottom;
pos = (120,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(144,606,o),
(178,639,o),
(178,664,qs),
(178,688,o),
(144,720,o),
(120,720,qs),
(95,720,o),
(62,688,o),
(62,664,qs),
(62,639,o),
(95,606,o),
(120,606,qs)
);
},
{
closed = 1;
nodes = (
(162,0,l),
(162,496,l),
(78,496,l),
(78,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 1 0 97 0 0 0 41 77 0 2 2 36 77 0 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 1 0 97 0 0 0 39 77 0 2 2 36 77 0 3 3 34 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 15 14 13 12 0 11 0 10 36 5 8 23
CALL[ ]	/* CallFunction */";
};
width = 239;
}
);
note = i;
unicode = 105;
},
{
glyphname = dotlessi;
kernLeft = dotlessi;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,0,l),
(153,496,l),
(69,496,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 36 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 222;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = iacute;
kernRight = iacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (6,0);
ref = acutecomb;
}
);
width = 222;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = ibreve;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,732);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-30,0);
ref = uni0306;
}
);
width = 222;
}
);
note = ibreve;
unicode = 301;
},
{
glyphname = icircumflex;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-26,0);
ref = uni0302;
}
);
width = 222;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-36,0);
ref = uni0308.narrow;
}
);
width = 222;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = i.loclTRK;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (53,0);
ref = uni0307;
}
);
width = 222;
}
);
note = i.loclTRK;
},
{
glyphname = igrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (6,0);
ref = gravecomb;
}
);
width = 222;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = imacron;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,695);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-63,0);
ref = uni0304;
}
);
width = 222;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = iogonek;
kernLeft = dotlessi;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,606,o),
(169,639,o),
(169,664,qs),
(169,688,o),
(135,720,o),
(111,720,qs),
(86,720,o),
(53,688,o),
(53,664,qs),
(53,639,o),
(86,606,o),
(111,606,qs)
);
},
{
closed = 1;
nodes = (
(120,-203,o),
(156,-190,q),
(156,-134,l),
(122,-149,o),
(91,-149,qs),
(64,-149,o),
(31,-123,o),
(31,-100,qs),
(31,-59,o),
(95,-28,qs),
(153,0,l),
(153,496,l),
(69,496,l),
(69,15,l),
(-37,-33,o),
(-37,-108,qs),
(-37,-155,o),
(31,-203,o),
(81,-203,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
27 19 16 3 3 2 28 1 4 3 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
5 1 1 1 0 97 0 0 0 41 77 0 2 2 36 77 0 3 3 4 98 6 1 4 4 38 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 3 6 1 4 3 4 102 5 1 1 1 0 97 0 0 0 41 77 0 2 2 36 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 6 1 4 3 4 102 5 1 1 1 0 97 0 0 0 39 77 0 2 2 36 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
12 12 0 0 12 30 12 29 26 24 18 17 0 11 0 10 36 7 8 23
CALL[ ]	/* CallFunction */";
};
width = 222;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = itilde;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-40,0);
ref = tildecomb;
}
);
width = 222;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = ij;
layers = (
{
anchors = (
{
name = bottom;
pos = (120,0);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = i;
},
{
alignment = -1;
pos = (239,0);
ref = j;
}
);
width = 481;
}
);
note = ij;
unicode = 307;
},
{
glyphname = j;
kernLeft = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(24,-220,ls),
(94,-220,o),
(165,-153,o),
(165,-82,qs),
(165,496,l),
(81,496,l),
(81,-80,ls),
(81,-116,o),
(48,-148,o),
(11,-148,qs),
(-28,-148,l),
(-28,-220,l)
);
},
{
closed = 1;
nodes = (
(148,606,o),
(181,639,o),
(181,664,qs),
(181,688,o),
(148,720,o),
(124,720,qs),
(100,720,o),
(66,688,o),
(66,664,qs),
(66,639,o),
(100,606,o),
(124,606,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
5 1 4 4 3 97 0 3 3 41 77 0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
5 1 4 4 3 97 0 3 3 39 77 0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
12 12 12 23 12 22 37 35 19 32 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 242;
}
);
note = j;
unicode = 106;
},
{
glyphname = uni0237;
layers = (
{
anchors = (
{
name = bottom;
pos = (121,-310);
},
{
name = top;
pos = (121,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(24,-220,ls),
(94,-220,o),
(165,-153,o),
(165,-82,qs),
(165,496,l),
(81,496,l),
(81,-80,ls),
(81,-116,o),
(48,-148,o),
(11,-148,qs),
(-28,-148,l),
(-28,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78 35 19 32 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 242;
}
);
note = uni0237;
unicode = 567;
},
{
glyphname = uni006A0301;
layers = (
{
anchors = (
{
name = bottom;
pos = (121,-310);
},
{
name = top;
pos = (121,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni0237;
},
{
alignment = -1;
pos = (16,0);
ref = acutecomb;
}
);
width = 242;
}
);
note = uni006A0301;
},
{
glyphname = k;
kernLeft = b;
kernRight = k;
layers = (
{
anchors = (
{
name = bottom;
pos = (252,0);
},
{
name = top;
pos = (252,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,0,l),
(153,257,l),
(380,0,l),
(487,0,l),
(239,272,l),
(459,496,l),
(356,496,l),
(153,287,l),
(153,700,l),
(69,700,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
8 5 2 3 2 1 1 76 0 0 0 33 77 0 1 1 36 77 3 1 2 2 34 2 78 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 504;
}
);
note = k;
unicode = 107;
},
{
glyphname = uni0137;
kernLeft = b;
kernRight = k;
layers = (
{
anchors = (
{
name = bottom;
pos = (252,-238);
},
{
name = top;
pos = (252,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = k;
},
{
alignment = -1;
pos = (203,0);
ref = uni0326;
}
);
width = 504;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = l;
kernLeft = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = top;
pos = (111,700);
},
{
name = topright;
pos = (202,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,0,l),
(153,700,l),
(69,700,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 222;
}
);
note = l;
unicode = 108;
},
{
glyphname = lacute;
kernLeft = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = top;
pos = (111,951);
},
{
name = topright;
pos = (202,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (6,204);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
204
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 222;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = lcaron;
kernLeft = b;
kernRight = dcaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = top;
pos = (111,700);
},
{
name = topright;
pos = (202,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (202,0);
ref = uni030C.alt;
}
);
width = 222;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = uni013C;
kernLeft = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,-238);
},
{
name = top;
pos = (111,700);
},
{
name = topright;
pos = (202,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (62,0);
ref = uni0326;
}
);
width = 222;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = ldot;
kernLeft = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(162,0,l),
(162,700,l),
(78,700,l),
(78,0,l)
);
},
{
closed = 1;
nodes = (
(309,318,o),
(338,347,o),
(338,367,qs),
(338,388,o),
(309,417,o),
(288,417,qs),
(267,417,o),
(238,388,o),
(238,367,qs),
(238,347,o),
(267,318,o),
(288,318,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 4 1 3 1 2 3 105 0 0 0 33 77 0 1 1 34 1 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 346;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = lslash;
kernLeft = b;
kernRight = lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(160,0,l),
(160,396,l),
(235,426,l),
(235,494,l),
(160,463,l),
(160,700,l),
(76,700,l),
(76,429,l),
(2,398,l),
(2,331,l),
(76,361,l),
(76,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
9 8 7 6 3 2 1 0 8 1 0 1 76 0 0 0 33 77 0 1 1 34 1 78 21 20 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 251;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = m;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,0,l),
(153,257,ls),
(153,341,o),
(230,436,o),
(291,436,qs),
(349,436,o),
(411,358,o),
(411,281,qs),
(411,0,l),
(495,0,l),
(495,257,ls),
(495,341,o),
(572,436,o),
(634,436,qs),
(692,436,o),
(754,358,o),
(754,281,qs),
(754,0,l),
(837,0,l),
(837,290,ls),
(837,398,o),
(734,508,o),
(642,508,qs),
(589,508,o),
(498,456,o),
(472,411,q),
(426,508,o),
(305,508,qs),
(255,508,o),
(175,464,o),
(151,424,q),
(145,496,l),
(69,496,l),
(69,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 2 2 3 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
6 1 4 4 0 97 2 1 2 0 0 36 77 7 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 0 36 77 6 1 4 4 1 97 2 1 1 1 42 77 7 5 2 3 3 34 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
19 35 19 35 19 35 35 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 895;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (306,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,0,l),
(153,257,ls),
(153,341,o),
(236,436,o),
(302,436,qs),
(430,436,o),
(430,281,qs),
(430,0,l),
(514,0,l),
(514,290,ls),
(514,398,o),
(411,508,o),
(321,508,qs),
(264,508,o),
(174,454,o),
(150,407,q),
(145,496,l),
(69,496,l),
(69,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 2 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 3 3 0 97 1 1 0 0 36 77 4 1 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 36 77 0 3 3 1 97 0 1 1 42 77 4 1 2 2 34 2 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
19 34 19 35 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = n;
unicode = 110;
},
{
glyphname = nacute;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (306,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (201,0);
ref = acutecomb;
}
);
width = 573;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = ncaron;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (306,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (169,0);
ref = uni030C;
}
);
width = 573;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = uni0146;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,-238);
},
{
name = top;
pos = (306,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (251,0);
ref = uni0326;
}
);
width = 573;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = ntilde;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (306,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (155,0);
ref = tildecomb;
}
);
width = 573;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = eng;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(373,-220,ls),
(443,-220,o),
(514,-153,o),
(514,-82,qs),
(514,290,ls),
(514,398,o),
(411,508,o),
(321,508,qs),
(264,508,o),
(174,454,o),
(150,407,q),
(145,496,l),
(69,496,l),
(69,0,l),
(153,0,l),
(153,257,ls),
(153,341,o),
(236,436,o),
(302,436,qs),
(430,436,o),
(430,281,qs),
(430,-80,ls),
(430,-116,o),
(397,-148,o),
(360,-148,qs),
(321,-148,l),
(321,-220,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 2 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 3 97 4 1 3 3 36 77 0 2 2 34 77 0 0 0 5 97 0 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 3 3 36 77 0 1 1 4 97 0 4 4 42 77 0 2 2 34 77 0 0 0 5 97 0 5 5 38 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
37 35 17 19 36 32 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = eng;
unicode = 331;
},
{
glyphname = o;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = ogonek;
pos = (408,10);
},
{
name = top;
pos = (302,496);
},
{
name = topright;
pos = (584,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(372,-12,o),
(490,55,o),
(556,174,o),
(556,249,qs),
(556,329,o),
(488,447,o),
(372,508,o),
(302,508,qs),
(230,508,o),
(114,444,o),
(48,326,o),
(48,249,qs),
(48,168,o),
(115,50,o),
(229,-12,o),
(298,-12,qs)
);
},
{
closed = 1;
nodes = (
(255,61,o),
(180,102,o),
(133,186,o),
(133,249,qs),
(133,330,o),
(221,435,o),
(301,435,qs),
(380,435,o),
(471,331,o),
(471,249,qs),
(471,193,o),
(426,108,o),
(347,61,o),
(298,61,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 42 77 5 1 3 3 1 97 4 1 1 1 40 1 78 16 16 0 0 16 29 16 28 23 21 0 15 0 14 38 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = o;
unicode = 111;
},
{
glyphname = oacute;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = ogonek;
pos = (408,10);
},
{
name = top;
pos = (302,747);
},
{
name = topright;
pos = (584,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (197,0);
ref = acutecomb;
}
);
width = 604;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = obreve;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = ogonek;
pos = (408,10);
},
{
name = top;
pos = (302,732);
},
{
name = topright;
pos = (584,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (161,0);
ref = uni0306;
}
);
width = 604;
}
);
note = obreve;
unicode = 335;
},
{
glyphname = ocircumflex;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = ogonek;
pos = (408,10);
},
{
name = top;
pos = (302,733);
},
{
name = topright;
pos = (584,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (165,0);
ref = uni0302;
}
);
width = 604;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = odieresis;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = ogonek;
pos = (408,10);
},
{
name = top;
pos = (302,720);
},
{
name = topright;
pos = (584,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (155,0);
ref = uni0308;
}
);
width = 604;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = ograve;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = ogonek;
pos = (408,10);
},
{
name = top;
pos = (302,747);
},
{
name = topright;
pos = (584,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (197,0);
ref = gravecomb;
}
);
width = 604;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = ohungarumlaut;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = ogonek;
pos = (408,10);
},
{
name = top;
pos = (302,698);
},
{
name = topright;
pos = (584,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (186,0);
ref = uni030B;
}
);
width = 604;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = omacron;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = ogonek;
pos = (408,10);
},
{
name = top;
pos = (302,695);
},
{
name = topright;
pos = (584,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (128,0);
ref = uni0304;
}
);
width = 604;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(374,-12,o),
(487,54,o),
(551,172,o),
(551,248,qs),
(551,351,o),
(493,422,q),
(558,496,l),
(479,496,l),
(450,463,l),
(387,508,o),
(304,508,qs),
(234,508,o),
(120,443,o),
(55,325,o),
(55,248,qs),
(55,144,o),
(112,74,q),
(48,0,l),
(128,0,l),
(156,33,l),
(219,-12,o),
(302,-12,qs)
);
},
{
closed = 1;
nodes = (
(248,58,o),
(205,90,q),
(440,360,l),
(467,311,o),
(467,248,qs),
(467,166,o),
(378,58,o),
(302,58,qs)
);
},
{
closed = 1;
nodes = (
(166,136,l),
(139,182,o),
(139,248,qs),
(139,330,o),
(224,438,o),
(304,438,qs),
(359,438,o),
(400,406,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
12 1 5 1 37 36 27 26 15 4 6 4 5 1 1 0 4 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
12 1 5 2 37 36 27 26 15 4 6 4 5 1 1 0 4 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 42 77 7 1 4 4 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 36 77 0 5 5 1 97 0 1 1 42 77 0 0 0 34 77 7 1 4 4 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
22 22 0 0 32 30 22 29 22 28 0 21 0 20 18 38 18 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = otilde;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = ogonek;
pos = (408,10);
},
{
name = top;
pos = (302,705);
},
{
name = topright;
pos = (584,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (151,0);
ref = tildecomb;
}
);
width = 604;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = oe;
kernLeft = c;
kernRight = ae;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,-12,o),
(467,47,o),
(497,102,q),
(528,48,o),
(634,-12,o),
(702,-12,qs),
(787,-12,o),
(903,76,o),
(925,148,q),
(842,148,l),
(824,106,o),
(753,59,o),
(702,59,qs),
(634,59,o),
(544,153,o),
(540,229,q),
(935,229,l),
(937,276,ls),
(937,338,o),
(909,390,qs),
(880,445,o),
(774,508,o),
(704,508,qs),
(635,508,o),
(527,448,o),
(496,394,q),
(467,449,o),
(364,508,o),
(297,508,qs),
(227,508,o),
(171,476,qs),
(113,443,o),
(48,325,o),
(48,248,qs),
(48,170,o),
(81,111,qs),
(113,52,o),
(225,-12,o),
(295,-12,qs)
);
},
{
closed = 1;
nodes = (
(248,60,o),
(175,108,o),
(134,194,o),
(134,248,qs),
(134,328,o),
(220,436,o),
(297,436,qs),
(344,436,o),
(417,389,o),
(458,304,o),
(458,248,qs),
(458,168,o),
(372,60,o),
(295,60,qs)
);
},
{
closed = 1;
nodes = (
(542,294,l),
(548,361,o),
(638,437,o),
(701,437,qs),
(766,437,o),
(851,360,o),
(854,294,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 80 values pushed */
12 1 10 7 35 1 3 4 2 76 0 4 2 3 2 4 3 128 0 10 0 2 4 10 2 103 9 1 7 7 0 97 1 1 0 0 42 77 12 8 2 3 3 5 97 11 6 2 5 5 40 5 78 39 39 0 0 59 58 56 54 39 52 39 51 46 44 0 38 0 37 34 18 34 21 36 40 13 8 28
CALL[ ]	/* CallFunction */";
};
width = 979;
}
);
note = oe;
unicode = 339;
},
{
glyphname = p;
kernLeft = p;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,-220,l),
(153,83,l),
(178,38,o),
(273,-12,o),
(334,-12,qs),
(408,-12,o),
(519,55,o),
(580,173,o),
(580,247,qs),
(580,322,o),
(520,441,o),
(409,508,o),
(335,508,qs),
(271,508,o),
(180,455,o),
(153,414,q),
(145,496,l),
(69,496,l),
(69,-220,l)
);
},
{
closed = 1;
nodes = (
(274,61,o),
(197,110,o),
(155,195,o),
(155,248,qs),
(155,331,o),
(249,435,o),
(325,435,qs),
(403,435,o),
(495,329,o),
(495,248,qs),
(495,165,o),
(401,61,o),
(325,61,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
16 2 2 5 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 0 97 1 1 0 0 36 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 0 36 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 19 19 31 19 30 37 19 38 35 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 628;
}
);
note = p;
unicode = 112;
},
{
glyphname = thorn;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,-220,l),
(153,83,l),
(178,38,o),
(273,-12,o),
(334,-12,qs),
(408,-12,o),
(519,55,o),
(580,173,o),
(580,247,qs),
(580,322,o),
(520,441,o),
(409,508,o),
(335,508,qs),
(271,508,o),
(180,455,o),
(153,414,q),
(153,700,l),
(69,700,l),
(69,-220,l)
);
},
{
closed = 1;
nodes = (
(274,61,o),
(197,110,o),
(155,195,o),
(155,248,qs),
(155,331,o),
(249,435,o),
(325,435,qs),
(403,435,o),
(495,329,o),
(495,248,qs),
(495,165,o),
(401,61,o),
(325,61,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
16 2 2 5 4 1 76 0 0 0 33 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78 19 19 19 31 19 30 37 19 38 35 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 628;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = q;
kernLeft = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(476,-220,l),
(560,-220,l),
(560,496,l),
(484,496,l),
(476,413,l),
(450,458,o),
(355,508,o),
(295,508,qs),
(219,508,o),
(107,440,o),
(48,322,o),
(48,249,qs),
(48,176,o),
(108,57,o),
(220,-12,o),
(294,-12,qs),
(357,-12,o),
(449,41,o),
(476,82,q)
);
},
{
closed = 1;
nodes = (
(257,61,o),
(179,106,o),
(134,191,o),
(134,248,qs),
(134,304,o),
(178,389,o),
(255,435,o),
(303,435,qs),
(382,435,o),
(473,330,o),
(473,248,qs),
(473,167,o),
(383,61,o),
(303,61,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
18 13 2 5 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 1 97 2 1 1 1 42 77 6 1 5 5 0 97 0 0 0 40 77 0 3 3 38 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 2 36 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 0 97 0 0 0 40 77 0 3 3 38 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 19 19 32 19 31 38 17 19 38 33 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 628;
}
);
note = q;
unicode = 113;
},
{
glyphname = r;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = top;
pos = (182,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,0,l),
(153,250,ls),
(153,333,o),
(234,420,o),
(315,420,qs),
(338,420,l),
(338,508,l),
(271,508,o),
(176,451,o),
(152,401,q),
(145,496,l),
(69,496,l),
(69,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 3 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 2 2 0 97 1 1 0 0 36 77 0 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 36 77 0 2 2 1 97 0 1 1 42 77 0 3 3 34 3 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 33 19 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 363;
}
);
note = r;
unicode = 114;
},
{
glyphname = racute;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = top;
pos = (182,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (77,0);
ref = acutecomb;
}
);
width = 363;
}
);
note = racute;
unicode = 341;
},
{
glyphname = rcaron;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = top;
pos = (182,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (45,0);
ref = uni030C;
}
);
width = 363;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = uni0157;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,-238);
},
{
name = top;
pos = (182,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (67,0);
ref = uni0326;
}
);
width = 363;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = s;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (255,0);
},
{
name = top;
pos = (250,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(316,-12,o),
(402,27,o),
(449,96,o),
(449,140,qs),
(449,191,o),
(402,250,o),
(328,279,o),
(267,292,qs),
(209,305,o),
(150,340,o),
(150,368,qs),
(150,399,o),
(200,437,o),
(244,437,qs),
(290,437,o),
(345,394,o),
(350,356,q),
(433,356,l),
(425,428,o),
(324,508,o),
(245,508,qs),
(163,508,o),
(65,426,o),
(65,360,qs),
(65,300,o),
(161,239,o),
(239,222,qs),
(286,212,o),
(335,196,o),
(363,164,o),
(363,135,qs),
(363,102,o),
(311,59,o),
(260,59,qs),
(206,59,o),
(137,113,o),
(128,155,q),
(42,155,l),
(52,78,o),
(169,-12,o),
(259,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 42 77 0 1 1 5 97 6 1 5 5 40 5 78 0 0 0 40 0 39 34 18 43 34 18 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 500;
}
);
note = s;
unicode = 115;
},
{
glyphname = sacute;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (255,0);
},
{
name = top;
pos = (250,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (145,0);
ref = acutecomb;
}
);
width = 500;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = scaron;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (255,0);
},
{
name = top;
pos = (250,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (113,0);
ref = uni030C;
}
);
width = 500;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = scedilla;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (255,-259);
},
{
name = top;
pos = (250,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(288,-259,ls),
(342,-259,o),
(409,-205,o),
(409,-159,qs),
(409,-112,o),
(339,-62,o),
(280,-63,q),
(280,-11,l),
(357,-6,o),
(449,77,o),
(449,140,qs),
(449,191,o),
(402,250,o),
(328,279,o),
(267,292,qs),
(209,305,o),
(150,340,o),
(150,368,qs),
(150,399,o),
(200,437,o),
(244,437,qs),
(290,437,o),
(345,394,o),
(350,356,q),
(433,356,l),
(425,428,o),
(324,508,o),
(245,508,qs),
(163,508,o),
(65,426,o),
(65,360,qs),
(65,300,o),
(161,239,o),
(239,222,qs),
(286,212,o),
(335,196,o),
(363,164,o),
(363,135,qs),
(363,102,o),
(311,59,o),
(260,59,qs),
(206,59,o),
(137,113,o),
(128,155,q),
(42,155,l),
(51,86,o),
(148,-2,o),
(224,-10,q),
(224,-113,l),
(273,-113,ls),
(341,-113,o),
(341,-158,qs),
(341,-206,o),
(273,-206,qs),
(181,-206,l),
(181,-259,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
7 1 8 7 1 76 0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 99 0 6 6 4 97 0 4 4 42 77 0 3 3 7 97 0 7 7 40 7 78 55 53 17 27 34 18 43 34 20 34 32 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 500;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = uni0219;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (255,-238);
},
{
name = top;
pos = (250,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (206,0);
ref = uni0326;
}
);
width = 500;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = germandbls;
kernLeft = b;
kernRight = germandbls;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(522,-10,o),
(626,74,o),
(626,150,qs),
(626,212,o),
(557,283,o),
(489,307,qs),
(436,325,o),
(375,357,o),
(375,386,qs),
(375,405,o),
(399,428,o),
(425,445,qs),
(467,469,o),
(516,523,o),
(516,569,qs),
(516,645,o),
(393,732,o),
(302,732,qs),
(197,732,o),
(71,621,o),
(71,520,qs),
(71,0,l),
(154,0,l),
(154,512,ls),
(154,580,o),
(223,661,o),
(300,661,qs),
(358,661,o),
(432,612,o),
(432,562,qs),
(432,537,o),
(407,501,o),
(383,486,qs),
(340,458,ls),
(317,443,o),
(290,404,o),
(290,375,qs),
(290,326,o),
(369,270,o),
(438,246,qs),
(489,230,o),
(541,186,o),
(541,144,qs),
(541,101,o),
(486,56,o),
(440,56,qs),
(386,56,o),
(325,120,o),
(321,169,q),
(238,169,l),
(245,85,o),
(356,-10,o),
(441,-10,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 1 1 3 97 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 2 1 2 0 1 128 0 4 0 2 0 4 2 105 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 52 0 51 35 33 30 29 26 24 34 18 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = t;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = top;
pos = (194,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(342,0,l),
(342,72,l),
(289,72,ls),
(240,72,o),
(203,105,o),
(203,152,qs),
(203,425,l),
(342,425,l),
(342,496,l),
(203,496,l),
(203,615,l),
(119,615,l),
(119,496,l),
(33,496,l),
(33,425,l),
(119,425,l),
(119,152,ls),
(119,69,o),
(193,0,o),
(265,0,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 2 1 2 133 4 1 0 0 1 95 3 1 1 1 36 77 0 5 5 6 96 7 1 6 6 34 6 78 0 0 0 19 0 18 35 17 17 17 17 19 8 8 28
CALL[ ]	/* CallFunction */";
};
width = 387;
}
);
note = t;
unicode = 116;
},
{
glyphname = tcaron;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = top;
pos = (194,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (253,0);
ref = uni030C.alt;
}
);
width = 387;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = uni0163;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (238,-259);
},
{
name = top;
pos = (194,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(342,0,l),
(342,72,l),
(289,72,ls),
(240,72,o),
(203,105,o),
(203,152,qs),
(203,425,l),
(342,425,l),
(342,496,l),
(203,496,l),
(203,615,l),
(119,615,l),
(119,496,l),
(33,496,l),
(33,425,l),
(119,425,l),
(119,152,ls),
(119,88,o),
(163,19,o),
(207,7,q),
(207,-113,l),
(256,-113,ls),
(324,-113,o),
(324,-158,qs),
(324,-206,o),
(256,-206,qs),
(164,-206,l),
(164,-259,l),
(271,-259,ls),
(325,-259,o),
(392,-205,o),
(392,-159,qs),
(392,-112,o),
(322,-62,o),
(263,-63,q),
(263,0,l),
(265,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
16 1 10 9 1 76 0 6 5 6 133 0 0 0 3 2 0 3 105 0 2 0 1 2 1 99 8 1 4 4 5 95 7 1 5 5 36 77 0 9 9 10 95 0 10 10 34 10 78 36 35 34 32 17 17 17 17 21 34 33 36 17 11 8 31
CALL[ ]	/* CallFunction */";
};
width = 387;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = uni021B;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (238,-238);
},
{
name = top;
pos = (194,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (189,0);
ref = uni0326;
}
);
width = 387;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = u;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,496);
},
{
name = topright;
pos = (552,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(308,-12,o),
(398,42,o),
(422,89,q),
(427,0,l),
(503,0,l),
(503,496,l),
(419,496,l),
(419,239,ls),
(419,155,o),
(336,60,o),
(270,60,qs),
(142,60,o),
(142,215,qs),
(142,496,l),
(58,496,l),
(58,206,ls),
(58,98,o),
(161,-12,o),
(251,-12,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
2 1 0 0 36 77 0 1 1 3 97 5 4 2 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 36 77 0 3 3 34 77 0 1 1 4 97 5 1 4 4 40 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 18 0 17 17 19 34 19 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = u;
unicode = 117;
},
{
glyphname = uacute;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,747);
},
{
name = topright;
pos = (552,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (179,0);
ref = acutecomb;
}
);
width = 572;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ubreve;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,732);
},
{
name = topright;
pos = (552,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (143,0);
ref = uni0306;
}
);
width = 572;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = ucircumflex;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,733);
},
{
name = topright;
pos = (552,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (147,0);
ref = uni0302;
}
);
width = 572;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,720);
},
{
name = topright;
pos = (552,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (137,0);
ref = uni0308;
}
);
width = 572;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = ugrave;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,747);
},
{
name = topright;
pos = (552,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (179,0);
ref = gravecomb;
}
);
width = 572;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uhungarumlaut;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,698);
},
{
name = topright;
pos = (552,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (168,0);
ref = uni030B;
}
);
width = 572;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = umacron;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,695);
},
{
name = topright;
pos = (552,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (110,0);
ref = uni0304;
}
);
width = 572;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = uogonek;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,496);
},
{
name = topright;
pos = (552,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(308,-12,o),
(398,42,o),
(422,89,q),
(426,19,l),
(365,-8,o),
(313,-71,o),
(313,-108,qs),
(313,-155,o),
(381,-203,o),
(431,-203,qs),
(470,-203,o),
(506,-190,q),
(506,-134,l),
(472,-149,o),
(441,-149,qs),
(414,-149,o),
(381,-123,o),
(381,-100,qs),
(381,-59,o),
(445,-28,qs),
(503,0,l),
(503,496,l),
(419,496,l),
(419,239,ls),
(419,155,o),
(336,60,o),
(270,60,qs),
(142,60,o),
(142,215,qs),
(142,496,l),
(58,496,l),
(58,206,ls),
(58,98,o),
(161,-12,o),
(251,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
31 1 1 0 30 13 2 5 1 21 1 3 5 22 1 4 3 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
2 1 0 0 36 77 0 1 1 5 97 6 1 5 5 40 77 0 3 3 4 98 0 4 4 38 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 0 4 3 4 102 2 1 0 0 36 77 0 1 1 5 97 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 34 0 33 35 38 19 34 19 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = uring;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,763);
},
{
name = topright;
pos = (552,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (179,0);
ref = uni030A;
}
);
width = 572;
}
);
note = uring;
unicode = 367;
},
{
glyphname = utilde;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,705);
},
{
name = topright;
pos = (552,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (133,0);
ref = tildecomb;
}
);
width = 572;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = v;
kernLeft = v;
kernRight = v;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(309,0,l),
(497,496,l),
(411,496,l),
(261,81,l),
(112,496,l),
(24,496,l),
(212,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 2 0 1 76 1 1 0 0 36 77 0 2 2 34 2 78 17 18 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 521;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (377,0);
},
{
name = top;
pos = (377,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(255,0,l),
(377,409,l),
(499,0,l),
(585,0,l),
(730,496,l),
(645,496,l),
(541,107,l),
(424,496,l),
(329,496,l),
(213,107,l),
(108,496,l),
(24,496,l),
(169,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
10 5 2 3 3 0 1 76 2 1 2 0 0 36 77 4 1 3 3 34 3 78 18 17 18 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 754;
}
);
note = w;
unicode = 119;
},
{
glyphname = wacute;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (377,0);
},
{
name = top;
pos = (377,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (272,0);
ref = acutecomb;
}
);
width = 754;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = wcircumflex;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (377,0);
},
{
name = top;
pos = (377,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (240,0);
ref = uni0302;
}
);
width = 754;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = wdieresis;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (377,0);
},
{
name = top;
pos = (377,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (230,0);
ref = uni0308;
}
);
width = 754;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = wgrave;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (377,0);
},
{
name = top;
pos = (377,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (272,0);
ref = gravecomb;
}
);
width = 754;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = x;
kernLeft = x;
kernRight = x;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(110,0,l),
(249,205,l),
(389,0,l),
(479,0,l),
(307,248,l),
(479,496,l),
(389,496,l),
(249,291,l),
(110,496,l),
(19,496,l),
(191,248,l),
(19,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 36 77 3 1 2 2 34 2 78 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 498;
}
);
note = x;
unicode = 120;
},
{
glyphname = y;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (278,0);
},
{
name = top;
pos = (278,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(211,-220,l),
(536,496,l),
(449,496,l),
(275,110,l),
(111,496,l),
(20,496,l),
(233,20,l),
(123,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
3 1 2 0 1 76 1 1 0 0 36 77 0 2 2 38 2 78 17 18 17 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = y;
unicode = 121;
},
{
glyphname = yacute;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (278,0);
},
{
name = top;
pos = (278,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (173,0);
ref = acutecomb;
}
);
width = 556;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = ycircumflex;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (278,0);
},
{
name = top;
pos = (278,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (141,0);
ref = uni0302;
}
);
width = 556;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = ydieresis;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (278,0);
},
{
name = top;
pos = (278,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (131,0);
ref = uni0308;
}
);
width = 556;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = ygrave;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (278,0);
},
{
name = top;
pos = (278,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (173,0);
ref = gravecomb;
}
);
width = 556;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = uni1EF9;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (278,0);
},
{
name = top;
pos = (278,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (127,0);
ref = tildecomb;
}
);
width = 556;
}
);
note = uni1EF9;
unicode = 7929;
},
{
glyphname = z;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (226,0);
},
{
name = top;
pos = (226,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(410,0,l),
(410,70,l),
(129,70,l),
(405,427,l),
(405,496,l),
(40,496,l),
(40,426,l),
(311,426,l),
(35,69,l),
(35,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 0 1 0 1 3 2 2 76 0 0 0 1 95 0 1 1 36 77 0 2 2 3 95 0 3 3 34 3 78 17 18 17 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 452;
}
);
note = z;
unicode = 122;
},
{
glyphname = zacute;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (226,0);
},
{
name = top;
pos = (226,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (121,0);
ref = acutecomb;
}
);
width = 452;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = zcaron;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (226,0);
},
{
name = top;
pos = (226,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (89,0);
ref = uni030C;
}
);
width = 452;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = zdotaccent;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (226,0);
},
{
name = top;
pos = (226,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (168,0);
ref = uni0307;
}
);
width = 452;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = uniA78C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,339,l),
(156,700,l),
(65,700,l),
(80,339,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 221;
}
);
note = uniA78C;
unicode = 42892;
},
{
glyphname = fi;
layers = (
{
anchors = (
{
name = caret_1;
pos = (284,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,0,l),
(180,425,l),
(302,425,l),
(302,496,l),
(180,496,l),
(180,560,ls),
(180,597,o),
(212,628,o),
(250,628,qs),
(287,628,l),
(287,700,l),
(237,700,ls),
(167,700,o),
(96,633,o),
(96,562,qs),
(96,496,l),
(21,496,l),
(21,425,l),
(96,425,l),
(96,0,l)
);
},
{
closed = 1;
nodes = (
(488,0,l),
(488,496,l),
(404,496,l),
(404,0,l)
);
},
{
closed = 1;
nodes = (
(472,591,o),
(505,624,o),
(505,649,qs),
(505,673,o),
(472,705,o),
(447,705,qs),
(423,705,o),
(389,673,o),
(389,649,qs),
(389,624,o),
(423,591,o),
(447,591,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 3 3 2 97 9 1 2 2 33 77 11 1 10 10 2 97 9 1 2 2 33 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 3 3 2 97 0 2 2 33 77 11 1 10 10 9 97 0 9 9 33 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
24 24 24 35 24 34 30 28 17 17 17 17 19 33 35 17 16 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = fi;
unicode = 64257;
},
{
glyphname = fl;
layers = (
{
anchors = (
{
name = caret_1;
pos = (278,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,0,l),
(180,425,l),
(302,425,l),
(302,496,l),
(180,496,l),
(180,560,ls),
(180,597,o),
(212,628,o),
(250,628,qs),
(287,628,l),
(287,700,l),
(237,700,ls),
(167,700,o),
(96,633,o),
(96,562,qs),
(96,496,l),
(21,496,l),
(21,425,l),
(96,425,l),
(96,0,l)
);
},
{
closed = 1;
nodes = (
(486,0,l),
(486,700,l),
(402,700,l),
(402,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 2 97 7 1 2 2 33 77 5 1 0 0 1 95 4 1 1 1 36 77 8 1 6 6 34 6 78 17 17 17 17 19 33 35 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = fl;
unicode = 64258;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,347,o),
(268,385,o),
(286,417,q),
(294,385,o),
(339,354,o),
(371,354,qs),
(378,354,l),
(378,406,l),
(340,406,o),
(340,445,qs),
(340,568,ls),
(340,632,o),
(268,710,o),
(194,710,qs),
(136,710,o),
(48,647,o),
(44,593,q),
(104,593,l),
(111,625,o),
(159,660,o),
(194,660,qs),
(234,660,o),
(281,614,o),
(281,564,q),
(188,564,ls),
(122,564,o),
(37,510,o),
(37,454,qs),
(37,403,o),
(109,347,o),
(165,347,qs)
);
},
{
closed = 1;
nodes = (
(141,396,o),
(98,426,o),
(98,456,qs),
(98,518,o),
(193,518,qs),
(281,518,l),
(281,469,o),
(224,396,o),
(174,396,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
27 1 4 7 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 10 8 2 4 4 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 9 6 2 5 5 58 77 10 1 8 8 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 10 8 2 4 4 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 9 6 2 5 5 58 77 10 1 8 8 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 10 8 2 4 4 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 9 6 2 5 5 58 77 10 1 8 8 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 0 5 5 58 77 10 1 8 8 6 97 9 1 6 6 58 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
31 31 0 0 31 39 31 38 35 33 0 30 0 29 33 20 34 18 34 36 11 10 28
CALL[ ]	/* CallFunction */";
};
width = 407;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(267,349,o),
(351,394,o),
(399,477,o),
(399,531,qs),
(399,617,o),
(295,712,o),
(217,712,qs),
(163,712,o),
(80,666,o),
(35,583,o),
(35,531,qs),
(35,474,o),
(84,392,o),
(167,349,o),
(216,349,qs)
);
},
{
closed = 1;
nodes = (
(167,404,o),
(103,471,o),
(103,531,qs),
(103,591,o),
(168,659,o),
(216,659,qs),
(265,659,o),
(331,591,o),
(331,531,qs),
(331,471,o),
(264,404,o),
(216,404,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 59 77 5 1 3 3 1 97 4 1 1 1 58 1 78 15 15 0 0 15 26 15 25 21 19 0 14 0 13 38 6 10 23
CALL[ ]	/* CallFunction */";
};
width = 433;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = uni042F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(35,0,l),
(139,0,l),
(319,310,l),
(435,310,l),
(435,0,l),
(519,0,l),
(519,700,l),
(312,700,ls),
(200,700,o),
(78,602,o),
(78,505,qs),
(78,354,o),
(236,326,q)
);
},
{
closed = 1;
nodes = (
(232,381,o),
(164,441,o),
(164,505,qs),
(164,570,o),
(232,630,o),
(314,630,qs),
(435,630,l),
(435,381,l),
(314,381,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
12 1 2 5 1 76 3 1 1 2 1 134 0 0 0 4 5 0 4 103 6 1 5 2 2 5 87 6 1 5 5 2 95 0 2 5 2 79 13 13 13 21 13 20 35 17 17 17 35 7 6 27
CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = uni042F;
unicode = (1071,1103);
},
{
glyphname = uni0394;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(665,0,l),
(665,65,l),
(382,700,l),
(312,700,l),
(30,65,l),
(30,0,l)
);
},
{
closed = 1;
nodes = (
(347,604,l),
(580,65,l),
(115,65,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
7 1 2 0 1 76 3 0 2 2 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 23 77 3 1 2 2 1 95 0 1 1 24 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 2 0 133 3 1 2 2 1 95 0 1 1 24 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
6 6 6 8 6 8 18 17 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 695;
}
);
note = uni0394;
unicode = 916;
},
{
glyphname = Pi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,0,l),
(209,430,l),
(437,430,l),
(437,0,l),
(521,0,l),
(521,430,l),
(600,430,l),
(600,496,l),
(46,496,l),
(46,430,l),
(125,430,l),
(125,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 1 4 2 2 0 3 1 0 103 5 1 3 3 24 3 78 17 17 17 17 17 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 646;
}
);
note = Pi;
unicode = 928;
},
{
glyphname = uni03A9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(331,0,l),
(331,69,l),
(238,93,o),
(127,247,o),
(127,352,qs),
(127,424,o),
(186,554,o),
(307,636,o),
(394,636,qs),
(463,636,o),
(585,572,o),
(662,444,o),
(662,352,qs),
(662,250,o),
(555,94,o),
(458,69,q),
(458,0,l),
(732,0,l),
(732,66,l),
(590,66,l),
(666,107,o),
(747,263,o),
(747,357,qs),
(747,459,o),
(655,621,o),
(494,712,o),
(394,712,qs),
(295,712,o),
(135,621,o),
(43,459,o),
(43,357,qs),
(43,262,o),
(124,107,o),
(199,66,q),
(56,66,l),
(56,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
33 19 2 0 4 1 76 0 4 4 1 97 0 1 1 23 77 2 1 0 0 3 95 5 1 3 3 24 3 78 23 39 17 22 38 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 789;
}
);
note = uni03A9;
unicode = 937;
},
{
glyphname = uni03BC;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,-220,l),
(153,20,l),
(196,-12,o),
(261,-12,qs),
(317,-12,o),
(409,42,o),
(433,88,q),
(438,0,l),
(514,0,l),
(514,496,l),
(430,496,l),
(430,239,ls),
(430,155,o),
(347,60,o),
(281,60,qs),
(153,60,o),
(153,215,qs),
(153,496,l),
(69,496,l),
(69,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
12 1 1 0 17 1 3 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
2 1 0 1 0 133 0 3 3 24 77 0 1 1 4 97 0 4 4 24 77 0 5 5 25 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
2 1 0 1 0 133 0 1 0 4 5 1 4 105 0 3 3 24 77 0 5 5 25 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 35 17 19 34 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = uni03BC;
unicode = 956;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(438,-12,o),
(564,183,o),
(564,350,qs),
(564,517,o),
(438,712,o),
(301,712,qs),
(165,712,o),
(37,514,o),
(37,350,qs),
(37,186,o),
(165,-12,o),
(301,-12,qs)
);
},
{
closed = 1;
nodes = (
(212,63,o),
(123,214,o),
(123,350,qs),
(123,486,o),
(212,637,o),
(301,637,qs),
(390,637,o),
(478,487,o),
(478,350,qs),
(478,213,o),
(390,63,o),
(301,63,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 39 77 5 1 3 3 1 97 4 1 1 1 40 1 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(563,0,l),
(563,69,l),
(385,69,l),
(385,700,l),
(341,700,l),
(92,608,l),
(92,536,l),
(304,610,l),
(304,69,l),
(89,69,l),
(89,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 1 33 77 2 1 0 0 3 96 0 3 3 34 3 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(73,0,l),
(535,0,l),
(535,70,l),
(172,70,l),
(374,278,ls),
(423,328,o),
(469,380,o),
(511,459,o),
(511,503,qs),
(511,604,o),
(398,712,o),
(299,712,qs),
(233,712,o),
(133,658,o),
(78,558,o),
(78,492,q),
(159,492,l),
(159,557,o),
(234,640,o),
(298,640,qs),
(363,640,o),
(427,565,o),
(427,500,qs),
(427,470,o),
(394,410,o),
(346,356,o),
(295,303,qs),
(73,73,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
27 1 3 1 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 39 77 0 3 3 4 95 0 4 4 34 4 78 17 23 35 18 38 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(412,-12,o),
(544,108,o),
(544,213,qs),
(544,278,o),
(484,372,o),
(386,420,o),
(329,420,qs),
(312,420,o),
(303,419,q),
(521,634,l),
(521,700,l),
(85,700,l),
(85,631,l),
(418,631,l),
(177,395,l),
(229,336,l),
(265,357,o),
(304,357,qs),
(377,357,o),
(463,281,o),
(463,212,qs),
(463,144,o),
(378,60,o),
(303,60,qs),
(235,60,o),
(150,131,o),
(137,190,q),
(56,190,l),
(66,96,o),
(199,-12,o),
(303,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
20 1 3 4 15 1 2 5 14 1 0 2 3 76 0 0 2 1 2 0 1 128 0 5 0 2 0 5 2 105 0 3 3 4 95 0 4 4 33 77 0 1 1 6 97 7 1 6 6 40 6 78 0 0 0 30 0 29 35 17 19 36 34 18 8 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(469,0,l),
(469,150,l),
(571,150,l),
(571,224,l),
(469,224,l),
(469,423,l),
(390,423,l),
(390,224,l),
(131,224,l),
(368,700,l),
(285,700,l),
(42,215,l),
(42,150,l),
(386,150,l),
(386,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
2 1 0 2 1 76 0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 33 77 0 6 6 34 6 78 17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(378,-12,o),
(488,51,o),
(549,165,o),
(549,237,qs),
(549,306,o),
(520,362,qs),
(490,418,o),
(387,481,o),
(319,481,qs),
(266,481,o),
(180,444,o),
(155,414,q),
(196,627,l),
(498,627,l),
(498,700,l),
(131,700,l),
(71,316,l),
(151,316,l),
(170,359,o),
(254,410,o),
(310,410,qs),
(380,410,o),
(468,314,o),
(468,236,qs),
(468,159,o),
(380,60,o),
(307,60,qs),
(241,60,o),
(152,130,o),
(140,189,q),
(58,189,l),
(70,97,o),
(205,-12,o),
(306,-12,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 5 5 4 95 0 4 4 33 77 0 2 2 6 97 0 6 6 36 77 0 1 1 7 97 8 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 33 77 0 1 1 7 97 8 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 0 32 35 17 17 18 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(389,-12,o),
(439,22,qs),
(490,55,o),
(546,163,o),
(546,223,qs),
(546,290,o),
(515,341,qs),
(484,392,o),
(385,448,o),
(328,448,qs),
(261,448,o),
(164,390,o),
(141,341,q),
(144,491,o),
(240,639,o),
(316,639,qs),
(368,639,o),
(439,577,o),
(449,520,q),
(526,520,l),
(518,575,o),
(494,616,qs),
(467,661,o),
(377,712,o),
(317,712,qs),
(236,712,o),
(180,662,qs),
(122,613,o),
(62,438,o),
(62,322,qs),
(62,257,o),
(90,140,o),
(118,93,qs),
(184,-12,o),
(318,-12,qs)
);
},
{
closed = 1;
nodes = (
(247,62,o),
(164,151,o),
(164,218,qs),
(164,260,o),
(202,332,o),
(270,375,o),
(313,375,qs),
(377,375,o),
(461,289,o),
(461,219,qs),
(461,153,o),
(381,62,o),
(313,62,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
21 1 6 5 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 39 77 8 1 6 6 4 97 7 1 4 4 40 4 78 35 35 0 0 35 47 35 46 41 39 0 34 0 33 36 34 20 40 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(253,0,l),
(547,637,l),
(547,700,l),
(55,700,l),
(55,628,l),
(461,628,l),
(164,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 0 0 1 95 0 1 1 33 77 0 2 2 34 2 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(365,-12,o),
(472,39,o),
(535,130,o),
(535,190,qs),
(535,254,o),
(462,356,o),
(402,373,q),
(456,391,o),
(518,476,o),
(518,526,qs),
(518,581,o),
(461,665,o),
(361,712,o),
(300,712,qs),
(240,712,o),
(141,668,o),
(83,583,o),
(83,526,qs),
(83,475,o),
(144,391,o),
(198,373,q),
(138,356,o),
(65,254,o),
(65,190,qs),
(65,130,o),
(128,39,o),
(235,-12,o),
(300,-12,qs)
);
},
{
closed = 1;
nodes = (
(230,62,o),
(149,134,o),
(149,195,qs),
(149,261,o),
(234,333,o),
(300,333,qs),
(366,333,o),
(451,261,o),
(451,195,qs),
(451,134,o),
(370,62,o),
(300,62,qs)
);
},
{
closed = 1;
nodes = (
(243,403,o),
(168,468,o),
(168,521,qs),
(168,578,o),
(243,640,o),
(300,640,qs),
(358,640,o),
(433,578,o),
(433,521,qs),
(433,469,o),
(357,403,o),
(300,403,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
20 6 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 39 77 7 1 3 3 1 97 6 1 1 1 40 1 78 40 40 28 28 0 0 40 51 40 50 46 44 28 39 28 38 34 32 0 27 0 26 44 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(366,-12,o),
(424,38,qs),
(481,88,o),
(542,262,o),
(542,378,qs),
(542,516,o),
(485,607,qs),
(455,657,o),
(355,712,o),
(286,712,qs),
(214,712,o),
(164,678,qs),
(113,645,o),
(58,538,o),
(58,477,qs),
(58,408,o),
(89,359,qs),
(120,308,o),
(218,252,o),
(275,252,qs),
(343,252,o),
(440,310,o),
(463,359,q),
(459,208,o),
(363,61,o),
(288,61,qs),
(235,61,o),
(165,123,o),
(155,180,q),
(78,180,l),
(84,129,o),
(110,84,qs),
(136,39,o),
(227,-12,o),
(287,-12,qs)
);
},
{
closed = 1;
nodes = (
(226,325,o),
(143,411,o),
(143,481,qs),
(143,548,o),
(224,638,o),
(291,638,qs),
(333,638,o),
(401,598,o),
(440,527,o),
(440,482,qs),
(440,441,o),
(402,369,o),
(334,325,o),
(291,325,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
11 1 6 5 1 76 0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 39 77 0 1 1 4 97 7 1 4 4 40 4 78 35 35 0 0 35 48 35 47 43 41 0 34 0 33 40 36 34 20 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = nine;
unicode = 57;
},
{
glyphname = uni24EA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(307,46,o),
(168,128,o),
(86,267,o),
(86,350,qs),
(86,433,o),
(168,572,o),
(307,654,o),
(389,654,qs),
(472,654,o),
(611,572,o),
(693,433,o),
(693,350,qs),
(693,267,o),
(611,128,o),
(472,46,o),
(389,46,qs)
);
},
{
closed = 1;
nodes = (
(460,165,o),
(492,215,qs),
(524,265,o),
(524,350,qs),
(524,435,o),
(492,485,qs),
(460,535,o),
(390,535,qs),
(320,535,o),
(288,484,qs),
(255,435,o),
(255,350,qs),
(255,266,o),
(288,216,qs),
(320,165,o),
(390,165,qs)
);
},
{
closed = 1;
nodes = (
(356,223,o),
(338,256,qs),
(321,292,o),
(321,350,qs),
(321,408,o),
(338,444,qs),
(356,477,o),
(390,477,qs),
(425,477,o),
(441,444,qs),
(458,408,o),
(458,350,qs),
(458,292,o),
(441,256,qs),
(425,223,o),
(390,223,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
0 4 0 6 7 4 6 105 11 1 7 10 1 5 3 7 5 105 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 48 48 32 32 16 16 0 0 48 63 48 62 56 54 32 47 32 46 40 38 16 31 16 30 24 22 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni24EA;
unicode = 9450;
},
{
glyphname = uni2780;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(307,46,o),
(168,128,o),
(86,267,o),
(86,350,qs),
(86,433,o),
(168,572,o),
(307,654,o),
(389,654,qs),
(472,654,o),
(611,572,o),
(693,433,o),
(693,350,qs),
(693,267,o),
(611,128,o),
(472,46,o),
(389,46,qs)
);
},
{
closed = 1;
nodes = (
(515,176,l),
(515,231,l),
(434,231,l),
(434,533,l),
(399,533,l),
(279,489,l),
(279,439,l),
(372,460,l),
(372,231,l),
(276,231,l),
(276,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
36 35 34 3 4 5 1 76 0 5 2 4 2 5 4 128 6 1 4 0 7 3 4 7 104 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 16 16 0 0 42 41 40 39 38 37 33 32 16 31 16 30 24 22 0 15 0 14 38 10 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2780;
unicode = 10112;
},
{
glyphname = uni2781;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(653,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(653,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(306,46,o),
(166,128,o),
(85,268,o),
(85,350,qs),
(85,432,o),
(166,572,o),
(306,654,o),
(389,654,qs),
(471,654,o),
(610,572,o),
(692,433,o),
(692,350,qs),
(692,267,o),
(610,128,o),
(471,46,o),
(389,46,qs)
);
},
{
closed = 1;
nodes = (
(514,176,l),
(514,231,l),
(355,231,l),
(431,309,ls),
(465,341,o),
(506,399,o),
(506,432,qs),
(506,478,o),
(447,540,o),
(390,540,qs),
(335,540,o),
(269,477,o),
(268,421,q),
(332,421,l),
(332,449,o),
(361,484,o),
(389,484,qs),
(413,484,o),
(442,455,o),
(442,431,qs),
(442,416,o),
(421,382,o),
(390,349,o),
(377,336,qs),
(268,223,l),
(268,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 81 values pushed */
32 1 8 7 1 76 0 5 4 7 4 5 7 128 0 6 0 4 5 6 4 105 0 7 0 8 3 7 8 103 0 2 2 0 97 0 0 0 39 77 10 1 3 3 1 97 9 1 1 1 40 1 78 16 16 0 0 57 56 55 54 48 46 44 43 41 39 16 31 16 30 24 22 0 15 0 14 38 11 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2781;
unicode = 10113;
},
{
glyphname = uni2782;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(306,46,o),
(167,128,o),
(85,267,o),
(85,350,qs),
(85,433,o),
(167,572,o),
(306,654,o),
(389,654,qs),
(471,654,o),
(610,572,o),
(692,433,o),
(692,350,qs),
(692,267,o),
(610,128,o),
(471,46,o),
(389,46,qs)
);
},
{
closed = 1;
nodes = (
(450,158,o),
(518,227,o),
(518,277,qs),
(518,320,o),
(466,382,o),
(415,386,q),
(506,468,l),
(506,522,l),
(272,522,l),
(272,467,l),
(425,467,l),
(317,368,l),
(353,326,l),
(372,337,o),
(391,337,qs),
(418,337,o),
(455,306,o),
(455,277,qs),
(455,249,o),
(422,214,o),
(390,214,qs),
(362,214,o),
(325,248,o),
(325,275,q),
(261,275,l),
(263,218,o),
(334,158,o),
(390,158,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
52 1 7 8 53 47 2 6 7 46 1 4 6 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 6 7 4 7 6 114 0 4 5 7 4 5 126 0 8 0 7 6 8 7 103 0 5 12 1 9 3 5 9 105 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 98 10 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 6 7 4 7 6 4 128 0 4 5 7 4 5 126 0 8 0 7 6 8 7 103 0 5 12 1 9 3 5 9 105 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 98 10 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
32 32 16 16 0 0 32 59 32 58 51 50 49 48 45 43 39 37 35 34 16 31 16 30 24 22 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2782;
unicode = 10114;
},
{
glyphname = uni2783;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(470,176,l),
(470,242,l),
(512,242,l),
(512,299,l),
(470,299,l),
(470,392,l),
(409,392,l),
(409,299,l),
(310,299,l),
(426,533,l),
(362,533,l),
(241,294,l),
(241,242,l),
(405,242,l),
(405,176,l)
);
},
{
closed = 1;
nodes = (
(306,46,o),
(167,128,o),
(85,267,o),
(85,350,qs),
(85,433,o),
(167,572,o),
(306,654,o),
(389,654,qs),
(471,654,o),
(610,572,o),
(692,433,o),
(692,350,qs),
(692,267,o),
(610,128,o),
(471,46,o),
(389,46,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
18 1 2 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 3 9 5 9 3 5 128 0 5 4 4 5 112 0 8 2 10 2 8 114 6 1 4 7 1 2 8 4 2 104 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 3 9 5 9 3 5 128 0 5 4 9 5 4 126 0 8 2 10 2 8 114 6 1 4 7 1 2 8 4 2 104 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 3 9 5 9 3 5 128 0 5 4 9 5 4 126 0 8 2 10 2 8 10 128 6 1 4 7 1 2 8 4 2 104 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
31 31 0 0 31 46 31 45 39 37 30 29 28 27 26 25 24 23 22 21 20 19 17 16 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2783;
unicode = 10115;
},
{
glyphname = uni2784;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(306,46,o),
(167,128,o),
(85,267,o),
(85,350,qs),
(85,433,o),
(167,572,o),
(306,654,o),
(389,654,qs),
(472,654,o),
(611,572,o),
(693,433,o),
(693,350,qs),
(693,267,o),
(611,128,o),
(472,46,o),
(389,46,qs)
);
},
{
closed = 1;
nodes = (
(449,160,o),
(520,232,o),
(520,290,qs),
(520,343,o),
(459,413,o),
(404,413,qs),
(383,413,o),
(343,398,o),
(330,384,q),
(347,467,l),
(496,467,l),
(496,524,l),
(297,524,l),
(267,320,l),
(330,320,l),
(338,338,o),
(373,359,o),
(394,359,qs),
(423,359,o),
(457,320,o),
(457,289,qs),
(457,259,o),
(421,216,o),
(393,216,qs),
(367,216,o),
(331,243,o),
(326,267,q),
(262,267,l),
(264,220,o),
(338,160,o),
(393,160,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
53 1 6 10 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
0 7 6 4 9 7 114 0 4 5 6 4 5 126 0 8 0 9 10 8 9 103 0 10 0 6 7 10 6 105 0 5 14 1 11 3 5 11 105 0 2 2 0 97 0 0 0 39 77 13 1 3 3 1 98 12 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 63 values pushed */
0 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 8 0 9 10 8 9 103 0 10 0 6 7 10 6 105 0 5 14 1 11 3 5 11 105 0 2 2 0 97 0 0 0 39 77 13 1 3 3 1 98 12 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 38 values pushed */
32 32 16 16 0 0 32 62 32 61 57 55 52 51 50 49 48 47 45 43 39 37 35 34 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2784;
unicode = 10116;
},
{
glyphname = uni2785;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(307,46,o),
(168,128,o),
(86,267,o),
(86,350,qs),
(86,433,o),
(168,572,o),
(307,654,o),
(389,654,qs),
(472,654,o),
(611,572,o),
(693,433,o),
(693,350,qs),
(693,267,o),
(611,128,o),
(472,46,o),
(389,46,qs)
);
},
{
closed = 1;
nodes = (
(365,221,o),
(330,258,o),
(330,285,qs),
(330,311,o),
(366,347,o),
(391,347,qs),
(418,347,o),
(452,311,o),
(452,284,qs),
(452,256,o),
(416,221,o),
(392,221,qs)
);
},
{
closed = 1;
nodes = (
(448,165,o),
(514,237,o),
(514,286,qs),
(514,335,o),
(453,402,o),
(406,402,qs),
(379,402,o),
(333,375,o),
(322,354,q),
(322,406,o),
(354,481,o),
(393,481,qs),
(438,481,o),
(447,432,q),
(507,432,l),
(505,473,o),
(444,535,o),
(393,535,qs),
(324,535,o),
(258,420,o),
(258,338,qs),
(258,265,o),
(324,165,o),
(395,165,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 103 values pushed */
58 1 4 9 1 76 0 7 8 9 8 7 9 128 0 6 0 8 7 6 8 105 0 9 0 4 5 9 4 105 13 1 5 14 1 10 3 5 10 105 0 2 2 0 97 0 0 0 39 77 12 1 3 3 1 97 11 1 1 1 40 1 78 44 44 32 32 16 16 0 0 44 67 44 66 62 60 56 54 53 52 50 48 32 43 32 42 38 36 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2785;
unicode = 10117;
},
{
glyphname = uni2786;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(380,167,l),
(523,478,l),
(523,524,l),
(261,524,l),
(261,469,l),
(454,469,l),
(312,167,l)
);
},
{
closed = 1;
nodes = (
(307,46,o),
(168,128,o),
(86,267,o),
(86,350,qs),
(86,433,o),
(168,572,o),
(307,654,o),
(389,654,qs),
(472,654,o),
(611,572,o),
(693,433,o),
(693,350,qs),
(693,267,o),
(611,128,o),
(472,46,o),
(389,46,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
20 1 2 3 1 76 0 4 2 6 2 4 6 128 0 3 0 2 4 3 2 103 0 5 5 0 97 0 0 0 39 77 8 1 6 6 1 97 7 1 1 1 40 1 78 23 23 0 0 23 38 23 37 31 29 22 21 19 18 17 16 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2786;
unicode = 10118;
},
{
glyphname = uni2787;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(125,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(125,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(360,220,o),
(329,249,o),
(329,276,qs),
(329,306,o),
(363,334,o),
(390,334,qs),
(417,334,o),
(450,305,o),
(450,276,qs),
(450,249,o),
(417,220,o),
(390,220,qs)
);
},
{
closed = 1;
nodes = (
(307,46,o),
(168,128,o),
(86,268,o),
(86,350,qs),
(86,432,o),
(168,572,o),
(307,654,o),
(389,654,qs),
(472,654,o),
(612,572,o),
(693,432,o),
(693,350,qs),
(693,268,o),
(612,128,o),
(472,46,o),
(389,46,qs)
);
},
{
closed = 1;
nodes = (
(441,165,o),
(514,221,o),
(514,271,qs),
(514,303,o),
(483,353,o),
(455,363,q),
(481,375,o),
(506,417,o),
(506,439,qs),
(506,482,o),
(440,535,o),
(389,535,qs),
(337,535,o),
(273,483,o),
(273,439,qs),
(273,387,o),
(324,363,q),
(296,354,o),
(264,302,o),
(264,271,qs),
(264,222,o),
(338,165,o),
(389,165,qs)
);
},
{
closed = 1;
nodes = (
(365,383,o),
(338,410,o),
(338,432,qs),
(338,482,o),
(389,482,qs),
(413,482,o),
(441,456,o),
(441,432,qs),
(441,411,o),
(416,383,o),
(389,383,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 99 values pushed */
60 49 2 2 9 1 76 0 6 0 8 9 6 8 105 14 1 9 0 2 3 9 2 105 11 1 3 13 1 7 5 3 7 105 0 4 4 0 97 0 0 0 39 77 12 1 5 5 1 97 10 1 1 1 40 1 78 67 67 44 44 28 28 16 16 0 0 67 77 67 76 73 71 44 66 44 65 55 53 28 43 28 42 36 34 16 27 16 26 22 20 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2787;
unicode = 10119;
},
{
glyphname = uni2788;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(306,46,o),
(167,128,o),
(85,267,o),
(85,350,qs),
(85,433,o),
(167,572,o),
(306,654,o),
(389,654,qs),
(471,654,o),
(610,572,o),
(692,433,o),
(692,350,qs),
(692,267,o),
(610,128,o),
(471,46,o),
(389,46,qs)
);
},
{
closed = 1;
nodes = (
(454,165,o),
(521,279,o),
(521,362,qs),
(521,432,o),
(456,535,o),
(383,535,qs),
(331,535,o),
(264,463,o),
(264,414,qs),
(264,364,o),
(327,298,o),
(372,298,qs),
(401,298,o),
(445,326,o),
(457,346,q),
(456,294,o),
(424,219,o),
(386,219,qs),
(341,219,o),
(331,268,q),
(271,268,l),
(276,222,o),
(336,165,o),
(385,165,qs)
);
},
{
closed = 1;
nodes = (
(360,353,o),
(327,388,o),
(327,416,qs),
(327,443,o),
(360,479,o),
(387,479,qs),
(414,479,o),
(448,443,o),
(448,415,qs),
(448,389,o),
(414,353,o),
(388,353,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 103 values pushed */
40 1 6 10 1 76 0 4 6 5 6 4 5 128 0 7 0 9 10 7 9 105 14 1 10 0 6 4 10 6 105 0 5 13 1 8 3 5 8 105 0 2 2 0 97 0 0 0 39 77 12 1 3 3 1 98 11 1 1 1 40 1 78 56 56 32 32 16 16 0 0 56 67 56 66 62 60 32 55 32 54 50 48 44 42 38 36 35 34 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2788;
unicode = 10120;
},
{
glyphname = uni278A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(275,231,l),
(371,231,l),
(371,460,l),
(278,439,l),
(278,489,l),
(399,533,l),
(433,533,l),
(433,231,l),
(515,231,l),
(515,176,l),
(275,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
23 22 21 3 2 3 1 76 4 1 2 3 5 3 2 5 128 0 3 3 0 97 0 0 0 39 77 7 1 5 5 1 97 6 1 1 1 40 1 78 16 16 0 0 16 26 16 26 25 24 20 19 18 17 0 15 0 14 38 8 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278A;
unicode = 10122;
},
{
glyphname = uni278B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(268,223,l),
(377,336,ls),
(390,349,o),
(421,382,o),
(442,416,o),
(442,431,qs),
(442,455,o),
(413,484,o),
(389,484,qs),
(361,484,o),
(332,449,o),
(332,421,q),
(268,421,l),
(269,477,o),
(335,540,o),
(390,540,qs),
(447,540,o),
(506,478,o),
(506,432,qs),
(506,399,o),
(465,341,o),
(431,309,qs),
(355,231,l),
(514,231,l),
(514,176,l),
(268,176,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
40 1 6 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 5 2 5 4 2 128 0 3 3 0 97 0 0 0 39 77 0 2 2 5 97 0 5 5 36 77 8 1 6 6 1 98 7 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 5 2 5 4 2 128 0 5 0 2 6 5 2 103 0 3 3 0 97 0 0 0 39 77 8 1 6 6 1 98 7 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
16 16 0 0 16 41 16 41 33 31 29 28 26 24 18 17 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278B;
unicode = 10123;
},
{
glyphname = uni278C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(334,158,o),
(263,218,o),
(261,275,q),
(325,275,l),
(325,248,o),
(362,214,o),
(390,214,qs),
(422,214,o),
(455,249,o),
(455,277,qs),
(455,306,o),
(418,337,o),
(391,337,qs),
(372,337,o),
(353,326,q),
(317,368,l),
(425,467,l),
(272,467,l),
(272,522,l),
(506,522,l),
(506,468,l),
(415,386,l),
(466,382,o),
(518,320,o),
(518,277,qs),
(518,227,o),
(450,158,o),
(390,158,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 80 values pushed */
22 1 3 2 27 21 2 4 3 28 1 6 4 3 76 0 3 0 6 5 3 6 103 0 4 0 5 7 4 5 105 0 2 2 0 97 0 0 0 39 77 9 1 7 7 1 97 8 1 1 1 40 1 78 16 16 0 0 16 43 16 42 40 39 37 35 31 29 26 25 24 23 0 15 0 14 38 10 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278C;
unicode = 10124;
},
{
glyphname = uni278D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(405,242,l),
(242,242,l),
(242,294,l),
(362,533,l),
(426,533,l),
(311,299,l),
(410,299,l),
(410,392,l),
(471,392,l),
(471,299,l),
(512,299,l),
(512,242,l),
(471,242,l),
(471,176,l),
(405,176,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
27 1 2 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 4 6 3 6 4 114 5 1 3 2 6 3 2 126 7 1 2 8 8 2 112 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 4 6 3 6 4 3 128 5 1 3 2 6 3 2 126 7 1 2 8 8 2 112 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 4 6 3 6 4 3 128 5 1 3 2 6 3 2 126 7 1 2 8 6 2 8 126 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
16 16 0 0 16 30 16 30 29 28 26 25 24 23 22 21 20 19 18 17 0 15 0 14 38 11 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278D;
unicode = 10125;
},
{
glyphname = uni278E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(125,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(125,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(338,160,o),
(264,220,o),
(262,267,q),
(326,267,l),
(331,243,o),
(367,216,o),
(393,216,qs),
(421,216,o),
(457,259,o),
(457,289,qs),
(457,320,o),
(423,359,o),
(394,359,qs),
(373,359,o),
(338,338,o),
(330,320,q),
(267,320,l),
(297,524,l),
(496,524,l),
(496,467,l),
(347,467,l),
(330,384,l),
(343,398,o),
(383,413,o),
(404,413,qs),
(459,413,o),
(520,343,o),
(520,290,qs),
(520,232,o),
(449,160,o),
(393,160,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
24 1 6 2 1 76 0 3 0 2 6 3 2 105 0 5 0 8 7 5 8 103 0 6 0 7 9 6 7 105 0 4 4 0 97 0 0 0 39 77 11 1 9 9 1 97 10 1 1 1 40 1 78 16 16 0 0 16 46 16 45 43 42 40 38 34 32 30 29 28 27 26 25 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278E;
unicode = 10126;
},
{
glyphname = uni278F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(416,221,o),
(452,256,o),
(452,284,qs),
(452,311,o),
(418,347,o),
(391,347,qs),
(366,347,o),
(330,311,o),
(330,285,qs),
(330,258,o),
(365,221,o),
(392,221,qs)
);
},
{
closed = 1;
nodes = (
(324,165,o),
(258,265,o),
(258,338,qs),
(258,420,o),
(324,535,o),
(393,535,qs),
(444,535,o),
(505,473,o),
(507,432,q),
(447,432,l),
(438,481,o),
(393,481,qs),
(354,481,o),
(322,406,o),
(322,354,q),
(333,375,o),
(379,402,o),
(406,402,qs),
(453,402,o),
(514,335,o),
(514,286,qs),
(514,237,o),
(448,165,o),
(395,165,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
36 1 2 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 6 5 4 5 6 114 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 0 4 4 5 97 0 5 5 36 77 11 1 8 8 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 6 5 4 5 6 4 128 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 0 4 4 5 97 0 5 5 36 77 11 1 8 8 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 6 5 4 5 6 4 128 0 5 0 4 2 5 4 105 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 11 1 8 8 1 97 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
28 28 16 16 0 0 28 51 28 50 46 44 42 41 40 38 34 32 16 27 16 26 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278F;
unicode = 10127;
},
{
glyphname = uni2790;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(453,469,l),
(261,469,l),
(261,524,l),
(522,524,l),
(522,478,l),
(379,167,l),
(311,167,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
17 1 3 2 1 76 0 3 2 4 2 3 4 128 0 2 2 0 97 0 0 0 39 77 6 1 4 4 1 98 5 1 1 1 40 1 78 16 16 0 0 16 22 16 22 21 20 19 18 0 15 0 14 38 7 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2790;
unicode = 10128;
},
{
glyphname = uni2791;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(338,165,o),
(264,222,o),
(264,271,qs),
(264,302,o),
(296,354,o),
(324,363,q),
(273,387,o),
(273,439,qs),
(273,483,o),
(337,535,o),
(389,535,qs),
(440,535,o),
(506,482,o),
(506,439,qs),
(506,417,o),
(481,375,o),
(455,363,q),
(483,353,o),
(514,303,o),
(514,271,qs),
(514,221,o),
(441,165,o),
(389,165,qs)
);
},
{
closed = 1;
nodes = (
(417,220,o),
(450,249,o),
(450,276,qs),
(450,305,o),
(417,334,o),
(390,334,qs),
(363,334,o),
(329,306,o),
(329,276,qs),
(329,249,o),
(360,220,o),
(390,220,qs)
);
},
{
closed = 1;
nodes = (
(416,383,o),
(441,411,o),
(441,432,qs),
(441,456,o),
(413,482,o),
(389,482,qs),
(338,482,o),
(338,432,qs),
(338,410,o),
(365,383,o),
(389,383,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
32 21 2 4 7 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 4 10 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 11 1 7 7 6 97 0 6 6 36 77 9 1 3 3 1 97 8 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 6 11 1 7 4 6 7 105 0 4 10 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
51 51 39 39 16 16 0 0 51 61 51 60 56 54 39 50 39 49 45 43 16 38 16 37 28 26 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2791;
unicode = 10129;
},
{
glyphname = uni2792;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(336,165,o),
(276,222,o),
(271,268,q),
(331,268,l),
(341,219,o),
(386,219,qs),
(424,219,o),
(456,294,o),
(457,346,q),
(445,326,o),
(401,298,o),
(372,298,qs),
(327,298,o),
(264,364,o),
(264,414,qs),
(264,463,o),
(331,535,o),
(383,535,qs),
(456,535,o),
(521,432,o),
(521,362,qs),
(521,279,o),
(454,165,o),
(385,165,qs)
);
},
{
closed = 1;
nodes = (
(414,353,o),
(448,389,o),
(448,415,qs),
(448,443,o),
(414,479,o),
(387,479,qs),
(360,479,o),
(327,443,o),
(327,416,qs),
(327,388,o),
(360,353,o),
(388,353,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
30 1 3 8 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 5 3 4 4 5 114 0 3 0 4 6 3 4 105 0 2 2 0 97 0 0 0 39 77 11 1 8 8 7 97 0 7 7 36 77 10 1 6 6 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 5 3 4 3 5 4 128 0 3 0 4 6 3 4 105 0 2 2 0 97 0 0 0 39 77 11 1 8 8 7 97 0 7 7 36 77 10 1 6 6 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 5 3 4 3 5 4 128 0 7 11 1 8 3 7 8 105 0 3 0 4 6 3 4 105 0 2 2 0 97 0 0 0 39 77 10 1 6 6 1 97 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
40 40 16 16 0 0 40 51 40 50 46 44 16 39 16 38 36 35 34 32 28 26 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2792;
unicode = 10130;
},
{
glyphname = uni24EA.solid;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(320,165,o),
(287,216,qs),
(254,266,o),
(254,350,qs),
(254,435,o),
(287,484,qs),
(320,535,o),
(389,535,qs),
(459,535,o),
(491,485,qs),
(524,436,o),
(524,350,qs),
(524,265,o),
(491,215,qs),
(459,165,o),
(389,165,qs)
);
},
{
closed = 1;
nodes = (
(424,223,o),
(440,256,qs),
(457,289,o),
(457,350,qs),
(457,411,o),
(440,444,qs),
(424,477,o),
(389,477,qs),
(355,477,o),
(338,444,qs),
(321,411,o),
(321,350,qs),
(321,289,o),
(338,256,qs),
(355,223,o),
(389,223,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 2 0 97 0 0 0 39 77 8 1 5 5 4 97 0 4 4 36 77 7 1 3 3 1 97 6 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 4 8 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 7 1 3 3 1 97 6 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
32 32 16 16 0 0 32 47 32 46 40 38 16 31 16 30 24 22 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni24EA.solid;
},
{
glyphname = zero.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,-5,o),
(294,93,o),
(294,177,qs),
(294,260,o),
(230,358,o),
(162,358,qs),
(94,358,o),
(30,259,o),
(30,177,qs),
(30,95,o),
(94,-5,o),
(162,-5,qs)
);
},
{
closed = 1;
nodes = (
(128,52,o),
(95,118,o),
(95,177,qs),
(95,236,o),
(128,301,o),
(162,301,qs),
(196,301,o),
(229,236,o),
(229,177,qs),
(229,118,o),
(196,52,o),
(162,52,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 0 0 2 3 0 2 105 5 1 3 3 1 97 4 1 1 1 34 1 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = zero.dnom;
},
{
glyphname = one.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(281,0,l),
(281,55,l),
(198,55,l),
(198,353,l),
(164,353,l),
(45,309,l),
(45,260,l),
(137,281,l),
(137,55,l),
(42,55,l),
(42,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 0 1 133 2 1 0 0 3 96 0 3 3 34 3 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = one.dnom;
},
{
glyphname = two.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(33,0,l),
(275,0,l),
(275,55,l),
(118,55,l),
(186,123,ls),
(220,158,o),
(246,189,o),
(267,230,o),
(267,253,qs),
(267,299,o),
(209,358,o),
(153,358,qs),
(99,358,o),
(34,298,o),
(33,242,q),
(96,242,l),
(96,268,o),
(125,304,o),
(151,304,qs),
(175,304,o),
(204,275,o),
(204,252,qs),
(204,232,o),
(172,191,o),
(136,155,qs),
(121,139,l),
(33,47,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
26 1 4 3 1 76 0 1 0 3 0 1 3 128 0 2 0 0 1 2 0 105 0 3 3 4 95 0 4 4 34 4 78 17 23 34 18 38 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 310;
}
);
note = two.dnom;
},
{
glyphname = three.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,-5,o),
(286,57,o),
(286,112,qs),
(286,155,o),
(234,215,o),
(186,219,q),
(275,300,l),
(275,353,l),
(45,353,l),
(45,298,l),
(196,298,l),
(88,202,l),
(124,160,l),
(142,170,o),
(161,170,qs),
(190,170,o),
(224,140,o),
(224,112,qs),
(224,82,o),
(190,50,o),
(161,50,qs),
(131,50,o),
(97,83,o),
(97,110,q),
(34,110,l),
(36,55,o),
(104,-5,o),
(161,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 3 0 3 2 114 0 0 1 3 0 1 126 0 4 0 3 2 4 3 103 0 1 1 5 97 6 1 5 5 34 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 4 0 3 2 4 3 103 0 1 1 5 97 6 1 5 5 34 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = three.dnom;
},
{
glyphname = four.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,0,l),
(247,66,l),
(288,66,l),
(288,122,l),
(247,122,l),
(247,213,l),
(187,213,l),
(187,122,l),
(90,122,l),
(204,353,l),
(140,353,l),
(21,117,l),
(21,66,l),
(183,66,l),
(183,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 3 1 133 0 3 2 2 3 112 4 1 2 5 1 0 6 2 0 104 0 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 3 1 133 0 3 2 3 133 4 1 2 5 1 0 6 2 0 104 0 6 6 34 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = four.dnom;
},
{
glyphname = five.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(211,-5,o),
(282,66,o),
(282,122,qs),
(282,173,o),
(221,243,o),
(168,243,qs),
(145,243,o),
(107,228,o),
(95,215,q),
(111,297,l),
(258,297,l),
(258,353,l),
(63,353,l),
(33,152,l),
(95,152,l),
(102,169,o),
(135,191,o),
(157,191,qs),
(185,191,o),
(220,153,o),
(220,122,qs),
(220,91,o),
(184,50,o),
(156,50,qs),
(131,50,o),
(96,78,o),
(91,100,q),
(28,100,l),
(30,57,o),
(98,-5,o),
(156,-5,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 4 0 5 6 4 5 103 0 6 0 2 3 6 2 105 0 1 1 7 97 8 1 7 7 34 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 4 0 5 6 4 5 103 0 6 0 2 3 6 2 105 0 1 1 7 97 8 1 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 30 0 29 35 17 17 18 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = five.dnom;
},
{
glyphname = six.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,-5,o),
(282,66,o),
(282,114,qs),
(282,160,o),
(222,228,o),
(176,228,qs),
(149,228,o),
(104,201,o),
(93,180,q),
(94,242,o),
(130,305,o),
(162,305,qs),
(206,305,o),
(216,257,q),
(275,257,l),
(270,302,o),
(209,358,o),
(163,358,qs),
(95,358,o),
(30,246,o),
(30,165,qs),
(30,91,o),
(98,-5,o),
(165,-5,qs)
);
},
{
closed = 1;
nodes = (
(135,50,o),
(101,85,o),
(101,112,qs),
(101,138,o),
(135,173,o),
(160,173,qs),
(187,173,o),
(220,139,o),
(220,111,qs),
(220,85,o),
(187,50,o),
(161,50,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
14 1 5 3 1 76 0 1 2 3 2 1 3 128 0 0 0 2 1 0 2 105 0 3 0 5 6 3 5 105 8 1 6 6 4 97 7 1 4 4 34 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 33 18 36 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = six.dnom;
},
{
glyphname = seven.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(147,0,l),
(288,307,l),
(288,353,l),
(30,353,l),
(30,298,l),
(220,298,l),
(80,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
4 1 0 1 1 76 0 1 0 0 2 1 0 103 0 2 2 34 2 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = seven.dnom;
},
{
glyphname = eight.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,-5,o),
(275,51,o),
(275,99,qs),
(275,130,o),
(245,179,o),
(217,190,q),
(240,200,o),
(267,240,o),
(267,264,qs),
(267,307,o),
(201,358,o),
(153,358,qs),
(105,358,o),
(39,307,o),
(39,264,qs),
(39,240,o),
(65,200,o),
(88,190,q),
(60,178,o),
(30,130,o),
(30,99,qs),
(30,52,o),
(101,-5,o),
(153,-5,qs)
);
},
{
closed = 1;
nodes = (
(124,49,o),
(93,79,o),
(93,104,qs),
(93,131,o),
(126,161,o),
(154,161,qs),
(181,161,o),
(213,131,o),
(213,104,qs),
(213,78,o),
(181,49,o),
(154,49,qs)
);
},
{
closed = 1;
nodes = (
(130,209,o),
(102,235,o),
(102,257,qs),
(102,280,o),
(129,306,o),
(153,306,qs),
(176,306,o),
(204,280,o),
(204,257,qs),
(204,235,o),
(176,209,o),
(153,209,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
17 5 2 2 5 1 76 0 0 0 4 5 0 4 105 8 1 5 0 2 3 5 2 105 7 1 3 3 1 97 6 1 1 1 34 1 78 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 42 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 305;
}
);
note = eight.dnom;
},
{
glyphname = nine.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,-5,o),
(282,107,o),
(282,188,qs),
(282,262,o),
(214,358,o),
(147,358,qs),
(96,358,o),
(30,287,o),
(30,239,qs),
(30,193,o),
(90,125,o),
(136,125,qs),
(163,125,o),
(208,152,o),
(219,173,q),
(218,111,o),
(182,48,o),
(150,48,qs),
(106,48,o),
(96,96,q),
(37,96,l),
(42,51,o),
(103,-5,o),
(149,-5,qs)
);
},
{
closed = 1;
nodes = (
(125,180,o),
(92,214,o),
(92,242,qs),
(92,268,o),
(125,303,o),
(151,303,qs),
(177,303,o),
(211,268,o),
(211,241,qs),
(211,215,o),
(177,180,o),
(152,180,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
8 1 2 6 1 76 0 0 2 1 2 0 1 128 0 3 0 5 6 3 5 105 8 1 6 0 2 0 6 2 105 0 1 1 4 97 7 1 4 4 34 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 36 33 18 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = nine.dnom;
},
{
glyphname = zero.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,342,o),
(294,440,o),
(294,524,qs),
(294,607,o),
(230,705,o),
(162,705,qs),
(94,705,o),
(30,606,o),
(30,524,qs),
(30,442,o),
(94,342,o),
(162,342,qs)
);
},
{
closed = 1;
nodes = (
(128,399,o),
(95,465,o),
(95,524,qs),
(95,583,o),
(128,648,o),
(162,648,qs),
(196,648,o),
(229,583,o),
(229,524,qs),
(229,465,o),
(196,399,o),
(162,399,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 3 4 1 1 3 1 101 0 2 2 0 97 0 0 0 33 2 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = zero.numr;
},
{
glyphname = one.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(281,347,l),
(281,402,l),
(198,402,l),
(198,700,l),
(164,700,l),
(45,656,l),
(45,607,l),
(137,628,l),
(137,402,l),
(42,402,l),
(42,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
4 3 2 3 0 1 1 76 2 1 0 0 3 0 3 100 0 1 1 33 1 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = one.numr;
},
{
glyphname = two.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(33,347,l),
(275,347,l),
(275,402,l),
(118,402,l),
(186,470,ls),
(220,505,o),
(246,536,o),
(267,577,o),
(267,600,qs),
(267,646,o),
(209,705,o),
(153,705,qs),
(99,705,o),
(34,645,o),
(33,589,q),
(96,589,l),
(96,615,o),
(125,651,o),
(151,651,qs),
(175,651,o),
(204,622,o),
(204,599,qs),
(204,579,o),
(172,538,o),
(136,502,qs),
(121,486,l),
(33,394,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
26 1 4 3 1 76 0 1 0 3 0 1 3 128 0 3 0 4 3 4 99 0 0 0 2 97 0 2 2 33 0 78 17 23 34 18 38 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 310;
}
);
note = two.numr;
},
{
glyphname = three.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,342,o),
(286,404,o),
(286,459,qs),
(286,502,o),
(234,562,o),
(186,566,q),
(275,647,l),
(275,700,l),
(45,700,l),
(45,645,l),
(196,645,l),
(88,549,l),
(124,507,l),
(142,517,o),
(161,517,qs),
(190,517,o),
(224,487,o),
(224,459,qs),
(224,429,o),
(190,397,o),
(161,397,qs),
(131,397,o),
(97,430,o),
(97,457,q),
(34,457,l),
(36,402,o),
(104,342,o),
(161,342,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 2 3 0 3 2 114 0 0 1 3 0 1 126 0 1 6 1 5 1 5 101 0 3 3 4 95 0 4 4 33 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 1 6 1 5 1 5 101 0 3 3 4 95 0 4 4 33 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = three.numr;
},
{
glyphname = four.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,347,l),
(247,413,l),
(288,413,l),
(288,469,l),
(247,469,l),
(247,560,l),
(187,560,l),
(187,469,l),
(90,469,l),
(204,700,l),
(140,700,l),
(21,464,l),
(21,413,l),
(183,413,l),
(183,347,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 2 3 114 0 6 0 0 6 113 4 1 2 5 1 0 6 2 0 104 0 1 1 33 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 3 1 2 1 3 2 128 0 6 0 0 6 113 4 1 2 5 1 0 6 2 0 104 0 1 1 33 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 0 6 0 6 134 4 1 2 5 1 0 6 2 0 104 0 1 1 33 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = four.numr;
},
{
glyphname = five.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(211,342,o),
(282,413,o),
(282,469,qs),
(282,520,o),
(221,590,o),
(168,590,qs),
(145,590,o),
(107,575,o),
(95,562,q),
(111,644,l),
(258,644,l),
(258,700,l),
(63,700,l),
(33,499,l),
(95,499,l),
(102,516,o),
(135,538,o),
(157,538,qs),
(185,538,o),
(220,500,o),
(220,469,qs),
(220,438,o),
(184,397,o),
(156,397,qs),
(131,397,o),
(96,425,o),
(91,447,q),
(28,447,l),
(30,404,o),
(98,342,o),
(156,342,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 1 8 1 7 1 7 101 0 5 5 4 95 0 4 4 33 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 1 8 1 7 1 7 101 0 5 5 4 95 0 4 4 33 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 30 0 29 35 17 17 18 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = five.numr;
},
{
glyphname = six.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,342,o),
(282,413,o),
(282,461,qs),
(282,507,o),
(222,575,o),
(176,575,qs),
(149,575,o),
(104,548,o),
(93,527,q),
(94,589,o),
(130,652,o),
(162,652,qs),
(206,652,o),
(216,604,q),
(275,604,l),
(270,649,o),
(209,705,o),
(163,705,qs),
(95,705,o),
(30,593,o),
(30,512,qs),
(30,438,o),
(98,342,o),
(165,342,qs)
);
},
{
closed = 1;
nodes = (
(135,397,o),
(101,432,o),
(101,459,qs),
(101,485,o),
(135,520,o),
(160,520,qs),
(187,520,o),
(220,486,o),
(220,458,qs),
(220,432,o),
(187,397,o),
(161,397,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
14 1 5 3 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 8 1 6 7 1 4 6 4 101 0 2 2 0 97 0 0 0 33 2 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 33 18 36 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = six.numr;
},
{
glyphname = seven.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(147,347,l),
(288,654,l),
(288,700,l),
(30,700,l),
(30,645,l),
(220,645,l),
(80,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 2 0 2 134 0 0 0 1 95 0 1 1 33 0 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = seven.numr;
},
{
glyphname = eight.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,342,o),
(275,398,o),
(275,446,qs),
(275,477,o),
(245,526,o),
(217,537,q),
(240,547,o),
(267,587,o),
(267,611,qs),
(267,654,o),
(201,705,o),
(153,705,qs),
(105,705,o),
(39,654,o),
(39,611,qs),
(39,587,o),
(65,547,o),
(88,537,q),
(60,525,o),
(30,477,o),
(30,446,qs),
(30,399,o),
(101,342,o),
(153,342,qs)
);
},
{
closed = 1;
nodes = (
(124,396,o),
(93,426,o),
(93,451,qs),
(93,478,o),
(126,508,o),
(154,508,qs),
(181,508,o),
(213,478,o),
(213,451,qs),
(213,425,o),
(181,396,o),
(154,396,qs)
);
},
{
closed = 1;
nodes = (
(130,556,o),
(102,582,o),
(102,604,qs),
(102,627,o),
(129,653,o),
(153,653,qs),
(176,653,o),
(204,627,o),
(204,604,qs),
(204,582,o),
(176,556,o),
(153,556,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
17 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 7 1 3 6 1 1 3 1 101 0 4 4 0 97 0 0 0 33 4 78 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 42 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 305;
}
);
note = eight.numr;
},
{
glyphname = nine.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,342,o),
(282,454,o),
(282,535,qs),
(282,609,o),
(214,705,o),
(147,705,qs),
(96,705,o),
(30,634,o),
(30,586,qs),
(30,540,o),
(90,472,o),
(136,472,qs),
(163,472,o),
(208,499,o),
(219,520,q),
(218,458,o),
(182,395,o),
(150,395,qs),
(106,395,o),
(96,443,q),
(37,443,l),
(42,398,o),
(103,342,o),
(149,342,qs)
);
},
{
closed = 1;
nodes = (
(125,527,o),
(92,561,o),
(92,589,qs),
(92,615,o),
(125,650,o),
(151,650,qs),
(177,650,o),
(211,615,o),
(211,588,qs),
(211,562,o),
(177,527,o),
(152,527,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 0 2 1 2 0 1 128 0 1 7 1 4 1 4 101 0 5 5 3 97 0 3 3 33 77 0 2 2 6 97 8 1 6 6 42 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 1 7 1 4 1 4 101 0 5 5 3 97 0 3 3 33 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 36 33 18 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = nine.numr;
},
{
glyphname = fraction;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(63,0,l),
(583,700,l),
(512,700,l),
(-7,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = fraction;
unicode = 8260;
},
{
glyphname = onehalf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(279,347,l),
(279,402,l),
(196,402,l),
(196,700,l),
(162,700,l),
(43,657,l),
(43,607,l),
(135,628,l),
(135,402,l),
(40,402,l),
(40,347,l)
);
},
{
closed = 1;
nodes = (
(168,0,l),
(688,700,l),
(617,700,l),
(98,0,l)
);
},
{
closed = 1;
nodes = (
(720,0,l),
(720,55,l),
(563,55,l),
(631,123,ls),
(665,159,o),
(691,189,o),
(712,229,o),
(712,252,qs),
(712,298,o),
(654,358,o),
(598,358,qs),
(544,358,o),
(479,297,o),
(478,242,q),
(541,242,l),
(541,268,o),
(570,304,o),
(596,304,qs),
(620,304,o),
(649,275,o),
(649,251,qs),
(649,233,o),
(619,193,o),
(586,159,qs),
(566,139,l),
(478,46,l),
(478,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 76 values pushed */
4 3 2 3 0 1 15 1 5 9 2 76 4 1 1 0 1 133 0 7 6 9 6 7 9 128 2 1 0 0 3 6 0 3 104 0 8 0 6 7 8 6 105 0 9 5 5 9 87 0 9 9 5 95 10 1 5 9 5 79 41 40 39 38 34 18 40 17 17 17 17 20 16 11 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 765;
}
);
note = onehalf;
unicode = 189;
},
{
glyphname = onequarter;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(168,0,l),
(688,700,l),
(617,700,l),
(98,0,l)
);
},
{
closed = 1;
nodes = (
(279,347,l),
(279,402,l),
(196,402,l),
(196,700,l),
(162,700,l),
(43,657,l),
(43,607,l),
(135,628,l),
(135,402,l),
(40,402,l),
(40,347,l)
);
},
{
closed = 1;
nodes = (
(678,0,l),
(678,66,l),
(719,66,l),
(719,122,l),
(678,122,l),
(678,213,l),
(618,213,l),
(618,122,l),
(521,122,l),
(635,353,l),
(571,353,l),
(452,117,l),
(452,66,l),
(614,66,l),
(614,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 12 values pushed */
8 7 6 3 2 0 17 1 6 8 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
3 1 0 2 0 133 0 7 2 5 2 7 5 128 0 9 5 8 8 9 114 12 1 1 6 6 1 113 4 1 2 0 5 9 2 5 104 10 1 8 6 6 8 87 10 1 8 8 6 96 11 1 6 8 6 80
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
3 1 0 2 0 133 0 7 2 5 2 7 5 128 0 9 5 8 5 9 8 128 12 1 1 6 6 1 113 4 1 2 0 5 9 2 5 104 10 1 8 6 6 8 87 10 1 8 8 6 96 11 1 6 8 6 80
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
3 1 0 2 0 133 0 7 2 5 2 7 5 128 0 9 5 8 5 9 8 128 12 1 1 6 1 134 4 1 2 0 5 9 2 5 104 10 1 8 6 6 8 87 10 1 8 8 6 96 11 1 6 8 6 80
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
29 28 27 26 25 24 23 22 17 18 17 17 17 20 17 17 16 13 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 759;
}
);
note = onequarter;
unicode = 188;
},
{
glyphname = threequarters;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(167,0,l),
(687,700,l),
(616,700,l),
(97,0,l)
);
},
{
closed = 1;
nodes = (
(677,0,l),
(677,66,l),
(718,66,l),
(718,122,l),
(677,122,l),
(677,213,l),
(617,213,l),
(617,122,l),
(520,122,l),
(634,353,l),
(570,353,l),
(451,117,l),
(451,66,l),
(613,66,l),
(613,0,l)
);
},
{
closed = 1;
nodes = (
(223,342,o),
(292,404,o),
(292,459,qs),
(292,502,o),
(240,562,o),
(192,566,q),
(281,647,l),
(281,700,l),
(51,700,l),
(51,645,l),
(202,645,l),
(94,549,l),
(130,507,l),
(148,517,o),
(167,517,qs),
(196,517,o),
(230,487,o),
(230,459,qs),
(230,429,o),
(196,397,o),
(167,397,qs),
(137,397,o),
(103,430,o),
(103,457,q),
(40,457,l),
(42,402,o),
(110,342,o),
(167,342,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 19 values pushed */
39 1 12 0 40 34 2 11 12 33 1 9 11 6 1 2 4 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
0 11 12 9 12 11 114 0 9 10 12 9 10 126 0 3 10 14 10 3 14 128 0 5 14 4 4 5 114 8 1 1 2 2 1 113 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 105 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 74 values pushed */
0 11 12 9 12 11 9 128 0 9 10 12 9 10 126 0 3 10 14 10 3 14 128 0 5 14 4 4 5 114 8 1 1 2 2 1 113 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 105 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 75 values pushed */
0 11 12 9 12 11 9 128 0 9 10 12 9 10 126 0 3 10 14 10 3 14 128 0 5 14 4 14 5 4 128 8 1 1 2 2 1 113 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 105 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 74 values pushed */
0 11 12 9 12 11 9 128 0 9 10 12 9 10 126 0 3 10 14 10 3 14 128 0 5 14 4 14 5 4 128 8 1 1 2 1 134 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 105 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
19 19 19 46 19 45 38 37 36 35 32 30 26 24 22 21 17 17 17 17 17 18 17 17 16 16 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 758;
}
);
note = threequarters;
unicode = 190;
},
{
glyphname = oneeighth;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(168,0,l),
(688,700,l),
(617,700,l),
(98,0,l)
);
},
{
closed = 1;
nodes = (
(279,347,l),
(279,402,l),
(196,402,l),
(196,700,l),
(162,700,l),
(43,657,l),
(43,607,l),
(135,628,l),
(135,402,l),
(40,402,l),
(40,347,l)
);
},
{
closed = 1;
nodes = (
(565,49,o),
(534,79,o),
(534,104,qs),
(534,131,o),
(567,161,o),
(595,161,qs),
(622,161,o),
(654,131,o),
(654,104,qs),
(654,78,o),
(622,49,o),
(595,49,qs)
);
},
{
closed = 1;
nodes = (
(644,-5,o),
(716,51,o),
(716,99,qs),
(716,130,o),
(686,179,o),
(658,190,q),
(681,200,o),
(708,240,o),
(708,264,qs),
(708,307,o),
(642,358,o),
(594,358,qs),
(546,358,o),
(480,307,o),
(480,264,qs),
(480,240,o),
(506,200,o),
(529,190,q),
(501,178,o),
(471,130,o),
(471,99,qs),
(471,52,o),
(542,-5,o),
(594,-5,qs)
);
},
{
closed = 1;
nodes = (
(571,209,o),
(543,235,o),
(543,257,qs),
(543,280,o),
(570,306,o),
(594,306,qs),
(617,306,o),
(645,280,o),
(645,257,qs),
(645,235,o),
(617,209,o),
(594,209,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
8 7 6 3 2 0 44 32 2 6 11 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
4 1 2 0 5 10 2 5 104 0 8 0 10 11 8 10 105 14 1 11 0 6 7 11 6 106 3 1 0 0 33 77 12 1 7 7 1 97 13 9 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
4 1 2 0 5 10 2 5 104 0 8 0 10 11 8 10 105 14 1 11 0 6 7 11 6 106 3 1 0 0 33 77 0 1 1 34 77 12 1 7 7 9 97 13 1 9 9 34 9 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
51 51 27 27 15 15 51 62 51 61 57 55 27 50 27 49 39 37 15 26 15 25 37 17 17 20 17 17 16 15 8 29
CALL[ ]	/* CallFunction */";
};
width = 762;
}
);
note = oneeighth;
unicode = 8539;
},
{
glyphname = threeeighths;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(168,0,l),
(688,700,l),
(617,700,l),
(98,0,l)
);
},
{
closed = 1;
nodes = (
(222,342,o),
(291,404,o),
(291,459,qs),
(291,502,o),
(239,562,o),
(191,566,q),
(280,647,l),
(280,700,l),
(50,700,l),
(50,645,l),
(201,645,l),
(93,549,l),
(129,507,l),
(147,517,o),
(166,517,qs),
(195,517,o),
(229,487,o),
(229,459,qs),
(229,429,o),
(195,397,o),
(166,397,qs),
(136,397,o),
(102,430,o),
(102,457,q),
(39,457,l),
(41,402,o),
(109,342,o),
(166,342,qs)
);
},
{
closed = 1;
nodes = (
(565,49,o),
(534,79,o),
(534,104,qs),
(534,131,o),
(567,161,o),
(595,161,qs),
(622,161,o),
(654,131,o),
(654,104,qs),
(654,78,o),
(622,49,o),
(595,49,qs)
);
},
{
closed = 1;
nodes = (
(644,-5,o),
(716,51,o),
(716,99,qs),
(716,130,o),
(686,179,o),
(658,190,q),
(681,200,o),
(708,240,o),
(708,264,qs),
(708,307,o),
(642,358,o),
(594,358,qs),
(546,358,o),
(480,307,o),
(480,264,qs),
(480,240,o),
(506,200,o),
(529,190,q),
(501,178,o),
(471,130,o),
(471,99,qs),
(471,52,o),
(542,-5,o),
(594,-5,qs)
);
},
{
closed = 1;
nodes = (
(571,209,o),
(543,235,o),
(543,257,qs),
(543,280,o),
(570,306,o),
(594,306,qs),
(617,306,o),
(645,280,o),
(645,257,qs),
(645,235,o),
(617,209,o),
(594,209,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
24 1 5 0 25 19 2 4 5 18 1 2 4 61 49 2 8 13 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
0 4 5 2 5 4 114 0 2 3 5 2 3 126 0 3 14 1 7 12 3 7 105 0 10 0 12 13 10 12 105 17 1 13 0 8 9 13 8 106 0 5 5 0 95 6 1 0 0 33 77 15 1 9 9 1 97 16 11 2 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
0 4 5 2 5 4 2 128 0 2 3 5 2 3 126 0 3 14 1 7 12 3 7 105 0 10 0 12 13 10 12 105 17 1 13 0 8 9 13 8 106 0 5 5 0 95 6 1 0 0 33 77 15 1 9 9 1 97 16 11 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 70 values pushed */
0 4 5 2 5 4 2 128 0 2 3 5 2 3 126 0 3 14 1 7 12 3 7 105 0 10 0 12 13 10 12 105 17 1 13 0 8 9 13 8 106 0 5 5 0 95 6 1 0 0 33 77 0 1 1 34 77 15 1 9 9 11 97 16 1 11 11 34 11 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 40 values pushed */
68 68 44 44 32 32 4 4 68 79 68 78 74 72 44 67 44 66 56 54 32 43 32 42 38 36 4 31 4 30 17 19 36 34 19 17 16 18 8 29
CALL[ ]	/* CallFunction */";
};
width = 762;
}
);
note = threeeighths;
unicode = 8540;
},
{
glyphname = fiveeighths;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(172,0,l),
(692,700,l),
(621,700,l),
(102,0,l)
);
},
{
closed = 1;
nodes = (
(227,342,o),
(298,413,o),
(298,469,qs),
(298,520,o),
(237,590,o),
(184,590,qs),
(161,590,o),
(123,575,o),
(111,562,q),
(127,644,l),
(274,644,l),
(274,700,l),
(79,700,l),
(49,499,l),
(111,499,l),
(118,516,o),
(151,538,o),
(173,538,qs),
(201,538,o),
(236,500,o),
(236,469,qs),
(236,438,o),
(200,397,o),
(172,397,qs),
(147,397,o),
(112,425,o),
(107,447,q),
(44,447,l),
(46,404,o),
(114,342,o),
(172,342,qs)
);
},
{
closed = 1;
nodes = (
(569,49,o),
(538,79,o),
(538,104,qs),
(538,131,o),
(571,161,o),
(599,161,qs),
(626,161,o),
(658,131,o),
(658,104,qs),
(658,78,o),
(626,49,o),
(599,49,qs)
);
},
{
closed = 1;
nodes = (
(648,-5,o),
(720,52,o),
(720,100,qs),
(720,131,o),
(690,179,o),
(662,190,q),
(685,200,o),
(712,240,o),
(712,264,qs),
(712,307,o),
(646,358,o),
(598,358,qs),
(550,358,o),
(484,307,o),
(484,264,qs),
(484,240,o),
(510,200,o),
(533,190,q),
(505,178,o),
(475,130,o),
(475,99,qs),
(475,52,o),
(546,-5,o),
(598,-5,qs)
);
},
{
closed = 1;
nodes = (
(575,209,o),
(547,235,o),
(547,257,qs),
(547,280,o),
(574,306,o),
(598,306,qs),
(621,306,o),
(649,280,o),
(649,257,qs),
(649,235,o),
(621,209,o),
(598,209,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
25 1 4 8 64 52 2 10 15 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
0 5 4 2 7 5 114 0 2 3 4 2 3 126 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 105 0 12 0 14 15 12 14 105 19 1 15 0 10 11 15 10 106 0 7 7 0 95 6 1 0 0 33 77 17 1 11 11 1 97 18 13 2 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 74 values pushed */
0 5 4 2 4 5 2 128 0 2 3 4 2 3 126 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 105 0 12 0 14 15 12 14 105 19 1 15 0 10 11 15 10 106 0 7 7 0 95 6 1 0 0 33 77 17 1 11 11 1 97 18 13 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 78 values pushed */
0 5 4 2 4 5 2 128 0 2 3 4 2 3 126 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 105 0 12 0 14 15 12 14 105 19 1 15 0 10 11 15 10 106 0 7 7 0 95 6 1 0 0 33 77 0 1 1 34 77 17 1 11 11 13 97 18 1 13 13 34 13 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 42 values pushed */
71 71 47 47 35 35 4 4 71 82 71 81 77 75 47 70 47 69 59 57 35 46 35 45 41 39 4 34 4 33 35 17 17 18 36 34 19 17 16 20 8 31
CALL[ ]	/* CallFunction */";
};
width = 766;
}
);
note = fiveeighths;
unicode = 8541;
},
{
glyphname = seveneighths;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,0,l),
(658,700,l),
(587,700,l),
(68,0,l)
);
},
{
closed = 1;
nodes = (
(545,49,o),
(514,79,o),
(514,104,qs),
(514,131,o),
(547,161,o),
(575,161,qs),
(602,161,o),
(634,131,o),
(634,104,qs),
(634,78,o),
(602,49,o),
(575,49,qs)
);
},
{
closed = 1;
nodes = (
(176,347,l),
(317,654,l),
(317,700,l),
(59,700,l),
(59,645,l),
(249,645,l),
(109,347,l)
);
},
{
closed = 1;
nodes = (
(624,-5,o),
(696,51,o),
(696,99,qs),
(696,130,o),
(666,179,o),
(638,190,q),
(661,200,o),
(688,240,o),
(688,264,qs),
(688,307,o),
(622,358,o),
(574,358,qs),
(526,358,o),
(460,307,o),
(460,264,qs),
(460,240,o),
(486,200,o),
(509,190,q),
(481,178,o),
(451,130,o),
(451,99,qs),
(451,52,o),
(522,-5,o),
(574,-5,qs)
);
},
{
closed = 1;
nodes = (
(551,209,o),
(523,235,o),
(523,257,qs),
(523,280,o),
(550,306,o),
(574,306,qs),
(597,306,o),
(625,280,o),
(625,257,qs),
(625,235,o),
(597,209,o),
(574,209,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
20 1 4 0 40 28 2 2 10 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 6 7 9 7 6 9 128 0 7 0 9 10 7 9 106 13 1 10 0 2 3 10 2 105 0 4 4 0 95 5 1 0 0 33 77 11 1 3 3 1 97 12 8 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 6 7 9 7 6 9 128 0 7 0 9 10 7 9 106 13 1 10 0 2 3 10 2 105 0 4 4 0 95 5 1 0 0 33 77 0 1 1 34 77 11 1 3 3 8 97 12 1 8 8 34 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
47 47 23 23 4 4 47 58 47 57 53 51 23 46 23 45 35 33 22 21 19 18 17 16 4 15 4 14 37 17 16 14 8 25
CALL[ ]	/* CallFunction */";
};
width = 742;
}
);
note = seveneighths;
unicode = 8542;
},
{
glyphname = uni2080;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,-5,o),
(294,93,o),
(294,177,qs),
(294,260,o),
(230,358,o),
(162,358,qs),
(94,358,o),
(30,259,o),
(30,177,qs),
(30,95,o),
(94,-5,o),
(162,-5,qs)
);
},
{
closed = 1;
nodes = (
(128,52,o),
(95,118,o),
(95,177,qs),
(95,236,o),
(128,301,o),
(162,301,qs),
(196,301,o),
(229,236,o),
(229,177,qs),
(229,118,o),
(196,52,o),
(162,52,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 51 77 5 1 3 3 1 97 4 1 1 1 52 1 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 9 23
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = uni2080;
unicode = 8320;
},
{
glyphname = uni2081;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(281,0,l),
(281,55,l),
(198,55,l),
(198,353,l),
(164,353,l),
(45,309,l),
(45,260,l),
(137,281,l),
(137,55,l),
(42,55,l),
(42,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 1 49 77 2 1 0 0 3 96 0 3 3 50 3 78 17 17 20 16 4 9 26
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = uni2081;
unicode = 8321;
},
{
glyphname = uni2082;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(33,0,l),
(275,0,l),
(275,55,l),
(118,55,l),
(186,123,ls),
(220,158,o),
(246,189,o),
(267,230,o),
(267,253,qs),
(267,299,o),
(209,358,o),
(153,358,qs),
(99,358,o),
(34,298,o),
(33,242,q),
(96,242,l),
(96,268,o),
(125,304,o),
(151,304,qs),
(175,304,o),
(204,275,o),
(204,252,qs),
(204,232,o),
(172,191,o),
(136,155,qs),
(121,139,l),
(33,47,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
26 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 51 77 0 3 3 4 95 0 4 4 50 4 78 17 23 34 18 38 5 9 27
CALL[ ]	/* CallFunction */";
};
width = 310;
}
);
note = uni2082;
unicode = 8322;
},
{
glyphname = uni2083;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,-5,o),
(286,57,o),
(286,112,qs),
(286,155,o),
(234,215,o),
(186,219,q),
(275,300,l),
(275,353,l),
(45,353,l),
(45,298,l),
(196,298,l),
(88,202,l),
(124,160,l),
(142,170,o),
(161,170,qs),
(190,170,o),
(224,140,o),
(224,112,qs),
(224,82,o),
(190,50,o),
(161,50,qs),
(131,50,o),
(97,83,o),
(97,110,q),
(34,110,l),
(36,55,o),
(104,-5,o),
(161,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 3 0 3 2 114 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 49 77 0 1 1 5 97 6 1 5 5 52 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 49 77 0 1 1 5 97 6 1 5 5 52 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 9 27
CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = uni2083;
unicode = 8323;
},
{
glyphname = uni2084;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,0,l),
(247,66,l),
(288,66,l),
(288,122,l),
(247,122,l),
(247,213,l),
(187,213,l),
(187,122,l),
(90,122,l),
(204,353,l),
(140,353,l),
(21,117,l),
(21,66,l),
(183,66,l),
(183,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 1 2 2 3 114 4 1 2 5 1 0 6 2 0 104 0 1 1 49 77 0 6 6 50 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 49 77 0 6 6 50 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 9 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = uni2084;
unicode = 8324;
},
{
glyphname = uni2085;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(211,-5,o),
(282,66,o),
(282,122,qs),
(282,173,o),
(221,243,o),
(168,243,qs),
(145,243,o),
(107,228,o),
(95,215,q),
(111,297,l),
(258,297,l),
(258,353,l),
(63,353,l),
(33,152,l),
(95,152,l),
(102,169,o),
(135,191,o),
(157,191,qs),
(185,191,o),
(220,153,o),
(220,122,qs),
(220,91,o),
(184,50,o),
(156,50,qs),
(131,50,o),
(96,78,o),
(91,100,q),
(28,100,l),
(30,57,o),
(98,-5,o),
(156,-5,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 49 77 0 1 1 7 97 8 1 7 7 52 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 49 77 0 1 1 7 97 8 1 7 7 52 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 30 0 29 35 17 17 18 36 34 18 9 9 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2085;
unicode = 8325;
},
{
glyphname = uni2086;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,-5,o),
(282,66,o),
(282,114,qs),
(282,160,o),
(222,228,o),
(176,228,qs),
(149,228,o),
(104,201,o),
(93,180,q),
(94,242,o),
(130,305,o),
(162,305,qs),
(206,305,o),
(216,257,q),
(275,257,l),
(270,302,o),
(209,358,o),
(163,358,qs),
(95,358,o),
(30,246,o),
(30,165,qs),
(30,91,o),
(98,-5,o),
(165,-5,qs)
);
},
{
closed = 1;
nodes = (
(135,50,o),
(101,85,o),
(101,112,qs),
(101,138,o),
(135,173,o),
(160,173,qs),
(187,173,o),
(220,139,o),
(220,111,qs),
(220,85,o),
(187,50,o),
(161,50,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
14 1 5 3 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 51 77 8 1 6 6 4 97 7 1 4 4 52 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 33 18 36 9 9 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2086;
unicode = 8326;
},
{
glyphname = uni2087;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(147,0,l),
(288,307,l),
(288,353,l),
(30,353,l),
(30,298,l),
(220,298,l),
(80,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 0 0 1 95 0 1 1 49 77 0 2 2 50 2 78 18 17 16 3 9 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = uni2087;
unicode = 8327;
},
{
glyphname = uni2088;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,-5,o),
(275,51,o),
(275,99,qs),
(275,130,o),
(245,179,o),
(217,190,q),
(240,200,o),
(267,240,o),
(267,264,qs),
(267,307,o),
(201,358,o),
(153,358,qs),
(105,358,o),
(39,307,o),
(39,264,qs),
(39,240,o),
(65,200,o),
(88,190,q),
(60,178,o),
(30,130,o),
(30,99,qs),
(30,52,o),
(101,-5,o),
(153,-5,qs)
);
},
{
closed = 1;
nodes = (
(124,49,o),
(93,79,o),
(93,104,qs),
(93,131,o),
(126,161,o),
(154,161,qs),
(181,161,o),
(213,131,o),
(213,104,qs),
(213,78,o),
(181,49,o),
(154,49,qs)
);
},
{
closed = 1;
nodes = (
(130,209,o),
(102,235,o),
(102,257,qs),
(102,280,o),
(129,306,o),
(153,306,qs),
(176,306,o),
(204,280,o),
(204,257,qs),
(204,235,o),
(176,209,o),
(153,209,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
17 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 51 77 7 1 3 3 1 97 6 1 1 1 52 1 78 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 42 9 9 23
CALL[ ]	/* CallFunction */";
};
width = 305;
}
);
note = uni2088;
unicode = 8328;
},
{
glyphname = uni2089;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,-5,o),
(282,107,o),
(282,188,qs),
(282,262,o),
(214,358,o),
(147,358,qs),
(96,358,o),
(30,287,o),
(30,239,qs),
(30,193,o),
(90,125,o),
(136,125,qs),
(163,125,o),
(208,152,o),
(219,173,q),
(218,111,o),
(182,48,o),
(150,48,qs),
(106,48,o),
(96,96,q),
(37,96,l),
(42,51,o),
(103,-5,o),
(149,-5,qs)
);
},
{
closed = 1;
nodes = (
(125,180,o),
(92,214,o),
(92,242,qs),
(92,268,o),
(125,303,o),
(151,303,qs),
(177,303,o),
(211,268,o),
(211,241,qs),
(211,215,o),
(177,180,o),
(152,180,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
8 1 2 6 1 76 0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 51 77 0 1 1 4 97 7 1 4 4 52 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 36 33 18 9 9 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2089;
unicode = 8329;
},
{
glyphname = uni2070;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,342,o),
(294,440,o),
(294,524,qs),
(294,607,o),
(230,705,o),
(162,705,qs),
(94,705,o),
(30,606,o),
(30,524,qs),
(30,442,o),
(94,342,o),
(162,342,qs)
);
},
{
closed = 1;
nodes = (
(128,399,o),
(95,465,o),
(95,524,qs),
(95,583,o),
(128,648,o),
(162,648,qs),
(196,648,o),
(229,583,o),
(229,524,qs),
(229,465,o),
(196,399,o),
(162,399,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 59 77 5 1 3 3 1 97 4 1 1 1 60 1 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 10 23
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = uni2070;
unicode = 8304;
},
{
glyphname = uni00B9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(281,347,l),
(281,402,l),
(198,402,l),
(198,700,l),
(164,700,l),
(45,656,l),
(45,607,l),
(137,628,l),
(137,402,l),
(42,402,l),
(42,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 1 57 77 2 1 0 0 3 96 0 3 3 58 3 78 17 17 20 16 4 10 26
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = uni00B9;
unicode = 185;
},
{
glyphname = uni00B2;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(33,347,l),
(275,347,l),
(275,402,l),
(118,402,l),
(186,470,ls),
(220,505,o),
(246,536,o),
(267,577,o),
(267,600,qs),
(267,646,o),
(209,705,o),
(153,705,qs),
(99,705,o),
(34,645,o),
(33,589,q),
(96,589,l),
(96,615,o),
(125,651,o),
(151,651,qs),
(175,651,o),
(204,622,o),
(204,599,qs),
(204,579,o),
(172,538,o),
(136,502,qs),
(121,486,l),
(33,394,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
26 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 59 77 0 3 3 4 95 0 4 4 58 4 78 17 23 34 18 38 5 10 27
CALL[ ]	/* CallFunction */";
};
width = 310;
}
);
note = uni00B2;
unicode = 178;
},
{
glyphname = uni00B3;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,342,o),
(286,404,o),
(286,459,qs),
(286,502,o),
(234,562,o),
(186,566,q),
(275,647,l),
(275,700,l),
(45,700,l),
(45,645,l),
(196,645,l),
(88,549,l),
(124,507,l),
(142,517,o),
(161,517,qs),
(190,517,o),
(224,487,o),
(224,459,qs),
(224,429,o),
(190,397,o),
(161,397,qs),
(131,397,o),
(97,430,o),
(97,457,q),
(34,457,l),
(36,402,o),
(104,342,o),
(161,342,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 3 0 3 2 114 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 57 77 0 1 1 5 97 6 1 5 5 60 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 57 77 0 1 1 5 97 6 1 5 5 60 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 10 27
CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = uni00B3;
unicode = 179;
},
{
glyphname = uni2074;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,347,l),
(247,413,l),
(288,413,l),
(288,469,l),
(247,469,l),
(247,560,l),
(187,560,l),
(187,469,l),
(90,469,l),
(204,700,l),
(140,700,l),
(21,464,l),
(21,413,l),
(183,413,l),
(183,347,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 1 2 2 3 114 4 1 2 5 1 0 6 2 0 104 0 1 1 57 77 0 6 6 58 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 57 77 0 6 6 58 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 10 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = uni2074;
unicode = 8308;
},
{
glyphname = uni2075;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(211,342,o),
(282,413,o),
(282,469,qs),
(282,520,o),
(221,590,o),
(168,590,qs),
(145,590,o),
(107,575,o),
(95,562,q),
(111,644,l),
(258,644,l),
(258,700,l),
(63,700,l),
(33,499,l),
(95,499,l),
(102,516,o),
(135,538,o),
(157,538,qs),
(185,538,o),
(220,500,o),
(220,469,qs),
(220,438,o),
(184,397,o),
(156,397,qs),
(131,397,o),
(96,425,o),
(91,447,q),
(28,447,l),
(30,404,o),
(98,342,o),
(156,342,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 57 77 0 1 1 7 97 8 1 7 7 60 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 57 77 0 1 1 7 97 8 1 7 7 60 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 30 0 29 35 17 17 18 36 34 18 9 10 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2075;
unicode = 8309;
},
{
glyphname = uni2076;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,342,o),
(282,413,o),
(282,461,qs),
(282,507,o),
(222,575,o),
(176,575,qs),
(149,575,o),
(104,548,o),
(93,527,q),
(94,589,o),
(130,652,o),
(162,652,qs),
(206,652,o),
(216,604,q),
(275,604,l),
(270,649,o),
(209,705,o),
(163,705,qs),
(95,705,o),
(30,593,o),
(30,512,qs),
(30,438,o),
(98,342,o),
(165,342,qs)
);
},
{
closed = 1;
nodes = (
(135,397,o),
(101,432,o),
(101,459,qs),
(101,485,o),
(135,520,o),
(160,520,qs),
(187,520,o),
(220,486,o),
(220,458,qs),
(220,432,o),
(187,397,o),
(161,397,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
14 1 5 3 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 59 77 8 1 6 6 4 97 7 1 4 4 60 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 33 18 36 9 10 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2076;
unicode = 8310;
},
{
glyphname = uni2077;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(147,347,l),
(288,654,l),
(288,700,l),
(30,700,l),
(30,645,l),
(220,645,l),
(80,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 0 0 1 95 0 1 1 57 77 0 2 2 58 2 78 18 17 16 3 10 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = uni2077;
unicode = 8311;
},
{
glyphname = uni2078;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,342,o),
(275,398,o),
(275,446,qs),
(275,477,o),
(245,526,o),
(217,537,q),
(240,547,o),
(267,587,o),
(267,611,qs),
(267,654,o),
(201,705,o),
(153,705,qs),
(105,705,o),
(39,654,o),
(39,611,qs),
(39,587,o),
(65,547,o),
(88,537,q),
(60,525,o),
(30,477,o),
(30,446,qs),
(30,399,o),
(101,342,o),
(153,342,qs)
);
},
{
closed = 1;
nodes = (
(124,396,o),
(93,426,o),
(93,451,qs),
(93,478,o),
(126,508,o),
(154,508,qs),
(181,508,o),
(213,478,o),
(213,451,qs),
(213,425,o),
(181,396,o),
(154,396,qs)
);
},
{
closed = 1;
nodes = (
(130,556,o),
(102,582,o),
(102,604,qs),
(102,627,o),
(129,653,o),
(153,653,qs),
(176,653,o),
(204,627,o),
(204,604,qs),
(204,582,o),
(176,556,o),
(153,556,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
17 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 59 77 7 1 3 3 1 97 6 1 1 1 60 1 78 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 42 9 10 23
CALL[ ]	/* CallFunction */";
};
width = 305;
}
);
note = uni2078;
unicode = 8312;
},
{
glyphname = uni2079;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,342,o),
(282,454,o),
(282,535,qs),
(282,609,o),
(214,705,o),
(147,705,qs),
(96,705,o),
(30,634,o),
(30,586,qs),
(30,540,o),
(90,472,o),
(136,472,qs),
(163,472,o),
(208,499,o),
(219,520,q),
(218,458,o),
(182,395,o),
(150,395,qs),
(106,395,o),
(96,443,q),
(37,443,l),
(42,398,o),
(103,342,o),
(149,342,qs)
);
},
{
closed = 1;
nodes = (
(125,527,o),
(92,561,o),
(92,589,qs),
(92,615,o),
(125,650,o),
(151,650,qs),
(177,650,o),
(211,615,o),
(211,588,qs),
(211,562,o),
(177,527,o),
(152,527,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
8 1 2 6 1 76 0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 59 77 0 1 1 4 97 7 1 4 4 60 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 36 33 18 9 10 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2079;
unicode = 8313;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 265;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = period;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(122,-5,o),
(155,28,o),
(155,52,qs),
(155,76,o),
(122,109,o),
(98,109,qs),
(73,109,o),
(40,76,o),
(40,52,qs),
(40,28,o),
(73,-5,o),
(98,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 97 2 1 1 1 34 1 78 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 195;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
kernLeft = comma;
kernRight = comma;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(60,-119,l),
(147,102,l),
(60,102,l),
(2,-119,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 178;
}
);
note = comma;
unicode = 44;
},
{
glyphname = colon;
kernLeft = colon;
kernRight = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(122,394,o),
(155,427,o),
(155,451,qs),
(155,475,o),
(122,508,o),
(98,508,qs),
(73,508,o),
(40,475,o),
(40,451,qs),
(40,427,o),
(73,394,o),
(98,394,qs)
);
},
{
closed = 1;
nodes = (
(122,-5,o),
(155,28,o),
(155,52,qs),
(155,76,o),
(122,109,o),
(98,109,qs),
(73,109,o),
(40,76,o),
(40,52,qs),
(40,28,o),
(73,-5,o),
(98,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
4 1 1 1 0 97 0 0 0 42 77 0 2 2 3 97 5 1 3 3 34 3 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 199;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
kernLeft = semicolon;
kernRight = semicolon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(81,-119,l),
(168,102,l),
(81,102,l),
(23,-119,l)
);
},
{
closed = 1;
nodes = (
(147,394,o),
(180,427,o),
(180,451,qs),
(180,475,o),
(147,508,o),
(123,508,qs),
(98,508,o),
(65,475,o),
(65,451,qs),
(65,427,o),
(98,394,o),
(123,394,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 0 3 1 3 0 1 128 0 1 1 132 4 1 3 3 2 97 0 2 2 42 3 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 223;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = ellipsis;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,-5,o),
(523,28,o),
(523,52,qs),
(523,76,o),
(490,109,o),
(466,109,qs),
(441,109,o),
(408,76,o),
(408,52,qs),
(408,28,o),
(441,-5,o),
(466,-5,qs)
);
},
{
closed = 1;
nodes = (
(122,-5,o),
(155,28,o),
(155,52,qs),
(155,76,o),
(122,109,o),
(98,109,qs),
(73,109,o),
(40,76,o),
(40,52,qs),
(40,28,o),
(73,-5,o),
(98,-5,qs)
);
},
{
closed = 1;
nodes = (
(306,-5,o),
(339,28,o),
(339,52,qs),
(339,76,o),
(306,109,o),
(282,109,qs),
(257,109,o),
(224,76,o),
(224,52,qs),
(224,28,o),
(257,-5,o),
(282,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
4 2 2 0 0 1 97 8 5 7 3 6 5 1 1 34 1 78 24 24 12 12 0 0 24 35 24 34 30 28 12 23 12 22 18 16 0 11 0 10 36 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,194,l),
(168,700,l),
(77,700,l),
(87,194,l)
);
},
{
closed = 1;
nodes = (
(149,-5,o),
(182,28,o),
(182,52,qs),
(182,76,o),
(149,109,o),
(125,109,qs),
(100,109,o),
(67,76,o),
(67,52,qs),
(67,28,o),
(100,-5,o),
(125,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 1 0 95 0 0 0 33 77 0 2 2 3 97 4 1 3 3 34 3 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 248;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = exclamdown;
kernLeft = exclamdown;
kernRight = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(168,-143,l),
(158,363,l),
(87,363,l),
(77,-143,l)
);
},
{
closed = 1;
nodes = (
(149,448,o),
(182,481,o),
(182,505,qs),
(182,529,o),
(149,562,o),
(125,562,qs),
(100,562,o),
(67,529,o),
(67,505,qs),
(67,481,o),
(100,448,o),
(125,448,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 2 4 1 3 0 2 3 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 248;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = question;
kernLeft = question;
kernRight = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(224,196,l),
(227,299,l),
(299,299,o),
(354,320,qs),
(472,365,o),
(472,507,qs),
(472,570,o),
(444,616,qs),
(416,662,o),
(316,712,o),
(251,712,qs),
(186,712,o),
(137,687,qs),
(88,662,o),
(33,571,o),
(33,512,q),
(113,512,l),
(113,571,o),
(187,641,o),
(251,641,qs),
(314,641,o),
(391,569,o),
(391,507,qs),
(391,443,o),
(361,411,qs),
(333,381,o),
(241,357,o),
(178,357,qs),
(147,357,l),
(151,196,l)
);
},
{
closed = 1;
nodes = (
(212,-5,o),
(244,28,o),
(244,52,qs),
(244,76,o),
(212,109,o),
(187,109,qs),
(162,109,o),
(129,76,o),
(129,52,qs),
(129,28,o),
(162,-5,o),
(187,-5,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 2 1 0 1 2 0 128 0 5 4 6 4 5 114 0 0 0 4 5 0 4 105 0 1 1 3 97 0 3 3 39 77 0 6 6 7 97 8 1 7 7 34 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 2 1 0 1 2 0 128 0 5 4 6 4 5 6 128 0 0 0 4 5 0 4 105 0 1 1 3 97 0 3 3 39 77 0 6 6 7 97 8 1 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
30 30 30 41 30 40 37 17 23 36 18 38 32 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = question;
unicode = 63;
},
{
glyphname = questiondown;
kernLeft = questiondown;
kernRight = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(330,-164,o),
(379,-139,qs),
(428,-114,o),
(483,-23,o),
(483,36,q),
(403,36,l),
(403,-23,o),
(329,-93,o),
(265,-93,qs),
(202,-93,o),
(125,-21,o),
(125,41,qs),
(125,106,o),
(155,137,qs),
(183,167,o),
(275,191,o),
(338,191,qs),
(369,191,l),
(365,352,l),
(292,352,l),
(289,249,l),
(218,249,o),
(162,228,qs),
(44,183,o),
(44,41,qs),
(44,-22,o),
(72,-68,qs),
(100,-114,o),
(200,-164,o),
(265,-164,qs)
);
},
{
closed = 1;
nodes = (
(354,439,o),
(387,472,o),
(387,496,qs),
(387,520,o),
(354,553,o),
(329,553,qs),
(304,553,o),
(272,520,o),
(272,496,qs),
(272,472,o),
(304,439,o),
(329,439,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 1 7 0 0 1 114 0 4 2 3 2 4 3 128 0 6 9 1 7 1 6 7 105 0 0 0 2 4 0 2 106 0 3 5 5 3 89 0 3 3 5 97 8 1 5 3 5 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 1 7 0 7 1 0 128 0 4 2 3 2 4 3 128 0 6 9 1 7 1 6 7 105 0 0 0 2 4 0 2 106 0 3 5 5 3 89 0 3 3 5 97 8 1 5 3 5 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
30 30 0 0 30 41 30 40 36 34 0 29 0 28 18 38 33 17 23 10 8 27
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(122,285,o),
(155,318,o),
(155,342,qs),
(155,367,o),
(122,399,o),
(98,399,qs),
(73,399,o),
(40,367,o),
(40,342,qs),
(40,318,o),
(73,285,o),
(98,285,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 195;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(229,213,o),
(299,283,o),
(299,333,qs),
(299,384,o),
(229,454,o),
(178,454,qs),
(128,454,o),
(59,384,o),
(59,333,qs),
(59,283,o),
(128,213,o),
(178,213,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 358;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = asterisk;
kernLeft = asterisk;
kernRight = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,356,l),
(270,493,l),
(390,425,l),
(419,476,l),
(300,545,l),
(419,613,l),
(390,664,l),
(270,596,l),
(270,733,l),
(211,733,l),
(211,596,l),
(93,664,l),
(63,613,l),
(181,545,l),
(63,476,l),
(93,425,l),
(211,493,l),
(211,356,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
15 14 13 12 11 10 9 6 5 4 3 2 1 0 14 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 24 23 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 478;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(225,0,l),
(267,197,l),
(482,197,l),
(439,0,l),
(519,0,l),
(562,197,l),
(723,197,l),
(723,272,l),
(578,272,l),
(612,435,l),
(767,435,l),
(767,509,l),
(628,509,l),
(670,706,l),
(591,706,l),
(549,509,l),
(334,509,l),
(376,706,l),
(296,706,l),
(254,509,l),
(88,509,l),
(88,435,l),
(238,435,l),
(204,272,l),
(46,272,l),
(46,197,l),
(188,197,l),
(145,0,l)
);
},
{
closed = 1;
nodes = (
(318,435,l),
(533,435,l),
(498,272,l),
(283,272,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
16 15 9 3 1 12 10 2 0 11 1 0 103 6 1 4 4 33 77 14 8 2 2 2 3 95 7 5 2 3 3 36 77 13 1 11 11 34 11 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
7 5 2 3 14 8 2 2 1 3 2 104 16 15 9 3 1 12 10 2 0 11 1 0 103 6 1 4 4 33 77 13 1 11 11 34 11 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
28 28 28 31 28 31 30 29 27 26 25 24 23 22 21 20 19 18 17 17 17 17 17 17 17 17 16 17 8 31
CALL[ ]	/* CallFunction */";
};
width = 814;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = slash;
kernLeft = slash;
kernRight = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(111,-95,l),
(362,764,l),
(279,764,l),
(28,-95,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 391;
}
);
note = slash;
unicode = 47;
},
{
glyphname = backslash;
kernLeft = backslash;
kernRight = backslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(362,-95,l),
(112,764,l),
(28,764,l),
(280,-95,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 391;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = periodcentered.loclCAT;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,285,o),
(115,318,o),
(115,342,qs),
(115,367,o),
(82,399,o),
(58,399,qs),
(33,399,o),
(0,367,o),
(0,342,qs),
(0,318,o),
(33,285,o),
(58,285,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 115;
}
);
note = periodcentered.loclCAT;
},
{
glyphname = periodcentered.loclCAT.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-118,293,o),
(-85,326,o),
(-85,350,qs),
(-85,375,o),
(-118,407,o),
(-142,407,qs),
(-167,407,o),
(-200,375,o),
(-200,350,qs),
(-200,326,o),
(-167,293,o),
(-142,293,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = periodcentered.loclCAT.case;
},
{
glyphname = hyphen;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(455,255,l),
(455,326,l),
(59,326,l),
(59,255,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = endash;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(583,255,l),
(583,326,l),
(59,326,l),
(59,255,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 641;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(787,255,l),
(787,326,l),
(59,326,l),
(59,255,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 846;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = underscore;
kernLeft = underscore;
kernRight = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(583,-115,l),
(583,-36,l),
(59,-36,l),
(59,-115,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 642;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = parenleft;
kernRight = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(334,-145,l),
(334,-137,l),
(240,-43,o),
(131,199,o),
(131,333,qs),
(131,468,o),
(239,710,o),
(334,803,q),
(334,811,l),
(248,811,l),
(195,760,o),
(148,688,qs),
(100,613,o),
(47,434,o),
(47,333,qs),
(47,227,o),
(75,140,qs),
(101,54,o),
(191,-90,o),
(248,-145,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
19 17 2 0 73 0 0 0 118 25 1 8 23
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
kernLeft = parenright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(38,-145,l),
(124,-145,l),
(181,-90,o),
(271,54,o),
(298,140,qs),
(325,229,o),
(325,333,qs),
(325,434,o),
(272,613,o),
(224,688,qs),
(177,760,o),
(124,811,q),
(38,811,l),
(38,803,l),
(133,710,o),
(241,468,o),
(241,333,qs),
(241,199,o),
(132,-43,o),
(38,-137,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
5 1 0 74 0 0 0 118 18 17 1 8 22
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = braceleft;
kernLeft = braceleft;
kernRight = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(373,-152,l),
(373,-80,l),
(335,-80,ls),
(292,-80,o),
(250,-39,o),
(250,5,qs),
(250,30,o),
(257,77,o),
(261,98,qs),
(271,150,o),
(271,186,qs),
(271,241,o),
(216,315,o),
(160,329,q),
(160,331,l),
(216,343,o),
(271,418,o),
(271,473,qs),
(271,510,o),
(261,564,qs),
(250,615,o),
(250,654,qs),
(250,699,o),
(292,739,o),
(335,739,qs),
(373,739,l),
(373,811,l),
(320,811,ls),
(250,811,o),
(168,735,o),
(168,661,qs),
(168,635,o),
(175,588,o),
(179,568,qs),
(190,520,o),
(190,476,qs),
(190,386,o),
(87,364,q),
(87,296,l),
(190,274,o),
(190,184,qs),
(190,140,o),
(179,92,qs),
(175,72,o),
(168,25,o),
(168,-2,qs),
(168,-75,o),
(250,-152,o),
(320,-152,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
33 10 9 3 2 1 1 76 0 0 0 1 2 0 1 105 0 2 3 3 2 89 0 2 2 3 97 4 1 3 2 3 81 0 0 0 48 0 47 46 44 24 22 21 19 5 8 22
CALL[ ]	/* CallFunction */";
};
width = 425;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = braceright;
kernLeft = braceright;
kernRight = braceright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(105,-152,ls),
(175,-152,o),
(257,-75,o),
(257,-2,qs),
(257,25,o),
(250,72,o),
(246,92,qs),
(235,140,o),
(235,184,qs),
(235,274,o),
(338,296,q),
(338,364,l),
(235,386,o),
(235,476,qs),
(235,520,o),
(246,568,qs),
(250,588,o),
(257,635,o),
(257,661,qs),
(257,735,o),
(175,811,o),
(105,811,qs),
(52,811,l),
(52,739,l),
(90,739,ls),
(133,739,o),
(175,699,o),
(175,654,qs),
(175,633,o),
(169,590,o),
(166,571,qs),
(160,542,o),
(154,500,o),
(154,473,qs),
(154,418,o),
(209,343,o),
(265,331,q),
(265,329,l),
(209,315,o),
(154,241,o),
(154,186,qs),
(154,155,o),
(161,114,o),
(169,73,qs),
(175,33,o),
(175,5,qs),
(175,-39,o),
(133,-80,o),
(90,-80,qs),
(52,-80,l),
(52,-152,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
39 38 12 3 0 1 1 76 0 2 0 1 0 2 1 105 0 0 3 3 0 89 0 0 0 3 97 0 3 0 3 81 50 48 29 27 26 24 32 4 8 23
CALL[ ]	/* CallFunction */";
};
width = 425;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(248,-151,l),
(248,-81,l),
(153,-81,l),
(153,742,l),
(248,742,l),
(248,811,l),
(74,811,l),
(74,-151,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 307;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(233,-151,l),
(233,811,l),
(59,811,l),
(59,742,l),
(154,742,l),
(154,-81,l),
(59,-81,l),
(59,-151,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 2 0 1 0 2 1 103 0 0 3 3 0 87 0 0 0 3 95 0 3 0 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 307;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,-121,l),
(153,102,l),
(59,102,l),
(2,-121,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 184;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,-121,l),
(153,102,l),
(59,102,l),
(2,-121,l)
);
},
{
closed = 1;
nodes = (
(221,-121,l),
(311,102,l),
(217,102,l),
(161,-121,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 342;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(279,477,l),
(336,700,l),
(276,700,l),
(185,477,l)
);
},
{
closed = 1;
nodes = (
(123,477,l),
(179,700,l),
(119,700,l),
(29,477,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 370;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quotedblright;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(250,477,l),
(341,700,l),
(247,700,l),
(190,477,l)
);
},
{
closed = 1;
nodes = (
(93,477,l),
(185,700,l),
(91,700,l),
(33,477,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 370;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,477,l),
(179,700,l),
(119,700,l),
(29,477,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 212;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = quoteright;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,477,l),
(185,700,l),
(91,700,l),
(33,477,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 33 0 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 213;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = guillemotleft;
kernLeft = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(402,120,l),
(302,295,l),
(402,470,l),
(319,470,l),
(222,295,l),
(319,120,l)
);
},
{
closed = 1;
nodes = (
(224,120,l),
(124,295,l),
(224,470,l),
(141,470,l),
(44,295,l),
(141,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 3 2 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 452;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(311,120,l),
(408,295,l),
(311,470,l),
(228,470,l),
(328,295,l),
(228,120,l)
);
},
{
closed = 1;
nodes = (
(133,120,l),
(230,295,l),
(133,470,l),
(50,470,l),
(150,295,l),
(50,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 3 2 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 452;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = guilsinglleft;
kernLeft = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(224,120,l),
(124,295,l),
(224,470,l),
(141,470,l),
(44,295,l),
(141,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 274;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(133,120,l),
(230,295,l),
(133,470,l),
(50,470,l),
(150,295,l),
(50,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 274;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = quotedbl;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(250,477,l),
(341,700,l),
(247,700,l),
(190,477,l)
);
},
{
closed = 1;
nodes = (
(93,477,l),
(185,700,l),
(91,700,l),
(33,477,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 370;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,477,l),
(185,700,l),
(91,700,l),
(33,477,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 33 0 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 213;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = florin;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-19,-191,ls),
(51,-191,o),
(125,-126,o),
(133,-54,qs),
(189,478,l),
(311,478,l),
(317,548,l),
(197,548,l),
(202,596,ls),
(207,649,o),
(266,695,o),
(326,695,q),
(332,766,l),
(232,766,o),
(127,684,o),
(118,596,qs),
(113,548,l),
(39,548,l),
(33,478,l),
(105,478,l),
(49,-54,ls),
(44,-92,o),
(15,-121,o),
(-16,-121,qs),
(-38,-121,l),
(-44,-191,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 3 0 4 2 3 4 105 5 1 2 6 1 1 0 2 1 103 0 0 7 7 0 89 0 0 0 7 97 0 7 0 7 81 35 17 19 17 19 17 19 32 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 333;
}
);
note = florin;
unicode = 402;
},
{
glyphname = at;
kernLeft = at;
kernRight = at;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(577,-212,o),
(634,-200,qs),
(684,-190,o),
(721,-173,q),
(701,-113,l),
(621,-150,o),
(519,-150,qs),
(414,-150,o),
(241,-59,o),
(140,109,o),
(140,218,qs),
(140,325,o),
(240,496,o),
(415,593,o),
(523,593,qs),
(632,593,o),
(802,508,o),
(897,350,o),
(897,246,qs),
(897,176,o),
(846,73,o),
(791,73,qs),
(759,73,o),
(724,114,o),
(724,147,qs),
(724,425,l),
(644,425,l),
(644,370,l),
(591,435,o),
(499,435,qs),
(437,435,o),
(341,380,o),
(288,281,o),
(288,219,qs),
(288,156,o),
(341,57,o),
(436,0,o),
(498,0,qs),
(551,0,o),
(625,44,o),
(655,80,q),
(671,42,o),
(734,2,o),
(777,2,qs),
(838,2,o),
(922,69,o),
(964,180,o),
(964,248,qs),
(964,370,o),
(846,554,o),
(645,654,o),
(523,654,qs),
(396,654,o),
(191,545,o),
(72,346,o),
(72,218,qs),
(72,91,o),
(187,-104,o),
(390,-212,o),
(519,-212,qs)
);
},
{
closed = 1;
nodes = (
(449,72,o),
(371,152,o),
(371,218,qs),
(371,282,o),
(447,364,o),
(510,364,qs),
(574,364,o),
(650,283,o),
(650,218,qs),
(650,155,o),
(575,72,o),
(510,72,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
31 1 9 3 18 1 5 9 54 1 7 1 55 1 8 7 4 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
31 1 9 4 18 1 5 9 54 1 7 1 55 1 8 7 4 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 0 0 6 3 0 6 105 4 1 3 0 9 5 3 9 105 12 10 2 5 5 1 97 2 1 1 1 34 77 0 7 7 8 97 11 1 8 8 38 8 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 4 3 9 3 4 9 128 0 0 0 6 3 0 6 105 0 3 0 9 5 3 9 105 12 10 2 5 5 1 97 2 1 1 1 34 77 0 7 7 8 97 11 1 8 8 38 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
60 60 0 0 60 71 60 70 66 64 0 59 0 58 38 37 35 18 38 36 38 38 13 8 30
CALL[ ]	/* CallFunction */";
};
width = 1034;
}
);
note = at;
unicode = 64;
},
{
glyphname = ampersand;
kernLeft = ampersand;
kernRight = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(321,-12,o),
(417,40,o),
(457,87,q),
(462,95,l),
(558,0,l),
(662,0,l),
(506,154,l),
(648,404,l),
(561,404,l),
(452,207,l),
(307,350,ls),
(261,395,o),
(214,447,o),
(184,504,o),
(184,534,qs),
(184,581,o),
(244,640,o),
(295,640,qs),
(349,640,o),
(411,579,o),
(411,522,q),
(493,522,l),
(493,609,o),
(386,712,o),
(296,712,qs),
(238,712,o),
(150,665,o),
(102,585,o),
(102,535,qs),
(102,464,o),
(161,394,qs),
(167,387,l),
(161,382,ls),
(111,347,o),
(45,248,o),
(45,188,qs),
(45,134,o),
(96,42,o),
(193,-12,o),
(258,-12,qs)
);
},
{
closed = 1;
nodes = (
(221,61,o),
(159,97,o),
(126,157,o),
(126,191,qs),
(126,273,o),
(219,333,q),
(411,145,l),
(378,102,o),
(307,61,o),
(262,61,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
43 42 35 32 29 7 6 6 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 1 2 3 2 1 3 128 0 2 2 0 97 0 0 0 39 77 0 3 3 4 97 7 5 2 4 4 34 77 8 1 6 6 4 97 7 5 2 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 1 2 3 2 1 3 128 0 2 2 0 97 0 0 0 39 77 0 3 3 4 95 0 4 4 34 77 8 1 6 6 5 97 7 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
40 40 0 0 40 49 40 48 0 39 0 38 18 24 34 18 45 9 8 27
CALL[ ]	/* CallFunction */";
};
width = 691;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(356,-100,l),
(356,634,l),
(438,634,l),
(438,-100,l),
(512,-100,l),
(512,700,l),
(272,700,ls),
(192,700,o),
(139,673,qs),
(88,646,o),
(36,555,o),
(36,497,qs),
(36,439,o),
(61,395,qs),
(87,348,o),
(193,295,o),
(272,295,qs),
(282,295,l),
(282,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 0 3 2 3 0 2 128 4 1 2 2 132 0 3 3 1 95 0 1 1 33 3 78 17 17 17 40 32 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 586;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(351,-232,o),
(451,-186,o),
(509,-102,o),
(509,-45,qs),
(509,14,o),
(482,52,q),
(511,78,o),
(525,114,qs),
(539,146,o),
(539,185,qs),
(539,245,o),
(516,281,qs),
(494,320,o),
(454,344,qs),
(413,369,o),
(364,385,qs),
(258,421,ls),
(212,436,o),
(187,460,qs),
(161,484,o),
(161,528,qs),
(161,581,o),
(235,642,o),
(291,640,qs),
(350,640,o),
(428,574,o),
(428,518,q),
(516,518,l),
(516,571,o),
(463,660,o),
(363,712,o),
(294,712,qs),
(230,712,o),
(130,666,o),
(73,579,o),
(73,520,qs),
(73,466,o),
(100,428,q),
(44,372,o),
(44,295,qs),
(44,214,o),
(132,127,o),
(219,95,qs),
(325,60,ls),
(374,44,o),
(422,-3,o),
(422,-48,qs),
(422,-102,o),
(351,-160,o),
(292,-160,qs),
(246,-160,o),
(184,-122,o),
(155,-66,o),
(155,-38,q),
(67,-38,l),
(68,-96,o),
(126,-184,o),
(225,-232,o),
(289,-232,qs)
);
},
{
closed = 1;
nodes = (
(384,127,o),
(264,166,qs),
(201,187,o),
(131,243,o),
(131,300,qs),
(131,346,o),
(161,376,q),
(196,358,ls),
(204,354,o),
(291,324,o),
(320,315,qs),
(384,295,o),
(452,235,o),
(452,180,qs),
(452,134,o),
(422,104,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
74 67 52 20 4 0 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 39 77 0 1 1 5 97 6 1 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 1 6 1 5 1 5 101 0 4 4 2 97 0 2 2 39 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 58 0 57 35 33 31 30 27 25 35 19 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = section;
unicode = 167;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(501,-4,o),
(578,42,qs),
(656,87,o),
(743,248,o),
(743,350,qs),
(743,455,o),
(700,534,qs),
(656,615,o),
(499,704,o),
(397,704,qs),
(294,704,o),
(216,659,qs),
(137,614,o),
(51,453,o),
(51,350,qs),
(51,247,o),
(95,167,qs),
(139,86,o),
(295,-4,o),
(397,-4,qs)
);
},
{
closed = 1;
nodes = (
(472,119,o),
(583,201,o),
(602,270,q),
(525,270,l),
(494,179,o),
(396,179,qs),
(335,179,o),
(254,269,o),
(254,350,qs),
(254,433,o),
(335,522,o),
(396,522,qs),
(442,522,o),
(511,474,o),
(525,430,q),
(602,430,l),
(584,503,o),
(473,583,o),
(397,583,qs),
(338,583,o),
(288,556,qs),
(238,527,o),
(180,422,o),
(180,351,qs),
(180,279,o),
(210,226,qs),
(239,174,o),
(336,119,o),
(397,119,qs)
);
},
{
closed = 1;
nodes = (
(302,33,o),
(234,73,qs),
(165,113,o),
(90,257,o),
(90,350,qs),
(90,444,o),
(128,517,qs),
(166,589,o),
(304,668,o),
(397,668,qs),
(492,668,o),
(560,628,qs),
(629,588,o),
(704,445,o),
(704,350,qs),
(704,256,o),
(667,185,qs),
(629,112,o),
(490,33,o),
(397,33,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 93 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 0 0 8 2 0 8 105 0 2 0 4 3 2 4 105 0 5 11 1 7 9 5 7 105 12 1 9 1 1 9 89 12 1 9 9 1 97 10 1 1 9 1 81 49 49 20 20 0 0 49 68 49 67 59 57 20 48 20 47 45 44 43 41 37 35 33 32 30 28 0 19 0 18 40 13 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 794;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = registered;
kernLeft = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(228,425,o),
(294,463,o),
(332,529,o),
(332,568,qs),
(332,607,o),
(294,673,o),
(228,712,o),
(189,712,qs),
(150,712,o),
(84,673,o),
(45,607,o),
(45,568,qs),
(45,529,o),
(84,463,o),
(150,425,o),
(189,425,qs)
);
},
{
closed = 1;
nodes = (
(140,448,o),
(69,519,o),
(69,568,qs),
(69,618,o),
(140,688,o),
(189,688,qs),
(239,688,o),
(309,618,o),
(309,568,qs),
(309,519,o),
(239,448,o),
(189,448,qs)
);
},
{
closed = 1;
nodes = (
(168,496,l),
(168,561,l),
(186,561,l),
(221,496,l),
(254,496,l),
(213,568,l),
(242,578,o),
(242,607,qs),
(242,625,o),
(220,651,o),
(194,651,qs),
(140,651,l),
(140,496,l)
);
},
{
closed = 1;
nodes = (
(168,585,l),
(168,628,l),
(190,628,ls),
(202,628,o),
(215,617,o),
(215,607,qs),
(215,596,o),
(200,585,o),
(187,585,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 6 values pushed */
34 1 6 9 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
7 1 5 6 3 8 5 114 0 0 0 2 4 0 2 105 0 4 0 8 9 4 8 105 12 1 9 0 6 5 9 6 103 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
7 1 5 6 3 6 5 3 128 0 0 0 2 4 0 2 105 0 4 0 8 9 4 8 105 12 1 9 0 6 5 9 6 103 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
41 41 16 16 0 0 41 49 41 48 47 45 40 39 38 37 36 35 30 28 16 27 16 26 22 20 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 377;
}
);
note = registered;
unicode = 174;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(386,350,l),
(386,610,l),
(478,396,l),
(526,396,l),
(619,606,l),
(619,350,l),
(682,350,l),
(682,700,l),
(602,700,l),
(504,475,l),
(411,700,l),
(326,700,l),
(326,350,l)
);
},
{
closed = 1;
nodes = (
(182,350,l),
(182,647,l),
(272,647,l),
(272,700,l),
(27,700,l),
(27,647,l),
(117,647,l),
(117,350,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
10 7 2 3 3 5 1 76 0 3 5 2 5 3 2 128 8 4 2 2 2 132 6 1 2 0 5 5 0 87 6 1 2 0 0 5 95 7 1 5 0 5 79 17 17 17 17 18 18 17 18 16 9 6 31
CALL[ ]	/* CallFunction */";
};
width = 732;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(227,444,o),
(303,519,o),
(303,577,qs),
(303,638,o),
(227,712,o),
(172,712,qs),
(116,712,o),
(39,636,o),
(39,577,qs),
(39,518,o),
(115,444,o),
(171,444,qs)
);
},
{
closed = 1;
nodes = (
(144,506,o),
(105,544,o),
(105,578,qs),
(105,612,o),
(145,650,o),
(172,650,qs),
(198,650,o),
(238,612,o),
(238,578,qs),
(238,544,o),
(197,506,o),
(171,506,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 343;
}
);
note = degree;
unicode = 176;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,-100,l),
(158,720,l),
(74,720,l),
(74,-100,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 0 1 134 0 0 0 33 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 9 values pushed */
0 0 1 0 133 0 1 1 118
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 232;
}
);
note = bar;
unicode = 124;
},
{
glyphname = brokenbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,387,l),
(158,720,l),
(74,720,l),
(74,387,l)
);
},
{
closed = 1;
nodes = (
(158,-100,l),
(158,233,l),
(74,233,l),
(74,-100,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 2 0 3 2 3 99 0 1 1 0 95 0 0 0 33 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 232;
}
);
note = brokenbar;
unicode = 166;
},
{
glyphname = dagger;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(307,-259,l),
(299,488,l),
(489,481,l),
(489,548,l),
(299,540,l),
(307,780,l),
(224,780,l),
(232,540,l),
(41,548,l),
(41,481,l),
(232,488,l),
(224,-259,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 1 2 133 0 5 0 5 134 3 1 1 0 0 1 87 3 1 1 1 0 96 4 1 0 1 0 80 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 531;
}
);
note = dagger;
unicode = 8224;
},
{
glyphname = uni2113;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,-100,l),
(158,720,l),
(74,720,l),
(74,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 232;
}
);
note = uni2113;
unicode = 8467;
},
{
glyphname = daggerdbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(307,-259,l),
(299,-19,l),
(490,-26,l),
(490,41,l),
(299,33,l),
(299,488,l),
(490,481,l),
(490,548,l),
(299,540,l),
(307,780,l),
(224,780,l),
(233,540,l),
(42,548,l),
(42,481,l),
(233,488,l),
(233,33,l),
(42,41,l),
(42,-26,l),
(233,-19,l),
(224,-259,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 1 0 95 8 1 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 18 17 17 17 17 17 17 17 17 16 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 532;
}
);
note = daggerdbl;
unicode = 8225;
},
{
glyphname = estimated;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(557,-12,o),
(694,136,q),
(654,179,l),
(587,112,o),
(464,46,o),
(390,46,qs),
(318,46,o),
(214,96,o),
(173,147,q),
(173,317,l),
(722,317,l),
(722,380,ls),
(722,445,o),
(677,564,o),
(634,610,qs),
(589,659,o),
(461,712,o),
(381,712,qs),
(270,712,o),
(195,662,qs),
(119,612,o),
(40,440,o),
(40,334,qs),
(40,222,o),
(86,146,qs),
(131,69,o),
(288,-12,o),
(390,-12,qs)
);
},
{
closed = 1;
nodes = (
(173,551,l),
(208,603,o),
(315,654,o),
(381,654,qs),
(445,654,o),
(547,606,o),
(579,562,q),
(579,381,l),
(173,381,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
35 29 2 5 4 25 24 18 3 2 1 2 76 0 0 0 4 5 0 4 105 7 1 5 0 1 2 5 1 103 0 2 3 3 2 89 0 2 2 3 97 6 1 3 2 3 81 28 28 0 0 28 36 28 36 33 31 0 27 0 26 35 22 40 8 6 25
CALL[ ]	/* CallFunction */";
};
width = 762;
}
);
note = estimated;
unicode = 8494;
},
{
glyphname = at.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(577,-84,o),
(634,-72,qs),
(684,-62,o),
(721,-45,q),
(701,15,l),
(621,-22,o),
(519,-22,qs),
(414,-22,o),
(241,69,o),
(140,237,o),
(140,346,qs),
(140,453,o),
(240,624,o),
(415,721,o),
(523,721,qs),
(632,721,o),
(802,636,o),
(897,478,o),
(897,374,qs),
(897,304,o),
(846,201,o),
(791,201,qs),
(759,201,o),
(724,242,o),
(724,275,qs),
(724,553,l),
(644,553,l),
(644,498,l),
(591,563,o),
(499,563,qs),
(437,563,o),
(341,508,o),
(288,409,o),
(288,347,qs),
(288,284,o),
(341,185,o),
(436,128,o),
(498,128,qs),
(551,128,o),
(625,172,o),
(655,208,q),
(671,170,o),
(734,130,o),
(777,130,qs),
(838,130,o),
(922,197,o),
(964,308,o),
(964,376,qs),
(964,498,o),
(846,682,o),
(645,782,o),
(523,782,qs),
(396,782,o),
(191,673,o),
(72,474,o),
(72,346,qs),
(72,219,o),
(187,24,o),
(390,-84,o),
(519,-84,qs)
);
},
{
closed = 1;
nodes = (
(449,200,o),
(371,280,o),
(371,346,qs),
(371,410,o),
(447,492,o),
(510,492,qs),
(574,492,o),
(650,411,o),
(650,346,qs),
(650,283,o),
(575,200,o),
(510,200,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
31 1 9 3 18 1 5 9 54 1 7 1 55 1 8 7 4 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
31 1 9 4 18 1 5 9 54 1 7 1 55 1 8 7 4 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 6 3 0 6 105 4 1 3 0 9 5 3 9 105 12 10 2 5 2 1 1 7 5 1 105 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 4 3 9 3 4 9 128 0 0 0 6 3 0 6 105 0 3 0 9 5 3 9 105 12 10 2 5 2 1 1 7 5 1 105 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
60 60 0 0 60 71 60 70 66 64 0 59 0 58 38 37 35 18 38 36 38 38 13 8 30
CALL[ ]	/* CallFunction */";
};
width = 1028;
}
);
note = at.case;
},
{
glyphname = registered.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(228,629,o),
(294,667,o),
(332,733,o),
(332,772,qs),
(332,811,o),
(294,877,o),
(228,916,o),
(189,916,qs),
(150,916,o),
(84,877,o),
(45,811,o),
(45,772,qs),
(45,733,o),
(84,667,o),
(150,629,o),
(189,629,qs)
);
},
{
closed = 1;
nodes = (
(140,652,o),
(69,723,o),
(69,772,qs),
(69,822,o),
(140,892,o),
(189,892,qs),
(239,892,o),
(309,822,o),
(309,772,qs),
(309,723,o),
(239,652,o),
(189,652,qs)
);
},
{
closed = 1;
nodes = (
(168,700,l),
(168,765,l),
(186,765,l),
(221,700,l),
(254,700,l),
(213,772,l),
(242,782,o),
(242,811,qs),
(242,829,o),
(220,855,o),
(194,855,qs),
(140,855,l),
(140,700,l)
);
},
{
closed = 1;
nodes = (
(168,789,l),
(168,832,l),
(190,832,ls),
(202,832,o),
(215,821,o),
(215,811,qs),
(215,800,o),
(200,789,o),
(187,789,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
34 1 6 9 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
7 1 5 6 3 8 5 114 0 0 0 2 4 0 2 105 0 4 0 8 9 4 8 105 12 1 9 0 6 5 9 6 103 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
7 1 5 6 3 6 5 3 128 0 0 0 2 4 0 2 105 0 4 0 8 9 4 8 105 12 1 9 0 6 5 9 6 103 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
41 41 16 16 0 0 41 49 41 48 47 45 40 39 38 37 36 35 30 28 16 27 16 26 22 20 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 377;
}
);
note = registered.case;
},
{
glyphname = uni20BF;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,0,l),
(186,-86,l),
(255,-86,l),
(255,0,l),
(319,0,l),
(319,-86,l),
(388,-86,l),
(388,3,l),
(474,15,o),
(561,120,o),
(561,199,qs),
(561,263,o),
(489,355,o),
(421,377,q),
(468,391,o),
(529,473,o),
(529,529,qs),
(529,590,o),
(455,676,o),
(388,692,q),
(388,791,l),
(319,791,l),
(319,700,l),
(315,700,l),
(255,700,l),
(255,791,l),
(186,791,l),
(186,700,l),
(74,700,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(158,70,l),
(158,339,l),
(310,339,ls),
(386,339,o),
(476,272,o),
(476,204,qs),
(476,136,o),
(391,70,o),
(312,70,qs)
);
},
{
closed = 1;
nodes = (
(158,406,l),
(158,630,l),
(306,630,ls),
(373,630,o),
(444,571,o),
(444,518,qs),
(444,466,o),
(373,406,o),
(309,406,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
9 1 10 0 15 1 8 11 21 1 5 9 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
3 1 1 0 0 1 112 6 1 4 5 5 4 113 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
3 1 1 0 1 133 6 1 4 5 5 4 113 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
3 1 1 0 1 133 6 1 4 5 4 134 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
39 39 30 30 39 47 39 46 45 43 30 38 30 37 37 17 17 17 30 18 17 17 16 14 8 31
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = uni20BF;
unicode = 8383;
},
{
glyphname = cent;
layers = (
{
anchors = (
{
name = bottom;
pos = (375,7);
},
{
name = top;
pos = (375,693);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,-86,l),
(391,-5,l),
(501,-1,o),
(642,110,o),
(662,206,q),
(570,206,l),
(556,148,o),
(472,76,o),
(404,69,q),
(497,600,l),
(553,563,o),
(570,491,q),
(662,491,l),
(648,558,o),
(571,654,o),
(511,680,q),
(531,791,l),
(462,791,l),
(446,699,l),
(416,704,o),
(384,705,q),
(399,791,l),
(330,791,l),
(314,700,l),
(230,687,o),
(110,590,o),
(48,440,o),
(48,350,qs),
(48,248,o),
(126,87,o),
(198,42,q),
(176,-86,l),
(245,-86,l),
(262,12,l),
(294,2,o),
(323,-2,q),
(308,-86,l)
);
},
{
closed = 1;
nodes = (
(132,452,o),
(218,599,o),
(300,622,q),
(213,127,l),
(173,165,o),
(132,280,o),
(132,350,qs)
);
},
{
closed = 1;
nodes = (
(371,632,l),
(375,632,ls),
(406,632,o),
(433,626,q),
(336,71,l),
(302,76,o),
(275,87,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
20 17 2 8 2 46 40 26 3 4 8 50 39 27 5 2 5 6 5 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
3 1 1 2 2 1 112 0 4 8 5 8 4 5 128 0 5 6 8 5 6 126 7 1 0 6 0 134 0 8 8 2 97 0 2 2 33 77 0 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
3 1 1 2 1 133 0 4 8 5 8 4 5 128 0 5 6 8 5 6 126 7 1 0 6 0 134 0 8 8 2 97 0 2 2 33 77 0 6 6 34 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
27 17 18 22 20 18 17 25 19 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 710;
}
);
note = cent;
unicode = 162;
},
{
glyphname = currency;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(162,152,l),
(205,121,o),
(266,121,qs),
(326,121,o),
(370,152,q),
(429,92,l),
(467,130,l),
(408,189,l),
(441,235,o),
(441,297,qs),
(441,361,o),
(407,406,q),
(467,466,l),
(429,504,l),
(369,443,l),
(326,473,o),
(267,473,qs),
(208,473,o),
(164,443,q),
(103,504,l),
(65,466,l),
(126,406,l),
(92,361,o),
(92,297,qs),
(92,235,o),
(124,189,q),
(65,130,l),
(103,92,l)
);
},
{
closed = 1;
nodes = (
(226,186,o),
(171,241,o),
(171,297,qs),
(171,353,o),
(226,409,o),
(266,409,qs),
(305,409,o),
(362,352,o),
(362,297,qs),
(362,244,o),
(308,186,o),
(266,186,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
14 12 8 6 4 2 0 19 15 5 1 4 3 2 26 22 20 3 1 3 3 76 13 7 2 0 74 27 21 2 1 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
4 1 3 0 1 3 1 101 0 2 2 0 97 0 0 0 36 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 2 3 0 2 105 4 1 3 1 1 3 89 4 1 3 3 1 97 0 1 3 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
28 28 28 39 28 38 39 44 41 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 532;
}
);
note = currency;
unicode = 164;
},
{
glyphname = dollar;
kernLeft = S;
kernRight = S;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(254,-86,l),
(323,-86,l),
(323,-11,l),
(414,-4,o),
(533,99,o),
(533,183,qs),
(533,243,o),
(486,320,o),
(400,369,o),
(329,393,qs),
(323,395,l),
(323,636,l),
(368,625,o),
(422,561,o),
(422,518,q),
(510,518,l),
(508,600,o),
(405,701,o),
(323,710,q),
(323,791,l),
(254,791,l),
(254,710,l),
(171,701,o),
(66,601,o),
(68,520,qs),
(68,452,o),
(147,370,o),
(227,342,qs),
(254,333,l),
(254,63,l),
(198,74,o),
(132,152,o),
(132,210,q),
(44,210,l),
(44,117,o),
(160,2,o),
(254,-9,q)
);
},
{
closed = 1;
nodes = (
(323,310,l),
(369,294,o),
(420,263,o),
(446,216,o),
(446,178,qs),
(446,128,o),
(379,66,o),
(323,60,q)
);
},
{
closed = 1;
nodes = (
(254,419,l),
(196,441,o),
(155,485,o),
(155,528,qs),
(155,574,o),
(210,632,o),
(254,638,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
51 24 17 14 4 2 1 50 43 25 7 4 0 2 44 36 33 6 4 3 0 3 76 0 1 2 1 133 0 2 0 2 133 0 0 3 0 133 0 3 3 118 29 20 28 18 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = Euro;
kernRight = C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(555,-12,o),
(706,101,o),
(727,203,q),
(634,203,l),
(618,137,o),
(517,62,o),
(435,62,qs),
(348,62,o),
(225,157,o),
(201,242,q),
(455,242,l),
(455,305,l),
(190,305,l),
(188,333,o),
(188,350,qs),
(188,366,o),
(190,396,q),
(455,396,l),
(455,458,l),
(202,458,l),
(225,544,o),
(347,638,o),
(435,638,qs),
(517,638,o),
(618,562,o),
(634,494,q),
(727,494,l),
(706,598,o),
(555,712,o),
(435,712,qs),
(310,712,o),
(141,576,o),
(114,458,q),
(23,458,l),
(23,396,l),
(104,396,l),
(102,350,l),
(104,305,l),
(23,305,l),
(23,242,l),
(113,242,l),
(140,124,o),
(310,-12,o),
(435,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
0 5 6 3 6 5 3 128 0 12 0 11 0 12 11 128 7 1 3 8 1 2 1 3 2 103 9 1 1 10 1 0 12 1 0 103 0 6 6 4 97 0 4 4 39 77 0 11 11 13 97 14 1 13 13 40 13 78 0 0 0 43 0 42 40 39 37 35 33 32 31 30 17 18 34 18 34 17 18 17 18 15 8 31
CALL[ ]	/* CallFunction */";
};
width = 775;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = uni20BD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(211,0,l),
(211,126,l),
(434,126,l),
(434,193,l),
(211,193,l),
(211,294,l),
(347,294,ls),
(456,294,o),
(586,397,o),
(586,496,qs),
(586,593,o),
(459,699,o),
(347,699,qs),
(127,699,l),
(127,363,l),
(40,363,l),
(40,294,l),
(127,294,l),
(127,193,l),
(40,193,l),
(40,126,l),
(127,126,l),
(127,0,l)
);
},
{
closed = 1;
nodes = (
(211,363,l),
(211,633,l),
(346,633,ls),
(501,633,o),
(501,496,qs),
(501,433,o),
(426,363,o),
(346,363,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
11 10 2 3 5 1 2 1 3 2 103 6 1 1 7 1 0 8 1 0 103 0 9 9 4 95 0 4 4 33 77 0 8 8 34 8 78 23 23 23 30 23 29 28 26 17 17 17 36 33 17 17 17 16 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 621;
}
);
note = uni20BD;
unicode = 8381;
},
{
glyphname = uni20A8;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (831,0);
},
{
name = top;
pos = (826,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (576,0);
ref = s;
}
);
width = 1076;
}
);
note = uni20A8;
unicode = 8360;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,0,l),
(541,0,l),
(541,69,l),
(176,69,l),
(249,145,o),
(249,242,qs),
(249,262,o),
(245,289,o),
(239,310,q),
(412,310,l),
(412,369,l),
(220,369,l),
(206,408,o),
(189,471,o),
(189,503,qs),
(189,575,o),
(268,642,o),
(322,642,qs),
(388,642,o),
(459,566,o),
(462,507,q),
(539,507,l),
(534,603,o),
(418,712,o),
(322,712,qs),
(261,712,o),
(164,663,o),
(109,570,o),
(109,507,qs),
(109,470,o),
(123,411,o),
(138,369,q),
(45,369,l),
(45,310,l),
(159,310,l),
(165,288,o),
(170,259,o),
(170,240,qs),
(170,183,o),
(132,105,o),
(87,54,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
40 1 8 7 1 76 0 3 4 1 4 3 1 128 5 1 1 6 1 0 7 1 0 103 0 4 4 2 97 0 2 2 39 77 0 7 7 8 95 0 8 8 34 8 78 17 21 17 21 34 18 38 17 21 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = yen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(343,0,l),
(343,167,l),
(543,167,l),
(543,228,l),
(343,228,l),
(343,266,l),
(370,318,l),
(543,318,l),
(543,379,l),
(402,379,l),
(570,700,l),
(475,700,l),
(301,343,l),
(126,700,l),
(31,700,l),
(200,379,l),
(59,379,l),
(59,318,l),
(232,318,l),
(259,266,l),
(259,228,l),
(59,228,l),
(59,167,l),
(259,167,l),
(259,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
11 1 2 3 18 4 2 1 2 2 76 6 1 3 7 1 2 1 3 2 104 8 1 1 9 1 0 10 1 0 103 5 1 4 4 33 77 0 10 10 34 10 78 24 23 22 21 18 17 17 18 17 17 18 17 16 11 8 31
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = yen;
unicode = 165;
},
{
glyphname = cent.001;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(255,-104,l),
(336,-104,l),
(336,-9,l),
(409,1,o),
(508,90,o),
(522,157,q),
(436,157,l),
(426,111,o),
(349,59,o),
(296,59,qs),
(255,59,o),
(181,101,o),
(134,187,o),
(134,248,qs),
(134,299,o),
(172,385,o),
(245,436,o),
(296,436,qs),
(349,436,o),
(426,384,o),
(436,339,q),
(522,339,l),
(508,407,o),
(409,496,o),
(336,505,q),
(336,600,l),
(255,600,l),
(255,505,l),
(194,496,o),
(148,462,qs),
(101,427,o),
(48,317,o),
(48,248,qs),
(48,178,o),
(75,124,qs),
(101,69,o),
(194,0,o),
(255,-9,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
12 9 2 2 0 37 34 2 5 3 2 76 0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 3 5 5 3 89 0 3 3 5 95 0 5 3 5 79 20 18 38 34 20 26 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 570;
}
);
note = cent.001;
},
{
glyphname = uni2215;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(111,-95,l),
(362,764,l),
(279,764,l),
(28,-95,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 391;
}
);
note = uni2215;
unicode = 8725;
},
{
glyphname = plus;
kernLeft = plus;
kernRight = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(338,72,l),
(338,255,l),
(529,255,l),
(529,326,l),
(338,326,l),
(338,508,l),
(263,508,l),
(263,326,l),
(72,326,l),
(72,255,l),
(263,255,l),
(263,72,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
3 1 1 4 1 0 5 1 0 103 0 5 5 2 95 0 2 2 36 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 2 1 5 2 87 3 1 1 4 1 0 5 1 0 103 0 2 2 5 95 0 5 2 5 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = plus;
unicode = 43;
},
{
glyphname = minus;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(498,255,l),
(498,326,l),
(102,326,l),
(102,255,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = multiply;
kernLeft = multiply;
kernRight = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(300,241,l),
(429,112,l),
(480,162,l),
(351,291,l),
(485,426,l),
(435,476,l),
(301,341,l),
(172,470,l),
(121,420,l),
(250,291,l),
(116,156,l),
(166,106,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
11 5 1 50
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(499,255,l),
(499,326,l),
(101,326,l),
(101,255,l)
);
},
{
closed = 1;
nodes = (
(324,89,o),
(357,122,o),
(357,146,qs),
(357,170,o),
(324,203,o),
(300,203,qs),
(275,203,o),
(242,170,o),
(242,146,qs),
(242,122,o),
(275,89,o),
(300,89,qs)
);
},
{
closed = 1;
nodes = (
(324,378,o),
(357,412,o),
(357,436,qs),
(357,460,o),
(324,493,o),
(300,493,qs),
(275,493,o),
(242,460,o),
(242,436,qs),
(242,412,o),
(275,378,o),
(300,378,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
0 0 0 1 2 0 1 103 0 2 6 1 3 2 3 101 7 1 5 5 4 97 0 4 4 36 5 78 16 16 4 4 16 27 16 26 22 20 4 15 4 14 37 17 16 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = divide;
unicode = 247;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,359,l),
(500,431,l),
(101,431,l),
(101,359,l)
);
},
{
closed = 1;
nodes = (
(500,151,l),
(500,223,l),
(101,223,l),
(101,151,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = equal;
unicode = 61;
},
{
glyphname = notequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(228,84,l),
(264,151,l),
(500,151,l),
(500,223,l),
(302,223,l),
(374,358,l),
(500,358,l),
(500,431,l),
(413,431,l),
(448,497,l),
(372,497,l),
(337,431,l),
(101,431,l),
(101,358,l),
(299,358,l),
(227,223,l),
(101,223,l),
(101,151,l),
(189,151,l),
(153,84,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 3 3 4 112 0 9 0 0 9 113 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 18 17 17 17 17 17 17 17 17 16 10 6 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = greater;
kernRight = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,137,l),
(476,367,l),
(232,598,l),
(125,598,l),
(370,367,l),
(125,137,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = greater;
unicode = 62;
},
{
glyphname = less;
kernLeft = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(476,137,l),
(231,367,l),
(476,598,l),
(369,598,l),
(125,367,l),
(369,137,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = less;
unicode = 60;
},
{
glyphname = greaterequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,213,l),
(478,405,l),
(232,598,l),
(123,598,l),
(365,405,l),
(123,213,l)
);
},
{
closed = 1;
nodes = (
(471,89,l),
(471,153,l),
(122,153,l),
(122,89,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lessequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(478,213,l),
(235,405,l),
(478,598,l),
(368,598,l),
(123,405,l),
(368,213,l)
);
},
{
closed = 1;
nodes = (
(478,89,l),
(478,153,l),
(129,153,l),
(129,89,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = plusminus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(338,125,l),
(338,266,l),
(538,266,l),
(538,337,l),
(338,337,l),
(338,478,l),
(263,478,l),
(263,337,l),
(63,337,l),
(63,266,l),
(263,266,l),
(263,125,l)
);
},
{
closed = 1;
nodes = (
(538,0,l),
(538,73,l),
(63,73,l),
(63,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
3 1 1 4 1 0 5 1 0 103 0 5 5 2 95 0 2 2 36 77 0 6 6 7 95 0 7 7 34 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
3 1 1 4 1 0 5 1 0 103 0 2 0 5 6 2 5 103 0 6 6 7 95 0 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 17 17 17 17 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = approxequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(438,319,o),
(506,390,o),
(517,461,q),
(454,461,l),
(450,431,o),
(415,395,o),
(388,395,qs),
(369,395,o),
(336,410,o),
(312,425,qs),
(286,442,o),
(243,461,o),
(217,461,qs),
(107,461,o),
(83,320,q),
(146,320,l),
(150,350,o),
(185,386,o),
(212,386,qs),
(232,386,o),
(265,371,o),
(290,355,qs),
(315,338,o),
(357,319,o),
(383,319,qs)
);
},
{
closed = 1;
nodes = (
(438,112,o),
(506,183,o),
(517,254,q),
(454,254,l),
(450,224,o),
(415,188,o),
(388,188,qs),
(369,188,o),
(336,203,o),
(312,218,qs),
(286,235,o),
(243,254,o),
(217,254,qs),
(107,254,o),
(83,113,q),
(146,113,l),
(150,143,o),
(185,179,o),
(212,179,qs),
(232,179,o),
(265,164,o),
(290,148,qs),
(315,131,o),
(357,112,o),
(383,112,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
4 1 2 0 0 1 2 0 105 0 3 12 5 2 1 8 3 1 105 0 9 6 7 9 89 10 1 8 0 6 7 8 6 105 0 9 9 7 97 13 11 2 7 9 7 81 25 25 0 0 25 49 25 48 46 45 43 41 37 35 34 33 31 29 0 24 0 23 18 36 33 18 36 14 6 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(438,249,o),
(506,320,o),
(517,391,q),
(454,391,l),
(450,361,o),
(415,325,o),
(388,325,qs),
(369,325,o),
(336,340,o),
(312,355,qs),
(286,372,o),
(243,391,o),
(217,391,qs),
(107,391,o),
(83,250,q),
(146,250,l),
(150,280,o),
(185,316,o),
(212,316,qs),
(232,316,o),
(265,301,o),
(290,285,qs),
(315,268,o),
(357,249,o),
(383,249,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 24 0 23 18 36 33 18 36 7 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = logicalnot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(545,223,l),
(545,432,l),
(45,432,l),
(45,365,l),
(461,365,l),
(461,223,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 0 0 2 113 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 2 134 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
17 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = logicalnot;
unicode = 172;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,178,l),
(311,597,l),
(498,178,l),
(584,178,l),
(349,700,l),
(272,700,l),
(37,178,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 0 1 76 0 0 1 0 133 2 1 1 1 118 18 17 16 3 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 620;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = infinity;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(240,141,o),
(321,196,o),
(347,240,q),
(384,194,o),
(461,141,o),
(513,141,qs),
(579,141,o),
(666,221,o),
(666,289,qs),
(666,357,o),
(581,434,o),
(515,434,qs),
(462,434,o),
(379,377,o),
(354,331,q),
(316,380,o),
(240,434,o),
(186,434,qs),
(122,434,o),
(37,354,o),
(37,286,qs),
(37,218,o),
(121,141,o),
(187,141,qs)
);
},
{
closed = 1;
nodes = (
(152,202,o),
(107,247,o),
(107,286,qs),
(107,325,o),
(153,374,o),
(189,374,qs),
(224,374,o),
(280,329,o),
(313,285,q),
(291,247,o),
(227,202,o),
(190,202,qs)
);
},
{
closed = 1;
nodes = (
(473,201,o),
(419,244,o),
(388,286,q),
(410,326,o),
(475,373,o),
(513,373,qs),
(550,373,o),
(596,327,o),
(596,288,qs),
(596,249,o),
(549,201,o),
(509,201,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
44 26 20 8 4 5 4 1 76 1 1 0 6 1 4 5 0 4 105 10 7 9 3 5 2 2 5 89 10 7 9 3 5 5 2 97 8 3 2 2 5 2 81 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 36 36 36 11 6 25
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = infinity;
unicode = 8734;
},
{
glyphname = integral;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-14,-191,ls),
(52,-191,o),
(121,-126,o),
(129,-54,qs),
(222,782,ls),
(226,817,o),
(253,844,o),
(279,844,qs),
(298,844,l),
(305,915,l),
(283,915,ls),
(218,915,o),
(146,852,o),
(138,782,qs),
(45,-54,ls),
(41,-92,o),
(18,-121,o),
(-10,-121,qs),
(-31,-121,l),
(-38,-191,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 1 0 2 0 1 2 105 0 0 3 3 0 89 0 0 0 3 97 0 3 0 3 81 37 33 37 32 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 258;
}
);
note = integral;
unicode = 8747;
},
{
glyphname = uni2126;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(331,0,l),
(331,69,l),
(238,93,o),
(127,247,o),
(127,352,qs),
(127,424,o),
(186,554,o),
(307,636,o),
(394,636,qs),
(463,636,o),
(585,572,o),
(662,444,o),
(662,352,qs),
(662,250,o),
(555,94,o),
(458,69,q),
(458,0,l),
(732,0,l),
(732,66,l),
(590,66,l),
(666,107,o),
(747,263,o),
(747,357,qs),
(747,459,o),
(655,621,o),
(494,712,o),
(394,712,qs),
(295,712,o),
(135,621,o),
(43,459,o),
(43,357,qs),
(43,262,o),
(124,107,o),
(199,66,q),
(56,66,l),
(56,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
33 19 2 0 4 1 76 0 1 0 4 0 1 4 105 2 1 0 3 3 0 87 2 1 0 0 3 95 5 1 3 0 3 79 23 39 17 22 38 16 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 789;
}
);
note = uni2126;
unicode = 8486;
},
{
glyphname = uni2206;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(665,0,l),
(665,65,l),
(382,700,l),
(312,700,l),
(30,65,l),
(30,0,l)
);
},
{
closed = 1;
nodes = (
(347,604,l),
(580,65,l),
(115,65,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 1 2 0 1 76 3 0 2 2 1 75 0 0 2 0 133 3 1 2 1 1 2 87 3 1 2 2 1 95 0 1 2 1 79 6 6 6 8 6 8 18 17 4 6 24
CALL[ ]	/* CallFunction */";
};
width = 695;
}
);
note = uni2206;
unicode = 8710;
},
{
glyphname = product;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(201,0,l),
(201,634,l),
(525,634,l),
(525,0,l),
(609,0,l),
(609,634,l),
(688,634,l),
(688,700,l),
(37,700,l),
(37,634,l),
(117,634,l),
(117,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
5 1 3 0 3 134 0 1 0 0 1 87 0 1 1 0 95 4 2 2 0 1 0 79 17 17 17 17 17 16 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = product;
unicode = 8719;
},
{
glyphname = summation;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(431,-49,l),
(431,16,l),
(111,16,l),
(379,295,l),
(379,360,l),
(109,635,l),
(431,635,l),
(431,700,l),
(41,700,l),
(41,604,l),
(303,326,l),
(41,47,l),
(41,-49,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
8 7 2 1 0 5 2 1 1 76 0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 19 17 19 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 450;
}
);
note = summation;
unicode = 8721;
},
{
glyphname = radical;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(271,-44,l),
(758,865,l),
(698,865,l),
(267,58,l),
(154,258,l),
(18,179,l),
(44,135,l),
(108,171,l),
(230,-44,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
4 3 2 1 4 1 0 1 76 0 0 1 0 133 0 1 1 118 17 21 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 712;
}
);
note = radical;
unicode = 8730;
},
{
glyphname = uni00B5;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,-220,l),
(153,20,l),
(196,-12,o),
(261,-12,qs),
(317,-12,o),
(409,42,o),
(433,88,q),
(438,0,l),
(514,0,l),
(514,496,l),
(430,496,l),
(430,239,ls),
(430,155,o),
(347,60,o),
(281,60,qs),
(153,60,o),
(153,215,qs),
(153,496,l),
(69,496,l),
(69,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
12 1 1 0 17 1 3 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 36 77 0 1 1 3 97 4 1 3 3 34 77 0 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
2 1 0 0 36 77 0 3 3 34 77 0 1 1 4 97 0 4 4 40 77 0 5 5 38 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 35 17 19 34 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = uni00B5;
unicode = 181;
},
{
glyphname = partialdiff;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(318,-10,o),
(385,42,qs),
(452,94,o),
(528,286,o),
(528,413,qs),
(528,571,o),
(407,740,o),
(296,740,qs),
(252,740,o),
(201,726,q),
(201,676,l),
(248,689,o),
(281,689,qs),
(341,689,o),
(376,657,qs),
(439,598,o),
(444,444,q),
(429,505,o),
(357,557,o),
(305,557,qs),
(226,557,o),
(105,461,o),
(39,306,o),
(39,221,qs),
(39,142,o),
(66,91,qs),
(92,41,o),
(179,-10,o),
(234,-10,qs)
);
},
{
closed = 1;
nodes = (
(190,62,o),
(124,142,o),
(124,221,qs),
(124,295,o),
(148,356,qs),
(172,417,o),
(256,486,o),
(310,486,qs),
(367,486,o),
(431,406,o),
(431,326,qs),
(431,256,o),
(407,196,qs),
(382,134,o),
(297,62,o),
(242,62,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
18 1 1 2 17 1 0 1 11 1 5 4 3 76 0 2 0 1 0 2 1 105 0 0 0 4 5 0 4 105 7 1 5 3 3 5 89 7 1 5 5 3 97 6 1 3 5 3 81 29 29 0 0 29 44 29 43 37 35 0 28 0 27 35 37 39 8 6 25
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = partialdiff;
unicode = 8706;
},
{
glyphname = percent;
kernLeft = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(222,0,l),
(629,700,l),
(545,700,l),
(138,0,l)
);
},
{
closed = 1;
nodes = (
(245,375,o),
(281,396,qs),
(318,417,o),
(360,492,o),
(360,543,qs),
(360,596,o),
(339,633,qs),
(318,670,o),
(246,711,o),
(201,711,qs),
(157,711,o),
(120,691,qs),
(82,669,o),
(40,594,o),
(40,543,qs),
(40,492,o),
(61,454,qs),
(82,416,o),
(155,375,o),
(200,375,qs)
);
},
{
closed = 1;
nodes = (
(163,440,o),
(111,494,o),
(111,543,qs),
(111,592,o),
(163,648,o),
(201,648,qs),
(238,648,o),
(288,593,o),
(288,543,qs),
(288,494,o),
(237,440,o),
(200,440,qs)
);
},
{
closed = 1;
nodes = (
(619,-12,o),
(655,9,qs),
(692,30,o),
(733,105,o),
(733,156,qs),
(733,209,o),
(712,246,qs),
(691,283,o),
(619,324,o),
(574,324,qs),
(530,324,o),
(493,304,qs),
(456,282,o),
(414,206,o),
(414,156,qs),
(414,105,o),
(435,67,qs),
(456,29,o),
(529,-12,o),
(574,-12,qs)
);
},
{
closed = 1;
nodes = (
(536,53,o),
(485,107,o),
(485,156,qs),
(485,205,o),
(536,260,o),
(574,260,qs),
(612,260,o),
(662,206,o),
(662,156,qs),
(662,107,o),
(611,53,o),
(573,53,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 106 0 4 4 0 97 2 1 0 0 33 77 13 1 9 9 1 97 12 7 2 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 106 0 4 4 0 97 2 1 0 0 33 77 0 1 1 34 77 13 1 9 9 7 97 12 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 106 0 0 0 33 77 0 4 4 2 97 0 2 2 39 77 0 1 1 34 77 13 1 9 9 7 97 12 1 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 36 values pushed */
56 56 36 36 24 24 4 4 56 67 56 66 62 60 36 55 36 54 46 44 24 35 24 34 30 28 4 23 4 22 41 17 16 14 8 25
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = percent;
unicode = 37;
},
{
glyphname = perthousand;
kernLeft = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(222,0,l),
(629,700,l),
(545,700,l),
(138,0,l)
);
},
{
closed = 1;
nodes = (
(245,375,o),
(281,396,qs),
(318,417,o),
(360,492,o),
(360,543,qs),
(360,596,o),
(339,633,qs),
(318,670,o),
(246,711,o),
(201,711,qs),
(157,711,o),
(120,691,qs),
(82,669,o),
(40,594,o),
(40,543,qs),
(40,492,o),
(61,454,qs),
(82,416,o),
(155,375,o),
(200,375,qs)
);
},
{
closed = 1;
nodes = (
(162,438,o),
(110,493,o),
(110,543,qs),
(110,594,o),
(163,649,o),
(201,649,qs),
(239,649,o),
(290,594,o),
(290,543,qs),
(290,494,o),
(238,438,o),
(200,438,qs)
);
},
{
closed = 1;
nodes = (
(619,-12,o),
(655,9,qs),
(692,30,o),
(733,105,o),
(733,156,qs),
(733,209,o),
(712,246,qs),
(691,283,o),
(619,324,o),
(574,324,qs),
(530,324,o),
(493,304,qs),
(456,282,o),
(414,206,o),
(414,156,qs),
(414,105,o),
(435,67,qs),
(456,29,o),
(529,-12,o),
(574,-12,qs)
);
},
{
closed = 1;
nodes = (
(535,51,o),
(483,107,o),
(483,156,qs),
(483,207,o),
(536,262,o),
(574,262,qs),
(612,262,o),
(664,207,o),
(664,156,qs),
(664,107,o),
(611,51,o),
(573,51,qs)
);
},
{
closed = 1;
nodes = (
(968,-12,o),
(1005,9,qs),
(1042,30,o),
(1083,105,o),
(1083,156,qs),
(1083,209,o),
(1062,246,qs),
(1041,283,o),
(969,324,o),
(924,324,qs),
(880,324,o),
(843,304,qs),
(805,282,o),
(763,207,o),
(763,156,qs),
(763,104,o),
(785,67,qs),
(806,29,o),
(878,-12,o),
(923,-12,qs)
);
},
{
closed = 1;
nodes = (
(885,51,o),
(833,106,o),
(833,156,qs),
(833,207,o),
(886,262,o),
(924,262,qs),
(962,262,o),
(1013,207,o),
(1013,156,qs),
(1013,106,o),
(961,51,o),
(923,51,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
15 1 5 14 1 3 6 5 3 105 10 1 6 12 1 8 9 6 8 106 0 4 4 0 97 2 1 0 0 33 77 19 13 17 3 9 9 1 97 18 11 16 7 4 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
15 1 5 14 1 3 6 5 3 105 10 1 6 12 1 8 9 6 8 106 0 4 4 0 97 2 1 0 0 33 77 0 1 1 34 77 19 13 17 3 9 9 7 97 18 11 16 3 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
15 1 5 14 1 3 6 5 3 105 10 1 6 12 1 8 9 6 8 106 0 0 0 33 77 0 4 4 2 97 0 2 2 39 77 0 1 1 34 77 19 13 17 3 9 9 7 97 18 11 16 3 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 52 values pushed */
88 88 68 68 56 56 36 36 24 24 4 4 88 99 88 98 94 92 68 87 68 86 78 76 56 67 56 66 62 60 36 55 36 54 46 44 24 35 24 34 30 28 4 23 4 22 41 17 16 20 8 25
CALL[ ]	/* CallFunction */";
};
width = 1123;
}
);
note = perthousand;
unicode = 8240;
},
{
glyphname = plus.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,125,l),
(329,308,l),
(520,308,l),
(520,379,l),
(329,379,l),
(329,561,l),
(254,561,l),
(254,379,l),
(63,379,l),
(63,308,l),
(254,308,l),
(254,125,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
0 2 1 5 2 87 3 1 1 4 1 0 5 1 0 103 0 2 2 5 95 0 5 2 5 79 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = plus.case;
},
{
glyphname = arrowup;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(294,-1,l),
(294,573,l),
(333,527,l),
(430,428,l),
(484,483,l),
(255,712,l),
(26,483,l),
(80,428,l),
(177,527,l),
(216,573,l),
(216,-1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
8 6 5 4 3 2 0 7 0 74 0 0 0 34 0 78 25 1 8 23
CALL[ ]	/* CallFunction */";
};
width = 509;
}
);
note = arrowup;
unicode = 8593;
},
{
glyphname = arrowright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(777,350,l),
(548,579,l),
(493,525,l),
(592,428,l),
(638,389,l),
(64,389,l),
(64,311,l),
(638,311,l),
(592,272,l),
(493,175,l),
(548,121,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
9 1 0 1 1 76 8 7 2 1 74 10 1 0 73 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 18 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 821;
}
);
note = arrowright;
unicode = 8594;
},
{
glyphname = arrowdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(483,217,l),
(429,272,l),
(332,173,l),
(293,127,l),
(293,700,l),
(215,700,l),
(215,127,l),
(176,173,l),
(79,272,l),
(25,217,l),
(254,-12,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
10 9 8 6 3 1 6 0 73 0 0 0 33 0 78 20 1 8 23
CALL[ ]	/* CallFunction */";
};
width = 509;
}
);
note = arrowdown;
unicode = 8595;
},
{
glyphname = arrowleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(328,175,l),
(229,272,l),
(183,311,l),
(757,311,l),
(757,389,l),
(183,389,l),
(229,428,l),
(328,525,l),
(273,579,l),
(44,350,l),
(273,121,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
2 1 2 0 74 10 9 2 1 73 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 20 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 821;
}
);
note = arrowleft;
unicode = 8592;
},
{
glyphname = lozenge;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(516,350,l),
(277,589,l),
(37,350,l),
(276,110,l)
);
},
{
closed = 1;
nodes = (
(127,350,l),
(277,501,l),
(427,350,l),
(276,198,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 5 3 1 2 50
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = lozenge;
unicode = 9674;
},
{
glyphname = uni0308;
layers = (
{
anchors = (
{
name = _top;
pos = (147,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,606,o),
(116,639,o),
(116,664,qs),
(116,688,o),
(82,720,o),
(58,720,qs),
(33,720,o),
(0,688,o),
(0,664,qs),
(0,639,o),
(33,606,o),
(58,606,qs)
);
},
{
closed = 1;
nodes = (
(259,606,o),
(293,639,o),
(293,664,qs),
(293,688,o),
(259,720,o),
(235,720,qs),
(210,720,o),
(177,688,o),
(177,664,qs),
(177,639,o),
(210,606,o),
(235,606,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0308;
unicode = 776;
},
{
glyphname = uni0307;
layers = (
{
anchors = (
{
name = _top;
pos = (58,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,606,o),
(116,639,o),
(116,664,qs),
(116,688,o),
(82,720,o),
(58,720,qs),
(33,720,o),
(0,688,o),
(0,664,qs),
(0,639,o),
(33,606,o),
(58,606,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0307;
unicode = 775;
},
{
glyphname = gravecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (105,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,620,l),
(0,747,l),
(0,674,l),
(210,557,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = gravecomb;
unicode = 768;
},
{
glyphname = acutecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (105,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,670,l),
(210,747,l),
(0,620,l),
(0,553,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = acutecomb;
unicode = 769;
},
{
glyphname = uni030B;
layers = (
{
anchors = (
{
name = _top;
pos = (116,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(202,549,l),
(291,698,l),
(218,698,l),
(146,549,l)
);
},
{
closed = 1;
nodes = (
(57,549,l),
(139,698,l),
(66,698,l),
(0,549,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 18 values pushed */
2 1 0 1 0 133 3 1 1 1 118 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030B;
unicode = 779;
},
{
glyphname = uni030C.alt;
layers = (
{
anchors = (
{
name = _topright;
pos = (0,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(60,546,l),
(142,700,l),
(48,700,l),
(0,546,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.alt;
},
{
glyphname = uni0302;
layers = (
{
anchors = (
{
name = _top;
pos = (137,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(137,666,l),
(274,582,l),
(274,652,l),
(137,733,l),
(0,652,l),
(0,582,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0302;
unicode = 770;
},
{
glyphname = uni030C;
layers = (
{
anchors = (
{
name = _top;
pos = (137,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(274,668,l),
(274,733,l),
(137,649,l),
(0,733,l),
(0,668,l),
(137,586,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C;
unicode = 780;
},
{
glyphname = uni0306;
layers = (
{
anchors = (
{
name = _top;
pos = (141,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,588,o),
(281,661,o),
(281,718,qs),
(281,732,l),
(230,732,l),
(230,654,o),
(140,654,qs),
(50,654,o),
(50,732,q),
(0,732,l),
(0,718,ls),
(0,661,o),
(73,588,o),
(140,588,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 35 values pushed */
2 1 0 1 0 133 0 1 3 3 1 89 0 1 1 3 97 4 1 3 1 3 81 0 0 0 13 0 12 17 33 19 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0306;
unicode = 774;
},
{
glyphname = uni030A;
layers = (
{
anchors = (
{
name = _top;
pos = (105,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,557,o),
(210,613,o),
(210,660,qs),
(210,707,o),
(150,763,o),
(105,763,qs),
(61,763,o),
(0,707,o),
(0,660,qs),
(0,613,o),
(61,557,o),
(105,557,qs)
);
},
{
closed = 1;
nodes = (
(81,600,o),
(48,633,o),
(48,660,qs),
(48,687,o),
(81,719,o),
(105,719,qs),
(130,719,o),
(162,687,o),
(162,660,qs),
(162,633,o),
(129,600,o),
(105,600,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030A;
unicode = 778;
},
{
glyphname = tildecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (151,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(245,602,o),
(296,655,o),
(302,703,q),
(253,703,l),
(248,662,o),
(210,662,qs),
(195,662,o),
(174,672,o),
(157,682,qs),
(141,693,o),
(114,705,o),
(95,705,qs),
(56,705,o),
(7,654,o),
(0,604,q),
(49,604,l),
(52,626,o),
(72,645,o),
(91,645,qs),
(106,645,o),
(127,636,o),
(144,625,qs),
(161,614,o),
(187,602,o),
(206,602,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 24 0 23 17 36 34 18 36 7 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = tildecomb;
unicode = 771;
},
{
glyphname = uni0304;
layers = (
{
anchors = (
{
name = _top;
pos = (174,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,632,l),
(347,695,l),
(0,695,l),
(0,632,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0304;
unicode = 772;
},
{
glyphname = uni0312;
layers = (
{
anchors = (
{
name = _top;
pos = (51,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(97,783,l),
(49,783,o),
(0,728,o),
(0,669,qs),
(0,636,o),
(9,595,q),
(95,595,l),
(95,672,l),
(50,672,l),
(50,686,ls),
(50,743,o),
(97,743,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 37 values pushed */
0 2 4 1 3 0 2 3 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 0 0 0 11 0 11 20 17 18 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0312;
unicode = 786;
},
{
glyphname = uni0326;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = _bottom;
pos = (49,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,-238,l),
(48,-238,o),
(97,-183,o),
(97,-124,qs),
(97,-91,o),
(88,-50,q),
(2,-50,l),
(2,-127,l),
(47,-127,l),
(47,-141,ls),
(47,-198,o),
(0,-198,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 38 values pushed */
0 1 0 0 3 1 0 103 4 1 3 2 2 3 89 4 1 3 3 2 97 0 2 3 2 81 0 0 0 11 0 11 20 17 18 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0326;
unicode = 806;
},
{
glyphname = uni0327;
layers = (
{
anchors = (
{
name = _bottom;
pos = (74,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(107,-259,ls),
(161,-259,o),
(228,-205,o),
(228,-159,qs),
(228,-112,o),
(158,-62,o),
(99,-63,q),
(99,17,l),
(43,17,l),
(43,-113,l),
(92,-113,ls),
(160,-113,o),
(160,-158,qs),
(160,-206,o),
(92,-206,qs),
(0,-206,l),
(0,-259,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 3 3 2 112 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 3 2 133 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 17 17 34 32 5 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0327;
unicode = 807;
},
{
glyphname = uni0328;
layers = (
{
anchors = (
{
name = _ogonek;
pos = (190,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,-203,o),
(193,-190,q),
(193,-134,l),
(159,-149,o),
(128,-149,qs),
(101,-149,o),
(68,-123,o),
(68,-100,qs),
(68,-59,o),
(132,-28,qs),
(190,0,l),
(169,43,l),
(116,20,ls),
(54,-7,o),
(0,-71,o),
(0,-108,qs),
(0,-155,o),
(68,-203,o),
(118,-203,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
16 1 1 0 1 76 15 7 6 3 0 74 0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 18 0 17 44 3 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0328;
unicode = 808;
},
{
glyphname = uni0308.case;
layers = (
{
anchors = (
{
name = _top;
pos = (147,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,775,o),
(116,808,o),
(116,833,qs),
(116,857,o),
(82,889,o),
(58,889,qs),
(33,889,o),
(0,857,o),
(0,833,qs),
(0,808,o),
(33,775,o),
(58,775,qs)
);
},
{
closed = 1;
nodes = (
(259,775,o),
(293,808,o),
(293,833,qs),
(293,857,o),
(259,889,o),
(235,889,qs),
(210,889,o),
(177,857,o),
(177,833,qs),
(177,808,o),
(210,775,o),
(235,775,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0308.case;
},
{
glyphname = uni0307.case;
layers = (
{
anchors = (
{
name = _top;
pos = (58,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,775,o),
(116,808,o),
(116,833,qs),
(116,857,o),
(82,889,o),
(58,889,qs),
(33,889,o),
(0,857,o),
(0,833,qs),
(0,808,o),
(33,775,o),
(58,775,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0307.case;
},
{
glyphname = gravecomb.case;
layers = (
{
anchors = (
{
name = _top;
pos = (105,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,804,l),
(0,931,l),
(0,858,l),
(210,741,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = gravecomb.case;
},
{
glyphname = acutecomb.case;
layers = (
{
anchors = (
{
name = _top;
pos = (105,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,858,l),
(210,931,l),
(0,804,l),
(0,741,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = acutecomb.case;
},
{
glyphname = uni030B.case;
layers = (
{
anchors = (
{
name = _top;
pos = (146,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(202,753,l),
(291,902,l),
(218,902,l),
(146,753,l)
);
},
{
closed = 1;
nodes = (
(57,753,l),
(139,902,l),
(66,902,l),
(0,753,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
2 1 0 1 0 133 3 1 1 1 118 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030B.case;
},
{
glyphname = uni030C.alt.case;
layers = (
{
anchors = (
{
name = _topright;
pos = (4,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(60,546,l),
(142,700,l),
(48,700,l),
(0,546,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.alt.case;
},
{
glyphname = uni0302.case;
layers = (
{
anchors = (
{
name = _top;
pos = (137,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(137,839,l),
(274,755,l),
(274,821,l),
(137,902,l),
(0,821,l),
(0,755,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0302.case;
},
{
glyphname = uni030C.case;
layers = (
{
anchors = (
{
name = _top;
pos = (137,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(274,836,l),
(274,901,l),
(137,817,l),
(0,901,l),
(0,836,l),
(137,754,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.case;
},
{
glyphname = uni0306.case;
layers = (
{
anchors = (
{
name = _top;
pos = (141,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,757,o),
(281,830,o),
(281,887,qs),
(281,901,l),
(230,901,l),
(230,823,o),
(140,823,qs),
(50,823,o),
(50,901,q),
(0,901,l),
(0,887,ls),
(0,830,o),
(73,757,o),
(140,757,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
2 1 0 1 0 133 0 1 3 3 1 89 0 1 1 3 97 4 1 3 1 3 81 0 0 0 13 0 12 17 33 19 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0306.case;
},
{
glyphname = uni030A.case;
layers = (
{
anchors = (
{
name = _top;
pos = (105,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,761,o),
(210,817,o),
(210,864,qs),
(210,911,o),
(150,967,o),
(105,967,qs),
(61,967,o),
(0,911,o),
(0,864,qs),
(0,817,o),
(61,761,o),
(105,761,qs)
);
},
{
closed = 1;
nodes = (
(81,804,o),
(48,837,o),
(48,864,qs),
(48,891,o),
(81,923,o),
(105,923,qs),
(130,923,o),
(162,891,o),
(162,864,qs),
(162,837,o),
(129,804,o),
(105,804,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030A.case;
},
{
glyphname = tildecomb.case;
layers = (
{
anchors = (
{
name = _top;
pos = (151,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(245,756,o),
(296,809,o),
(302,857,q),
(253,857,l),
(250,835,o),
(227,812,o),
(210,812,qs),
(195,812,o),
(174,823,o),
(157,834,qs),
(141,846,o),
(114,859,o),
(95,859,qs),
(56,859,o),
(7,808,o),
(0,758,q),
(49,758,l),
(55,803,o),
(91,803,qs),
(106,803,o),
(127,793,o),
(144,781,qs),
(160,769,o),
(187,756,o),
(206,756,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 24 0 23 18 36 34 17 36 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = tildecomb.case;
},
{
glyphname = uni0304.case;
layers = (
{
anchors = (
{
name = _top;
pos = (174,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,796,l),
(347,859,l),
(0,859,l),
(0,796,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0304.case;
},
{
glyphname = uni0327.case;
layers = (
{
anchors = (
{
name = _bottom;
pos = (72,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(107,-259,ls),
(161,-259,o),
(228,-205,o),
(228,-159,qs),
(228,-112,o),
(158,-62,o),
(99,-63,q),
(99,17,l),
(43,17,l),
(43,-113,l),
(92,-113,ls),
(160,-113,o),
(160,-158,qs),
(160,-206,o),
(92,-206,qs),
(0,-206,l),
(0,-259,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 3 3 2 112 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 3 2 133 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 17 17 34 32 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0327.case;
},
{
glyphname = uni0328.case;
layers = (
{
anchors = (
{
name = _ogonek;
pos = (190,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,-203,o),
(193,-190,q),
(193,-134,l),
(159,-149,o),
(128,-149,qs),
(101,-149,o),
(68,-123,o),
(68,-100,qs),
(68,-59,o),
(132,-28,qs),
(190,0,l),
(169,43,l),
(116,20,ls),
(54,-7,o),
(0,-71,o),
(0,-108,qs),
(0,-155,o),
(68,-203,o),
(118,-203,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
16 1 1 0 1 76 15 7 6 3 0 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 1 97 2 1 1 1 38 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 18 0 17 44 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0328.case;
},
{
glyphname = uni0308.narrow;
layers = (
{
anchors = (
{
name = _top;
pos = (147,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,606,o),
(126,639,o),
(126,664,qs),
(126,688,o),
(92,720,o),
(68,720,qs),
(43,720,o),
(10,688,o),
(10,664,qs),
(10,639,o),
(43,606,o),
(68,606,qs)
);
},
{
closed = 1;
nodes = (
(249,606,o),
(283,639,o),
(283,664,qs),
(283,688,o),
(249,720,o),
(225,720,qs),
(200,720,o),
(167,688,o),
(167,664,qs),
(167,639,o),
(200,606,o),
(225,606,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 1 0 97 2 1 0 0 41 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 1 0 97 2 1 0 0 39 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0308.narrow;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-146,0);
ref = uni0308;
}
);
width = 0;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-58,0);
ref = uni0307;
}
);
width = 0;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-105,0);
ref = gravecomb;
}
);
width = 0;
}
);
note = grave;
unicode = 96;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-105,0);
ref = acutecomb;
}
);
width = 0;
}
);
note = acute;
unicode = 180;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-145,0);
ref = uni030B;
}
);
width = 0;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-137,0);
ref = uni0302;
}
);
width = 0;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-137,0);
ref = uni030C;
}
);
width = 0;
}
);
note = caron;
unicode = 711;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-140,0);
ref = uni0306;
}
);
width = 0;
}
);
note = breve;
unicode = 728;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-105,0);
ref = uni030A;
}
);
width = 0;
}
);
note = ring;
unicode = 730;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-151,0);
ref = tildecomb;
}
);
width = 0;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-173,0);
ref = uni0304;
}
);
width = 0;
}
);
note = macron;
unicode = 175;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-114,0);
ref = uni0327;
}
);
width = 0;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-96,0);
ref = uni0328;
}
);
width = 0;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = uni02BA;
kernLeft = uni02BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,558,l),
(246,755,l),
(167,755,l),
(178,558,l)
);
},
{
closed = 1;
nodes = (
(106,558,l),
(116,755,l),
(37,755,l),
(48,558,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 284;
}
);
note = uni02BA;
unicode = 698;
},
{
glyphname = uni02B9;
kernLeft = uni02BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(108,558,l),
(120,755,l),
(37,755,l),
(50,558,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 157;
}
);
note = uni02B9;
unicode = 697;
},
{
glyphname = uniE000;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(214,0,l),
(214,214,l),
(419,0,l),
(565,0,l),
(321,260,l),
(550,511,l),
(406,511,l),
(214,309,l),
(214,700,l),
(100,700,l),
(100,0,l)
);
},
{
closed = 1;
nodes = (
(886,-12,o),
(1011,57,o),
(1082,179,o),
(1082,254,qs),
(1082,329,o),
(1011,452,o),
(886,523,o),
(808,523,qs),
(730,523,o),
(606,452,o),
(535,329,o),
(535,254,qs),
(535,179,o),
(606,57,o),
(730,-12,o),
(808,-12,qs)
);
},
{
closed = 1;
nodes = (
(759,95,o),
(688,137,o),
(649,210,o),
(649,254,qs),
(649,298,o),
(688,371,o),
(759,413,o),
(806,413,qs),
(853,413,o),
(925,371,o),
(965,298,o),
(965,254,qs),
(965,210,o),
(925,137,o),
(853,95,o),
(806,95,qs)
);
},
{
closed = 1;
nodes = (
(732,566,o),
(773,607,o),
(773,637,qs),
(773,667,o),
(733,707,o),
(702,707,qs),
(672,707,o),
(631,665,o),
(631,636,qs),
(631,607,o),
(672,566,o),
(702,566,qs)
);
},
{
closed = 1;
nodes = (
(943,566,o),
(984,607,o),
(984,637,qs),
(984,667,o),
(944,707,o),
(913,707,qs),
(883,707,o),
(842,665,o),
(842,636,qs),
(842,607,o),
(883,566,o),
(913,566,qs)
);
},
{
closed = 1;
nodes = (
(1262,0,l),
(1262,700,l),
(1152,700,l),
(1152,0,l)
);
},
{
closed = 1;
nodes = (
(1577,95,o),
(1505,140,o),
(1467,213,o),
(1467,254,qs),
(1467,297,o),
(1508,370,o),
(1580,413,o),
(1626,413,qs),
(1694,413,o),
(1782,323,o),
(1782,254,qs),
(1782,209,o),
(1742,136,o),
(1671,95,o),
(1626,95,qs)
);
},
{
closed = 1;
nodes = (
(1722,-12,o),
(1836,60,o),
(1898,182,o),
(1898,254,qs),
(1898,331,o),
(1832,454,o),
(1718,523,o),
(1647,523,qs),
(1590,523,o),
(1502,478,o),
(1467,431,q),
(1467,700,l),
(1357,700,l),
(1357,0,l),
(1467,0,l),
(1467,80,l),
(1502,33,o),
(1590,-12,o),
(1647,-12,qs)
);
},
{
closed = 1;
nodes = (
(2081,0,l),
(2081,511,l),
(1968,511,l),
(1968,0,l)
);
},
{
closed = 1;
nodes = (
(2054,566,o),
(2095,607,o),
(2095,637,qs),
(2095,667,o),
(2055,707,o),
(2024,707,qs),
(1994,707,o),
(1953,665,o),
(1953,636,qs),
(1953,607,o),
(1994,566,o),
(2024,566,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 171 values pushed */
93 1 6 1 8 5 2 3 7 6 88 1 2 7 3 76 17 12 2 0 8 9 8 0 9 128 20 1 1 4 6 4 1 6 128 21 16 13 3 4 2 7 5 7 2 5 128 22 10 2 8 30 23 27 11 26 5 9 4 8 9 105 18 1 4 14 1 6 7 4 6 105 28 15 25 3 7 2 5 7 89 28 15 25 3 7 7 5 97 29 19 24 3 5 7 5 81 109 109 86 86 71 71 55 55 43 43 27 27 11 11 109 120 109 119 115 113 108 107 106 105 86 104 86 103 97 95 92 91 90 89 71 85 71 84 78 76 70 69 68 67 55 66 55 65 61 59 43 54 43 53 49 47 27 42 27 41 35 33 11 26 11 25 39 18 18 18 16 31 6 27
CALL[ ]	/* CallFunction */";
};
width = 2195;
}
);
note = uniE000;
unicode = 57344;
},
{
glyphname = uniE001;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(211,225,l),
(233,173,o),
(306,118,o),
(353,118,qs),
(405,118,o),
(472,177,o),
(472,227,qs),
(472,278,o),
(404,339,o),
(349,339,qs),
(278,339,o),
(227,288,q),
(133,330,l),
(174,700,l),
(581,700,l),
(581,579,l),
(288,579,l),
(271,426,l),
(288,440,o),
(349,458,o),
(384,458,qs),
(456,458,o),
(561,400,o),
(617,296,o),
(617,229,qs),
(617,160,o),
(550,52,o),
(431,-8,o),
(355,-8,qs),
(266,-8,o),
(135,82,o),
(100,166,q)
);
},
{
closed = 1;
nodes = (
(936,-8,o),
(770,88,o),
(674,253,o),
(674,352,qs),
(674,449,o),
(764,614,o),
(928,711,o),
(1033,711,qs),
(1129,711,o),
(1290,620,o),
(1339,546,q),
(1229,468,l),
(1156,581,o),
(1033,581,qs),
(933,581,o),
(818,456,o),
(818,352,qs),
(818,283,o),
(876,177,o),
(975,120,o),
(1035,120,qs),
(1118,120,o),
(1220,203,o),
(1234,265,q),
(1021,265,l),
(1021,383,l),
(1373,383,l),
(1375,369,o),
(1375,328,qs),
(1375,238,o),
(1292,84,o),
(1137,-8,o),
(1035,-8,qs)
);
},
{
closed = 1;
nodes = (
(855,949,o),
(812,904,o),
(812,873,qs),
(812,843,o),
(855,798,o),
(888,798,qs),
(921,798,o),
(964,843,o),
(964,874,qs),
(964,904,o),
(921,949,o),
(888,949,qs)
);
},
{
closed = 1;
nodes = (
(1667,107,l),
(1714,157,o),
(1763,278,o),
(1763,342,qs),
(1763,405,o),
(1716,525,o),
(1670,575,q),
(1755,663,l),
(1818,597,o),
(1884,430,o),
(1884,342,qs),
(1884,254,o),
(1818,89,o),
(1755,23,q)
);
},
{
closed = 1;
nodes = (
(1839,-59,l),
(1919,23,o),
(2001,231,o),
(2001,342,qs),
(2001,453,o),
(1919,661,o),
(1839,742,q),
(1925,831,l),
(2023,731,o),
(2125,477,o),
(2125,342,qs),
(2125,208,o),
(2023,-47,o),
(1925,-148,q)
);
},
{
closed = 1;
nodes = (
(1088,949,o),
(1045,904,o),
(1045,873,qs),
(1045,843,o),
(1088,798,o),
(1121,798,qs),
(1154,798,o),
(1197,843,o),
(1197,874,qs),
(1197,904,o),
(1154,949,o),
(1121,949,qs)
);
},
{
closed = 1;
nodes = (
(1597,248,o),
(1652,303,o),
(1652,342,qs),
(1652,381,o),
(1597,436,o),
(1558,436,qs),
(1519,436,o),
(1464,381,o),
(1464,342,qs),
(1464,303,o),
(1519,248,o),
(1558,248,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
96 1 12 13 97 1 10 12 82 1 2 3 83 53 52 3 1 2 13 1 6 16 19 18 2 7 4 31 30 2 5 17 90 89 2 0 5 8 76 104 103 2 0 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
20 15 19 3 13 12 13 133 14 1 12 10 10 12 112 0 16 1 6 1 16 6 128 21 1 17 7 5 7 17 5 128 0 10 3 2 10 89 0 3 9 1 2 1 3 2 105 0 1 0 4 7 1 4 105 0 6 0 7 17 6 7 103 8 1 5 0 0 5 89 8 1 5 5 0 97 18 11 2 0 5 0 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 82 values pushed */
20 15 19 3 13 12 13 133 14 1 12 10 12 133 0 16 1 6 1 16 6 128 21 1 17 7 5 7 17 5 128 0 10 3 2 10 89 0 3 9 1 2 1 3 2 105 0 1 0 4 7 1 4 105 0 6 0 7 17 6 7 103 8 1 5 0 0 5 89 8 1 5 5 0 97 18 11 2 0 5 0 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 46 values pushed */
117 117 105 105 65 65 32 32 117 128 117 127 123 121 105 116 105 115 111 109 65 76 65 75 71 69 32 64 32 63 57 55 51 49 34 17 25 36 35 17 19 38 33 22 6 31
CALL[ ]	/* CallFunction */";
};
width = 2224;
}
);
note = uniE001;
unicode = 57345;
},
{
glyphname = uniE002;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,48,o),
(552,48,qs),
(559,48,o),
(564,53,qs),
(741,229,ls),
(800,288,o),
(800,367,qs),
(800,386,ls),
(800,393,o),
(803,399,o),
(809,401,qs),
(857,418,o),
(919,499,o),
(919,550,qs),
(919,594,o),
(877,667,o),
(805,710,o),
(760,710,qs),
(707,710,o),
(630,653,o),
(610,603,qs),
(606,592,o),
(594,584,o),
(585,584,qs),
(520,584,ls),
(509,584,o),
(497,592,o),
(493,603,qs),
(473,653,o),
(396,710,o),
(343,710,qs),
(298,710,o),
(226,667,o),
(184,594,o),
(184,550,qs),
(184,499,o),
(246,418,o),
(294,401,qs),
(300,399,o),
(303,393,o),
(303,386,qs),
(303,367,ls),
(303,294,o),
(362,229,q),
(539,53,l)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(521,0,o),
(528,7,o),
(528,12,qs),
(528,17,o),
(524,21,qs),
(321,222,ls),
(285,258,o),
(232,258,qs),
(198,258,o),
(138,227,o),
(100,168,o),
(100,130,qs),
(100,97,o),
(133,37,o),
(193,0,o),
(232,0,qs)
);
},
{
closed = 1;
nodes = (
(294,435,o),
(224,505,o),
(224,554,qs),
(224,603,o),
(294,672,o),
(343,672,qs),
(392,672,o),
(461,603,o),
(461,554,qs),
(461,505,o),
(392,435,o),
(343,435,qs)
);
},
{
closed = 1;
nodes = (
(383,456,o),
(440,514,o),
(440,554,qs),
(440,594,o),
(383,651,o),
(343,651,qs),
(303,651,o),
(245,594,o),
(245,554,qs),
(245,514,o),
(303,456,o),
(343,456,qs)
);
},
{
closed = 1;
nodes = (
(314,484,o),
(273,525,o),
(273,554,qs),
(273,583,o),
(314,623,o),
(343,623,qs),
(357,623,o),
(373,616,q),
(365,614,o),
(355,600,o),
(355,592,qs),
(355,581,o),
(370,566,o),
(381,566,qs),
(389,566,o),
(403,576,o),
(405,584,q),
(412,568,o),
(412,554,qs),
(412,525,o),
(372,484,o),
(343,484,qs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(910,0,o),
(970,37,o),
(1003,97,o),
(1003,130,qs),
(1003,168,o),
(965,227,o),
(905,258,o),
(871,258,qs),
(818,258,o),
(782,222,qs),
(579,21,ls),
(575,17,o),
(575,12,qs),
(575,7,o),
(582,0,o),
(588,0,qs)
);
},
{
closed = 1;
nodes = (
(712,435,o),
(642,505,o),
(642,554,qs),
(642,603,o),
(712,672,o),
(761,672,qs),
(810,672,o),
(879,603,o),
(879,554,qs),
(879,505,o),
(810,435,o),
(761,435,qs)
);
},
{
closed = 1;
nodes = (
(801,456,o),
(858,514,o),
(858,554,qs),
(858,594,o),
(801,651,o),
(761,651,qs),
(721,651,o),
(663,594,o),
(663,554,qs),
(663,514,o),
(721,456,o),
(761,456,qs)
);
},
{
closed = 1;
nodes = (
(732,484,o),
(691,525,o),
(691,554,qs),
(691,583,o),
(732,623,o),
(761,623,qs),
(775,623,o),
(791,616,q),
(783,614,o),
(773,600,o),
(773,592,qs),
(773,581,o),
(788,566,o),
(799,566,qs),
(807,566,o),
(821,576,o),
(823,584,q),
(830,568,o),
(830,554,qs),
(830,525,o),
(790,484,o),
(761,484,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
162 159 99 96 4 1 11 3 1 4 7 2 76 153 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
0 1 11 10 11 1 10 128 19 1 10 12 11 10 112 26 16 23 3 7 9 4 9 7 4 128 13 1 4 3 9 4 3 126 0 3 5 9 3 5 126 14 22 2 5 5 132 2 1 0 15 1 6 8 0 6 105 17 1 8 20 1 11 1 8 11 105 28 21 25 3 12 9 9 12 89 28 21 25 3 12 12 9 97 27 18 24 3 9 12 9 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 93 values pushed */
0 1 11 10 11 1 10 128 19 1 10 12 11 10 12 126 26 16 23 3 7 9 4 9 7 4 128 13 1 4 3 9 4 3 126 0 3 5 9 3 5 126 14 22 2 5 5 132 2 1 0 15 1 6 8 0 6 105 17 1 8 20 1 11 1 8 11 105 28 21 25 3 12 9 9 12 89 28 21 25 3 12 12 9 97 27 18 24 3 9 12 9 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 70 values pushed */
149 149 137 137 125 125 86 86 74 74 62 62 45 45 149 170 149 169 165 163 157 155 137 148 137 147 143 141 125 136 125 135 131 129 124 122 116 114 86 107 86 106 102 100 94 92 74 85 74 84 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 29 6 27
CALL[ ]	/* CallFunction */";
};
width = 1103;
}
);
note = uniE002;
unicode = 57346;
},
{
glyphname = uniE003;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,48,o),
(552,48,qs),
(559,48,o),
(564,53,qs),
(741,229,ls),
(800,288,o),
(800,367,qs),
(800,386,ls),
(800,393,o),
(803,399,o),
(809,401,qs),
(857,418,o),
(919,499,o),
(919,550,qs),
(919,594,o),
(877,667,o),
(805,710,o),
(760,710,qs),
(707,710,o),
(630,653,o),
(610,603,qs),
(606,592,o),
(594,584,o),
(585,584,qs),
(520,584,ls),
(509,584,o),
(497,592,o),
(493,603,qs),
(473,653,o),
(396,710,o),
(343,710,qs),
(298,710,o),
(226,667,o),
(184,594,o),
(184,550,qs),
(184,499,o),
(246,418,o),
(294,401,qs),
(300,399,o),
(303,393,o),
(303,386,qs),
(303,367,ls),
(303,294,o),
(362,229,q),
(539,53,l)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(521,0,o),
(528,7,o),
(528,12,qs),
(528,17,o),
(524,21,qs),
(321,222,ls),
(285,258,o),
(232,258,qs),
(198,258,o),
(138,227,o),
(100,168,o),
(100,130,qs),
(100,97,o),
(133,37,o),
(193,0,o),
(232,0,qs)
);
},
{
closed = 1;
nodes = (
(303,456,o),
(245,514,o),
(245,554,qs),
(245,594,o),
(303,651,o),
(343,651,qs),
(383,651,o),
(440,594,o),
(440,554,qs),
(440,514,o),
(383,456,o),
(343,456,qs)
);
},
{
closed = 1;
nodes = (
(372,484,o),
(412,525,o),
(412,554,qs),
(412,568,o),
(405,584,q),
(403,576,o),
(389,566,o),
(381,566,qs),
(370,566,o),
(355,581,o),
(355,592,qs),
(355,600,o),
(365,614,o),
(373,616,q),
(357,623,o),
(343,623,qs),
(314,623,o),
(273,583,o),
(273,554,qs),
(273,525,o),
(314,484,o),
(343,484,qs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(910,0,o),
(970,37,o),
(1003,97,o),
(1003,130,qs),
(1003,168,o),
(965,227,o),
(905,258,o),
(871,258,qs),
(818,258,o),
(782,222,qs),
(579,21,ls),
(575,17,o),
(575,12,qs),
(575,7,o),
(582,0,o),
(588,0,qs)
);
},
{
closed = 1;
nodes = (
(721,456,o),
(663,514,o),
(663,554,qs),
(663,594,o),
(721,651,o),
(761,651,qs),
(801,651,o),
(858,594,o),
(858,554,qs),
(858,514,o),
(801,456,o),
(761,456,qs)
);
},
{
closed = 1;
nodes = (
(790,484,o),
(830,525,o),
(830,554,qs),
(830,568,o),
(823,584,q),
(821,576,o),
(807,566,o),
(799,566,qs),
(788,566,o),
(773,581,o),
(773,592,qs),
(773,600,o),
(783,614,o),
(791,616,q),
(775,623,o),
(761,623,qs),
(732,623,o),
(691,583,o),
(691,554,qs),
(691,525,o),
(732,484,o),
(761,484,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 150 values pushed */
132 81 2 1 8 3 1 4 7 2 76 141 90 2 1 1 75 0 1 8 9 8 1 9 128 16 1 9 10 8 9 10 126 21 14 19 3 7 10 4 10 7 4 128 11 1 4 3 10 4 3 126 0 3 5 10 3 5 126 12 18 2 5 5 132 2 1 0 13 1 6 8 0 6 105 15 1 8 1 10 8 89 15 1 8 8 10 97 22 17 20 3 10 8 10 81 125 125 113 113 74 74 62 62 45 45 125 146 125 145 138 137 131 129 113 124 113 123 119 117 112 110 104 102 74 95 74 94 87 86 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 23 6 27
CALL[ ]	/* CallFunction */";
};
width = 1103;
}
);
note = uniE003;
unicode = 57347;
},
{
glyphname = uniE004;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,48,o),
(552,48,qs),
(559,48,o),
(564,53,qs),
(741,229,ls),
(800,288,o),
(800,367,qs),
(800,386,ls),
(800,393,o),
(803,399,o),
(809,401,qs),
(857,418,o),
(919,499,o),
(919,550,qs),
(919,594,o),
(877,667,o),
(805,710,o),
(760,710,qs),
(707,710,o),
(630,653,o),
(610,603,qs),
(606,592,o),
(594,584,o),
(585,584,qs),
(520,584,ls),
(509,584,o),
(497,592,o),
(493,603,qs),
(473,653,o),
(396,710,o),
(343,710,qs),
(298,710,o),
(226,667,o),
(184,594,o),
(184,550,qs),
(184,499,o),
(246,418,o),
(294,401,qs),
(300,399,o),
(303,393,o),
(303,386,qs),
(303,367,ls),
(303,294,o),
(362,229,q),
(539,53,l)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(521,0,o),
(528,7,o),
(528,12,qs),
(528,17,o),
(524,21,qs),
(321,222,ls),
(285,258,o),
(232,258,qs),
(198,258,o),
(138,227,o),
(100,168,o),
(100,130,qs),
(100,97,o),
(133,37,o),
(193,0,o),
(232,0,qs)
);
},
{
closed = 1;
nodes = (
(294,435,o),
(224,505,o),
(224,554,qs),
(224,603,o),
(294,672,o),
(343,672,qs),
(392,672,o),
(461,603,o),
(461,554,qs),
(461,505,o),
(392,435,o),
(343,435,qs)
);
},
{
closed = 1;
nodes = (
(383,456,o),
(440,514,o),
(440,554,qs),
(440,594,o),
(383,651,o),
(343,651,qs),
(303,651,o),
(245,594,o),
(245,554,qs),
(245,514,o),
(303,456,o),
(343,456,qs)
);
},
{
closed = 1;
nodes = (
(314,484,o),
(273,525,o),
(273,554,qs),
(273,583,o),
(314,623,o),
(343,623,qs),
(357,623,o),
(373,616,q),
(365,614,o),
(355,600,o),
(355,592,qs),
(355,581,o),
(370,566,o),
(381,566,qs),
(389,566,o),
(403,576,o),
(405,584,q),
(412,568,o),
(412,554,qs),
(412,525,o),
(372,484,o),
(343,484,qs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(910,0,o),
(970,37,o),
(1003,97,o),
(1003,130,qs),
(1003,168,o),
(965,227,o),
(905,258,o),
(871,258,qs),
(818,258,o),
(782,222,qs),
(579,21,ls),
(575,17,o),
(575,12,qs),
(575,7,o),
(582,0,o),
(588,0,qs)
);
},
{
closed = 1;
nodes = (
(1255,0,l),
(1255,214,l),
(1460,0,l),
(1606,0,l),
(1362,260,l),
(1591,511,l),
(1447,511,l),
(1255,309,l),
(1255,700,l),
(1141,700,l),
(1141,0,l)
);
},
{
closed = 1;
nodes = (
(1927,-12,o),
(2052,57,o),
(2123,179,o),
(2123,254,qs),
(2123,329,o),
(2052,452,o),
(1927,523,o),
(1849,523,qs),
(1771,523,o),
(1647,452,o),
(1576,329,o),
(1576,254,qs),
(1576,179,o),
(1647,57,o),
(1771,-12,o),
(1849,-12,qs)
);
},
{
closed = 1;
nodes = (
(1800,95,o),
(1729,137,o),
(1690,210,o),
(1690,254,qs),
(1690,298,o),
(1729,371,o),
(1800,413,o),
(1847,413,qs),
(1894,413,o),
(1966,371,o),
(2006,298,o),
(2006,254,qs),
(2006,210,o),
(1966,137,o),
(1894,95,o),
(1847,95,qs)
);
},
{
closed = 1;
nodes = (
(1773,566,o),
(1814,607,o),
(1814,637,qs),
(1814,667,o),
(1774,707,o),
(1743,707,qs),
(1713,707,o),
(1672,665,o),
(1672,636,qs),
(1672,607,o),
(1713,566,o),
(1743,566,qs)
);
},
{
closed = 1;
nodes = (
(1984,566,o),
(2025,607,o),
(2025,637,qs),
(2025,667,o),
(1985,707,o),
(1954,707,qs),
(1924,707,o),
(1883,665,o),
(1883,636,qs),
(1883,607,o),
(1924,566,o),
(1954,566,qs)
);
},
{
closed = 1;
nodes = (
(2303,0,l),
(2303,700,l),
(2193,700,l),
(2193,0,l)
);
},
{
closed = 1;
nodes = (
(2618,95,o),
(2546,140,o),
(2508,213,o),
(2508,254,qs),
(2508,297,o),
(2549,370,o),
(2621,413,o),
(2667,413,qs),
(2735,413,o),
(2823,323,o),
(2823,254,qs),
(2823,209,o),
(2783,136,o),
(2712,95,o),
(2667,95,qs)
);
},
{
closed = 1;
nodes = (
(2763,-12,o),
(2877,60,o),
(2939,182,o),
(2939,254,qs),
(2939,331,o),
(2873,454,o),
(2759,523,o),
(2688,523,qs),
(2631,523,o),
(2543,478,o),
(2508,431,q),
(2508,700,l),
(2398,700,l),
(2398,0,l),
(2508,0,l),
(2508,80,l),
(2543,33,o),
(2631,-12,o),
(2688,-12,qs)
);
},
{
closed = 1;
nodes = (
(3122,0,l),
(3122,511,l),
(3009,511,l),
(3009,0,l)
);
},
{
closed = 1;
nodes = (
(3095,566,o),
(3136,607,o),
(3136,637,qs),
(3136,667,o),
(3096,707,o),
(3065,707,qs),
(3035,707,o),
(2994,665,o),
(2994,636,qs),
(2994,607,o),
(3035,566,o),
(3065,566,qs)
);
},
{
closed = 1;
nodes = (
(712,435,o),
(642,505,o),
(642,554,qs),
(642,603,o),
(712,672,o),
(761,672,qs),
(810,672,o),
(879,603,o),
(879,554,qs),
(879,505,o),
(810,435,o),
(761,435,qs)
);
},
{
closed = 1;
nodes = (
(801,456,o),
(858,514,o),
(858,554,qs),
(858,594,o),
(801,651,o),
(761,651,qs),
(721,651,o),
(663,594,o),
(663,554,qs),
(663,514,o),
(721,456,o),
(761,456,qs)
);
},
{
closed = 1;
nodes = (
(732,484,o),
(691,525,o),
(691,554,qs),
(691,583,o),
(732,623,o),
(761,623,qs),
(775,623,o),
(791,616,q),
(783,614,o),
(773,600,o),
(773,592,qs),
(773,581,o),
(788,566,o),
(799,566,qs),
(807,566,o),
(821,576,o),
(823,584,q),
(830,568,o),
(830,554,qs),
(830,525,o),
(790,484,o),
(761,484,qs)
);
}
);
userData = {
assembly = "NPUSHW[ ]	/* 33 values pushed */
283 280 99 96 4 1 11 218 1 21 7 130 127 3 3 4 21 133 1 22 4 213 1 3 22 5 76 274 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 154 values pushed */
32 27 2 15 0 6 0 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 39 1 6 8 0 6 89 41 1 8 44 1 11 1 8 11 105 37 25 23 2 4 0 43 56 38 53 26 52 24 7 10 19 0 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 155 values pushed */
32 27 2 15 23 6 23 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 2 1 0 39 1 6 8 0 6 105 41 1 8 44 1 11 1 8 11 105 37 25 2 23 43 56 38 53 26 52 24 7 10 19 23 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 154 values pushed */
32 27 2 15 0 6 0 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 39 1 6 8 0 6 89 41 1 8 44 1 11 1 8 11 105 37 25 23 2 4 0 43 56 38 53 26 52 24 7 10 19 0 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 146 values pushed */
270 270 258 258 246 246 234 234 211 211 196 196 180 180 168 168 152 152 136 136 86 86 74 74 62 62 45 45 270 291 270 290 286 284 278 276 258 269 258 268 264 262 246 257 246 256 252 250 234 245 234 244 240 238 233 232 231 230 211 229 211 228 222 220 217 216 215 214 196 210 196 209 203 201 195 194 193 192 180 191 180 190 186 184 168 179 168 178 174 172 152 167 152 166 160 158 136 151 136 150 144 142 135 134 132 131 129 128 126 125 124 122 116 114 86 107 86 106 102 100 94 92 74 85 74 84 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 60 6 27
CALL[ ]	/* CallFunction */";
};
width = 3236;
}
);
note = uniE004;
},
{
glyphname = uniE005;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,48,o),
(552,48,qs),
(559,48,o),
(564,53,qs),
(741,229,ls),
(800,288,o),
(800,367,qs),
(800,386,ls),
(800,393,o),
(803,399,o),
(809,401,qs),
(857,418,o),
(919,499,o),
(919,550,qs),
(919,594,o),
(877,667,o),
(805,710,o),
(760,710,qs),
(707,710,o),
(630,653,o),
(610,603,qs),
(606,592,o),
(594,584,o),
(585,584,qs),
(520,584,ls),
(509,584,o),
(497,592,o),
(493,603,qs),
(473,653,o),
(396,710,o),
(343,710,qs),
(298,710,o),
(226,667,o),
(184,594,o),
(184,550,qs),
(184,499,o),
(246,418,o),
(294,401,qs),
(300,399,o),
(303,393,o),
(303,386,qs),
(303,367,ls),
(303,294,o),
(362,229,q),
(539,53,l)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(521,0,o),
(528,7,o),
(528,12,qs),
(528,17,o),
(524,21,qs),
(321,222,ls),
(285,258,o),
(232,258,qs),
(198,258,o),
(138,227,o),
(100,168,o),
(100,130,qs),
(100,97,o),
(133,37,o),
(193,0,o),
(232,0,qs)
);
},
{
closed = 1;
nodes = (
(303,456,o),
(245,514,o),
(245,554,qs),
(245,594,o),
(303,651,o),
(343,651,qs),
(383,651,o),
(440,594,o),
(440,554,qs),
(440,514,o),
(383,456,o),
(343,456,qs)
);
},
{
closed = 1;
nodes = (
(372,484,o),
(412,525,o),
(412,554,qs),
(412,568,o),
(405,584,q),
(403,576,o),
(389,566,o),
(381,566,qs),
(370,566,o),
(355,581,o),
(355,592,qs),
(355,600,o),
(365,614,o),
(373,616,q),
(357,623,o),
(343,623,qs),
(314,623,o),
(273,583,o),
(273,554,qs),
(273,525,o),
(314,484,o),
(343,484,qs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(910,0,o),
(970,37,o),
(1003,97,o),
(1003,130,qs),
(1003,168,o),
(965,227,o),
(905,258,o),
(871,258,qs),
(818,258,o),
(782,222,qs),
(579,21,ls),
(575,17,o),
(575,12,qs),
(575,7,o),
(582,0,o),
(588,0,qs)
);
},
{
closed = 1;
nodes = (
(721,456,o),
(663,514,o),
(663,554,qs),
(663,594,o),
(721,651,o),
(761,651,qs),
(801,651,o),
(858,594,o),
(858,554,qs),
(858,514,o),
(801,456,o),
(761,456,qs)
);
},
{
closed = 1;
nodes = (
(790,484,o),
(830,525,o),
(830,554,qs),
(830,568,o),
(823,584,q),
(821,576,o),
(807,566,o),
(799,566,qs),
(788,566,o),
(773,581,o),
(773,592,qs),
(773,600,o),
(783,614,o),
(791,616,q),
(775,623,o),
(761,623,qs),
(732,623,o),
(691,583,o),
(691,554,qs),
(691,525,o),
(732,484,o),
(761,484,qs)
);
},
{
closed = 1;
nodes = (
(1255,0,l),
(1255,214,l),
(1460,0,l),
(1606,0,l),
(1362,260,l),
(1591,511,l),
(1447,511,l),
(1255,309,l),
(1255,700,l),
(1141,700,l),
(1141,0,l)
);
},
{
closed = 1;
nodes = (
(1927,-12,o),
(2052,57,o),
(2123,179,o),
(2123,254,qs),
(2123,329,o),
(2052,452,o),
(1927,523,o),
(1849,523,qs),
(1771,523,o),
(1647,452,o),
(1576,329,o),
(1576,254,qs),
(1576,179,o),
(1647,57,o),
(1771,-12,o),
(1849,-12,qs)
);
},
{
closed = 1;
nodes = (
(1800,95,o),
(1729,137,o),
(1690,210,o),
(1690,254,qs),
(1690,298,o),
(1729,371,o),
(1800,413,o),
(1847,413,qs),
(1894,413,o),
(1966,371,o),
(2006,298,o),
(2006,254,qs),
(2006,210,o),
(1966,137,o),
(1894,95,o),
(1847,95,qs)
);
},
{
closed = 1;
nodes = (
(1773,566,o),
(1814,607,o),
(1814,637,qs),
(1814,667,o),
(1774,707,o),
(1743,707,qs),
(1713,707,o),
(1672,665,o),
(1672,636,qs),
(1672,607,o),
(1713,566,o),
(1743,566,qs)
);
},
{
closed = 1;
nodes = (
(1984,566,o),
(2025,607,o),
(2025,637,qs),
(2025,667,o),
(1985,707,o),
(1954,707,qs),
(1924,707,o),
(1883,665,o),
(1883,636,qs),
(1883,607,o),
(1924,566,o),
(1954,566,qs)
);
},
{
closed = 1;
nodes = (
(2303,0,l),
(2303,700,l),
(2193,700,l),
(2193,0,l)
);
},
{
closed = 1;
nodes = (
(2618,95,o),
(2546,140,o),
(2508,213,o),
(2508,254,qs),
(2508,297,o),
(2549,370,o),
(2621,413,o),
(2667,413,qs),
(2735,413,o),
(2823,323,o),
(2823,254,qs),
(2823,209,o),
(2783,136,o),
(2712,95,o),
(2667,95,qs)
);
},
{
closed = 1;
nodes = (
(2763,-12,o),
(2877,60,o),
(2939,182,o),
(2939,254,qs),
(2939,331,o),
(2873,454,o),
(2759,523,o),
(2688,523,qs),
(2631,523,o),
(2543,478,o),
(2508,431,q),
(2508,700,l),
(2398,700,l),
(2398,0,l),
(2508,0,l),
(2508,80,l),
(2543,33,o),
(2631,-12,o),
(2688,-12,qs)
);
},
{
closed = 1;
nodes = (
(3122,0,l),
(3122,511,l),
(3009,511,l),
(3009,0,l)
);
},
{
closed = 1;
nodes = (
(3095,566,o),
(3136,607,o),
(3136,637,qs),
(3136,667,o),
(3096,707,o),
(3065,707,qs),
(3035,707,o),
(2994,665,o),
(2994,636,qs),
(2994,607,o),
(3035,566,o),
(3065,566,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
132 81 2 1 8 240 1 24 7 152 149 3 3 4 24 155 1 25 4 235 1 3 25 5 76 141 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 149 values pushed */
35 30 2 18 0 6 0 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 13 1 6 8 0 6 89 40 28 26 2 4 0 53 41 50 29 49 5 27 9 0 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 150 values pushed */
35 30 2 18 26 6 26 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 2 1 0 13 1 6 8 0 6 105 40 28 2 26 53 41 50 29 49 5 27 9 26 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 149 values pushed */
35 30 2 18 0 6 0 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 13 1 6 8 0 6 89 40 28 26 2 4 0 53 41 50 29 49 5 27 9 0 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 130 values pushed */
256 256 233 233 218 218 202 202 190 190 174 174 158 158 125 125 113 113 74 74 62 62 45 45 256 267 256 266 262 260 255 254 253 252 233 251 233 250 244 242 239 238 237 236 218 232 218 231 225 223 217 216 215 214 202 213 202 212 208 206 190 201 190 200 196 194 174 189 174 188 182 180 158 173 158 172 166 164 157 156 154 153 151 150 148 147 125 146 125 145 138 137 131 129 113 124 113 123 119 117 112 110 104 102 74 95 74 94 87 86 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 54 6 27
CALL[ ]	/* CallFunction */";
};
width = 3236;
}
);
note = uniE005;
},
{
glyphname = REbackwards;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(35,0,l),
(139,0,l),
(319,310,l),
(435,310,l),
(435,0,l),
(519,0,l),
(519,700,l),
(312,700,ls),
(200,700,o),
(78,602,o),
(78,505,qs),
(78,354,o),
(236,326,q)
);
},
{
closed = 1;
nodes = (
(232,381,o),
(164,441,o),
(164,505,qs),
(164,570,o),
(232,630,o),
(314,630,qs),
(435,630,l),
(435,381,l),
(314,381,ls)
);
},
{
closed = 1;
nodes = (
(1100,0,l),
(1100,700,l),
(667,700,l),
(667,631,l),
(1016,631,l),
(1016,404,l),
(711,404,l),
(711,336,l),
(1016,336,l),
(1016,69,l),
(667,69,l),
(667,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
12 1 2 7 1 76 0 8 0 7 2 8 7 103 12 1 5 0 2 6 5 2 103 9 1 4 4 0 95 10 1 0 0 33 77 0 6 6 1 95 11 3 2 1 1 34 1 78 13 13 33 32 31 30 29 28 27 26 25 24 23 22 13 21 13 20 35 17 17 17 35 13 8 27
CALL[ ]	/* CallFunction */";
};
width = 1193;
}
);
note = REbackwards;
},
{
glyphname = RethinkWordmark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(3258,0,l),
(3258,488,l),
(3587,0,l),
(3715,0,l),
(3715,700,l),
(3587,700,l),
(3587,211,l),
(3258,700,l),
(3130,700,l),
(3130,0,l)
);
},
{
closed = 1;
nodes = (
(22,0,l),
(173,0,l),
(345,295,l),
(423,295,l),
(423,0,l),
(551,0,l),
(551,700,l),
(308,700,ls),
(200,700,o),
(133,647,qs),
(68,594,o),
(68,498,qs),
(68,426,o),
(107,379,qs),
(146,333,o),
(217,316,q)
);
},
{
closed = 1;
nodes = (
(249,404,o),
(223,428,qs),
(198,455,o),
(198,498,qs),
(198,542,o),
(224,566,qs),
(249,591,o),
(311,591,qs),
(423,591,l),
(423,404,l),
(311,404,ls)
);
},
{
closed = 1;
nodes = (
(1185,0,l),
(1185,700,l),
(736,700,l),
(736,591,l),
(1057,591,l),
(1057,424,l),
(782,424,l),
(782,315,l),
(1057,315,l),
(1057,109,l),
(736,109,l),
(736,0,l)
);
},
{
closed = 1;
nodes = (
(1680,0,l),
(1680,591,l),
(1885,591,l),
(1885,700,l),
(1348,700,l),
(1348,591,l),
(1552,591,l),
(1552,0,l)
);
},
{
closed = 1;
nodes = (
(2170,0,l),
(2170,316,l),
(2484,316,l),
(2484,0,l),
(2612,0,l),
(2612,700,l),
(2484,700,l),
(2484,425,l),
(2170,425,l),
(2170,700,l),
(2042,700,l),
(2042,0,l)
);
},
{
closed = 1;
nodes = (
(2935,0,l),
(2935,700,l),
(2807,700,l),
(2807,0,l)
);
},
{
closed = 1;
nodes = (
(4037,0,l),
(4037,261,l),
(4108,339,l),
(4310,0,l),
(4461,0,l),
(4194,433,l),
(4438,700,l),
(4277,700,l),
(4037,431,l),
(4037,700,l),
(3909,700,l),
(3909,0,l)
);
},
{
closed = 1;
nodes = (
(4611,700,l),
(4644,700,l),
(4679,765,l),
(4697,765,l),
(4697,700,l),
(4725,700,l),
(4725,855,l),
(4671,855,ls),
(4645,855,o),
(4623,830,o),
(4623,811,qs),
(4623,783,o),
(4652,772,q)
);
},
{
closed = 1;
nodes = (
(4718,629,o),
(4783,667,o),
(4821,733,o),
(4821,772,qs),
(4821,811,o),
(4783,877,o),
(4717,916,o),
(4678,916,qs),
(4635,916,o),
(4570,874,o),
(4534,808,o),
(4534,772,qs),
(4534,734,o),
(4572,668,o),
(4638,629,o),
(4678,629,qs)
);
},
{
closed = 1;
nodes = (
(4646,652,o),
(4591,685,o),
(4558,740,o),
(4558,772,qs),
(4558,822,o),
(4629,892,o),
(4678,892,qs),
(4728,892,o),
(4798,822,o),
(4798,772,qs),
(4798,723,o),
(4728,652,o),
(4678,652,qs)
);
},
{
closed = 1;
nodes = (
(4666,789,o),
(4650,800,o),
(4650,811,qs),
(4650,832,o),
(4675,832,qs),
(4697,832,l),
(4697,789,l),
(4678,789,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
97 1 34 41 78 75 7 3 12 8 81 25 2 11 9 82 2 2 10 6 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 105 values pushed */
35 1 33 34 0 40 33 114 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 45 1 41 0 34 33 41 34 103 44 1 39 43 1 37 8 39 37 105 21 1 12 24 1 11 6 12 11 103 42 1 9 0 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 106 values pushed */
35 1 33 34 0 34 33 0 128 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 45 1 41 0 34 33 41 34 103 44 1 39 43 1 37 8 39 37 105 21 1 12 24 1 11 6 12 11 103 42 1 9 0 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 94 values pushed */
127 127 114 114 98 98 26 26 127 134 127 133 130 128 114 126 114 125 120 118 98 113 98 112 106 104 96 95 94 93 92 91 90 88 84 83 80 79 77 76 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 26 36 26 35 35 17 17 17 39 18 17 18 16 46 8 31
CALL[ ]	/* CallFunction */";
};
width = 4877;
}
);
note = RethinkWordmark;
},
{
glyphname = Rlogobig;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(501,-12,o),
(668,85,o),
(765,252,o),
(765,350,qs),
(765,448,o),
(668,615,o),
(501,712,o),
(403,712,qs),
(305,712,o),
(138,615,o),
(41,448,o),
(41,350,qs),
(41,252,o),
(138,85,o),
(305,-12,o),
(403,-12,qs)
);
},
{
closed = 1;
nodes = (
(318,168,l),
(332,196,o),
(392,308,o),
(405,333,q),
(450,333,l),
(450,168,l),
(523,168,l),
(523,559,l),
(386,559,ls),
(320,559,o),
(263,493,o),
(263,447,qs),
(263,411,o),
(303,361,o),
(337,349,q),
(234,168,l)
);
},
{
closed = 1;
nodes = (
(321,47,o),
(182,129,o),
(100,268,o),
(100,350,qs),
(100,432,o),
(182,571,o),
(321,652,o),
(403,652,qs),
(485,652,o),
(624,571,o),
(705,432,o),
(705,350,qs),
(705,268,o),
(624,129,o),
(485,47,o),
(403,47,qs)
);
},
{
closed = 1;
nodes = (
(371,392,o),
(332,420,o),
(332,447,qs),
(332,473,o),
(367,501,o),
(395,501,qs),
(450,501,l),
(450,392,l),
(404,392,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
5 1 3 4 7 4 3 7 128 0 2 0 8 9 2 8 105 12 1 9 0 4 3 9 4 103 0 6 6 0 97 0 0 0 39 77 11 1 7 7 1 97 10 1 1 1 40 1 78 48 48 32 32 0 0 48 56 48 55 51 49 32 47 32 46 40 38 31 30 27 26 25 24 23 21 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 806;
}
);
note = Rlogobig;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = Regular;
properties = (
{
key = postscriptFontName;
value = "KolbiSans-Regular";
},
{
key = postscriptFullNames;
values = (
{
language = ENG;
value = "Kolbi Sans Regular";
}
);
}
);
}
);
kerningLTR = {
m01 = {
"@MMK_L_A" = {
"@MMK_R_C" = -40;
"@MMK_R_T" = -79;
"@MMK_R_U" = -30;
"@MMK_R_V" = -97;
"@MMK_R_W" = -70;
"@MMK_R_Y" = -73;
"@MMK_R_a" = -20;
"@MMK_R_ampersand" = -5;
"@MMK_R_asterisk" = -91;
"@MMK_R_at" = -17;
"@MMK_R_backslash" = -60;
"@MMK_R_braceleft" = -57;
"@MMK_R_c" = -27;
"@MMK_R_f" = -17;
"@MMK_R_g" = -10;
"@MMK_R_hyphen" = -30;
"@MMK_R_multiply" = -21;
"@MMK_R_parenright" = -34;
"@MMK_R_plus" = -37;
"@MMK_R_question" = -39;
"@MMK_R_space" = -10;
"@MMK_R_t" = -42;
"@MMK_R_u" = -11;
"@MMK_R_v" = -51;
"@MMK_R_w" = -39;
"@MMK_R_y" = -60;
};
"@MMK_L_B" = {
"@MMK_R_A" = -12;
"@MMK_R_AE" = -37;
"@MMK_R_T" = -17;
"@MMK_R_V" = -20;
"@MMK_R_W" = -20;
"@MMK_R_Y" = -30;
"@MMK_R_y" = -10;
};
"@MMK_L_C" = {
"@MMK_R_A" = -17;
"@MMK_R_AE" = -20;
"@MMK_R_T" = -17;
"@MMK_R_W" = -5;
"@MMK_R_X" = -20;
"@MMK_R_Y" = -31;
"@MMK_R_parenright" = -30;
};
"@MMK_L_D" = {
"@MMK_R_A" = -50;
"@MMK_R_AE" = -49;
"@MMK_R_T" = -36;
"@MMK_R_V" = -27;
"@MMK_R_W" = -40;
"@MMK_R_X" = -47;
"@MMK_R_Y" = -49;
"@MMK_R_ampersand" = -5;
"@MMK_R_backslash" = -26;
"@MMK_R_braceright" = -31;
"@MMK_R_comma" = -40;
"@MMK_R_g" = -10;
"@MMK_R_parenright" = -67;
"@MMK_R_period" = -30;
"@MMK_R_slash" = -41;
"@MMK_R_underscore" = -43;
};
"@MMK_L_F" = {
"@MMK_R_A" = -71;
"@MMK_R_a" = -34;
"@MMK_R_c" = -21;
"@MMK_R_period" = -60;
"@MMK_R_s" = -20;
};
"@MMK_L_G" = {
"@MMK_R_W" = -10;
"@MMK_R_Y" = -40;
};
"@MMK_L_J" = {
"@MMK_R_A" = -30;
"@MMK_R_period" = -20;
};
"@MMK_L_K" = {
"@MMK_R_C" = -41;
"@MMK_R_a" = -22;
"@MMK_R_ampersand" = -10;
"@MMK_R_c" = -33;
"@MMK_R_guillemotleft" = -40;
"@MMK_R_hyphen" = -60;
"@MMK_R_plus" = -50;
"@MMK_R_question" = -14;
"@MMK_R_s" = -10;
"@MMK_R_t" = -21;
"@MMK_R_u" = -17;
"@MMK_R_v" = -30;
"@MMK_R_w" = -30;
"@MMK_R_y" = -50;
};
"@MMK_L_L" = {
"@MMK_R_C" = -65;
"@MMK_R_S" = -30;
"@MMK_R_T" = -111;
"@MMK_R_U" = -30;
"@MMK_R_V" = -120;
"@MMK_R_W" = -70;
"@MMK_R_Y" = -100;
"@MMK_R_asterisk" = -93;
"@MMK_R_backslash" = -40;
"@MMK_R_c" = -21;
"@MMK_R_hyphen" = -69;
"@MMK_R_percent" = -46;
"@MMK_R_plus" = -57;
"@MMK_R_question" = -29;
"@MMK_R_t" = -50;
"@MMK_R_uni018F" = -30;
"@MMK_R_uni02BA" = -60;
"@MMK_R_v" = -67;
"@MMK_R_w" = -30;
"@MMK_R_y" = -61;
};
"@MMK_L_Oslash" = {
"@MMK_R_period" = -34;
};
"@MMK_L_P" = {
"@MMK_R_A" = -88;
"@MMK_R_AE" = -134;
"@MMK_R_Y" = -12;
"@MMK_R_a" = -23;
"@MMK_R_c" = -29;
"@MMK_R_g" = -25;
"@MMK_R_period" = -70;
};
"@MMK_L_Q" = {
"@MMK_R_A" = -26;
"@MMK_R_T" = -35;
"@MMK_R_V" = -27;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -47;
"@MMK_R_g" = -10;
"@MMK_R_u" = 3;
"@MMK_R_w" = 3;
};
"@MMK_L_R" = {
"@MMK_R_C" = -20;
"@MMK_R_T" = -15;
"@MMK_R_V" = -30;
"@MMK_R_W" = -30;
"@MMK_R_X" = -15;
"@MMK_R_Y" = -30;
"@MMK_R_a" = -14;
"@MMK_R_c" = -30;
"@MMK_R_g" = -5;
"@MMK_R_plus" = -17;
"@MMK_R_s" = -17;
};
"@MMK_L_S" = {
"@MMK_R_T" = -17;
"@MMK_R_V" = -20;
"@MMK_R_W" = -25;
"@MMK_R_Y" = -30;
};
"@MMK_L_T" = {
"@MMK_R_A" = -79;
"@MMK_R_AE" = -99;
"@MMK_R_C" = -35;
"@MMK_R_J" = -83;
"@MMK_R_S" = -15;
"@MMK_R_a" = -75;
"@MMK_R_ampersand" = -20;
"@MMK_R_at" = -97;
"@MMK_R_backslash" = 4;
"@MMK_R_braceleft" = -30;
"@MMK_R_c" = -90;
"@MMK_R_comma" = -80;
"@MMK_R_dotlessi" = -57;
"@MMK_R_exclamdown" = -47;
"@MMK_R_g" = -90;
"@MMK_R_hyphen" = -50;
"@MMK_R_ibreve" = 35;
"@MMK_R_multiply" = -60;
"@MMK_R_p" = -50;
"@MMK_R_period" = -80;
"@MMK_R_plus" = -59;
"@MMK_R_question" = 20;
"@MMK_R_questiondown" = -97;
"@MMK_R_s" = -90;
"@MMK_R_semicolon" = -51;
"@MMK_R_slash" = -61;
"@MMK_R_t" = -34;
"@MMK_R_u" = -50;
"@MMK_R_underscore" = -60;
"@MMK_R_v" = -60;
"@MMK_R_w" = -53;
"@MMK_R_x" = -47;
"@MMK_R_y" = -60;
"@MMK_R_z" = -60;
};
"@MMK_L_Thorn" = {
"@MMK_R_A" = -49;
"@MMK_R_T" = -74;
"@MMK_R_V" = -49;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -69;
"@MMK_R_period" = -57;
};
"@MMK_L_U" = {
"@MMK_R_A" = -30;
"@MMK_R_AE" = -49;
"@MMK_R_g" = -10;
"@MMK_R_period" = -20;
"@MMK_R_slash" = -30;
"@MMK_R_underscore" = -40;
};
"@MMK_L_V" = {
"@MMK_R_A" = -85;
"@MMK_R_AE" = -126;
"@MMK_R_C" = -27;
"@MMK_R_J" = -60;
"@MMK_R_S" = -30;
"@MMK_R_a" = -55;
"@MMK_R_ampersand" = -60;
"@MMK_R_at" = -91;
"@MMK_R_backslash" = 6;
"@MMK_R_c" = -75;
"@MMK_R_colon" = -30;
"@MMK_R_comma" = -71;
"@MMK_R_dotlessi" = -29;
"@MMK_R_exclamdown" = -31;
"@MMK_R_g" = -65;
"@MMK_R_hyphen" = -39;
"@MMK_R_multiply" = -69;
"@MMK_R_period" = -80;
"@MMK_R_plus" = -57;
"@MMK_R_s" = -57;
"@MMK_R_slash" = -79;
"@MMK_R_t" = -20;
"@MMK_R_u" = -12;
"@MMK_R_underscore" = -99;
"@MMK_R_v" = -17;
};
"@MMK_L_W" = {
"@MMK_R_A" = -80;
"@MMK_R_AE" = -97;
"@MMK_R_C" = -42;
"@MMK_R_J" = -40;
"@MMK_R_Oslash" = -20;
"@MMK_R_S" = -25;
"@MMK_R_a" = -65;
"@MMK_R_ampersand" = -50;
"@MMK_R_at" = -80;
"@MMK_R_braceleft" = -30;
"@MMK_R_c" = -85;
"@MMK_R_comma" = -60;
"@MMK_R_dotlessi" = -17;
"@MMK_R_exclamdown" = -30;
"@MMK_R_g" = -60;
"@MMK_R_hyphen" = -39;
"@MMK_R_i" = -20;
"@MMK_R_multiply" = -43;
"@MMK_R_period" = -70;
"@MMK_R_plus" = -57;
"@MMK_R_s" = -45;
"@MMK_R_semicolon" = -31;
"@MMK_R_slash" = -60;
"@MMK_R_u" = -35;
"@MMK_R_underscore" = -70;
"@MMK_R_v" = -17;
};
"@MMK_L_X" = {
"@MMK_R_C" = -47;
"@MMK_R_a" = -21;
"@MMK_R_c" = -31;
"@MMK_R_s" = -17;
"@MMK_R_u" = -23;
"@MMK_R_w" = -30;
"@MMK_R_y" = -40;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -70;
"@MMK_R_AE" = -129;
"@MMK_R_C" = -49;
"@MMK_R_J" = -81;
"@MMK_R_Oslash" = -49;
"@MMK_R_S" = -40;
"@MMK_R_a" = -73;
"@MMK_R_ampersand" = -30;
"@MMK_R_at" = -110;
"@MMK_R_braceleft" = -50;
"@MMK_R_c" = -87;
"@MMK_R_colon" = -31;
"@MMK_R_comma" = -64;
"@MMK_R_dotlessi" = -39;
"@MMK_R_exclamdown" = -31;
"@MMK_R_g" = -81;
"@MMK_R_hyphen" = -59;
"@MMK_R_multiply" = -60;
"@MMK_R_period" = -83;
"@MMK_R_plus" = -71;
"@MMK_R_questiondown" = -89;
"@MMK_R_s" = -70;
"@MMK_R_semicolon" = -36;
"@MMK_R_slash" = -61;
"@MMK_R_t" = -30;
"@MMK_R_u" = -27;
"@MMK_R_underscore" = -70;
"@MMK_R_uni02BA" = 39;
"@MMK_R_v" = -42;
"@MMK_R_w" = -17;
"@MMK_R_y" = -20;
"@MMK_R_z" = -20;
};
"@MMK_L_Z" = {
"@MMK_R_C" = -20;
};
"@MMK_L_a" = {
"@MMK_R_asterisk" = -23;
"@MMK_R_backslash" = -40;
"@MMK_R_registered" = -35;
"@MMK_R_uni02BA" = -50;
"@MMK_R_v" = -10;
"@MMK_R_y" = -15;
};
"@MMK_L_aacute" = {
"@MMK_R_asterisk" = -33;
"@MMK_R_backslash" = -41;
"@MMK_R_c" = -12;
"@MMK_R_registered" = -35;
"@MMK_R_t" = -14;
"@MMK_R_v" = -20;
"@MMK_R_w" = -10;
"@MMK_R_y" = -15;
"@MMK_R_z" = 8;
};
"@MMK_L_ae" = {
"@MMK_R_Y" = -80;
"@MMK_R_asterisk" = -23;
"@MMK_R_backslash" = -51;
"@MMK_R_question" = -20;
"@MMK_R_registered" = -35;
"@MMK_R_t" = -17;
"@MMK_R_uni02BA" = -43;
"@MMK_R_v" = -20;
"@MMK_R_w" = -20;
"@MMK_R_x" = -23;
"@MMK_R_y" = -20;
};
"@MMK_L_ampersand" = {
"@MMK_R_C" = -3;
"@MMK_R_T" = -43;
"@MMK_R_V" = -51;
"@MMK_R_W" = -31;
"@MMK_R_Y" = -61;
"@MMK_R_percent" = -23;
"@MMK_R_uni02BA" = -46;
"@MMK_R_w" = -3;
"@MMK_R_y" = -3;
};
"@MMK_L_asterisk" = {
"@MMK_R_A" = -91;
"@MMK_R_AE" = -113;
"@MMK_R_a" = -14;
"@MMK_R_c" = -23;
"@MMK_R_s" = -29;
};
"@MMK_L_at" = {
"@MMK_R_A" = -45;
"@MMK_R_AE" = -60;
"@MMK_R_T" = -57;
"@MMK_R_V" = -60;
"@MMK_R_W" = -41;
"@MMK_R_Y" = -89;
"@MMK_R_percent" = -40;
"@MMK_R_period" = -30;
"@MMK_R_uni02BA" = -49;
"@MMK_R_w" = -17;
"@MMK_R_y" = -20;
};
"@MMK_L_b" = {
"@MMK_R_T" = -90;
"@MMK_R_V" = -75;
"@MMK_R_asterisk" = -34;
"@MMK_R_backslash" = -79;
"@MMK_R_braceright" = -50;
"@MMK_R_g" = -5;
"@MMK_R_parenright" = -41;
"@MMK_R_question" = -30;
"@MMK_R_registered" = -35;
"@MMK_R_slash" = -11;
"@MMK_R_t" = -20;
"@MMK_R_uni02BA" = -43;
"@MMK_R_v" = -25;
"@MMK_R_w" = -19;
"@MMK_R_x" = -21;
"@MMK_R_y" = -40;
};
"@MMK_L_backslash" = {
"@MMK_R_C" = -17;
"@MMK_R_T" = -7;
"@MMK_R_V" = -60;
"@MMK_R_W" = -57;
"@MMK_R_Y" = -70;
"@MMK_R_c" = -14;
"@MMK_R_hyphen" = -30;
"@MMK_R_uni02BA" = -91;
};
"@MMK_L_braceleft" = {
"@MMK_R_C" = -31;
"@MMK_R_c" = -50;
};
"@MMK_L_braceright" = {
"@MMK_R_A" = -57;
"@MMK_R_AE" = -67;
"@MMK_R_T" = -30;
"@MMK_R_W" = -30;
"@MMK_R_Y" = -50;
"@MMK_R_period" = -50;
};
"@MMK_L_c" = {
"@MMK_R_asterisk" = -23;
"@MMK_R_backslash" = -43;
"@MMK_R_parenright" = -4;
"@MMK_R_question" = -30;
"@MMK_R_registered" = -35;
"@MMK_R_t" = -10;
"@MMK_R_v" = -16;
};
"@MMK_L_colon" = {
"@MMK_R_V" = -30;
"@MMK_R_Y" = -31;
};
"@MMK_L_comma" = {
"@MMK_R_C" = -20;
"@MMK_R_T" = -80;
"@MMK_R_V" = -71;
"@MMK_R_W" = -51;
"@MMK_R_Y" = -74;
"@MMK_R_percent" = -44;
"@MMK_R_t" = -30;
"@MMK_R_w" = -30;
"@MMK_R_y" = -51;
};
"@MMK_L_dcaron" = {
"@MMK_R_b" = 80;
};
"@MMK_L_exclamdown" = {
"@MMK_R_T" = -47;
"@MMK_R_V" = -31;
"@MMK_R_W" = -30;
"@MMK_R_Y" = -31;
};
"@MMK_L_f" = {
"@MMK_R_a" = -20;
"@MMK_R_c" = -20;
"@MMK_R_g" = -40;
"@MMK_R_period" = -30;
"@MMK_R_s" = -19;
};
"@MMK_L_g" = {
"@MMK_R_c" = -8;
"@MMK_R_f" = 15;
"@MMK_R_j" = 20;
"@MMK_R_v" = 3;
};
"@MMK_L_germandbls" = {
"@MMK_R_c" = -12;
"@MMK_R_y" = -46;
};
"@MMK_L_greater" = {
"@MMK_R_period" = -60;
};
"@MMK_L_hyphen" = {
"@MMK_R_A" = -30;
"@MMK_R_T" = -50;
"@MMK_R_V" = -35;
"@MMK_R_W" = -40;
"@MMK_R_X" = -35;
"@MMK_R_Y" = -60;
"@MMK_R_backslash" = -49;
"@MMK_R_slash" = -49;
};
"@MMK_L_iacute" = {
"@MMK_R_uni02BA" = 17;
};
"@MMK_L_ibreve" = {
"@MMK_R_T" = 35;
};
"@MMK_L_k" = {
"@MMK_R_a" = -10;
"@MMK_R_c" = -36;
"@MMK_R_g" = -20;
"@MMK_R_s" = -29;
};
"@MMK_L_lslash" = {
"@MMK_R_t" = 10;
"@MMK_R_y" = 20;
"@MMK_R_z" = 15;
};
"@MMK_L_multiply" = {
"@MMK_R_A" = -21;
"@MMK_R_AE" = -52;
"@MMK_R_T" = -60;
"@MMK_R_V" = -69;
"@MMK_R_W" = -43;
"@MMK_R_Y" = -60;
"@MMK_R_y" = -17;
};
"@MMK_L_parenleft" = {
"@MMK_R_A" = -34;
"@MMK_R_C" = -67;
"@MMK_R_a" = -41;
"@MMK_R_c" = -41;
"@MMK_R_s" = -20;
"@MMK_R_t" = -17;
};
"@MMK_L_period" = {
"@MMK_R_C" = -30;
"@MMK_R_T" = -80;
"@MMK_R_U" = -20;
"@MMK_R_V" = -80;
"@MMK_R_W" = -70;
"@MMK_R_Y" = -83;
"@MMK_R_backslash" = -60;
"@MMK_R_braceleft" = -50;
"@MMK_R_less" = -60;
"@MMK_R_question" = -39;
"@MMK_R_v" = -40;
"@MMK_R_w" = -34;
"@MMK_R_y" = -40;
};
"@MMK_L_plus" = {
"@MMK_R_A" = -37;
"@MMK_R_T" = -59;
"@MMK_R_V" = -57;
"@MMK_R_W" = -57;
"@MMK_R_Y" = -71;
};
"@MMK_L_question" = {
"@MMK_R_A" = -70;
"@MMK_R_AE" = -99;
"@MMK_R_period" = -91;
};
"@MMK_L_questiondown" = {
"@MMK_R_T" = -59;
"@MMK_R_Y" = -59;
"@MMK_R_c" = -20;
"@MMK_R_percent" = -24;
"@MMK_R_z" = 20;
};
"@MMK_L_quotedblright" = {
"@MMK_R_J" = -66;
"@MMK_R_ampersand" = -51;
"@MMK_R_at" = -100;
"@MMK_R_s" = -43;
"@MMK_R_slash" = -119;
};
"@MMK_L_r" = {
"@MMK_R_c" = -19;
"@MMK_R_colon" = 17;
"@MMK_R_comma" = -31;
"@MMK_R_g" = -5;
"@MMK_R_period" = -40;
"@MMK_R_u" = 11;
};
"@MMK_L_s" = {
"@MMK_R_asterisk" = -37;
"@MMK_R_backslash" = -50;
"@MMK_R_parenright" = -3;
"@MMK_R_question" = -29;
"@MMK_R_registered" = -35;
"@MMK_R_t" = -22;
"@MMK_R_v" = -27;
"@MMK_R_w" = -19;
"@MMK_R_y" = -21;
};
"@MMK_L_semicolon" = {
"@MMK_R_T" = -49;
"@MMK_R_Y" = -3;
};
"@MMK_L_slash" = {
"@MMK_R_C" = -30;
"@MMK_R_T" = 20;
"@MMK_R_V" = 30;
"@MMK_R_W" = 3;
"@MMK_R_Y" = 21;
"@MMK_R_a" = -51;
"@MMK_R_c" = -47;
"@MMK_R_dotlessi" = -18;
"@MMK_R_g" = -33;
"@MMK_R_hyphen" = -64;
"@MMK_R_period" = -118;
"@MMK_R_s" = -30;
};
"@MMK_L_space" = {
"@MMK_R_T" = -35;
"@MMK_R_V" = -10;
"@MMK_R_W" = -10;
};
"@MMK_L_t" = {
"@MMK_R_c" = -14;
"@MMK_R_comma" = 52;
};
"@MMK_L_underscore" = {
"@MMK_R_C" = -43;
"@MMK_R_T" = -60;
"@MMK_R_U" = -40;
"@MMK_R_V" = -99;
"@MMK_R_W" = -70;
"@MMK_R_Y" = -70;
};
"@MMK_L_v" = {
"@MMK_R_A" = -50;
"@MMK_R_a" = -25;
"@MMK_R_c" = -25;
"@MMK_R_g" = -21;
"@MMK_R_period" = -40;
"@MMK_R_s" = -26;
"@MMK_R_t" = 3;
};
"@MMK_L_w" = {
"@MMK_R_a" = -18;
"@MMK_R_at" = -40;
"@MMK_R_c" = -19;
"@MMK_R_comma" = -30;
"@MMK_R_g" = -20;
"@MMK_R_period" = -34;
"@MMK_R_questiondown" = -26;
};
"@MMK_L_x" = {
"@MMK_R_a" = -3;
"@MMK_R_c" = -21;
};
"@MMK_L_y" = {
"@MMK_R_T" = -70;
"@MMK_R_a" = -31;
"@MMK_R_ampersand" = -3;
"@MMK_R_at" = -59;
"@MMK_R_c" = -47;
"@MMK_R_comma" = -61;
"@MMK_R_g" = -31;
"@MMK_R_multiply" = -17;
"@MMK_R_period" = -71;
"@MMK_R_questiondown" = -59;
"@MMK_R_s" = -29;
"@MMK_R_slash" = -40;
};
A = {
W = -80;
Wacute = -80;
Wcircumflex = -80;
Wdieresis = -80;
Wgrave = -80;
};
AE = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
AEacute = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Aacute = {
asterisk = -91;
at = -17;
backslash = -60;
braceleft = -57;
f = -17;
multiply = -21;
parenright = -34;
plus = -37;
question = -39;
v = -51;
};
Abreve = {
asterisk = -91;
at = -17;
backslash = -60;
braceleft = -57;
f = -17;
multiply = -21;
parenright = -34;
plus = -37;
question = -39;
v = -51;
};
Acircumflex = {
asterisk = -91;
at = -17;
backslash = -60;
braceleft = -57;
f = -17;
multiply = -21;
parenright = -34;
plus = -37;
question = -39;
v = -51;
};
Adieresis = {
asterisk = -91;
at = -17;
backslash = -60;
braceleft = -57;
f = -17;
multiply = -21;
parenright = -34;
plus = -37;
question = -39;
v = -51;
};
Agrave = {
asterisk = -91;
at = -17;
backslash = -60;
braceleft = -57;
f = -17;
multiply = -21;
parenright = -34;
plus = -37;
question = -39;
v = -51;
};
Amacron = {
asterisk = -91;
at = -17;
backslash = -60;
braceleft = -57;
f = -17;
multiply = -21;
parenright = -34;
plus = -37;
question = -39;
v = -51;
};
Aogonek = {
asterisk = -91;
at = -17;
backslash = -60;
braceleft = -57;
f = -17;
multiply = -21;
parenright = -34;
plus = -37;
question = -39;
v = -51;
};
Aring = {
asterisk = -91;
at = -17;
backslash = -60;
braceleft = -57;
f = -17;
multiply = -21;
parenright = -34;
plus = -37;
question = -39;
v = -51;
};
Atilde = {
asterisk = -91;
at = -17;
backslash = -60;
braceleft = -57;
f = -17;
multiply = -21;
parenright = -34;
plus = -37;
question = -39;
v = -51;
};
B = {
X = -23;
imacron = 20;
};
C = {
imacron = 30;
itilde = 30;
};
Cacute = {
imacron = 30;
itilde = 30;
};
Ccaron = {
imacron = 30;
itilde = 30;
};
Ccedilla = {
imacron = 30;
itilde = 30;
};
Cdotaccent = {
imacron = 30;
itilde = 30;
};
E = {
imacron = 51;
itilde = 33;
};
Eacute = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Ebreve = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Ecaron = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Ecircumflex = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Edieresis = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Edotaccent = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Egrave = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Emacron = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Eogonek = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Euro = {
imacron = 30;
itilde = 30;
};
F = {
J = -57;
ampersand = -20;
at = -40;
comma = -60;
imacron = 70;
multiply = -20;
underscore = -40;
};
G = {
imacron = 20;
};
Gbreve = {
imacron = 20;
};
Gdotaccent = {
imacron = 20;
};
H = {
imacron = 40;
itilde = 4;
};
I = {
imacron = 40;
itilde = 4;
};
Iacute = {
imacron = 40;
itilde = 4;
};
Ibreve = {
imacron = 40;
itilde = 4;
};
Icircumflex = {
imacron = 40;
itilde = 4;
};
Idieresis = {
imacron = 40;
itilde = 4;
};
Idotaccent = {
imacron = 40;
itilde = 4;
};
Igrave = {
imacron = 40;
itilde = 4;
};
Imacron = {
imacron = 40;
itilde = 4;
};
Iogonek = {
imacron = 40;
itilde = 4;
};
Itilde = {
imacron = 40;
itilde = 4;
};
J = {
igrave = 0;
imacron = 61;
};
K = {
icircumflex = 0;
imacron = 60;
};
L = {
V = -75;
};
Lacute = {
V = -75;
};
Lcaron = {
V = -75;
};
Ldot = {
V = -75;
};
Lslash = {
V = -75;
};
M = {
imacron = 40;
itilde = 4;
};
N = {
imacron = 40;
itilde = 4;
};
Nacute = {
imacron = 40;
itilde = 4;
};
Ncaron = {
imacron = 40;
itilde = 4;
};
Ntilde = {
imacron = 40;
itilde = 4;
};
OE = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Oslash = {
igrave = 59;
imacron = 53;
slash = -41;
underscore = -40;
};
P = {
J = -77;
X = -30;
Z = -20;
Zacute = -20;
Zcaron = -20;
Zdotaccent = -20;
ampersand = -39;
at = -47;
comma = -83;
itilde = 40;
parenright = -30;
plus = -17;
slash = -79;
underscore = -77;
};
Q = {
Wacute = -34;
Wcircumflex = -34;
Wdieresis = -34;
Wgrave = -34;
X = -34;
at = -26;
};
R = {
imacron = 20;
itilde = 15;
};
Racute = {
imacron = 20;
itilde = 15;
};
Rcaron = {
imacron = 20;
itilde = 15;
};
S = {
imacron = 40;
itilde = 20;
};
Sacute = {
imacron = 40;
itilde = 20;
};
Scaron = {
imacron = 40;
itilde = 20;
};
Scedilla = {
imacron = 40;
itilde = 20;
};
Thorn = {
X = -70;
parenright = -39;
};
U = {
imacron = 45;
itilde = 20;
};
Uacute = {
imacron = 45;
itilde = 20;
};
Ubreve = {
imacron = 45;
itilde = 20;
};
Ucircumflex = {
imacron = 45;
itilde = 20;
};
Udieresis = {
imacron = 45;
itilde = 20;
};
Ugrave = {
imacron = 45;
itilde = 20;
};
Uhungarumlaut = {
imacron = 45;
itilde = 20;
};
Umacron = {
imacron = 45;
itilde = 20;
};
Uogonek = {
imacron = 45;
itilde = 20;
};
Uring = {
imacron = 45;
itilde = 20;
};
Utilde = {
imacron = 45;
itilde = 20;
};
V = {
imacron = 61;
};
W = {
ibreve = 40;
imacron = 71;
itilde = 40;
};
Wacute = {
ibreve = 40;
imacron = 71;
itilde = 40;
};
Wcircumflex = {
ibreve = 40;
imacron = 71;
itilde = 40;
};
Wdieresis = {
ibreve = 40;
imacron = 71;
itilde = 40;
};
Wgrave = {
ibreve = 40;
imacron = 71;
itilde = 40;
};
X = {
ampersand = -10;
at = -26;
ibreve = 30;
imacron = 50;
itilde = 20;
multiply = -39;
question = -21;
v = -30;
};
Y = {
ibreve = 40;
imacron = 63;
itilde = 20;
};
Yacute = {
ibreve = 40;
imacron = 63;
itilde = 20;
};
Ycircumflex = {
ibreve = 40;
imacron = 63;
itilde = 20;
};
Ydieresis = {
ibreve = 40;
imacron = 63;
itilde = 20;
};
Ygrave = {
ibreve = 40;
imacron = 63;
itilde = 20;
};
Z = {
imacron = 61;
itilde = 31;
};
Zacute = {
imacron = 61;
itilde = 31;
};
Zcaron = {
imacron = 61;
itilde = 31;
};
Zdotaccent = {
imacron = 61;
itilde = 31;
};
ampersand = {
asterisk = -38;
backslash = -43;
question = -40;
quotedblright = -8;
quoteright = -8;
v = -3;
};
asterisk = {
J = -69;
ampersand = -41;
at = -51;
exclam = -6;
imacron = 77;
itilde = 6;
questiondown = -90;
slash = -104;
underscore = -96;
};
at = {
X = -57;
asterisk = -33;
backslash = -50;
comma = -33;
greater = -49;
less = -30;
parenright = -69;
question = -30;
slash = -50;
underscore = -60;
};
b = {
lslash = 0;
};
backslash = {
backslash = -137;
comma = 57;
question = -30;
quotedblbase = 47;
quotedblleft = -77;
quotedblright = -70;
quoteleft = -77;
quoteright = -70;
quotesinglbase = 47;
underscore = 41;
};
bar = {
imacron = 40;
itilde = 4;
};
braceright = {
comma = -31;
};
bracketleft = {
imacron = 8;
};
bracketright = {
imacron = 60;
itilde = 23;
};
brokenbar = {
imacron = 40;
itilde = 4;
};
comma = {
backslash = -53;
v = -49;
};
d = {
imacron = 49;
};
dcaron = {
questiondown = -44;
};
dcroat = {
imacron = 81;
};
dollar = {
imacron = 40;
itilde = 20;
};
e = {
T = -90;
Tcaron = -90;
uni0162 = -90;
uni021A = -90;
};
eth = {
imacron = 30;
};
exclam = {
asterisk = -6;
igrave = 49;
imacron = 60;
};
f = {
at = -37;
ibreve = 30;
igrave = 40;
imacron = 60;
itilde = 33;
};
fl = {
imacron = 49;
};
g = {
lslash = 5;
};
gbreve = {
lslash = 5;
};
gdotaccent = {
lslash = 5;
};
germandbls = {
asterisk = -60;
v = -49;
};
greater = {
at = -67;
parenright = -59;
};
i = {
lslash = 10;
};
iacute = {
asterisk = 52;
b = 60;
backslash = 71;
braceright = 4;
bracketleft = 60;
bracketright = 8;
exclam = 49;
f = 40;
idieresis = 80;
imacron = 66;
itilde = 41;
k = 60;
lacute = 60;
lcaron = 60;
ldot = 60;
lslash = 57;
parenright = 8;
question = 67;
quotedblleft = 47;
quotedblright = 74;
quoteleft = 47;
quoteright = 74;
uni0137 = 60;
uni013C = 60;
};
ibreve = {
backslash = 60;
question = 31;
};
idieresis = {
b = 30;
f = 20;
h = 30;
i = 40;
j = 40;
k = 30;
};
imacron = {
B = 40;
D = 40;
Dcaron = 40;
E = 40;
Eacute = 40;
Ebreve = 40;
Ecaron = 40;
Ecircumflex = 40;
Edieresis = 40;
Edotaccent = 40;
Egrave = 40;
Emacron = 40;
Eogonek = 40;
F = 40;
H = 40;
I = 40;
Iacute = 40;
Ibreve = 40;
Icircumflex = 40;
Idieresis = 40;
Idotaccent = 40;
Igrave = 40;
Imacron = 40;
Itilde = 40;
K = 40;
L = 40;
Lacute = 40;
Lcaron = 40;
Ldot = 40;
M = 40;
N = 40;
Nacute = 40;
Ncaron = 40;
Ntilde = 40;
P = 40;
R = 40;
Racute = 40;
Rcaron = 40;
Thorn = 40;
asterisk = 77;
b = 60;
backslash = 73;
bar = 40;
bracketleft = 60;
bracketright = 8;
brokenbar = 40;
exclam = 60;
f = 4;
germandbls = 60;
k = 60;
l = 60;
lacute = 60;
lcaron = 60;
ldot = 60;
lslash = 60;
question = 63;
quotedblleft = 69;
quotedblright = 57;
quoteleft = 69;
quoteright = 57;
thorn = 60;
uni0136 = 40;
uni0137 = 60;
uni013B = 40;
uni013C = 60;
uni0145 = 40;
uni0156 = 40;
uni02B9 = 100;
uni02BA = 100;
uni1EBC = 40;
z = 41;
zacute = 41;
zcaron = 41;
zdotaccent = 41;
};
itilde = {
asterisk = 4;
b = 6;
bracketleft = 23;
f = 30;
j = 31;
k = 6;
l = 6;
lacute = 6;
lcaron = 6;
ldot = 6;
question = 40;
quotedblleft = 17;
quotedblright = 37;
quoteleft = 17;
quoteright = 37;
uni0137 = 6;
uni013C = 6;
uni02B9 = 61;
uni02BA = 61;
};
j = {
itilde = 31;
};
l = {
imacron = 49;
};
lacute = {
imacron = 49;
};
lcaron = {
questiondown = -44;
};
less = {
at = -40;
parenright = -40;
};
lslash = {
imacron = 60;
};
multiply = {
X = -39;
};
n = {
T = -75;
Tcaron = -75;
uni0162 = -75;
uni021A = -75;
};
o = {
lslash = 0;
};
oacute = {
lslash = 0;
};
obreve = {
lslash = 0;
};
ocircumflex = {
lslash = 0;
};
odieresis = {
lslash = 0;
};
ograve = {
lslash = 0;
};
ohungarumlaut = {
lslash = 0;
};
omacron = {
lslash = 0;
};
otilde = {
lslash = 0;
};
p = {
lslash = 0;
};
parenleft = {
ampersand = -40;
at = -39;
};
plus = {
slash = -47;
};
q = {
backslash = -39;
j = 26;
};
question = {
J = -49;
X = -20;
at = -57;
comma = -70;
ibreve = 31;
igrave = 40;
imacron = 60;
itilde = 41;
parenright = -54;
questiondown = -110;
quotedblbase = -40;
quotesinglbase = -40;
slash = -71;
underscore = -90;
};
questiondown = {
backslash = -31;
question = -39;
quotedblbase = 39;
quotesinglbase = 39;
v = -26;
};
quotedbl = {
ibreve = 37;
imacron = 57;
itilde = 29;
};
quotedblbase = {
backslash = -81;
question = -3;
};
quotedblleft = {
J = -80;
at = -89;
ibreve = 26;
imacron = 69;
itilde = 21;
questiondown = -81;
slash = -100;
};
quotedblright = {
ibreve = 37;
imacron = 57;
itilde = 29;
};
quoteleft = {
J = -80;
at = -89;
ibreve = 26;
imacron = 69;
itilde = 21;
questiondown = -81;
slash = -100;
};
quoteright = {
ibreve = 37;
imacron = 57;
itilde = 29;
};
quotesinglbase = {
backslash = -81;
question = -3;
};
quotesingle = {
ibreve = 37;
imacron = 57;
itilde = 29;
};
slash = {
B = 57;
D = 57;
Dcaron = 57;
E = 57;
Eacute = 57;
Ebreve = 57;
Ecaron = 57;
Ecircumflex = 57;
Edieresis = 57;
Edotaccent = 57;
Egrave = 57;
Emacron = 57;
Eogonek = 57;
F = 57;
H = 57;
I = 57;
Iacute = 57;
Ibreve = 57;
Icircumflex = 60;
Idieresis = 43;
Idotaccent = 57;
Igrave = 57;
Imacron = 63;
Itilde = 57;
J = -40;
K = 57;
L = 57;
Lacute = 57;
Lcaron = 57;
Ldot = 57;
M = 57;
N = 57;
Nacute = 57;
Ncaron = 57;
Ntilde = 57;
Oslash = -30;
P = 57;
R = 57;
Racute = 57;
Rcaron = 57;
Thorn = 57;
ampersand = -50;
asterisk = -6;
at = -96;
bar = 57;
brokenbar = 57;
comma = -60;
ibreve = 40;
icircumflex = 40;
idieresis = 33;
igrave = 70;
imacron = 73;
plus = -57;
questiondown = -61;
quotedblbase = -89;
quotesinglbase = -89;
slash = -120;
underscore = -149;
uni0136 = 57;
uni013B = 57;
uni0145 = 57;
uni0156 = 57;
uni1EBC = 57;
};
space = {
X = -15;
};
thorn = {
lslash = 0;
};
underscore = {
ampersand = -40;
asterisk = -96;
backslash = -166;
j = 8;
question = -49;
underscore = -120;
};
uni0122 = {
imacron = 20;
};
uni0123 = {
lslash = 5;
};
uni0136 = {
icircumflex = 0;
imacron = 60;
};
uni013B = {
V = -75;
};
uni013C = {
imacron = 49;
};
uni0145 = {
imacron = 40;
itilde = 4;
};
uni0156 = {
imacron = 20;
itilde = 15;
};
uni0218 = {
imacron = 40;
itilde = 20;
};
uni0259 = {
lslash = 0;
};
uni02B9 = {
J = -70;
at = -80;
imacron = 100;
itilde = 61;
};
uni02BA = {
J = -70;
at = -80;
imacron = 100;
itilde = 61;
};
uni1EBC = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
uni1EF8 = {
ibreve = 40;
imacron = 63;
itilde = 20;
};
v = {
ampersand = -19;
at = -49;
comma = -50;
f = 20;
questiondown = -47;
};
z = {
imacron = 40;
};
zacute = {
imacron = 40;
};
zcaron = {
imacron = 40;
};
zdotaccent = {
imacron = 40;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2022 The Rethink Sans Project Authors (https://github.com/hans-thiessen/Rethink-Sans)";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "The Rethink Sans project authors (Hans Thiessen). DM Sans designed by Colophon Foundry.";
}
);
},
{
key = designerURL;
value = "https://www.hansthiessen.com/";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://scripts.sil.org/OFL";
}
);
},
{
key = licenseURL;
value = "https://scripts.sil.org/OFL";
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Rethink Communications LLC";
}
);
},
{
key = manufacturerURL;
value = "https://rethinkideas.com/";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 1;
}
