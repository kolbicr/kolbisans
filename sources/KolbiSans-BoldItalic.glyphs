{
.appVersion = "3343";
.formatVersion = 3;
customParameters = (
{
name = panose;
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
4,
5,
6,
7,
9,
29,
31,
32,
33,
35,
36,
37,
38,
42,
45,
47,
60,
62
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
CR,
space,
A,
Aacute,
Abreve,
uni01CD,
Acircumflex,
Adieresis,
Agrave,
Amacron,
Aogonek,
Aring,
Atilde,
AE,
AEacute,
B,
C,
Cacute,
Ccaron,
Ccedilla,
Cdotaccent,
D,
Dcaron,
Dcroat,
Eth,
E,
Eacute,
Ebreve,
Ecaron,
Ecircumflex,
Edieresis,
Edotaccent,
Egrave,
Emacron,
Eogonek,
uni018E,
uni1EBC,
uni018F,
F,
G,
Gbreve,
uni0122,
Gdotaccent,
H,
Hbar,
I,
IJ,
Iacute,
Ibreve,
Icircumflex,
Idieresis,
Idotaccent,
Igrave,
Imacron,
Iogonek,
Itilde,
J,
uni004A0301,
K,
uni0136,
L,
Lacute,
Lcaron,
uni013B,
Ldot,
Lslash,
M,
N,
Nacute,
Ncaron,
uni0145,
Ntilde,
Eng,
O,
Oacute,
Obreve,
Ocircumflex,
Odieresis,
Ograve,
Ohungarumlaut,
Omacron,
Oslash,
Otilde,
OE,
P,
Thorn,
Q,
R,
Racute,
Rcaron,
uni0156,
S,
Sacute,
Scaron,
Scedilla,
uni0218,
uni1E9E,
T,
Tcaron,
uni0162,
uni021A,
U,
Uacute,
Ubreve,
Ucircumflex,
Udieresis,
Ugrave,
Uhungarumlaut,
Umacron,
Uogonek,
Uring,
Utilde,
V,
W,
Wacute,
Wcircumflex,
Wdieresis,
Wgrave,
X,
Y,
Yacute,
Ycircumflex,
Ydieresis,
Ygrave,
uni1EF8,
Z,
Zacute,
Zcaron,
Zdotaccent,
uniA78B,
a,
aacute,
abreve,
uni01CE,
acircumflex,
adieresis,
agrave,
amacron,
aogonek,
aring,
atilde,
ae,
aeacute,
b,
c,
cacute,
ccaron,
ccedilla,
cdotaccent,
d,
dcaron,
dcroat,
eth,
e,
eacute,
ebreve,
ecaron,
ecircumflex,
edieresis,
edotaccent,
egrave,
emacron,
eogonek,
uni1EBD,
uni0259,
f,
g,
gbreve,
uni0123,
gdotaccent,
h,
hbar,
i,
dotlessi,
iacute,
ibreve,
icircumflex,
idieresis,
i.loclTRK,
igrave,
imacron,
iogonek,
itilde,
ij,
j,
uni0237,
uni006A0301,
k,
uni0137,
l,
lacute,
lcaron,
uni013C,
ldot,
lslash,
m,
n,
nacute,
ncaron,
uni0146,
ntilde,
eng,
o,
oacute,
obreve,
ocircumflex,
odieresis,
ograve,
ohungarumlaut,
omacron,
oslash,
otilde,
oe,
p,
thorn,
q,
r,
racute,
rcaron,
uni0157,
s,
sacute,
scaron,
scedilla,
uni0219,
germandbls,
t,
tcaron,
uni0163,
uni021B,
u,
uacute,
ubreve,
ucircumflex,
udieresis,
ugrave,
uhungarumlaut,
umacron,
uogonek,
uring,
utilde,
v,
w,
wacute,
wcircumflex,
wdieresis,
wgrave,
x,
y,
yacute,
ycircumflex,
ydieresis,
ygrave,
uni1EF9,
z,
zacute,
zcaron,
zdotaccent,
uniA78C,
fi,
fl,
ordfeminine,
ordmasculine,
uni042F,
uni0394,
Pi,
uni03A9,
uni03BC,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
uni24EA,
uni2780,
uni2781,
uni2782,
uni2783,
uni2784,
uni2785,
uni2786,
uni2787,
uni2788,
uni278A,
uni278B,
uni278C,
uni278D,
uni278E,
uni278F,
uni2790,
uni2791,
uni2792,
uni24EA.solid,
zero.dnom,
one.dnom,
two.dnom,
three.dnom,
four.dnom,
five.dnom,
six.dnom,
seven.dnom,
eight.dnom,
nine.dnom,
zero.numr,
one.numr,
two.numr,
three.numr,
four.numr,
five.numr,
six.numr,
seven.numr,
eight.numr,
nine.numr,
fraction,
onehalf,
onequarter,
threequarters,
oneeighth,
threeeighths,
fiveeighths,
seveneighths,
uni2080,
uni2081,
uni2082,
uni2083,
uni2084,
uni2085,
uni2086,
uni2087,
uni2088,
uni2089,
uni2070,
uni00B9,
uni00B2,
uni00B3,
uni2074,
uni2075,
uni2076,
uni2077,
uni2078,
uni2079,
uni00A0,
period,
comma,
colon,
semicolon,
ellipsis,
exclam,
exclamdown,
question,
questiondown,
periodcentered,
bullet,
asterisk,
numbersign,
slash,
backslash,
periodcentered.loclCAT,
periodcentered.loclCAT.case,
hyphen,
endash,
emdash,
underscore,
parenleft,
parenright,
braceleft,
braceright,
bracketleft,
bracketright,
quotesinglbase,
quotedblbase,
quotedblleft,
quotedblright,
quoteleft,
quoteright,
guillemotleft,
guillemotright,
guilsinglleft,
guilsinglright,
quotedbl,
quotesingle,
florin,
at,
ampersand,
paragraph,
section,
copyright,
registered,
trademark,
degree,
bar,
brokenbar,
dagger,
uni2113,
daggerdbl,
estimated,
at.case,
registered.case,
uni20BF,
cent,
currency,
dollar,
Euro,
uni20BD,
uni20A8,
sterling,
yen,
cent.001,
uni2215,
plus,
minus,
multiply,
divide,
equal,
notequal,
greater,
less,
greaterequal,
lessequal,
plusminus,
approxequal,
asciitilde,
logicalnot,
asciicircum,
infinity,
integral,
uni2126,
uni2206,
product,
summation,
radical,
uni00B5,
partialdiff,
percent,
perthousand,
plus.case,
arrowup,
arrowright,
arrowdown,
arrowleft,
lozenge,
uni0308,
uni0307,
gravecomb,
acutecomb,
uni030B,
uni030C.alt,
uni0302,
uni030C,
uni0306,
uni030A,
tildecomb,
uni0304,
uni0312,
uni0326,
uni0327,
uni0328,
uni0308.case,
uni0307.case,
gravecomb.case,
acutecomb.case,
uni030B.case,
uni030C.alt.case,
uni0302.case,
uni030C.case,
uni0306.case,
uni030A.case,
tildecomb.case,
uni0304.case,
uni0327.case,
uni0328.case,
uni0308.narrow,
dieresis,
dotaccent,
grave,
acute,
hungarumlaut,
circumflex,
caron,
breve,
ring,
tilde,
macron,
cedilla,
ogonek,
uni02BA,
uni02B9,
uniE000,
uniE001,
uniE002,
uniE003,
uniE004,
uniE005,
REbackwards,
RethinkWordmark,
Rlogobig
);
}
);
date = "2021-03-04 17:58:23 +0000";
familyName = "Kolbi Sans";
featurePrefixes = (
{
code = "lookup SUB_1 {
	sub L periodcentered by Ldot;
	sub l periodcentered by ldot;
} SUB_1;
lookup SUB_20 {
	sub i by dotlessi;
	sub j by uni0237;
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_20;
lookup SUB_21 {
	sub iogonek by dotlessi uni0328;
} SUB_21;
lookup SUB_22 {
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_22;
lookup SUB_23 {
	sub periodcentered by periodcentered.loclCAT;
} SUB_23;
lookup SUB_24 {
	sub J by uni004A0301;
	sub j by uni006A0301;
	sub periodcentered by periodcentered.loclCAT.case;
} SUB_24;
lookup SUB_25 {
	sub zero.numr by zero.dnom;
	sub one.numr by one.dnom;
	sub two.numr by two.dnom;
	sub three.numr by three.dnom;
	sub four.numr by four.dnom;
	sub five.numr by five.dnom;
	sub six.numr by six.dnom;
	sub seven.numr by seven.dnom;
	sub eight.numr by eight.dnom;
	sub nine.numr by nine.dnom;
} SUB_25;
lookup SUB_26 {
	sub A by ordfeminine;
	sub O by ordmasculine;
	sub a by ordfeminine;
	sub o by ordmasculine;
} SUB_26;
";
name = Prefix;
}
);
features = (
{
automatic = 1;
code = "";
tag = aalt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_2 {
	@SUB_2_0_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub [i j]' lookup SUB_20 @SUB_2_0_LA_0;
	@SUB_2_1_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub [i j]' lookup SUB_20 [uni0327 uni0328] @SUB_2_1_LA_0;
	@SUB_2_2_BT_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	@SUB_2_2_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_2_2_BT_0 @SUB_2_2_1' lookup SUB_20;
	@SUB_2_3_BT_0 = [A Aacute Abreve uni01CD Acircumflex Adieresis Agrave Amacron Aogonek Aring Atilde AE AEacute B C Cacute Ccaron Ccedilla Cdotaccent D Dcaron Dcroat Eth E Eacute Ebreve Ecaron Ecircumflex Edieresis Edotaccent Egrave Emacron Eogonek uni018E uni1EBC uni018F F G Gbreve uni0122 Gdotaccent H Hbar I IJ Iacute Ibreve Icircumflex Idieresis Idotaccent Igrave Imacron Iogonek Itilde J uni004A0301 K uni0136 L Lacute Lcaron uni013B Ldot Lslash M N Nacute Ncaron uni0145 Ntilde Eng O Oacute Obreve Ocircumflex Odieresis Ograve Ohungarumlaut Omacron Oslash Otilde OE P Thorn Q R Racute Rcaron uni0156 S Sacute Scaron Scedilla uni0218 uni1E9E T Tcaron uni0162 uni021A U Uacute Ubreve Ucircumflex Udieresis Ugrave Uhungarumlaut Umacron Uogonek Uring Utilde V W Wacute Wcircumflex Wdieresis Wgrave X Y Yacute Ycircumflex Ydieresis Ygrave uni1EF8 Z Zacute Zcaron Zdotaccent uniA78B uni042F uni0394 Pi uni03A9];
	@SUB_2_3_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_2_3_BT_0 @SUB_2_3_1' lookup SUB_20;
	@SUB_2_4_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub iogonek' lookup SUB_21 @SUB_2_4_LA_0;
} SUB_2;
lookup SUB_3 {
	@SUB_3_0_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	@SUB_3_0_LA_1 = [uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni030C.alt.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0327.case uni0328.case];
	sub @SUB_3_0_0' lookup SUB_22 @SUB_3_0_LA_1;
	@SUB_3_1_BT_0 = [uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni030C.alt.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0327.case uni0328.case];
	@SUB_3_1_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_3_1_BT_0 @SUB_3_1_1' lookup SUB_22;
} SUB_3;
lookup SUB_4 {
	sub Ldot by L periodcentered.loclCAT.case;
	sub fi by f i;
	sub fl by f l;
} SUB_4;
script latn;
language dflt;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language AZE;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language CAT;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language CRT;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language KAZ;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language MOL;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language NLD;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language ROM;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language TAT;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language TRK;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
";
tag = ccmp;
},
{
code = "script latn;
language AZE;
lookup SUB_5 {
	sub i by i.loclTRK;
} SUB_5;
language CRT;
lookup SUB_5;
language KAZ;
lookup SUB_5;
language TAT;
lookup SUB_5;
language TRK;
lookup SUB_5;
language MOL;
lookup SUB_6 {
	sub Scedilla by uni0218;
	sub uni0162 by uni021A;
	sub uni0163 by uni021B;
} SUB_6;
language ROM;
lookup SUB_6;
language CAT;
lookup SUB_7 {
	sub L periodcentered' lookup SUB_24 L;
	sub l periodcentered' lookup SUB_23 l;
} SUB_7;
language NLD;
lookup SUB_8 {
	sub Iacute J' lookup SUB_24;
	sub iacute j' lookup SUB_24;
} SUB_8;
";
tag = locl;
},
{
code = "script DFLT;
language dflt;
lookup SUB_9 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_9;
script latn;
language dflt;
lookup SUB_9;
language AZE;
lookup SUB_9;
language CAT;
lookup SUB_9;
language CRT;
lookup SUB_9;
language KAZ;
lookup SUB_9;
language MOL;
lookup SUB_9;
language NLD;
lookup SUB_9;
language ROM;
lookup SUB_9;
language TAT;
lookup SUB_9;
language TRK;
lookup SUB_9;
";
tag = subs;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_10;
script latn;
language dflt;
lookup SUB_10;
language AZE;
lookup SUB_10;
language CAT;
lookup SUB_10;
language CRT;
lookup SUB_10;
language KAZ;
lookup SUB_10;
language MOL;
lookup SUB_10;
language NLD;
lookup SUB_10;
language ROM;
lookup SUB_10;
language TAT;
lookup SUB_10;
language TRK;
lookup SUB_10;
";
tag = sinf;
},
{
code = "script DFLT;
language dflt;
lookup SUB_11 {
	sub zero by uni2070;
	sub one by uni00B9;
	sub two by uni00B2;
	sub three by uni00B3;
	sub four by uni2074;
	sub five by uni2075;
	sub six by uni2076;
	sub seven by uni2077;
	sub eight by uni2078;
	sub nine by uni2079;
} SUB_11;
script latn;
language dflt;
lookup SUB_11;
language AZE;
lookup SUB_11;
language CAT;
lookup SUB_11;
language CRT;
lookup SUB_11;
language KAZ;
lookup SUB_11;
language MOL;
lookup SUB_11;
language NLD;
lookup SUB_11;
language ROM;
lookup SUB_11;
language TAT;
lookup SUB_11;
language TRK;
lookup SUB_11;
";
tag = sups;
},
{
code = "script DFLT;
language dflt;
lookup SUB_12 {
	sub zero by zero.numr;
	sub one by one.numr;
	sub two by two.numr;
	sub three by three.numr;
	sub four by four.numr;
	sub five by five.numr;
	sub six by six.numr;
	sub seven by seven.numr;
	sub eight by eight.numr;
	sub nine by nine.numr;
} SUB_12;
script latn;
language dflt;
lookup SUB_12;
language AZE;
lookup SUB_12;
language CAT;
lookup SUB_12;
language CRT;
lookup SUB_12;
language KAZ;
lookup SUB_12;
language MOL;
lookup SUB_12;
language NLD;
lookup SUB_12;
language ROM;
lookup SUB_12;
language TAT;
lookup SUB_12;
language TRK;
lookup SUB_12;
";
tag = numr;
},
{
code = "script DFLT;
language dflt;
lookup SUB_13 {
	sub zero by zero.dnom;
	sub one by one.dnom;
	sub two by two.dnom;
	sub three by three.dnom;
	sub four by four.dnom;
	sub five by five.dnom;
	sub six by six.dnom;
	sub seven by seven.dnom;
	sub eight by eight.dnom;
	sub nine by nine.dnom;
} SUB_13;
script latn;
language dflt;
lookup SUB_13;
language AZE;
lookup SUB_13;
language CAT;
lookup SUB_13;
language CRT;
lookup SUB_13;
language KAZ;
lookup SUB_13;
language MOL;
lookup SUB_13;
language NLD;
lookup SUB_13;
language ROM;
lookup SUB_13;
language TAT;
lookup SUB_13;
language TRK;
lookup SUB_13;
";
tag = dnom;
},
{
code = "script DFLT;
language dflt;
lookup SUB_14 {
	sub slash by fraction;
} SUB_14;
lookup SUB_15 {
	sub zero by zero.numr;
	sub one by one.numr;
	sub two by two.numr;
	sub three by three.numr;
	sub four by four.numr;
	sub five by five.numr;
	sub six by six.numr;
	sub seven by seven.numr;
	sub eight by eight.numr;
	sub nine by nine.numr;
} SUB_15;
lookup SUB_16 {
	@SUB_16_0_0 = [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
	sub fraction @SUB_16_0_0' lookup SUB_25;
	@SUB_16_1_BT_0 = [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];
	@SUB_16_1_1 = [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
	sub @SUB_16_1_BT_0 @SUB_16_1_1' lookup SUB_25;
} SUB_16;
script latn;
language dflt;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language AZE;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language CAT;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language CRT;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language KAZ;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language MOL;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language NLD;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language ROM;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language TAT;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language TRK;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
";
tag = frac;
},
{
code = "script DFLT;
language dflt;
lookup SUB_17 {
	lookupflag IgnoreMarks;
	sub E less by uni018E;
	sub R E less by REbackwards;
	sub R less E by REbackwards;
	sub R greater by RethinkWordmark;
	sub R less by uni042F;
	sub f i by fi;
	sub f l by fl;
	sub hyphen hyphen hyphen greater by arrowdown;
	sub hyphen hyphen greater by arrowright;
	sub parenleft R parenright by Rlogobig;
	sub parenleft zero parenright by uni24EA;
	sub parenleft one parenright by uni2780;
	sub parenleft two parenright by uni2781;
	sub parenleft three parenright by uni2782;
	sub parenleft four parenright by uni2783;
	sub parenleft five parenright by uni2784;
	sub parenleft six parenright by uni2785;
	sub parenleft seven parenright by uni2786;
	sub parenleft eight parenright by uni2787;
	sub parenleft nine parenright by uni2788;
	sub braceleft zero braceright by uni24EA.solid;
	sub braceleft one braceright by uni278A;
	sub braceleft two braceright by uni278B;
	sub braceleft three braceright by uni278C;
	sub braceleft four braceright by uni278D;
	sub braceleft five braceright by uni278E;
	sub braceleft six braceright by uni278F;
	sub braceleft seven braceright by uni2790;
	sub braceleft eight braceright by uni2791;
	sub braceleft nine braceright by uni2792;
	sub registered plus by registered.case;
	sub less hyphen hyphen hyphen by arrowup;
	sub less hyphen hyphen by arrowleft;
} SUB_17;
script latn;
language dflt;
lookup SUB_17;
language AZE;
lookup SUB_17;
language CAT;
lookup SUB_17;
language CRT;
lookup SUB_17;
language KAZ;
lookup SUB_17;
language MOL;
lookup SUB_17;
language NLD;
lookup SUB_17;
language ROM;
lookup SUB_17;
language TAT;
lookup SUB_17;
language TRK;
lookup SUB_17;
";
tag = liga;
},
{
code = "script DFLT;
language dflt;
lookup SUB_18 {
	@SUB_18_0_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_18_0_BT_0 [A a]' lookup SUB_26;
	@SUB_18_1_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_18_1_BT_0 [O o]' lookup SUB_26;
} SUB_18;
script latn;
language dflt;
lookup SUB_18;
language AZE;
lookup SUB_18;
language CAT;
lookup SUB_18;
language CRT;
lookup SUB_18;
language KAZ;
lookup SUB_18;
language MOL;
lookup SUB_18;
language NLD;
lookup SUB_18;
language ROM;
lookup SUB_18;
language TAT;
lookup SUB_18;
language TRK;
lookup SUB_18;
";
tag = ordn;
},
{
code = "script DFLT;
language dflt;
lookup SUB_19 {
	sub periodcentered.loclCAT by periodcentered.loclCAT.case;
	sub at by at.case;
	sub registered by registered.case;
	sub plus by plus.case;
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_19;
script latn;
language dflt;
lookup SUB_19;
language AZE;
lookup SUB_19;
language CAT;
lookup SUB_19;
language CRT;
lookup SUB_19;
language KAZ;
lookup SUB_19;
language MOL;
lookup SUB_19;
language NLD;
lookup SUB_19;
language ROM;
lookup SUB_19;
language TAT;
lookup SUB_19;
language TRK;
lookup SUB_19;
";
tag = case;
},
{
code = "script DFLT;
language dflt;
lookup POS_2 {
	markClass uni0326 <anchor 18 0> @POS_2_0_MARK_0;
	markClass uni0327 <anchor 51 0> @POS_2_0_MARK_0;
	markClass uni0327.case <anchor 49 0> @POS_2_0_MARK_0;
	markClass uni0308 <anchor 239 496> @POS_2_0_MARK_1;
	markClass uni0307 <anchor 128 496> @POS_2_0_MARK_1;
	markClass gravecomb <anchor 157 496> @POS_2_0_MARK_1;
	markClass acutecomb <anchor 157 496> @POS_2_0_MARK_1;
	markClass uni030B <anchor 192 496> @POS_2_0_MARK_1;
	markClass uni0302 <anchor 190 496> @POS_2_0_MARK_1;
	markClass uni030C <anchor 190 496> @POS_2_0_MARK_1;
	markClass uni0306 <anchor 200 496> @POS_2_0_MARK_1;
	markClass uni030A <anchor 160 496> @POS_2_0_MARK_1;
	markClass tildecomb <anchor 220 496> @POS_2_0_MARK_1;
	markClass uni0304 <anchor 239 496> @POS_2_0_MARK_1;
	markClass uni0312 <anchor 108 496> @POS_2_0_MARK_1;
	markClass uni0308.case <anchor 275 700> @POS_2_0_MARK_1;
	markClass uni0307.case <anchor 164 700> @POS_2_0_MARK_1;
	markClass gravecomb.case <anchor 193 700> @POS_2_0_MARK_1;
	markClass acutecomb.case <anchor 193 700> @POS_2_0_MARK_1;
	markClass uni030B.case <anchor 258 700> @POS_2_0_MARK_1;
	markClass uni0302.case <anchor 226 700> @POS_2_0_MARK_1;
	markClass uni030C.case <anchor 226 700> @POS_2_0_MARK_1;
	markClass uni0306.case <anchor 237 700> @POS_2_0_MARK_1;
	markClass uni030A.case <anchor 195 700> @POS_2_0_MARK_1;
	markClass tildecomb.case <anchor 256 700> @POS_2_0_MARK_1;
	markClass uni0304.case <anchor 266 700> @POS_2_0_MARK_1;
	markClass uni0308.narrow <anchor 260 496> @POS_2_0_MARK_1;
	pos base cent <anchor 314 0> mark @POS_2_0_MARK_0 <anchor 436 691> mark @POS_2_0_MARK_1;
	pos base uni20A8 <anchor 793 0> mark @POS_2_0_MARK_0 <anchor 881 496> mark @POS_2_0_MARK_1;
} POS_2;
lookup POS_3 {
	markClass uni0326 <anchor 18 0> @POS_3_0_MARK_0;
	markClass uni0327 <anchor 51 0> @POS_3_0_MARK_0;
	markClass uni0327.case <anchor 49 0> @POS_3_0_MARK_0;
	markClass uni0308 <anchor 239 496> @POS_3_0_MARK_1;
	markClass uni0307 <anchor 128 496> @POS_3_0_MARK_1;
	markClass gravecomb <anchor 157 496> @POS_3_0_MARK_1;
	markClass acutecomb <anchor 157 496> @POS_3_0_MARK_1;
	markClass uni030B <anchor 192 496> @POS_3_0_MARK_1;
	markClass uni0302 <anchor 190 496> @POS_3_0_MARK_1;
	markClass uni030C <anchor 190 496> @POS_3_0_MARK_1;
	markClass uni0306 <anchor 200 496> @POS_3_0_MARK_1;
	markClass uni030A <anchor 160 496> @POS_3_0_MARK_1;
	markClass tildecomb <anchor 220 496> @POS_3_0_MARK_1;
	markClass uni0304 <anchor 239 496> @POS_3_0_MARK_1;
	markClass uni0312 <anchor 108 496> @POS_3_0_MARK_1;
	markClass uni0308.case <anchor 275 700> @POS_3_0_MARK_1;
	markClass uni0307.case <anchor 164 700> @POS_3_0_MARK_1;
	markClass gravecomb.case <anchor 193 700> @POS_3_0_MARK_1;
	markClass acutecomb.case <anchor 193 700> @POS_3_0_MARK_1;
	markClass uni030B.case <anchor 258 700> @POS_3_0_MARK_1;
	markClass uni0302.case <anchor 226 700> @POS_3_0_MARK_1;
	markClass uni030C.case <anchor 226 700> @POS_3_0_MARK_1;
	markClass uni0306.case <anchor 237 700> @POS_3_0_MARK_1;
	markClass uni030A.case <anchor 195 700> @POS_3_0_MARK_1;
	markClass tildecomb.case <anchor 256 700> @POS_3_0_MARK_1;
	markClass uni0304.case <anchor 266 700> @POS_3_0_MARK_1;
	markClass uni0308.narrow <anchor 260 496> @POS_3_0_MARK_1;
	pos base A <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 421 700> mark @POS_3_0_MARK_1;
	pos base Aacute <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 466 952> mark @POS_3_0_MARK_1;
	pos base Abreve <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 459 917> mark @POS_3_0_MARK_1;
	pos base uni01CD <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 459 918> mark @POS_3_0_MARK_1;
	pos base Acircumflex <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 459 919> mark @POS_3_0_MARK_1;
	pos base Adieresis <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 463 934> mark @POS_3_0_MARK_1;
	pos base Agrave <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 466 952> mark @POS_3_0_MARK_1;
	pos base Amacron <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 452 874> mark @POS_3_0_MARK_1;
	pos base Aogonek <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 421 700> mark @POS_3_0_MARK_1;
	pos base Aring <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 470 975> mark @POS_3_0_MARK_1;
	pos base Atilde <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 452 877> mark @POS_3_0_MARK_1;
	pos base AE <anchor 419 0> mark @POS_3_0_MARK_0 <anchor 683 700> mark @POS_3_0_MARK_1;
	pos base AEacute <anchor 419 0> mark @POS_3_0_MARK_0 <anchor 728 952> mark @POS_3_0_MARK_1;
	pos base C <anchor 316 0> mark @POS_3_0_MARK_0 <anchor 440 700> mark @POS_3_0_MARK_1;
	pos base Cacute <anchor 316 0> mark @POS_3_0_MARK_0 <anchor 485 952> mark @POS_3_0_MARK_1;
	pos base Ccaron <anchor 316 0> mark @POS_3_0_MARK_0 <anchor 478 918> mark @POS_3_0_MARK_1;
	pos base Ccedilla <anchor 269 -263> mark @POS_3_0_MARK_0 <anchor 440 700> mark @POS_3_0_MARK_1;
	pos base Cdotaccent <anchor 316 0> mark @POS_3_0_MARK_0 <anchor 482 934> mark @POS_3_0_MARK_1;
	pos base D <anchor 304 0> mark @POS_3_0_MARK_0 <anchor 428 700> mark @POS_3_0_MARK_1;
	pos base Dcaron <anchor 304 0> mark @POS_3_0_MARK_0 <anchor 466 918> mark @POS_3_0_MARK_1;
	pos base E <anchor 229 0> mark @POS_3_0_MARK_0 <anchor 353 700> mark @POS_3_0_MARK_1;
	pos base Eacute <anchor 229 0> mark @POS_3_0_MARK_0 <anchor 398 952> mark @POS_3_0_MARK_1;
	pos base Ebreve <anchor 229 0> mark @POS_3_0_MARK_0 <anchor 391 917> mark @POS_3_0_MARK_1;
	pos base Ecaron <anchor 229 0> mark @POS_3_0_MARK_0 <anchor 391 918> mark @POS_3_0_MARK_1;
	pos base Ecircumflex <anchor 229 0> mark @POS_3_0_MARK_0 <anchor 391 919> mark @POS_3_0_MARK_1;
	pos base Edieresis <anchor 229 0> mark @POS_3_0_MARK_0 <anchor 395 934> mark @POS_3_0_MARK_1;
	pos base Edotaccent <anchor 229 0> mark @POS_3_0_MARK_0 <anchor 395 934> mark @POS_3_0_MARK_1;
	pos base Egrave <anchor 229 0> mark @POS_3_0_MARK_0 <anchor 398 952> mark @POS_3_0_MARK_1;
	pos base Emacron <anchor 229 0> mark @POS_3_0_MARK_0 <anchor 384 874> mark @POS_3_0_MARK_1;
	pos base Eogonek <anchor 229 0> mark @POS_3_0_MARK_0 <anchor 353 700> mark @POS_3_0_MARK_1;
	pos base uni1EBC <anchor 229 0> mark @POS_3_0_MARK_0 <anchor 384 877> mark @POS_3_0_MARK_1;
	pos base G <anchor 335 0> mark @POS_3_0_MARK_0 <anchor 459 700> mark @POS_3_0_MARK_1;
	pos base Gbreve <anchor 335 0> mark @POS_3_0_MARK_0 <anchor 497 917> mark @POS_3_0_MARK_1;
	pos base uni0122 <anchor 287 -274> mark @POS_3_0_MARK_0 <anchor 459 700> mark @POS_3_0_MARK_1;
	pos base Gdotaccent <anchor 335 0> mark @POS_3_0_MARK_0 <anchor 501 934> mark @POS_3_0_MARK_1;
	pos base I <anchor 78 0> mark @POS_3_0_MARK_0 <anchor 202 700> mark @POS_3_0_MARK_1;
	pos base IJ <anchor 451 0> mark @POS_3_0_MARK_0 <anchor 701 700> mark @POS_3_0_MARK_1;
	pos base Iacute <anchor 78 0> mark @POS_3_0_MARK_0 <anchor 247 952> mark @POS_3_0_MARK_1;
	pos base Ibreve <anchor 78 0> mark @POS_3_0_MARK_0 <anchor 240 917> mark @POS_3_0_MARK_1;
	pos base Icircumflex <anchor 78 0> mark @POS_3_0_MARK_0 <anchor 240 919> mark @POS_3_0_MARK_1;
	pos base Idieresis <anchor 78 0> mark @POS_3_0_MARK_0 <anchor 244 934> mark @POS_3_0_MARK_1;
	pos base Idotaccent <anchor 78 0> mark @POS_3_0_MARK_0 <anchor 244 934> mark @POS_3_0_MARK_1;
	pos base Igrave <anchor 78 0> mark @POS_3_0_MARK_0 <anchor 247 952> mark @POS_3_0_MARK_1;
	pos base Imacron <anchor 78 0> mark @POS_3_0_MARK_0 <anchor 233 874> mark @POS_3_0_MARK_1;
	pos base Iogonek <anchor 78 0> mark @POS_3_0_MARK_0 <anchor 202 700> mark @POS_3_0_MARK_1;
	pos base Itilde <anchor 78 0> mark @POS_3_0_MARK_0 <anchor 233 877> mark @POS_3_0_MARK_1;
	pos base J <anchor 207 0> mark @POS_3_0_MARK_0 <anchor 457 700> mark @POS_3_0_MARK_1;
	pos base uni004A0301 <anchor 207 0> mark @POS_3_0_MARK_0 <anchor 502 952> mark @POS_3_0_MARK_1;
	pos base K <anchor 270 0> mark @POS_3_0_MARK_0 <anchor 394 700> mark @POS_3_0_MARK_1;
	pos base uni0136 <anchor 222 -274> mark @POS_3_0_MARK_0 <anchor 394 700> mark @POS_3_0_MARK_1;
	pos base L <anchor 218 0> mark @POS_3_0_MARK_0 <anchor 248 700> mark @POS_3_0_MARK_1;
	pos base Lacute <anchor 218 0> mark @POS_3_0_MARK_0 <anchor 293 952> mark @POS_3_0_MARK_1;
	pos base Lcaron <anchor 218 0> mark @POS_3_0_MARK_0 <anchor 248 700> mark @POS_3_0_MARK_1;
	pos base uni013B <anchor 170 -274> mark @POS_3_0_MARK_0 <anchor 248 700> mark @POS_3_0_MARK_1;
	pos base N <anchor 307 0> mark @POS_3_0_MARK_0 <anchor 431 700> mark @POS_3_0_MARK_1;
	pos base Nacute <anchor 307 0> mark @POS_3_0_MARK_0 <anchor 476 952> mark @POS_3_0_MARK_1;
	pos base Ncaron <anchor 307 0> mark @POS_3_0_MARK_0 <anchor 469 918> mark @POS_3_0_MARK_1;
	pos base uni0145 <anchor 259 -274> mark @POS_3_0_MARK_0 <anchor 431 700> mark @POS_3_0_MARK_1;
	pos base Ntilde <anchor 307 0> mark @POS_3_0_MARK_0 <anchor 462 877> mark @POS_3_0_MARK_1;
	pos base Eng <anchor 307 0> mark @POS_3_0_MARK_0 <anchor 431 700> mark @POS_3_0_MARK_1;
	pos base O <anchor 348 0> mark @POS_3_0_MARK_0 <anchor 472 700> mark @POS_3_0_MARK_1;
	pos base Oacute <anchor 348 0> mark @POS_3_0_MARK_0 <anchor 517 952> mark @POS_3_0_MARK_1;
	pos base Obreve <anchor 348 0> mark @POS_3_0_MARK_0 <anchor 510 917> mark @POS_3_0_MARK_1;
	pos base Ocircumflex <anchor 348 0> mark @POS_3_0_MARK_0 <anchor 510 919> mark @POS_3_0_MARK_1;
	pos base Odieresis <anchor 348 0> mark @POS_3_0_MARK_0 <anchor 514 934> mark @POS_3_0_MARK_1;
	pos base Ograve <anchor 348 0> mark @POS_3_0_MARK_0 <anchor 517 952> mark @POS_3_0_MARK_1;
	pos base Ohungarumlaut <anchor 348 0> mark @POS_3_0_MARK_0 <anchor 512 927> mark @POS_3_0_MARK_1;
	pos base Omacron <anchor 348 0> mark @POS_3_0_MARK_0 <anchor 503 874> mark @POS_3_0_MARK_1;
	pos base Otilde <anchor 348 0> mark @POS_3_0_MARK_0 <anchor 503 877> mark @POS_3_0_MARK_1;
	pos base OE <anchor 507 0> mark @POS_3_0_MARK_0 <anchor 631 700> mark @POS_3_0_MARK_1;
	pos base R <anchor 255 0> mark @POS_3_0_MARK_0 <anchor 379 700> mark @POS_3_0_MARK_1;
	pos base Racute <anchor 255 0> mark @POS_3_0_MARK_0 <anchor 424 952> mark @POS_3_0_MARK_1;
	pos base Rcaron <anchor 255 0> mark @POS_3_0_MARK_0 <anchor 417 918> mark @POS_3_0_MARK_1;
	pos base uni0156 <anchor 207 -274> mark @POS_3_0_MARK_0 <anchor 379 700> mark @POS_3_0_MARK_1;
	pos base S <anchor 248 0> mark @POS_3_0_MARK_0 <anchor 372 700> mark @POS_3_0_MARK_1;
	pos base Sacute <anchor 248 0> mark @POS_3_0_MARK_0 <anchor 417 952> mark @POS_3_0_MARK_1;
	pos base Scaron <anchor 248 0> mark @POS_3_0_MARK_0 <anchor 410 918> mark @POS_3_0_MARK_1;
	pos base Scedilla <anchor 201 -263> mark @POS_3_0_MARK_0 <anchor 372 700> mark @POS_3_0_MARK_1;
	pos base uni0218 <anchor 200 -274> mark @POS_3_0_MARK_0 <anchor 372 700> mark @POS_3_0_MARK_1;
	pos base T <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 365 700> mark @POS_3_0_MARK_1;
	pos base Tcaron <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 403 918> mark @POS_3_0_MARK_1;
	pos base uni0162 <anchor 194 -263> mark @POS_3_0_MARK_0 <anchor 365 700> mark @POS_3_0_MARK_1;
	pos base uni021A <anchor 193 -274> mark @POS_3_0_MARK_0 <anchor 365 700> mark @POS_3_0_MARK_1;
	pos base U <anchor 289 0> mark @POS_3_0_MARK_0 <anchor 413 700> mark @POS_3_0_MARK_1;
	pos base Uacute <anchor 289 0> mark @POS_3_0_MARK_0 <anchor 458 952> mark @POS_3_0_MARK_1;
	pos base Ubreve <anchor 289 0> mark @POS_3_0_MARK_0 <anchor 451 917> mark @POS_3_0_MARK_1;
	pos base Ucircumflex <anchor 289 0> mark @POS_3_0_MARK_0 <anchor 451 919> mark @POS_3_0_MARK_1;
	pos base Udieresis <anchor 289 0> mark @POS_3_0_MARK_0 <anchor 455 934> mark @POS_3_0_MARK_1;
	pos base Ugrave <anchor 289 0> mark @POS_3_0_MARK_0 <anchor 458 952> mark @POS_3_0_MARK_1;
	pos base Uhungarumlaut <anchor 289 0> mark @POS_3_0_MARK_0 <anchor 453 927> mark @POS_3_0_MARK_1;
	pos base Umacron <anchor 289 0> mark @POS_3_0_MARK_0 <anchor 444 874> mark @POS_3_0_MARK_1;
	pos base Uogonek <anchor 289 0> mark @POS_3_0_MARK_0 <anchor 413 700> mark @POS_3_0_MARK_1;
	pos base Uring <anchor 289 0> mark @POS_3_0_MARK_0 <anchor 462 975> mark @POS_3_0_MARK_1;
	pos base Utilde <anchor 289 0> mark @POS_3_0_MARK_0 <anchor 444 877> mark @POS_3_0_MARK_1;
	pos base W <anchor 456 0> mark @POS_3_0_MARK_0 <anchor 576 700> mark @POS_3_0_MARK_1;
	pos base Wacute <anchor 456 0> mark @POS_3_0_MARK_0 <anchor 621 952> mark @POS_3_0_MARK_1;
	pos base Wcircumflex <anchor 456 0> mark @POS_3_0_MARK_0 <anchor 614 919> mark @POS_3_0_MARK_1;
	pos base Wdieresis <anchor 456 0> mark @POS_3_0_MARK_0 <anchor 618 934> mark @POS_3_0_MARK_1;
	pos base Wgrave <anchor 456 0> mark @POS_3_0_MARK_0 <anchor 621 952> mark @POS_3_0_MARK_1;
	pos base Y <anchor 256 0> mark @POS_3_0_MARK_0 <anchor 380 700> mark @POS_3_0_MARK_1;
	pos base Yacute <anchor 256 0> mark @POS_3_0_MARK_0 <anchor 425 952> mark @POS_3_0_MARK_1;
	pos base Ycircumflex <anchor 256 0> mark @POS_3_0_MARK_0 <anchor 418 919> mark @POS_3_0_MARK_1;
	pos base Ydieresis <anchor 256 0> mark @POS_3_0_MARK_0 <anchor 422 934> mark @POS_3_0_MARK_1;
	pos base Ygrave <anchor 256 0> mark @POS_3_0_MARK_0 <anchor 425 952> mark @POS_3_0_MARK_1;
	pos base uni1EF8 <anchor 256 0> mark @POS_3_0_MARK_0 <anchor 411 877> mark @POS_3_0_MARK_1;
	pos base Z <anchor 229 0> mark @POS_3_0_MARK_0 <anchor 353 700> mark @POS_3_0_MARK_1;
	pos base Zacute <anchor 229 0> mark @POS_3_0_MARK_0 <anchor 398 952> mark @POS_3_0_MARK_1;
	pos base Zcaron <anchor 229 0> mark @POS_3_0_MARK_0 <anchor 391 918> mark @POS_3_0_MARK_1;
	pos base Zdotaccent <anchor 229 0> mark @POS_3_0_MARK_0 <anchor 395 934> mark @POS_3_0_MARK_1;
	pos base a <anchor 230 0> mark @POS_3_0_MARK_0 <anchor 318 496> mark @POS_3_0_MARK_1;
	pos base aacute <anchor 230 0> mark @POS_3_0_MARK_0 <anchor 363 751> mark @POS_3_0_MARK_1;
	pos base abreve <anchor 230 0> mark @POS_3_0_MARK_0 <anchor 356 712> mark @POS_3_0_MARK_1;
	pos base uni01CE <anchor 230 0> mark @POS_3_0_MARK_0 <anchor 358 726> mark @POS_3_0_MARK_1;
	pos base acircumflex <anchor 230 0> mark @POS_3_0_MARK_0 <anchor 358 726> mark @POS_3_0_MARK_1;
	pos base adieresis <anchor 230 0> mark @POS_3_0_MARK_0 <anchor 359 726> mark @POS_3_0_MARK_1;
	pos base agrave <anchor 230 0> mark @POS_3_0_MARK_0 <anchor 363 751> mark @POS_3_0_MARK_1;
	pos base amacron <anchor 230 0> mark @POS_3_0_MARK_0 <anchor 344 690> mark @POS_3_0_MARK_1;
	pos base aogonek <anchor 230 0> mark @POS_3_0_MARK_0 <anchor 318 496> mark @POS_3_0_MARK_1;
	pos base aring <anchor 230 0> mark @POS_3_0_MARK_0 <anchor 366 769> mark @POS_3_0_MARK_1;
	pos base atilde <anchor 230 0> mark @POS_3_0_MARK_0 <anchor 355 704> mark @POS_3_0_MARK_1;
	pos base ae <anchor 410 0> mark @POS_3_0_MARK_0 <anchor 498 496> mark @POS_3_0_MARK_1;
	pos base aeacute <anchor 410 0> mark @POS_3_0_MARK_0 <anchor 543 751> mark @POS_3_0_MARK_1;
	pos base c <anchor 235 0> mark @POS_3_0_MARK_0 <anchor 323 496> mark @POS_3_0_MARK_1;
	pos base cacute <anchor 235 0> mark @POS_3_0_MARK_0 <anchor 368 751> mark @POS_3_0_MARK_1;
	pos base ccaron <anchor 235 0> mark @POS_3_0_MARK_0 <anchor 363 726> mark @POS_3_0_MARK_1;
	pos base ccedilla <anchor 188 -263> mark @POS_3_0_MARK_0 <anchor 323 496> mark @POS_3_0_MARK_1;
	pos base cdotaccent <anchor 235 0> mark @POS_3_0_MARK_0 <anchor 364 726> mark @POS_3_0_MARK_1;
	pos base d <anchor 258 0> mark @POS_3_0_MARK_0 <anchor 433 992> mark @POS_3_0_MARK_1;
	pos base dcaron <anchor 258 0> mark @POS_3_0_MARK_0 <anchor 433 992> mark @POS_3_0_MARK_1;
	pos base e <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 322 496> mark @POS_3_0_MARK_1;
	pos base eacute <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 367 751> mark @POS_3_0_MARK_1;
	pos base ebreve <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 360 712> mark @POS_3_0_MARK_1;
	pos base ecaron <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 362 726> mark @POS_3_0_MARK_1;
	pos base ecircumflex <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 362 726> mark @POS_3_0_MARK_1;
	pos base edieresis <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 363 726> mark @POS_3_0_MARK_1;
	pos base edotaccent <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 363 726> mark @POS_3_0_MARK_1;
	pos base egrave <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 367 751> mark @POS_3_0_MARK_1;
	pos base emacron <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 348 690> mark @POS_3_0_MARK_1;
	pos base eogonek <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 322 496> mark @POS_3_0_MARK_1;
	pos base uni1EBD <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 359 704> mark @POS_3_0_MARK_1;
	pos base g <anchor 150 -310> mark @POS_3_0_MARK_0 <anchor 284 496> mark @POS_3_0_MARK_1;
	pos base gbreve <anchor 150 -310> mark @POS_3_0_MARK_0 <anchor 322 712> mark @POS_3_0_MARK_1;
	pos base uni0123 <anchor 150 -310> mark @POS_3_0_MARK_0 <anchor 342 824> mark @POS_3_0_MARK_1;
	pos base gdotaccent <anchor 150 -310> mark @POS_3_0_MARK_0 <anchor 325 726> mark @POS_3_0_MARK_1;
	pos base i <anchor 71 0> mark @POS_3_0_MARK_0;
	pos base dotlessi <anchor 66 0> mark @POS_3_0_MARK_0 <anchor 152 496> mark @POS_3_0_MARK_1;
	pos base iacute <anchor 66 0> mark @POS_3_0_MARK_0 <anchor 197 751> mark @POS_3_0_MARK_1;
	pos base ibreve <anchor 66 0> mark @POS_3_0_MARK_0 <anchor 190 712> mark @POS_3_0_MARK_1;
	pos base icircumflex <anchor 66 0> mark @POS_3_0_MARK_0 <anchor 192 726> mark @POS_3_0_MARK_1;
	pos base idieresis <anchor 66 0> mark @POS_3_0_MARK_0 <anchor 193 726> mark @POS_3_0_MARK_1;
	pos base i.loclTRK <anchor 66 0> mark @POS_3_0_MARK_0 <anchor 193 726> mark @POS_3_0_MARK_1;
	pos base igrave <anchor 66 0> mark @POS_3_0_MARK_0 <anchor 197 751> mark @POS_3_0_MARK_1;
	pos base imacron <anchor 66 0> mark @POS_3_0_MARK_0 <anchor 178 690> mark @POS_3_0_MARK_1;
	pos base iogonek <anchor 66 0> mark @POS_3_0_MARK_0 <anchor 193 726> mark @POS_3_0_MARK_1;
	pos base itilde <anchor 66 0> mark @POS_3_0_MARK_0 <anchor 189 704> mark @POS_3_0_MARK_1;
	pos base ij <anchor 71 0> mark @POS_3_0_MARK_0;
	pos base uni0237 <anchor 16 -310> mark @POS_3_0_MARK_0 <anchor 158 496> mark @POS_3_0_MARK_1;
	pos base uni006A0301 <anchor 16 -310> mark @POS_3_0_MARK_0 <anchor 203 751> mark @POS_3_0_MARK_1;
	pos base k <anchor 209 0> mark @POS_3_0_MARK_0 <anchor 384 992> mark @POS_3_0_MARK_1;
	pos base uni0137 <anchor 161 -274> mark @POS_3_0_MARK_0 <anchor 384 992> mark @POS_3_0_MARK_1;
	pos base l <anchor 66 0> mark @POS_3_0_MARK_0 <anchor 190 700> mark @POS_3_0_MARK_1;
	pos base lacute <anchor 66 0> mark @POS_3_0_MARK_0 <anchor 235 952> mark @POS_3_0_MARK_1;
	pos base lcaron <anchor 66 0> mark @POS_3_0_MARK_0 <anchor 190 700> mark @POS_3_0_MARK_1;
	pos base uni013C <anchor 18 -274> mark @POS_3_0_MARK_0 <anchor 190 700> mark @POS_3_0_MARK_1;
	pos base n <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 329 496> mark @POS_3_0_MARK_1;
	pos base nacute <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 374 751> mark @POS_3_0_MARK_1;
	pos base ncaron <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 369 726> mark @POS_3_0_MARK_1;
	pos base uni0146 <anchor 193 -274> mark @POS_3_0_MARK_0 <anchor 329 496> mark @POS_3_0_MARK_1;
	pos base ntilde <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 366 704> mark @POS_3_0_MARK_1;
	pos base eng <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 329 496> mark @POS_3_0_MARK_1;
	pos base o <anchor 244 0> mark @POS_3_0_MARK_0 <anchor 332 496> mark @POS_3_0_MARK_1;
	pos base oacute <anchor 244 0> mark @POS_3_0_MARK_0 <anchor 377 751> mark @POS_3_0_MARK_1;
	pos base obreve <anchor 244 0> mark @POS_3_0_MARK_0 <anchor 370 712> mark @POS_3_0_MARK_1;
	pos base ocircumflex <anchor 244 0> mark @POS_3_0_MARK_0 <anchor 372 726> mark @POS_3_0_MARK_1;
	pos base odieresis <anchor 244 0> mark @POS_3_0_MARK_0 <anchor 373 726> mark @POS_3_0_MARK_1;
	pos base ograve <anchor 244 0> mark @POS_3_0_MARK_0 <anchor 377 751> mark @POS_3_0_MARK_1;
	pos base ohungarumlaut <anchor 244 0> mark @POS_3_0_MARK_0 <anchor 372 723> mark @POS_3_0_MARK_1;
	pos base omacron <anchor 244 0> mark @POS_3_0_MARK_0 <anchor 358 690> mark @POS_3_0_MARK_1;
	pos base otilde <anchor 244 0> mark @POS_3_0_MARK_0 <anchor 369 704> mark @POS_3_0_MARK_1;
	pos base oe <anchor 436 0> mark @POS_3_0_MARK_0 <anchor 524 496> mark @POS_3_0_MARK_1;
	pos base r <anchor 74 0> mark @POS_3_0_MARK_0 <anchor 226 496> mark @POS_3_0_MARK_1;
	pos base racute <anchor 74 0> mark @POS_3_0_MARK_0 <anchor 271 751> mark @POS_3_0_MARK_1;
	pos base rcaron <anchor 74 0> mark @POS_3_0_MARK_0 <anchor 266 726> mark @POS_3_0_MARK_1;
	pos base uni0157 <anchor 26 -274> mark @POS_3_0_MARK_0 <anchor 226 496> mark @POS_3_0_MARK_1;
	pos base s <anchor 205 0> mark @POS_3_0_MARK_0 <anchor 293 496> mark @POS_3_0_MARK_1;
	pos base sacute <anchor 205 0> mark @POS_3_0_MARK_0 <anchor 338 751> mark @POS_3_0_MARK_1;
	pos base scaron <anchor 205 0> mark @POS_3_0_MARK_0 <anchor 333 726> mark @POS_3_0_MARK_1;
	pos base scedilla <anchor 158 -263> mark @POS_3_0_MARK_0 <anchor 293 496> mark @POS_3_0_MARK_1;
	pos base uni0219 <anchor 157 -274> mark @POS_3_0_MARK_0 <anchor 293 496> mark @POS_3_0_MARK_1;
	pos base t <anchor 179 0> mark @POS_3_0_MARK_0 <anchor 230 496> mark @POS_3_0_MARK_1;
	pos base tcaron <anchor 179 0> mark @POS_3_0_MARK_0 <anchor 230 496> mark @POS_3_0_MARK_1;
	pos base uni0163 <anchor 132 -263> mark @POS_3_0_MARK_0 <anchor 230 496> mark @POS_3_0_MARK_1;
	pos base uni021B <anchor 131 -274> mark @POS_3_0_MARK_0 <anchor 230 496> mark @POS_3_0_MARK_1;
	pos base u <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 329 496> mark @POS_3_0_MARK_1;
	pos base uacute <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 374 751> mark @POS_3_0_MARK_1;
	pos base ubreve <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 367 712> mark @POS_3_0_MARK_1;
	pos base ucircumflex <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 369 726> mark @POS_3_0_MARK_1;
	pos base udieresis <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 370 726> mark @POS_3_0_MARK_1;
	pos base ugrave <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 374 751> mark @POS_3_0_MARK_1;
	pos base uhungarumlaut <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 369 723> mark @POS_3_0_MARK_1;
	pos base umacron <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 355 690> mark @POS_3_0_MARK_1;
	pos base uogonek <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 329 496> mark @POS_3_0_MARK_1;
	pos base uring <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 377 769> mark @POS_3_0_MARK_1;
	pos base utilde <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 366 704> mark @POS_3_0_MARK_1;
	pos base w <anchor 338 0> mark @POS_3_0_MARK_0 <anchor 426 496> mark @POS_3_0_MARK_1;
	pos base wacute <anchor 338 0> mark @POS_3_0_MARK_0 <anchor 471 751> mark @POS_3_0_MARK_1;
	pos base wcircumflex <anchor 338 0> mark @POS_3_0_MARK_0 <anchor 466 726> mark @POS_3_0_MARK_1;
	pos base wdieresis <anchor 338 0> mark @POS_3_0_MARK_0 <anchor 467 726> mark @POS_3_0_MARK_1;
	pos base wgrave <anchor 338 0> mark @POS_3_0_MARK_0 <anchor 471 751> mark @POS_3_0_MARK_1;
	pos base y <anchor 232 0> mark @POS_3_0_MARK_0 <anchor 320 496> mark @POS_3_0_MARK_1;
	pos base yacute <anchor 232 0> mark @POS_3_0_MARK_0 <anchor 365 751> mark @POS_3_0_MARK_1;
	pos base ycircumflex <anchor 232 0> mark @POS_3_0_MARK_0 <anchor 360 726> mark @POS_3_0_MARK_1;
	pos base ydieresis <anchor 232 0> mark @POS_3_0_MARK_0 <anchor 361 726> mark @POS_3_0_MARK_1;
	pos base ygrave <anchor 232 0> mark @POS_3_0_MARK_0 <anchor 365 751> mark @POS_3_0_MARK_1;
	pos base uni1EF9 <anchor 232 0> mark @POS_3_0_MARK_0 <anchor 357 704> mark @POS_3_0_MARK_1;
	pos base z <anchor 187 0> mark @POS_3_0_MARK_0 <anchor 275 496> mark @POS_3_0_MARK_1;
	pos base zacute <anchor 187 0> mark @POS_3_0_MARK_0 <anchor 320 751> mark @POS_3_0_MARK_1;
	pos base zcaron <anchor 187 0> mark @POS_3_0_MARK_0 <anchor 315 726> mark @POS_3_0_MARK_1;
	pos base zdotaccent <anchor 187 0> mark @POS_3_0_MARK_0 <anchor 316 726> mark @POS_3_0_MARK_1;
} POS_3;
lookup POS_4 {
	markClass uni0328 <anchor 171 0> @POS_4_0_MARK_0;
	markClass uni0328.case <anchor 171 0> @POS_4_0_MARK_0;
	pos base A <anchor 625 0> mark @POS_4_0_MARK_0;
	pos base Aacute <anchor 625 0> mark @POS_4_0_MARK_0;
	pos base Abreve <anchor 625 0> mark @POS_4_0_MARK_0;
	pos base uni01CD <anchor 625 0> mark @POS_4_0_MARK_0;
	pos base Acircumflex <anchor 625 0> mark @POS_4_0_MARK_0;
	pos base Adieresis <anchor 625 0> mark @POS_4_0_MARK_0;
	pos base Agrave <anchor 625 0> mark @POS_4_0_MARK_0;
	pos base Amacron <anchor 625 0> mark @POS_4_0_MARK_0;
	pos base Aogonek <anchor 625 0> mark @POS_4_0_MARK_0;
	pos base Aring <anchor 625 0> mark @POS_4_0_MARK_0;
	pos base Atilde <anchor 625 0> mark @POS_4_0_MARK_0;
	pos base E <anchor 453 0> mark @POS_4_0_MARK_0;
	pos base Eacute <anchor 453 0> mark @POS_4_0_MARK_0;
	pos base Ebreve <anchor 453 0> mark @POS_4_0_MARK_0;
	pos base Ecaron <anchor 453 0> mark @POS_4_0_MARK_0;
	pos base Ecircumflex <anchor 453 0> mark @POS_4_0_MARK_0;
	pos base Edieresis <anchor 453 0> mark @POS_4_0_MARK_0;
	pos base Edotaccent <anchor 453 0> mark @POS_4_0_MARK_0;
	pos base Egrave <anchor 453 0> mark @POS_4_0_MARK_0;
	pos base Emacron <anchor 453 0> mark @POS_4_0_MARK_0;
	pos base Eogonek <anchor 453 0> mark @POS_4_0_MARK_0;
	pos base uni1EBC <anchor 453 0> mark @POS_4_0_MARK_0;
	pos base I <anchor 142 0> mark @POS_4_0_MARK_0;
	pos base IJ <anchor 142 0> mark @POS_4_0_MARK_0;
	pos base Iacute <anchor 142 0> mark @POS_4_0_MARK_0;
	pos base Ibreve <anchor 142 0> mark @POS_4_0_MARK_0;
	pos base Icircumflex <anchor 142 0> mark @POS_4_0_MARK_0;
	pos base Idieresis <anchor 142 0> mark @POS_4_0_MARK_0;
	pos base Idotaccent <anchor 142 0> mark @POS_4_0_MARK_0;
	pos base Igrave <anchor 142 0> mark @POS_4_0_MARK_0;
	pos base Imacron <anchor 142 0> mark @POS_4_0_MARK_0;
	pos base Iogonek <anchor 142 0> mark @POS_4_0_MARK_0;
	pos base Itilde <anchor 142 0> mark @POS_4_0_MARK_0;
	pos base K <anchor 142 0> mark @POS_4_0_MARK_0;
	pos base uni0136 <anchor 142 0> mark @POS_4_0_MARK_0;
	pos base O <anchor 433 10> mark @POS_4_0_MARK_0;
	pos base Oacute <anchor 433 10> mark @POS_4_0_MARK_0;
	pos base Obreve <anchor 433 10> mark @POS_4_0_MARK_0;
	pos base Ocircumflex <anchor 433 10> mark @POS_4_0_MARK_0;
	pos base Odieresis <anchor 433 10> mark @POS_4_0_MARK_0;
	pos base Ograve <anchor 433 10> mark @POS_4_0_MARK_0;
	pos base Ohungarumlaut <anchor 433 10> mark @POS_4_0_MARK_0;
	pos base Omacron <anchor 433 10> mark @POS_4_0_MARK_0;
	pos base Otilde <anchor 433 10> mark @POS_4_0_MARK_0;
	pos base U <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base Uacute <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base Ubreve <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base Ucircumflex <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base Udieresis <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base Ugrave <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base Uhungarumlaut <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base Umacron <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base Uogonek <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base Uring <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base Utilde <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base a <anchor 488 0> mark @POS_4_0_MARK_0;
	pos base aacute <anchor 488 0> mark @POS_4_0_MARK_0;
	pos base abreve <anchor 488 0> mark @POS_4_0_MARK_0;
	pos base uni01CE <anchor 488 0> mark @POS_4_0_MARK_0;
	pos base acircumflex <anchor 488 0> mark @POS_4_0_MARK_0;
	pos base adieresis <anchor 488 0> mark @POS_4_0_MARK_0;
	pos base agrave <anchor 488 0> mark @POS_4_0_MARK_0;
	pos base amacron <anchor 488 0> mark @POS_4_0_MARK_0;
	pos base aogonek <anchor 488 0> mark @POS_4_0_MARK_0;
	pos base aring <anchor 488 0> mark @POS_4_0_MARK_0;
	pos base atilde <anchor 488 0> mark @POS_4_0_MARK_0;
	pos base e <anchor 350 10> mark @POS_4_0_MARK_0;
	pos base eacute <anchor 350 10> mark @POS_4_0_MARK_0;
	pos base ebreve <anchor 350 10> mark @POS_4_0_MARK_0;
	pos base ecaron <anchor 350 10> mark @POS_4_0_MARK_0;
	pos base ecircumflex <anchor 350 10> mark @POS_4_0_MARK_0;
	pos base edieresis <anchor 350 10> mark @POS_4_0_MARK_0;
	pos base edotaccent <anchor 350 10> mark @POS_4_0_MARK_0;
	pos base egrave <anchor 350 10> mark @POS_4_0_MARK_0;
	pos base emacron <anchor 350 10> mark @POS_4_0_MARK_0;
	pos base eogonek <anchor 350 10> mark @POS_4_0_MARK_0;
	pos base uni1EBD <anchor 350 10> mark @POS_4_0_MARK_0;
	pos base dotlessi <anchor 130 0> mark @POS_4_0_MARK_0;
	pos base iacute <anchor 130 0> mark @POS_4_0_MARK_0;
	pos base ibreve <anchor 130 0> mark @POS_4_0_MARK_0;
	pos base icircumflex <anchor 130 0> mark @POS_4_0_MARK_0;
	pos base idieresis <anchor 130 0> mark @POS_4_0_MARK_0;
	pos base i.loclTRK <anchor 130 0> mark @POS_4_0_MARK_0;
	pos base igrave <anchor 130 0> mark @POS_4_0_MARK_0;
	pos base imacron <anchor 130 0> mark @POS_4_0_MARK_0;
	pos base iogonek <anchor 130 0> mark @POS_4_0_MARK_0;
	pos base itilde <anchor 130 0> mark @POS_4_0_MARK_0;
	pos base o <anchor 362 10> mark @POS_4_0_MARK_0;
	pos base oacute <anchor 362 10> mark @POS_4_0_MARK_0;
	pos base obreve <anchor 362 10> mark @POS_4_0_MARK_0;
	pos base ocircumflex <anchor 362 10> mark @POS_4_0_MARK_0;
	pos base odieresis <anchor 362 10> mark @POS_4_0_MARK_0;
	pos base ograve <anchor 362 10> mark @POS_4_0_MARK_0;
	pos base ohungarumlaut <anchor 362 10> mark @POS_4_0_MARK_0;
	pos base omacron <anchor 362 10> mark @POS_4_0_MARK_0;
	pos base otilde <anchor 362 10> mark @POS_4_0_MARK_0;
	pos base u <anchor 480 0> mark @POS_4_0_MARK_0;
	pos base uacute <anchor 480 0> mark @POS_4_0_MARK_0;
	pos base ubreve <anchor 480 0> mark @POS_4_0_MARK_0;
	pos base ucircumflex <anchor 480 0> mark @POS_4_0_MARK_0;
	pos base udieresis <anchor 480 0> mark @POS_4_0_MARK_0;
	pos base ugrave <anchor 480 0> mark @POS_4_0_MARK_0;
	pos base uhungarumlaut <anchor 480 0> mark @POS_4_0_MARK_0;
	pos base umacron <anchor 480 0> mark @POS_4_0_MARK_0;
	pos base uogonek <anchor 480 0> mark @POS_4_0_MARK_0;
	pos base uring <anchor 480 0> mark @POS_4_0_MARK_0;
	pos base utilde <anchor 480 0> mark @POS_4_0_MARK_0;
} POS_4;
lookup POS_5 {
	markClass uni030C.alt <anchor 132 992> @POS_5_0_MARK_0;
	markClass uni030C.alt.case <anchor 81 700> @POS_5_0_MARK_0;
	pos base L <anchor 335 700> mark @POS_5_0_MARK_0;
	pos base Lacute <anchor 335 700> mark @POS_5_0_MARK_0;
	pos base Lcaron <anchor 335 700> mark @POS_5_0_MARK_0;
	pos base uni013B <anchor 335 700> mark @POS_5_0_MARK_0;
	pos base O <anchor 854 700> mark @POS_5_0_MARK_0;
	pos base Oacute <anchor 854 700> mark @POS_5_0_MARK_0;
	pos base Obreve <anchor 854 700> mark @POS_5_0_MARK_0;
	pos base Ocircumflex <anchor 854 700> mark @POS_5_0_MARK_0;
	pos base Odieresis <anchor 854 700> mark @POS_5_0_MARK_0;
	pos base Ograve <anchor 854 700> mark @POS_5_0_MARK_0;
	pos base Ohungarumlaut <anchor 854 700> mark @POS_5_0_MARK_0;
	pos base Omacron <anchor 854 700> mark @POS_5_0_MARK_0;
	pos base Otilde <anchor 854 700> mark @POS_5_0_MARK_0;
	pos base U <anchor 736 700> mark @POS_5_0_MARK_0;
	pos base Uacute <anchor 736 700> mark @POS_5_0_MARK_0;
	pos base Ubreve <anchor 736 700> mark @POS_5_0_MARK_0;
	pos base Ucircumflex <anchor 736 700> mark @POS_5_0_MARK_0;
	pos base Udieresis <anchor 736 700> mark @POS_5_0_MARK_0;
	pos base Ugrave <anchor 736 700> mark @POS_5_0_MARK_0;
	pos base Uhungarumlaut <anchor 736 700> mark @POS_5_0_MARK_0;
	pos base Umacron <anchor 736 700> mark @POS_5_0_MARK_0;
	pos base Uogonek <anchor 736 700> mark @POS_5_0_MARK_0;
	pos base Uring <anchor 736 700> mark @POS_5_0_MARK_0;
	pos base Utilde <anchor 736 700> mark @POS_5_0_MARK_0;
	pos base d <anchor 725 992> mark @POS_5_0_MARK_0;
	pos base dcaron <anchor 725 992> mark @POS_5_0_MARK_0;
	pos base l <anchor 341 992> mark @POS_5_0_MARK_0;
	pos base lacute <anchor 341 992> mark @POS_5_0_MARK_0;
	pos base lcaron <anchor 341 992> mark @POS_5_0_MARK_0;
	pos base uni013C <anchor 341 992> mark @POS_5_0_MARK_0;
	pos base o <anchor 605 496> mark @POS_5_0_MARK_0;
	pos base oacute <anchor 605 496> mark @POS_5_0_MARK_0;
	pos base obreve <anchor 605 496> mark @POS_5_0_MARK_0;
	pos base ocircumflex <anchor 605 496> mark @POS_5_0_MARK_0;
	pos base odieresis <anchor 605 496> mark @POS_5_0_MARK_0;
	pos base ograve <anchor 605 496> mark @POS_5_0_MARK_0;
	pos base ohungarumlaut <anchor 605 496> mark @POS_5_0_MARK_0;
	pos base omacron <anchor 605 496> mark @POS_5_0_MARK_0;
	pos base otilde <anchor 605 496> mark @POS_5_0_MARK_0;
	pos base t <anchor 383 992> mark @POS_5_0_MARK_0;
	pos base tcaron <anchor 383 992> mark @POS_5_0_MARK_0;
	pos base uni0163 <anchor 383 992> mark @POS_5_0_MARK_0;
	pos base uni021B <anchor 383 992> mark @POS_5_0_MARK_0;
	pos base u <anchor 603 496> mark @POS_5_0_MARK_0;
	pos base uacute <anchor 603 496> mark @POS_5_0_MARK_0;
	pos base ubreve <anchor 603 496> mark @POS_5_0_MARK_0;
	pos base ucircumflex <anchor 603 496> mark @POS_5_0_MARK_0;
	pos base udieresis <anchor 603 496> mark @POS_5_0_MARK_0;
	pos base ugrave <anchor 603 496> mark @POS_5_0_MARK_0;
	pos base uhungarumlaut <anchor 603 496> mark @POS_5_0_MARK_0;
	pos base umacron <anchor 603 496> mark @POS_5_0_MARK_0;
	pos base uogonek <anchor 603 496> mark @POS_5_0_MARK_0;
	pos base uring <anchor 603 496> mark @POS_5_0_MARK_0;
	pos base utilde <anchor 603 496> mark @POS_5_0_MARK_0;
} POS_5;
script latn;
language dflt;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language AZE;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language CAT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language CRT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language KAZ;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language MOL;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language NLD;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language ROM;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language TAT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language TRK;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
";
tag = mark;
},
{
code = "script DFLT;
language dflt;
lookup POS_6 {
	lookupflag UseMarkFilteringSet [uni0326 uni0327 uni0327.case];
	markClass uni0326 <anchor 18 0> @POS_6_0_MARK_0;
	markClass uni0327 <anchor 51 0> @POS_6_0_MARK_0;
	markClass uni0327.case <anchor 49 0> @POS_6_0_MARK_0;
	pos mark uni0326 <anchor -30 -274> mark @POS_6_0_MARK_0;
	pos mark uni0327 <anchor 4 -263> mark @POS_6_0_MARK_0;
	pos mark uni0327.case <anchor 2 -263> mark @POS_6_0_MARK_0;
} POS_6;
lookup POS_7 {
	lookupflag UseMarkFilteringSet [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312 uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0308.narrow];
	markClass uni0308 <anchor 239 496> @POS_7_0_MARK_0;
	markClass uni0307 <anchor 128 496> @POS_7_0_MARK_0;
	markClass gravecomb <anchor 157 496> @POS_7_0_MARK_0;
	markClass acutecomb <anchor 157 496> @POS_7_0_MARK_0;
	markClass uni030B <anchor 192 496> @POS_7_0_MARK_0;
	markClass uni0302 <anchor 190 496> @POS_7_0_MARK_0;
	markClass uni030C <anchor 190 496> @POS_7_0_MARK_0;
	markClass uni0306 <anchor 200 496> @POS_7_0_MARK_0;
	markClass uni030A <anchor 160 496> @POS_7_0_MARK_0;
	markClass tildecomb <anchor 220 496> @POS_7_0_MARK_0;
	markClass uni0304 <anchor 239 496> @POS_7_0_MARK_0;
	markClass uni0312 <anchor 108 496> @POS_7_0_MARK_0;
	markClass uni0308.case <anchor 275 700> @POS_7_0_MARK_0;
	markClass uni0307.case <anchor 164 700> @POS_7_0_MARK_0;
	markClass gravecomb.case <anchor 193 700> @POS_7_0_MARK_0;
	markClass acutecomb.case <anchor 193 700> @POS_7_0_MARK_0;
	markClass uni030B.case <anchor 258 700> @POS_7_0_MARK_0;
	markClass uni0302.case <anchor 226 700> @POS_7_0_MARK_0;
	markClass uni030C.case <anchor 226 700> @POS_7_0_MARK_0;
	markClass uni0306.case <anchor 237 700> @POS_7_0_MARK_0;
	markClass uni030A.case <anchor 195 700> @POS_7_0_MARK_0;
	markClass tildecomb.case <anchor 256 700> @POS_7_0_MARK_0;
	markClass uni0304.case <anchor 266 700> @POS_7_0_MARK_0;
	markClass uni0308.narrow <anchor 260 496> @POS_7_0_MARK_0;
	pos mark uni0308 <anchor 280 726> mark @POS_7_0_MARK_0;
	pos mark uni0307 <anchor 169 726> mark @POS_7_0_MARK_0;
	pos mark gravecomb <anchor 202 751> mark @POS_7_0_MARK_0;
	pos mark acutecomb <anchor 202 751> mark @POS_7_0_MARK_0;
	pos mark uni030B <anchor 232 723> mark @POS_7_0_MARK_0;
	pos mark uni0302 <anchor 230 726> mark @POS_7_0_MARK_0;
	pos mark uni030C <anchor 230 726> mark @POS_7_0_MARK_0;
	pos mark uni0306 <anchor 238 712> mark @POS_7_0_MARK_0;
	pos mark uni030A <anchor 208 769> mark @POS_7_0_MARK_0;
	pos mark tildecomb <anchor 257 704> mark @POS_7_0_MARK_0;
	pos mark uni0304 <anchor 265 690> mark @POS_7_0_MARK_0;
	pos mark uni0312 <anchor 166 824> mark @POS_7_0_MARK_0;
	pos mark uni0308.case <anchor 317 934> mark @POS_7_0_MARK_0;
	pos mark uni0307.case <anchor 206 934> mark @POS_7_0_MARK_0;
	pos mark gravecomb.case <anchor 238 952> mark @POS_7_0_MARK_0;
	pos mark acutecomb.case <anchor 238 952> mark @POS_7_0_MARK_0;
	pos mark uni030B.case <anchor 298 927> mark @POS_7_0_MARK_0;
	pos mark uni0302.case <anchor 264 919> mark @POS_7_0_MARK_0;
	pos mark uni030C.case <anchor 264 918> mark @POS_7_0_MARK_0;
	pos mark uni0306.case <anchor 275 917> mark @POS_7_0_MARK_0;
	pos mark uni030A.case <anchor 244 975> mark @POS_7_0_MARK_0;
	pos mark tildecomb.case <anchor 287 877> mark @POS_7_0_MARK_0;
	pos mark uni0304.case <anchor 297 874> mark @POS_7_0_MARK_0;
	pos mark uni0308.narrow <anchor 301 726> mark @POS_7_0_MARK_0;
} POS_7;
script latn;
language dflt;
lookup POS_6;
lookup POS_7;
language AZE;
lookup POS_6;
lookup POS_7;
language CAT;
lookup POS_6;
lookup POS_7;
language CRT;
lookup POS_6;
lookup POS_7;
language KAZ;
lookup POS_6;
lookup POS_7;
language MOL;
lookup POS_6;
lookup POS_7;
language NLD;
lookup POS_6;
lookup POS_7;
language ROM;
lookup POS_6;
lookup POS_7;
language TAT;
lookup POS_6;
lookup POS_7;
language TRK;
lookup POS_6;
lookup POS_7;
";
tag = mkmk;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 992;
},
{
name = typoDescender;
value = -310;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 992;
},
{
name = winDescent;
value = 310;
},
{
name = hheaAscender;
value = 992;
},
{
name = hheaDescender;
value = -310;
},
{
name = strikeoutPosition;
value = 297;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
200
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 1
INSTCTRL[ ]	/* SetInstrExecControl */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
WCVTF[ ]	/* WriteCVTInFUnits */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 6 values pushed */
0 0 42 0 4 0
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
NPUSHB[ ]	/* 10 values pushed */
55 4 47 4 31 8 21 5 4 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
NPUSHB[ ]	/* 10 values pushed */
59 2 51 2 39 6 26 3 4 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 11
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 6 values pushed */
3584 3072 2048 1408 4 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 15
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 6 values pushed */
64 64 64 64 4 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
36 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
40 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 1 value pushed */
2048
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
39 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 3 values pushed */
2176 1 1088
GETINFO[ ]	/* GetInfo */
MUL[ ]	/* Multiply */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
57 2 49 2 33 6 23 3 4 14
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 1 value pushed */
511
SCANCTRL[ ]	/* ScanConversionControl */
PUSHB[ ]	/* 1 value pushed */
4
SCANTYPE[ ]	/* ScanType */
PUSHB[ ]	/* 2 values pushed */
2 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
5 100 6 0
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */
0
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
RCVT[ ]	/* ReadCVT */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
14
LTEQ[ ]	/* LessThenOrEqual */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
6
GTEQ[ ]	/* GreaterThanOrEqual */
AND[ ]	/* LogicalAnd */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
52
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
40
EIF[ ]	/* EndIf */
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
2
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 4 values pushed */
3 20 21 0
WS[ ]	/* WriteStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
19
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
2 20
RS[ ]	/* ReadStore */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
37 3
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
EQ[ ]	/* Equal */
JROT[ ]	/* JumpRelativeOnTrue */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
4
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 3 values pushed */
2 2 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
33
NEG[ ]	/* Negate */
JMPR[ ]	/* Jump */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 3 values pushed */
14 21 1
WS[ ]	/* WriteStore */
JMPR[ ]	/* Jump */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
19 1 19
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 3 values pushed */
22 1 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
4
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
21
RS[ ]	/* ReadStore */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
AND[ ]	/* LogicalAnd */
PUSHB[ ]	/* 3 values pushed */
40 1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
EIF[ ]	/* EndIf */
GT[ ]	/* GreaterThan */
OR[ ]	/* LogicalOr */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
ROLL[ ]	/* RollTopThreeStack */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
80
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
56
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
56
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
48
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
54
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
54
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
30
MPPEM[ ]	/* MeasurePixelPerEm */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 1 value pushed */
4096
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1280
DIV[ ]	/* Divide */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ABS[ ]	/* Absolute */
SUB[ ]	/* Subtract */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
7
RS[ ]	/* ReadStore */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
7
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
6
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 2 values pushed */
7 98
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
5
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
48 5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
ADD[ ]	/* Add */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
SUB[ ]	/* Subtract */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
EIF[ ]	/* EndIf */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 3 values pushed */
0 2 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
7
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
9 14 0
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
11
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
12
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
13
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
36
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
14
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 4 values pushed */
13 12 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
15
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 2
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
100
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
16
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
17
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHW[ ]	/* 1 value pushed */
1024
MUL[ ]	/* Multiply */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
18
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
13
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
19
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
MPPEM[ ]	/* MeasurePixelPerEm */
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
19
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 18
RS[ ]	/* ReadStore */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
18 18
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
17
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
15 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
16 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
0 0
SZP0[ ]	/* SetZonePointer0 */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
0
MIAP[0]	/* MoveIndirectAbsPt */
PUSHB[ ]	/* 3 values pushed */
1 1 1
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 8 values pushed */
24 24 1 0 17 0 19 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
20
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
27
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
28
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
29
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
30
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
31
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
43
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
6
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP1[ ]	/* DeltaExceptionP1 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
44
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
22
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP2[ ]	/* DeltaExceptionP2 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
38
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP3[ ]	/* DeltaExceptionP3 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 6 values pushed */
24 24 1 0 17 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
33
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
34
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
35
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
36
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
37
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
38
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
39
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
40
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
41
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
42
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
46
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
24
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
46
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
48
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
47
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
49
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
50
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
51
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
52
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
SHC[1]	/* ShiftContourByLastPt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
53
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 5 values pushed */
0 0 0 0 0
WCVTP[ ]	/* WriteCVTInPixels */
MIAP[0]	/* MoveIndirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
52 1
SZP2[ ]	/* SetZonePointer2 */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
54
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55
FDEF[ ]	/* FunctionDefinition */
MDAP[0]	/* MoveDirectAbsPt */
SLOOP[ ]	/* SetLoopVariable */
ALIGNRP[ ]	/* AlignRelativePt */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 0
SZPS[ ]	/* SetZonePointerS */
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
56 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
NEG[ ]	/* Negate */
ROLL[ ]	/* RollTopThreeStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
60
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
61
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
62
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
0
EQ[ ]	/* Equal */
IF[ ]	/* If */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
63
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
64
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
65
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
66
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
67
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
68
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
69
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
70
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
10 4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
71
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
72
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
73
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
74
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
75
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 1
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
PUSHB[ ]	/* 1 value pushed */
55
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
76
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
77
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
RCVT[ ]	/* ReadCVT */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
78
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
77
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
79
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
80
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
81
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
82
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
83
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
84
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
85
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
86
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
87
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
88
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
89
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
90
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
91
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
92
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
93
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
94
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
95
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
96
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
97
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
98
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
99
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
100
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
101
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
102
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
103
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
104
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
105
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
106
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
107
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
108
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
109
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
110
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
111
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
112
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
113
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
114
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
115
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
116
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
117
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
118
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
119
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
120
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
121
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
122
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
123
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
124
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
125
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
126
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
127
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
128
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
129
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
130
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
131
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
132
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
133
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
134
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
135
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
136
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
137
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
138
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
139
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
11 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
6
ELSE[ ]	/* Else */
PUSHB[ ]	/* 3 values pushed */
4 2 3
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
8
NEG[ ]	/* Negate */
PUSHB[ ]	/* 1 value pushed */
3
DEPTH[ ]	/* GetDepthStack */
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    24,
    24,
    24,
    24,
    712,
    0,
    \"-220\",
    712,
    0,
    \"-220\",
    127,
    127,
    111,
    111,
    700,
    0,
    700,
    496,
    0,
    \"-220\",
    712,
    \"-12\",
    726,
    508,
    \"-12\",
    \"-220\",
    78,
    78,
    70,
    70,
    353,
    0,
    358,
    \"-5\",
    78,
    78,
    70,
    70,
    700,
    347,
    705,
    342
)";
}
);
iconName = Bold;
id = m01;
metricValues = (
{
pos = 992;
},
{
pos = 700;
},
{
pos = 496;
},
{
},
{
pos = -310;
},
{
pos = 10;
}
);
name = Bold;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(14,0,l),
(415,0,l),
(539,700,l),
(138,700,l)
);
},
{
closed = 1;
nodes = (
(94,57,l),
(198,643,l),
(459,643,l),
(355,57,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
4 1 1 0 2 3 1 2 103 0 3 0 0 3 87 0 3 3 0 95 0 0 3 0 79 0 0 7 6 5 4 0 3 0 3 17 5 6 23
CALL[ ]	/* CallFunction */";
};
width = 517;
}
);
note = .notdef;
},
{
glyphname = CR;
layers = (
{
layerId = m01;
width = 580;
}
);
note = CR;
unicode = 13;
},
{
glyphname = space;
layers = (
{
layerId = m01;
width = 238;
}
);
note = space;
unicode = 32;
},
{
glyphname = A;
kernLeft = A;
kernRight = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (625,0);
},
{
name = top;
pos = (421,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(104,0,l),
(189,162,l),
(462,162,l),
(490,0,l),
(625,0,l),
(493,700,l),
(348,700,l),
(-31,0,l)
);
},
{
closed = 1;
nodes = (
(395,556,l),
(446,260,l),
(240,260,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
9 1 4 0 1 76 5 1 4 0 2 1 4 2 104 0 0 0 33 77 3 1 1 1 34 1 78 8 8 8 10 8 10 17 17 17 16 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 681;
}
);
note = A;
unicode = 65;
},
{
glyphname = Aacute;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (625,0);
},
{
name = top;
pos = (466,952);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (228,0);
ref = acutecomb.case;
}
);
width = 681;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Abreve;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (625,0);
},
{
name = top;
pos = (459,917);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (184,0);
ref = uni0306.case;
}
);
width = 681;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = uni01CD;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (625,0);
},
{
name = top;
pos = (459,918);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (195,0);
ref = uni030C.case;
}
);
width = 681;
}
);
note = uni01CD;
unicode = 461;
},
{
glyphname = Acircumflex;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (625,0);
},
{
name = top;
pos = (459,919);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (195,0);
ref = uni0302.case;
}
);
width = 681;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Adieresis;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (625,0);
},
{
name = top;
pos = (463,934);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (146,0);
ref = uni0308.case;
}
);
width = 681;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Agrave;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (625,0);
},
{
name = top;
pos = (466,952);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (228,0);
ref = gravecomb.case;
}
);
width = 681;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Amacron;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (625,0);
},
{
name = top;
pos = (452,874);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (155,0);
ref = uni0304.case;
}
);
width = 681;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = Aogonek;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (625,0);
},
{
name = top;
pos = (421,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(104,0,l),
(189,162,l),
(462,162,l),
(489,8,l),
(435,-22,o),
(390,-88,o),
(390,-126,qs),
(390,-168,o),
(454,-210,o),
(506,-210,qs),
(549,-210,o),
(596,-196,q),
(609,-120,l),
(567,-135,o),
(535,-135,qs),
(514,-135,o),
(490,-117,o),
(490,-102,qs),
(490,-81,o),
(525,-46,o),
(569,-26,qs),
(625,0,l),
(493,700,l),
(348,700,l),
(-31,0,l)
);
},
{
closed = 1;
nodes = (
(395,556,l),
(446,260,l),
(240,260,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
26 1 5 0 20 1 4 3 11 1 1 4 3 76 2 1 4 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 5 0 3 4 5 3 104 0 0 0 33 77 0 4 4 34 77 0 1 1 2 97 0 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
6 1 5 0 3 4 5 3 104 0 1 0 2 1 2 101 0 0 0 33 77 0 4 4 34 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
25 25 25 27 25 27 17 22 35 39 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 681;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = Aring;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (625,0);
},
{
name = top;
pos = (470,975);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (226,0);
ref = uni030A.case;
}
);
width = 681;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = Atilde;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (625,0);
},
{
name = top;
pos = (452,877);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (165,0);
ref = tildecomb.case;
}
);
width = 681;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = AE;
kernLeft = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (419,0);
},
{
name = top;
pos = (683,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(108,0,l),
(208,138,l),
(457,138,l),
(432,0,l),
(831,0,l),
(849,101,l),
(579,101,l),
(615,306,l),
(856,306,l),
(873,405,l),
(631,405,l),
(666,599,l),
(937,599,l),
(955,700,l),
(472,700,l),
(-31,0,l)
);
},
{
closed = 1;
nodes = (
(539,602,l),
(474,237,l),
(278,237,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
17 1 1 0 1 76 0 2 0 3 8 2 3 103 9 1 8 0 6 4 8 6 103 0 1 1 0 95 0 0 0 33 77 0 4 4 5 95 7 1 5 5 34 5 78 16 16 16 18 16 18 17 17 17 17 17 17 17 16 10 8 30
CALL[ ]	/* CallFunction */";
};
width = 925;
}
);
note = AE;
unicode = 198;
},
{
glyphname = AEacute;
kernLeft = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (419,0);
},
{
name = top;
pos = (728,952);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = AE;
},
{
alignment = -1;
pos = (490,0);
ref = acutecomb.case;
}
);
width = 925;
}
);
note = AEacute;
unicode = 508;
},
{
glyphname = B;
kernRight = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(305,0,ls),
(382,0,o),
(504,57,o),
(573,156,o),
(573,217,qs),
(573,269,o),
(513,358,o),
(467,375,q),
(532,399,o),
(599,492,o),
(599,547,qs),
(599,615,o),
(498,700,o),
(403,700,qs),
(138,700,l),
(14,0,l)
);
},
{
closed = 1;
nodes = (
(162,109,l),
(197,311,l),
(346,311,ls),
(395,311,o),
(444,264,o),
(444,225,qs),
(444,170,o),
(378,109,o),
(313,109,qs)
);
},
{
closed = 1;
nodes = (
(216,420,l),
(246,591,l),
(370,591,ls),
(418,591,o),
(464,550,o),
(464,516,qs),
(464,420,o),
(342,420,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
7 1 2 5 1 76 7 1 5 0 2 3 5 2 103 0 4 4 0 95 0 0 0 33 77 6 1 3 3 1 95 0 1 1 34 1 78 25 25 16 16 25 32 25 31 30 28 16 24 16 23 37 43 32 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 618;
}
);
note = B;
unicode = 66;
},
{
glyphname = C;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (316,0);
},
{
name = top;
pos = (440,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(456,-12,o),
(639,109,o),
(679,218,q),
(537,218,l),
(513,162,o),
(420,103,o),
(352,103,qs),
(270,103,o),
(179,198,o),
(179,283,qs),
(179,358,o),
(237,502,o),
(353,596,o),
(437,596,qs),
(505,596,o),
(580,532,o),
(582,474,q),
(724,474,l),
(723,587,o),
(583,712,o),
(457,712,qs),
(340,712,o),
(153,594,o),
(47,391,o),
(47,269,qs),
(47,195,o),
(106,68,o),
(233,-12,o),
(331,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 39 77 0 3 3 5 97 6 1 5 5 40 5 78 0 0 0 28 0 27 18 37 34 18 38 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = C;
unicode = 67;
},
{
glyphname = Cacute;
kernLeft = C;
kernRight = Cacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (316,0);
},
{
name = top;
pos = (485,952);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (247,0);
ref = acutecomb.case;
}
);
width = 719;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = Ccaron;
kernLeft = C;
kernRight = Cacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (316,0);
},
{
name = top;
pos = (478,918);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (214,0);
ref = uni030C.case;
}
);
width = 719;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = Ccedilla;
kernLeft = C;
kernRight = Cacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (269,-263);
},
{
name = top;
pos = (440,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(308,-263,ls),
(369,-263,o),
(459,-195,o),
(459,-134,qs),
(459,-92,o),
(395,-48,o),
(346,-50,q),
(353,-12,l),
(470,-6,o),
(641,114,o),
(679,218,q),
(537,218,l),
(513,162,o),
(420,103,o),
(352,103,qs),
(270,103,o),
(179,198,o),
(179,283,qs),
(179,358,o),
(237,502,o),
(353,596,o),
(437,596,qs),
(505,596,o),
(580,532,o),
(582,474,q),
(724,474,l),
(723,587,o),
(583,712,o),
(457,712,qs),
(340,712,o),
(153,594,o),
(47,391,o),
(47,269,qs),
(47,203,o),
(94,86,o),
(196,3,o),
(274,-8,q),
(254,-118,l),
(315,-118,ls),
(363,-118,o),
(363,-147,qs),
(362,-168,o),
(328,-189,o),
(302,-189,qs),
(190,-189,l),
(177,-263,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
8 1 7 5 1 76 0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 99 0 4 4 2 97 0 2 2 39 77 0 5 5 7 97 0 7 7 40 7 78 45 43 17 18 18 37 34 18 40 35 32 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = Cdotaccent;
kernLeft = C;
kernRight = Cacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (316,0);
},
{
name = top;
pos = (482,934);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (276,0);
ref = uni0307.case;
}
);
width = 719;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = D;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (304,0);
},
{
name = top;
pos = (428,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,700,l),
(15,0,l),
(254,0,ls),
(364,0,o),
(560,90,o),
(683,277,o),
(683,415,qs),
(683,550,o),
(531,700,o),
(377,700,qs)
);
},
{
closed = 1;
nodes = (
(162,110,l),
(247,591,l),
(352,591,ls),
(454,591,o),
(551,498,o),
(551,404,qs),
(551,323,o),
(493,191,o),
(366,110,o),
(267,110,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 1 95 4 1 1 1 33 77 5 1 3 3 0 95 0 0 0 34 0 78 10 10 0 0 10 19 10 18 17 15 0 9 0 8 37 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 696;
}
);
note = D;
unicode = 68;
},
{
glyphname = Dcaron;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (304,0);
},
{
name = top;
pos = (466,918);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = D;
},
{
alignment = -1;
pos = (202,0);
ref = uni030C.case;
}
);
width = 696;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = Dcroat;
kernRight = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(21,0,l),
(261,0,ls),
(389,0,o),
(487,53,qs),
(584,106,o),
(689,293,o),
(689,415,qs),
(689,550,o),
(537,700,o),
(384,700,qs),
(144,700,l),
(93,405,l),
(18,405,l),
(-1,295,l),
(73,295,l)
);
},
{
closed = 1;
nodes = (
(169,110,l),
(201,295,l),
(378,295,l),
(397,405,l),
(221,405,l),
(254,591,l),
(359,591,ls),
(460,591,o),
(558,498,o),
(558,404,qs),
(558,314,o),
(525,248,qs),
(491,181,o),
(363,110,o),
(274,110,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
5 1 0 6 8 2 3 7 0 3 103 0 4 4 1 95 0 1 1 33 77 9 1 7 7 2 95 0 2 2 34 2 78 15 15 0 0 15 29 15 28 27 26 25 24 23 21 0 14 0 14 38 33 17 10 8 25
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = Eth;
kernRight = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(21,0,l),
(261,0,ls),
(389,0,o),
(487,53,qs),
(584,106,o),
(689,293,o),
(689,415,qs),
(689,550,o),
(537,700,o),
(384,700,qs),
(144,700,l),
(93,405,l),
(18,405,l),
(-1,295,l),
(73,295,l)
);
},
{
closed = 1;
nodes = (
(169,110,l),
(201,295,l),
(378,295,l),
(397,405,l),
(221,405,l),
(254,591,l),
(359,591,ls),
(460,591,o),
(558,498,o),
(558,404,qs),
(558,314,o),
(525,248,qs),
(491,181,o),
(363,110,o),
(274,110,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
5 1 0 6 8 2 3 7 0 3 103 0 4 4 1 95 0 1 1 33 77 9 1 7 7 2 95 0 2 2 34 2 78 15 15 0 0 15 29 15 28 27 26 25 24 23 21 0 14 0 14 38 33 17 10 8 25
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = E;
kernRight = E;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (453,0);
},
{
name = top;
pos = (353,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(453,0,l),
(473,109,l),
(162,109,l),
(198,315,l),
(463,315,l),
(482,424,l),
(217,424,l),
(246,591,l),
(557,591,l),
(577,700,l),
(138,700,l),
(14,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 5 95 0 5 5 34 5 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 545;
}
);
note = E;
unicode = 69;
},
{
glyphname = Eacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (453,0);
},
{
name = top;
pos = (398,952);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (160,0);
ref = acutecomb.case;
}
);
width = 545;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ebreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (453,0);
},
{
name = top;
pos = (391,917);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (116,0);
ref = uni0306.case;
}
);
width = 545;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = Ecaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (453,0);
},
{
name = top;
pos = (391,918);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (127,0);
ref = uni030C.case;
}
);
width = 545;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = Ecircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (453,0);
},
{
name = top;
pos = (391,919);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (127,0);
ref = uni0302.case;
}
);
width = 545;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (453,0);
},
{
name = top;
pos = (395,934);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (78,0);
ref = uni0308.case;
}
);
width = 545;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Edotaccent;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (453,0);
},
{
name = top;
pos = (395,934);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (189,0);
ref = uni0307.case;
}
);
width = 545;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = Egrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (453,0);
},
{
name = top;
pos = (398,952);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (160,0);
ref = gravecomb.case;
}
);
width = 545;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Emacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (453,0);
},
{
name = top;
pos = (384,874);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (87,0);
ref = uni0304.case;
}
);
width = 545;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = Eogonek;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (453,0);
},
{
name = top;
pos = (353,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(303,0,l),
(257,-28,o),
(218,-90,o),
(218,-126,qs),
(218,-168,o),
(282,-210,o),
(334,-210,qs),
(377,-210,o),
(424,-196,q),
(437,-120,l),
(395,-135,o),
(363,-135,qs),
(342,-135,o),
(318,-117,o),
(318,-102,qs),
(318,-81,o),
(353,-46,o),
(397,-26,qs),
(453,0,l),
(473,109,l),
(162,109,l),
(198,315,l),
(463,315,l),
(482,424,l),
(217,424,l),
(246,591,l),
(557,591,l),
(577,700,l),
(138,700,l),
(14,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
19 1 5 7 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 7 95 0 7 7 34 77 0 5 5 6 97 0 6 6 38 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 2 0 3 4 2 3 103 0 5 0 6 5 6 101 0 1 1 0 95 0 0 0 33 77 0 4 4 7 95 0 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
21 35 39 17 17 17 17 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 545;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = uni018E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,0,l),
(576,700,l),
(127,700,l),
(107,591,l),
(428,591,l),
(399,424,l),
(124,424,l),
(105,315,l),
(380,315,l),
(344,109,l),
(23,109,l),
(3,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 1 0 2 1 103 0 3 3 4 95 0 4 4 33 77 0 0 0 5 95 0 5 5 34 5 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
note = uni018E;
unicode = (398,477);
},
{
glyphname = uni1EBC;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (453,0);
},
{
name = top;
pos = (384,877);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (97,0);
ref = tildecomb.case;
}
);
width = 545;
}
);
note = uni1EBC;
unicode = 7868;
},
{
glyphname = uni018F;
kernLeft = uni018F;
kernRight = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,-12,o),
(633,109,o),
(736,314,o),
(736,433,qs),
(736,506,o),
(673,633,o),
(544,712,o),
(449,712,qs),
(379,712,o),
(238,663,o),
(118,556,o),
(83,474,q),
(223,474,l),
(252,531,o),
(364,596,o),
(431,596,qs),
(510,596,o),
(602,503,o),
(602,424,qs),
(602,402,o),
(600,388,q),
(63,388,l),
(43,322,o),
(43,261,qs),
(43,183,o),
(111,59,o),
(238,-12,o),
(323,-12,qs)
);
},
{
closed = 1;
nodes = (
(263,105,o),
(173,186,o),
(173,258,qs),
(173,278,o),
(176,296,q),
(585,296,l),
(574,246,o),
(507,159,o),
(404,105,o),
(340,105,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 2 1 0 1 2 0 128 0 0 0 5 6 0 5 103 0 1 1 3 97 0 3 3 39 77 8 1 6 6 4 97 7 1 4 4 40 4 78 28 28 0 0 28 37 28 36 32 31 0 27 0 26 35 18 36 21 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 747;
}
);
note = uni018F;
unicode = 399;
},
{
glyphname = F;
kernRight = F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(142,0,l),
(196,307,l),
(470,307,l),
(490,416,l),
(216,416,l),
(246,591,l),
(559,591,l),
(579,700,l),
(138,700,l),
(14,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 34 4 78 17 17 17 17 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 525;
}
);
note = F;
unicode = 70;
},
{
glyphname = G;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (335,0);
},
{
name = top;
pos = (459,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(401,-12,o),
(511,40,o),
(555,92,q),
(551,0,l),
(667,0,l),
(734,378,l),
(379,378,l),
(359,270,l),
(583,270,l),
(556,191,o),
(442,102,o),
(355,102,qs),
(273,102,o),
(181,203,o),
(181,291,qs),
(181,368,o),
(239,507,o),
(360,594,o),
(449,594,qs),
(515,594,o),
(591,539,o),
(598,490,q),
(741,490,l),
(736,594,o),
(590,712,o),
(467,712,qs),
(348,712,o),
(158,603,o),
(49,407,o),
(49,281,qs),
(49,205,o),
(108,72,o),
(232,-12,o),
(323,-12,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
30 1 6 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 1 2 5 2 1 5 128 0 5 0 4 3 5 4 103 0 2 2 0 97 0 0 0 39 77 0 3 3 6 97 8 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 1 2 5 2 1 5 128 0 5 0 4 3 5 4 103 0 2 2 0 97 0 0 0 39 77 0 6 6 34 77 0 3 3 7 97 8 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 0 32 17 17 18 37 34 18 38 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 757;
}
);
note = G;
unicode = 71;
},
{
glyphname = Gbreve;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (335,0);
},
{
name = top;
pos = (497,917);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (222,0);
ref = uni0306.case;
}
);
width = 757;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = uni0122;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (287,-274);
},
{
name = top;
pos = (459,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (317,0);
ref = uni0326;
}
);
width = 757;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = Gdotaccent;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (335,0);
},
{
name = top;
pos = (501,934);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (295,0);
ref = uni0307.case;
}
);
width = 757;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = H;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(142,0,l),
(198,316,l),
(512,316,l),
(456,0,l),
(584,0,l),
(708,700,l),
(580,700,l),
(531,425,l),
(217,425,l),
(266,700,l),
(138,700,l),
(14,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 1 0 4 3 1 4 104 2 1 0 0 33 77 5 1 3 3 34 3 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 686;
}
);
note = H;
unicode = 72;
},
{
glyphname = Hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(142,0,l),
(198,316,l),
(512,316,l),
(456,0,l),
(584,0,l),
(671,493,l),
(711,493,l),
(730,602,l),
(690,602,l),
(708,700,l),
(580,700,l),
(562,602,l),
(248,602,l),
(266,700,l),
(138,700,l),
(120,602,l),
(79,602,l),
(60,493,l),
(101,493,l),
(14,0,l)
);
},
{
closed = 1;
nodes = (
(229,493,l),
(543,493,l),
(531,425,l),
(217,425,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
5 3 2 1 10 6 2 0 11 1 0 104 12 1 11 0 8 7 11 8 103 4 1 2 2 33 77 9 1 7 7 34 7 78 20 20 20 23 20 23 22 21 19 18 17 17 17 17 17 17 17 17 16 13 8 31
CALL[ ]	/* CallFunction */";
};
width = 685;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = I;
layers = (
{
anchors = (
{
name = bottom;
pos = (78,0);
},
{
name = ogonek;
pos = (142,0);
},
{
name = top;
pos = (202,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(142,0,l),
(266,700,l),
(138,700,l),
(14,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 244;
}
);
note = I;
unicode = 73;
},
{
glyphname = IJ;
layers = (
{
anchors = (
{
name = bottom;
pos = (451,0);
},
{
name = ogonek;
pos = (142,0);
},
{
name = top;
pos = (701,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (244,0);
ref = J;
}
);
width = 746;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = Iacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (78,0);
},
{
name = ogonek;
pos = (142,0);
},
{
name = top;
pos = (247,952);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (9,0);
ref = acutecomb.case;
}
);
width = 244;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (78,0);
},
{
name = ogonek;
pos = (142,0);
},
{
name = top;
pos = (240,917);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-35,0);
ref = uni0306.case;
}
);
width = 244;
}
);
note = Ibreve;
unicode = 300;
},
{
glyphname = Icircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (78,0);
},
{
name = ogonek;
pos = (142,0);
},
{
name = top;
pos = (240,919);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-24,0);
ref = uni0302.case;
}
);
width = 244;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (78,0);
},
{
name = ogonek;
pos = (142,0);
},
{
name = top;
pos = (244,934);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-73,0);
ref = uni0308.case;
}
);
width = 244;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Idotaccent;
layers = (
{
anchors = (
{
name = bottom;
pos = (78,0);
},
{
name = ogonek;
pos = (142,0);
},
{
name = top;
pos = (244,934);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (38,0);
ref = uni0307.case;
}
);
width = 244;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = Igrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (78,0);
},
{
name = ogonek;
pos = (142,0);
},
{
name = top;
pos = (247,952);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (9,0);
ref = gravecomb.case;
}
);
width = 244;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Imacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (78,0);
},
{
name = ogonek;
pos = (142,0);
},
{
name = top;
pos = (233,874);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-64,0);
ref = uni0304.case;
}
);
width = 244;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = Iogonek;
layers = (
{
anchors = (
{
name = bottom;
pos = (78,0);
},
{
name = ogonek;
pos = (142,0);
},
{
name = top;
pos = (202,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(66,-210,o),
(113,-196,q),
(126,-120,l),
(84,-135,o),
(52,-135,qs),
(31,-135,o),
(7,-117,o),
(7,-102,qs),
(7,-81,o),
(42,-46,o),
(86,-26,qs),
(142,0,l),
(266,700,l),
(138,700,l),
(16,14,l),
(-43,-18,o),
(-93,-85,o),
(-93,-126,qs),
(-93,-168,o),
(-29,-210,o),
(23,-210,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
17 1 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 33 77 0 1 1 2 97 3 1 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 1 3 1 2 1 2 101 0 0 0 33 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 20 0 19 39 22 4 8 24
CALL[ ]	/* CallFunction */";
};
width = 244;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = Itilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (78,0);
},
{
name = ogonek;
pos = (142,0);
},
{
name = top;
pos = (233,877);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-54,0);
ref = tildecomb.case;
}
);
width = 244;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = J;
kernLeft = J;
kernRight = J;
layers = (
{
anchors = (
{
name = bottom;
pos = (207,0);
},
{
name = top;
pos = (457,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(284,-12,o),
(418,98,o),
(435,196,qs),
(523,700,l),
(395,700,l),
(307,196,ls),
(299,153,o),
(247,102,o),
(206,102,qs),
(169,102,o),
(133,141,o),
(133,176,qs),
(133,192,o),
(136,208,q),
(8,208,l),
(3,178,o),
(3,157,qs),
(3,77,o),
(102,-12,o),
(188,-12,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 0 2 1 1 0 114 0 2 2 33 77 0 1 1 3 98 4 1 3 3 40 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 2 1 2 0 1 128 0 2 2 33 77 0 1 1 3 98 4 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 19 0 18 19 36 20 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 502;
}
);
note = J;
unicode = 74;
},
{
glyphname = uni004A0301;
layers = (
{
anchors = (
{
name = bottom;
pos = (207,0);
},
{
name = top;
pos = (502,952);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = J;
},
{
alignment = -1;
pos = (264,0);
ref = acutecomb.case;
}
);
width = 502;
}
);
note = uni004A0301;
},
{
glyphname = K;
kernRight = K;
layers = (
{
anchors = (
{
name = bottom;
pos = (270,0);
},
{
name = ogonek;
pos = (142,0);
},
{
name = top;
pos = (394,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(142,0,l),
(200,330,l),
(417,0,l),
(581,0,l),
(330,356,l),
(678,700,l),
(513,700,l),
(211,388,l),
(266,700,l),
(138,700,l),
(14,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
8 5 2 3 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = K;
unicode = 75;
},
{
glyphname = uni0136;
kernRight = K;
layers = (
{
anchors = (
{
name = bottom;
pos = (222,-274);
},
{
name = ogonek;
pos = (142,0);
},
{
name = top;
pos = (394,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = K;
},
{
alignment = -1;
pos = (252,0);
ref = uni0326;
}
);
width = 627;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = L;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (218,0);
},
{
name = top;
pos = (248,700);
},
{
name = topright;
pos = (335,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,0,l),
(464,109,l),
(162,109,l),
(266,700,l),
(138,700,l),
(14,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 17 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = L;
unicode = 76;
},
{
glyphname = Lacute;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (218,0);
},
{
name = top;
pos = (293,952);
},
{
name = topright;
pos = (335,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (55,0);
ref = acutecomb.case;
}
);
width = 524;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = Lcaron;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (218,0);
},
{
name = top;
pos = (248,700);
},
{
name = topright;
pos = (335,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (254,0);
ref = uni030C.alt.case;
}
);
width = 524;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = uni013B;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (170,-274);
},
{
name = top;
pos = (248,700);
},
{
name = topright;
pos = (335,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (200,0);
ref = uni0326;
}
);
width = 524;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = Ldot;
kernRight = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,0,l),
(464,109,l),
(162,109,l),
(266,700,l),
(138,700,l),
(14,0,l)
);
},
{
closed = 1;
nodes = (
(428,267,o),
(476,316,o),
(476,350,qs),
(476,385,o),
(428,433,o),
(393,433,qs),
(358,433,o),
(310,385,o),
(310,350,qs),
(310,315,o),
(358,267,o),
(393,267,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 3 5 1 4 1 3 4 105 0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 6 6 6 17 6 16 37 17 17 16 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = Lslash;
kernRight = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(468,0,l),
(488,109,l),
(186,109,l),
(224,327,l),
(334,361,l),
(355,484,l),
(246,449,l),
(290,700,l),
(162,700,l),
(110,406,l),
(34,382,l),
(12,260,l),
(88,284,l),
(38,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
7 6 1 3 1 0 1 76 0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 17 21 20 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 548;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = M;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(142,0,l),
(226,472,l),
(329,89,l),
(430,89,l),
(669,472,l),
(585,0,l),
(713,0,l),
(837,700,l),
(685,700,l),
(409,248,l),
(290,700,l),
(138,700,l),
(14,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
10 7 2 3 3 0 1 76 0 3 0 2 0 3 2 128 1 1 0 0 33 77 4 1 2 2 34 2 78 18 18 17 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 815;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
kernRight = N;
layers = (
{
anchors = (
{
name = bottom;
pos = (307,0);
},
{
name = top;
pos = (431,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(142,0,l),
(228,488,l),
(471,0,l),
(599,0,l),
(723,700,l),
(595,700,l),
(508,211,l),
(266,700,l),
(138,700,l),
(14,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
7 2 2 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 17 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = N;
unicode = 78;
},
{
glyphname = Nacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (307,0);
},
{
name = top;
pos = (476,952);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (238,0);
ref = acutecomb.case;
}
);
width = 701;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = Ncaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (307,0);
},
{
name = top;
pos = (469,918);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (205,0);
ref = uni030C.case;
}
);
width = 701;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = uni0145;
layers = (
{
anchors = (
{
name = bottom;
pos = (259,-274);
},
{
name = top;
pos = (431,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (289,0);
ref = uni0326;
}
);
width = 701;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = Ntilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (307,0);
},
{
name = top;
pos = (462,877);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (175,0);
ref = tildecomb.case;
}
);
width = 701;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Eng;
layers = (
{
anchors = (
{
name = bottom;
pos = (307,0);
},
{
name = top;
pos = (431,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(142,0,l),
(228,488,l),
(472,0,l),
(462,-54,ls),
(456,-85,o),
(423,-111,o),
(391,-111,qs),
(364,-111,l),
(345,-220,l),
(392,-220,ls),
(561,-220,o),
(590,-54,qs),
(723,700,l),
(595,700,l),
(509,211,l),
(266,700,l),
(138,700,l),
(15,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
15 2 2 4 0 1 76 14 1 4 1 75 1 1 0 0 33 77 0 4 4 34 77 0 3 3 2 97 0 2 2 38 2 78 21 33 34 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = O;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (348,0);
},
{
name = ogonek;
pos = (433,10);
},
{
name = top;
pos = (472,700);
},
{
name = topright;
pos = (854,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(466,-12,o),
(659,101,o),
(771,295,o),
(771,411,qs),
(771,489,o),
(702,627,o),
(566,712,o),
(469,712,qs),
(354,712,o),
(162,599,o),
(49,405,o),
(49,290,qs),
(49,209,o),
(121,71,o),
(258,-12,o),
(351,-12,qs)
);
},
{
closed = 1;
nodes = (
(281,104,o),
(181,211,o),
(181,301,qs),
(181,381,o),
(254,517,o),
(379,597,o),
(454,597,qs),
(540,597,o),
(639,491,o),
(639,400,qs),
(639,319,o),
(566,183,o),
(441,104,o),
(367,104,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 39 77 5 1 3 3 1 97 4 1 1 1 40 1 78 16 16 0 0 16 29 16 28 23 21 0 15 0 14 38 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 784;
}
);
note = O;
unicode = 79;
},
{
glyphname = Oacute;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (348,0);
},
{
name = ogonek;
pos = (433,10);
},
{
name = top;
pos = (517,952);
},
{
name = topright;
pos = (854,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (279,0);
ref = acutecomb.case;
}
);
width = 784;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Obreve;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (348,0);
},
{
name = ogonek;
pos = (433,10);
},
{
name = top;
pos = (510,917);
},
{
name = topright;
pos = (854,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (235,0);
ref = uni0306.case;
}
);
width = 784;
}
);
note = Obreve;
unicode = 334;
},
{
glyphname = Ocircumflex;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (348,0);
},
{
name = ogonek;
pos = (433,10);
},
{
name = top;
pos = (510,919);
},
{
name = topright;
pos = (854,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (246,0);
ref = uni0302.case;
}
);
width = 784;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Odieresis;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (348,0);
},
{
name = ogonek;
pos = (433,10);
},
{
name = top;
pos = (514,934);
},
{
name = topright;
pos = (854,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (197,0);
ref = uni0308.case;
}
);
width = 784;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = Ograve;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (348,0);
},
{
name = ogonek;
pos = (433,10);
},
{
name = top;
pos = (517,952);
},
{
name = topright;
pos = (854,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (279,0);
ref = gravecomb.case;
}
);
width = 784;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Ohungarumlaut;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (348,0);
},
{
name = ogonek;
pos = (433,10);
},
{
name = top;
pos = (512,927);
},
{
name = topright;
pos = (854,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (214,0);
ref = uni030B.case;
}
);
width = 784;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = Omacron;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (348,0);
},
{
name = ogonek;
pos = (433,10);
},
{
name = top;
pos = (503,874);
},
{
name = topright;
pos = (854,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (206,0);
ref = uni0304.case;
}
);
width = 784;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = Oslash;
kernLeft = Oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(461,-12,o),
(654,101,o),
(766,295,o),
(766,411,qs),
(766,517,o),
(711,592,q),
(824,700,l),
(702,700,l),
(652,652,l),
(615,681,o),
(519,712,o),
(464,712,qs),
(350,712,o),
(158,600,o),
(45,407,o),
(45,290,qs),
(45,190,o),
(95,115,q),
(-23,0,l),
(99,0,l),
(153,52,l),
(235,-12,o),
(346,-12,qs)
);
},
{
closed = 1;
nodes = (
(293,103,o),
(244,141,q),
(615,498,l),
(634,457,o),
(634,400,qs),
(634,319,o),
(561,183,o),
(436,103,o),
(362,103,qs)
);
},
{
closed = 1;
nodes = (
(193,209,l),
(177,248,o),
(177,301,qs),
(177,381,o),
(249,517,o),
(374,597,o),
(449,597,qs),
(515,597,o),
(561,565,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
13 1 5 1 40 39 29 28 16 4 6 4 5 1 1 0 4 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
13 1 5 2 40 39 29 28 16 4 6 4 5 1 1 0 4 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 39 77 7 1 4 4 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 33 77 0 5 5 1 97 0 1 1 39 77 0 0 0 34 77 7 1 4 4 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
23 23 0 0 34 32 23 31 23 30 0 22 0 21 19 38 18 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 766;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Otilde;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (348,0);
},
{
name = ogonek;
pos = (433,10);
},
{
name = top;
pos = (503,877);
},
{
name = topright;
pos = (854,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (216,0);
ref = tildecomb.case;
}
);
width = 784;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = OE;
kernLeft = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (507,0);
},
{
name = top;
pos = (631,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(401,-12,o),
(537,45,o),
(584,96,q),
(567,0,l),
(1006,0,l),
(1026,109,l),
(715,109,l),
(751,315,l),
(1016,315,l),
(1035,424,l),
(770,424,l),
(799,591,l),
(1110,591,l),
(1130,700,l),
(691,700,l),
(673,600,l),
(643,652,o),
(522,712,o),
(449,712,qs),
(342,712,o),
(158,600,o),
(50,408,o),
(50,296,qs),
(50,221,o),
(111,80,o),
(239,-12,o),
(333,-12,qs)
);
},
{
closed = 1;
nodes = (
(309,103,o),
(227,156,o),
(183,248,o),
(183,305,qs),
(183,382,o),
(254,517,o),
(375,597,o),
(446,597,qs),
(529,597,o),
(633,493,o),
(633,405,qs),
(633,324,o),
(561,186,o),
(437,103,o),
(363,103,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
10 1 2 0 23 1 6 5 2 76
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
10 1 2 1 23 1 6 5 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
10 1 8 1 23 1 6 9 2 76
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 1 1 0 0 39 77 11 9 2 5 5 6 97 10 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 0 0 0 39 77 8 1 2 2 1 95 0 1 1 33 77 11 9 2 5 5 6 95 0 6 6 34 77 11 9 2 5 5 7 97 10 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 3 0 4 5 3 4 103 0 8 8 0 97 0 0 0 39 77 0 2 2 1 95 0 1 1 33 77 0 5 5 6 95 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
27 27 0 0 27 41 27 40 34 32 0 26 0 25 17 17 17 17 17 19 38 12 8 29
CALL[ ]	/* CallFunction */";
};
width = 1101;
}
);
note = OE;
unicode = 338;
},
{
glyphname = P;
kernRight = P;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(142,0,l),
(191,279,l),
(322,279,ls),
(410,279,o),
(541,339,o),
(612,447,o),
(612,518,qs),
(612,572,o),
(559,655,o),
(461,700,o),
(397,700,qs),
(138,700,l),
(14,0,l)
);
},
{
closed = 1;
nodes = (
(211,388,l),
(246,591,l),
(374,591,ls),
(424,591,o),
(480,544,o),
(480,502,qs),
(480,446,o),
(408,388,o),
(339,388,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 4 0 1 2 4 1 103 0 3 3 0 95 0 0 0 33 77 0 2 2 34 2 78 13 13 13 21 13 20 37 17 38 32 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = P;
unicode = 80;
},
{
glyphname = Thorn;
kernRight = Thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,0,l),
(167,136,l),
(298,136,ls),
(380,136,o),
(512,193,o),
(588,304,o),
(588,382,qs),
(588,469,o),
(469,565,o),
(373,565,qs),
(242,565,l),
(266,700,l),
(138,700,l),
(15,0,l)
);
},
{
closed = 1;
nodes = (
(185,239,l),
(224,460,l),
(348,460,ls),
(456,460,o),
(456,377,qs),
(456,312,o),
(378,239,o),
(309,239,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 0 4 5 1 4 104 6 1 5 0 2 3 5 2 103 0 0 0 33 77 0 3 3 34 3 78 14 14 14 21 14 20 36 17 37 33 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = Q;
kernLeft = C;
kernRight = Q;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(473,-12,o),
(576,53,q),
(631,-12,l),
(731,76,l),
(675,140,l),
(721,196,o),
(771,335,o),
(771,411,qs),
(771,489,o),
(702,627,o),
(566,712,o),
(469,712,qs),
(354,712,o),
(162,599,o),
(49,405,o),
(49,290,qs),
(49,209,o),
(121,71,o),
(258,-12,o),
(351,-12,qs)
);
},
{
closed = 1;
nodes = (
(181,381,o),
(254,517,o),
(379,597,o),
(454,597,qs),
(540,597,o),
(639,491,o),
(639,400,qs),
(639,309,o),
(593,234,q),
(512,331,l),
(412,243,l),
(500,140,l),
(436,103,o),
(367,103,qs),
(281,103,o),
(181,211,o),
(181,301,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
27 26 25 24 14 5 2 3 17 15 2 1 2 2 76 16 1 1 73 0 3 3 0 97 0 0 0 39 77 0 2 2 1 97 4 1 1 1 40 1 78 0 0 33 31 23 21 0 19 0 18 38 5 8 23
CALL[ ]	/* CallFunction */";
};
width = 796;
}
);
note = Q;
unicode = 81;
},
{
glyphname = R;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (255,0);
},
{
name = top;
pos = (379,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(142,0,l),
(194,295,l),
(272,295,l),
(392,0,l),
(543,0,l),
(404,316,l),
(497,338,o),
(589,450,o),
(589,527,qs),
(589,605,o),
(477,700,o),
(381,700,qs),
(138,700,l),
(14,0,l)
);
},
{
closed = 1;
nodes = (
(214,404,l),
(246,591,l),
(358,591,ls),
(410,591,o),
(457,544,o),
(457,509,qs),
(457,456,o),
(394,404,o),
(326,404,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 1 2 5 1 76 6 1 5 0 2 1 5 2 103 0 4 4 0 95 0 0 0 33 77 3 1 1 1 34 1 78 14 14 14 22 14 21 37 17 17 22 32 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = R;
unicode = 82;
},
{
glyphname = Racute;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (255,0);
},
{
name = top;
pos = (424,952);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (186,0);
ref = acutecomb.case;
}
);
width = 597;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = Rcaron;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (255,0);
},
{
name = top;
pos = (417,918);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (153,0);
ref = uni030C.case;
}
);
width = 597;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = uni0156;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (207,-274);
},
{
name = top;
pos = (379,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (237,0);
ref = uni0326;
}
);
width = 597;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = S;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (248,0);
},
{
name = top;
pos = (372,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(341,-12,o),
(468,45,o),
(539,150,o),
(539,219,qs),
(539,285,o),
(455,375,o),
(382,401,qs),
(325,422,o),
(271,445,o),
(253,462,qs),
(233,480,o),
(233,511,qs),
(233,552,o),
(293,604,o),
(343,604,qs),
(387,604,o),
(437,559,o),
(437,527,qs),
(437,516,o),
(436,510,q),
(573,510,l),
(575,541,l),
(575,619,o),
(460,712,o),
(364,712,qs),
(286,712,o),
(163,656,o),
(95,554,o),
(95,488,qs),
(95,431,o),
(165,347,o),
(231,323,qs),
(254,315,ls),
(313,294,o),
(368,268,o),
(400,231,o),
(400,202,qs),
(400,154,o),
(333,95,o),
(276,95,qs),
(225,95,o),
(163,148,o),
(163,191,q),
(164,201,o),
(164,211,q),
(28,211,l),
(25,193,o),
(25,172,qs),
(25,87,o),
(153,-12,o),
(260,-12,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 1 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 3 4 0 4 3 114 0 0 1 1 0 112 0 4 4 2 97 0 2 2 39 77 0 1 1 5 98 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 3 4 0 4 3 114 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 39 77 0 1 1 5 98 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 39 77 0 1 1 5 98 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 50 0 49 36 19 45 36 20 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = S;
unicode = 83;
},
{
glyphname = Sacute;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (248,0);
},
{
name = top;
pos = (417,952);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (179,0);
ref = acutecomb.case;
}
);
width = 584;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = Scaron;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (248,0);
},
{
name = top;
pos = (410,918);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (146,0);
ref = uni030C.case;
}
);
width = 584;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = Scedilla;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (201,-263);
},
{
name = top;
pos = (372,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(240,-263,ls),
(301,-263,o),
(391,-195,o),
(391,-134,qs),
(391,-92,o),
(327,-48,o),
(278,-50,q),
(285,-11,l),
(360,-7,o),
(475,53,o),
(539,154,o),
(539,219,qs),
(539,285,o),
(455,375,o),
(382,401,qs),
(325,422,o),
(271,445,o),
(253,462,qs),
(233,480,o),
(233,511,qs),
(233,552,o),
(293,604,o),
(343,604,qs),
(387,604,o),
(437,559,o),
(437,527,qs),
(437,516,o),
(436,510,q),
(573,510,l),
(575,541,l),
(575,619,o),
(460,712,o),
(364,712,qs),
(286,712,o),
(163,656,o),
(95,554,o),
(95,488,qs),
(95,431,o),
(165,347,o),
(231,323,qs),
(254,315,ls),
(313,294,o),
(368,268,o),
(400,231,o),
(400,202,qs),
(400,154,o),
(333,95,o),
(276,95,qs),
(225,95,o),
(163,148,o),
(163,191,q),
(164,201,o),
(164,211,q),
(28,211,l),
(25,193,o),
(25,172,qs),
(25,99,o),
(121,4,o),
(206,-8,q),
(186,-118,l),
(247,-118,ls),
(295,-118,o),
(295,-147,qs),
(294,-168,o),
(260,-189,o),
(234,-189,qs),
(122,-189,l),
(109,-263,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
16 1 3 2 8 1 7 3 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 5 6 2 6 5 114 0 2 3 6 2 3 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 100 0 6 6 4 97 0 4 4 39 77 0 3 3 7 97 0 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 100 0 6 6 4 97 0 4 4 39 77 0 3 3 7 97 0 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
67 65 17 29 36 19 45 36 22 35 32 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = uni0218;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (200,-274);
},
{
name = top;
pos = (372,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (230,0);
ref = uni0326;
}
);
width = 584;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni1E9E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(477,-10,o),
(582,39,o),
(639,126,o),
(639,180,qs),
(639,233,o),
(586,297,o),
(525,321,qs),
(473,339,o),
(433,365,o),
(433,382,qs),
(433,399,o),
(461,424,o),
(492,445,qs),
(522,463,o),
(537,475,qs),
(593,518,o),
(593,580,qs),
(593,622,o),
(541,692,o),
(445,732,o),
(381,732,qs),
(255,732,o),
(107,607,o),
(89,509,qs),
(-1,0,l),
(127,0,l),
(215,499,ls),
(239,625,o),
(363,625,qs),
(410,625,o),
(461,590,o),
(461,559,qs),
(461,531,o),
(422,491,o),
(381,464,qs),
(357,447,ls),
(330,428,o),
(301,384,o),
(301,355,qs),
(301,316,o),
(362,262,o),
(432,238,qs),
(476,221,o),
(511,188,o),
(511,165,qs),
(511,128,o),
(461,85,o),
(420,85,qs),
(379,85,o),
(337,133,o),
(340,175,q),
(219,175,l),
(213,90,o),
(314,-10,o),
(409,-10,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 0 2 1 1 0 114 0 2 2 4 97 0 4 4 41 77 0 1 1 3 98 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 1 1 3 98 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 3 3 34 77 0 1 1 5 98 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 2 1 2 0 1 128 0 4 0 2 0 4 2 105 0 3 3 34 77 0 1 1 5 98 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 54 0 53 34 32 29 28 26 24 34 18 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = uni1E9E;
unicode = 7838;
},
{
glyphname = T;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = top;
pos = (365,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(305,0,l),
(409,591,l),
(614,591,l),
(634,700,l),
(97,700,l),
(77,591,l),
(281,591,l),
(177,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 1 95 0 1 1 33 77 0 3 3 34 3 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 570;
}
);
note = T;
unicode = 84;
},
{
glyphname = Tcaron;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = top;
pos = (403,918);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (139,0);
ref = uni030C.case;
}
);
width = 570;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = uni0162;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (194,-263);
},
{
name = top;
pos = (365,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(200,0,l),
(179,-118,l),
(240,-118,ls),
(288,-118,o),
(288,-147,qs),
(287,-168,o),
(253,-189,o),
(227,-189,qs),
(115,-189,l),
(102,-263,l),
(233,-263,ls),
(294,-263,o),
(384,-195,o),
(384,-134,qs),
(384,-92,o),
(320,-48,o),
(271,-50,q),
(280,0,l),
(305,0,l),
(409,591,l),
(614,591,l),
(634,700,l),
(97,700,l),
(77,591,l),
(281,591,l),
(177,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 0 7 6 4 7 105 0 6 0 5 6 5 99 2 1 0 0 1 95 0 1 1 33 77 8 1 3 3 34 3 78 17 35 33 36 17 17 17 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 570;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni021A;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (193,-274);
},
{
name = top;
pos = (365,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (223,0);
ref = uni0326;
}
);
width = 570;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = U;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (413,700);
},
{
name = topright;
pos = (736,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(352,-12,o),
(488,43,o),
(590,168,o),
(608,268,qs),
(684,700,l),
(556,700,l),
(479,268,ls),
(465,188,o),
(373,106,o),
(302,106,qs),
(242,106,o),
(177,165,o),
(177,223,qs),
(177,241,o),
(182,268,qs),
(258,700,l),
(130,700,l),
(54,268,ls),
(48,232,o),
(48,201,qs),
(48,100,o),
(170,-12,o),
(279,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 0 0 33 77 0 1 1 3 98 4 1 3 3 40 3 78 0 0 0 22 0 21 19 37 21 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 666;
}
);
note = U;
unicode = 85;
},
{
glyphname = Uacute;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (458,952);
},
{
name = topright;
pos = (736,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (220,0);
ref = acutecomb.case;
}
);
width = 666;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ubreve;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (451,917);
},
{
name = topright;
pos = (736,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (176,0);
ref = uni0306.case;
}
);
width = 666;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = Ucircumflex;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (451,919);
},
{
name = topright;
pos = (736,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (187,0);
ref = uni0302.case;
}
);
width = 666;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (455,934);
},
{
name = topright;
pos = (736,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (138,0);
ref = uni0308.case;
}
);
width = 666;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Ugrave;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (458,952);
},
{
name = topright;
pos = (736,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (220,0);
ref = gravecomb.case;
}
);
width = 666;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uhungarumlaut;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (453,927);
},
{
name = topright;
pos = (736,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (155,0);
ref = uni030B.case;
}
);
width = 666;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = Umacron;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (444,874);
},
{
name = topright;
pos = (736,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (147,0);
ref = uni0304.case;
}
);
width = 666;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = Uogonek;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (413,700);
},
{
name = topright;
pos = (736,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,-200,o),
(376,-186,q),
(389,-110,l),
(347,-125,o),
(315,-125,qs),
(294,-125,o),
(270,-107,o),
(270,-92,qs),
(270,-71,o),
(305,-36,o),
(349,-16,qs),
(401,8,l),
(479,35,o),
(589,163,o),
(608,268,qs),
(684,700,l),
(556,700,l),
(479,268,ls),
(465,188,o),
(373,106,o),
(302,106,qs),
(242,106,o),
(177,165,o),
(177,223,qs),
(177,241,o),
(182,268,qs),
(258,700,l),
(130,700,l),
(54,268,ls),
(48,232,o),
(48,201,qs),
(48,113,o),
(142,4,o),
(228,-9,q),
(170,-54,o),
(170,-116,qs),
(170,-158,o),
(234,-200,o),
(286,-200,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
35 4 2 3 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 3 0 1 3 128 2 1 0 0 33 77 0 3 3 4 98 5 1 4 4 38 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 1 0 3 0 1 3 128 0 3 5 1 4 3 4 102 2 1 0 0 33 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 38 0 37 42 19 37 26 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 666;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = Uring;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (462,975);
},
{
name = topright;
pos = (736,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (218,0);
ref = uni030A.case;
}
);
width = 666;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = Utilde;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (444,877);
},
{
name = topright;
pos = (736,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (157,0);
ref = tildecomb.case;
}
);
width = 666;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = V;
kernLeft = V;
kernRight = V;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,0,l),
(374,0,l),
(754,700,l),
(617,700,l),
(319,132,l),
(222,700,l),
(85,700,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
1 1 1 0 1 76 3 2 2 0 0 33 77 0 1 1 34 1 78 0 0 0 6 0 6 17 18 4 8 24
CALL[ ]	/* CallFunction */";
};
width = 679;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (456,0);
},
{
name = top;
pos = (576,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(544,509,l),
(589,0,l),
(750,0,l),
(1062,700,l),
(923,700,l),
(694,146,l),
(653,700,l),
(508,700,l),
(265,148,l),
(233,700,l),
(96,700,l),
(155,0,l),
(316,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 33 77 5 4 2 3 3 34 3 78 0 0 0 12 0 12 17 18 18 17 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 999;
}
);
note = W;
unicode = 87;
},
{
glyphname = Wacute;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (456,0);
},
{
name = top;
pos = (621,952);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (383,0);
ref = acutecomb.case;
}
);
width = 999;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = Wcircumflex;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (456,0);
},
{
name = top;
pos = (614,919);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (350,0);
ref = uni0302.case;
}
);
width = 999;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = Wdieresis;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (456,0);
},
{
name = top;
pos = (618,934);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (301,0);
ref = uni0308.case;
}
);
width = 999;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = Wgrave;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (456,0);
},
{
name = top;
pos = (621,952);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (383,0);
ref = gravecomb.case;
}
);
width = 999;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = X;
kernLeft = X;
kernRight = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(116,0,l),
(312,264,l),
(422,0,l),
(567,0,l),
(407,381,l),
(651,700,l),
(506,700,l),
(357,497,l),
(272,700,l),
(127,700,l),
(260,381,l),
(-29,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (256,0);
},
{
name = top;
pos = (380,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(313,0,l),
(363,281,l),
(671,700,l),
(528,700,l),
(322,409,l),
(219,700,l),
(74,700,l),
(235,281,l),
(185,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
3 1 2 0 1 76 1 1 0 0 33 77 0 2 2 34 2 78 18 18 17 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Yacute;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (256,0);
},
{
name = top;
pos = (425,952);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (187,0);
ref = acutecomb.case;
}
);
width = 599;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Ycircumflex;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (256,0);
},
{
name = top;
pos = (418,919);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (154,0);
ref = uni0302.case;
}
);
width = 599;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = Ydieresis;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (256,0);
},
{
name = top;
pos = (422,934);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (105,0);
ref = uni0308.case;
}
);
width = 599;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Ygrave;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (256,0);
},
{
name = top;
pos = (425,952);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (187,0);
ref = gravecomb.case;
}
);
width = 599;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = uni1EF8;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (256,0);
},
{
name = top;
pos = (411,877);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (124,0);
ref = tildecomb.case;
}
);
width = 599;
}
);
note = uni1EF8;
unicode = 7928;
},
{
glyphname = Z;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = top;
pos = (353,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(458,0,l),
(477,107,l),
(152,107,l),
(563,602,l),
(580,700,l),
(113,700,l),
(94,593,l),
(413,593,l),
(4,98,l),
(-14,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 0 0 1 95 0 1 1 33 77 0 2 2 3 95 0 3 3 34 3 78 17 18 17 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 546;
}
);
note = Z;
unicode = 90;
},
{
glyphname = Zacute;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = top;
pos = (398,952);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (160,0);
ref = acutecomb.case;
}
);
width = 546;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = Zcaron;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = top;
pos = (391,918);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (127,0);
ref = uni030C.case;
}
);
width = 546;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = Zdotaccent;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = top;
pos = (395,934);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (189,0);
ref = uni0307.case;
}
);
width = 546;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = uniA78B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(165,210,l),
(267,700,l),
(130,700,l),
(57,210,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 237;
}
);
note = uniA78B;
unicode = 42891;
},
{
glyphname = a;
kernLeft = a;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (230,0);
},
{
name = ogonek;
pos = (488,0);
},
{
name = top;
pos = (318,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(171,90,o),
(136,114,o),
(136,137,qs),
(136,173,o),
(193,213,o),
(234,213,qs),
(344,213,l),
(331,158,o),
(250,90,o),
(200,90,qs)
);
},
{
closed = 1;
nodes = (
(5,60,o),
(90,-12,o),
(151,-12,qs),
(209,-12,o),
(292,29,o),
(325,66,q),
(322,0,l),
(435,0,l),
(487,292,ls),
(492,322,o),
(492,342,qs),
(492,421,o),
(396,508,o),
(306,508,qs),
(216,508,o),
(84,417,o),
(53,333,q),
(178,333,l),
(193,365,o),
(249,400,o),
(285,400,qs),
(364,400,o),
(364,323,qs),
(364,315,o),
(362,295,q),
(240,295,ls),
(175,295,o),
(68,254,o),
(5,173,o),
(5,117,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
33 1 6 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 2 3 4 2 128 0 2 0 0 1 2 0 103 0 3 3 5 97 0 5 5 42 77 8 1 1 1 6 97 7 1 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 4 3 2 3 4 2 128 0 2 0 0 1 2 0 103 0 3 3 5 97 0 5 5 42 77 0 6 6 34 77 8 1 1 1 7 97 0 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 37 35 32 31 26 24 22 21 19 17 14 12 0 9 0 8 34 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = a;
unicode = 97;
},
{
glyphname = aacute;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (230,0);
},
{
name = ogonek;
pos = (488,0);
},
{
name = top;
pos = (363,751);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (161,0);
ref = acutecomb;
}
);
width = 516;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = abreve;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (230,0);
},
{
name = ogonek;
pos = (488,0);
},
{
name = top;
pos = (356,712);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (118,0);
ref = uni0306;
}
);
width = 516;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = uni01CE;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (230,0);
},
{
name = ogonek;
pos = (488,0);
},
{
name = top;
pos = (358,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (128,0);
ref = uni030C;
}
);
width = 516;
}
);
note = uni01CE;
unicode = 462;
},
{
glyphname = acircumflex;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (230,0);
},
{
name = ogonek;
pos = (488,0);
},
{
name = top;
pos = (358,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (128,0);
ref = uni0302;
}
);
width = 516;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = adieresis;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (230,0);
},
{
name = ogonek;
pos = (488,0);
},
{
name = top;
pos = (359,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (79,0);
ref = uni0308;
}
);
width = 516;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = agrave;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (230,0);
},
{
name = ogonek;
pos = (488,0);
},
{
name = top;
pos = (363,751);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (161,0);
ref = gravecomb;
}
);
width = 516;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = amacron;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (230,0);
},
{
name = ogonek;
pos = (488,0);
},
{
name = top;
pos = (344,690);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (79,0);
ref = uni0304;
}
);
width = 516;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = aogonek;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (230,0);
},
{
name = ogonek;
pos = (488,0);
},
{
name = top;
pos = (318,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(171,90,o),
(136,114,o),
(136,137,qs),
(136,173,o),
(193,213,o),
(234,213,qs),
(344,213,l),
(331,158,o),
(250,90,o),
(200,90,qs)
);
},
{
closed = 1;
nodes = (
(412,-210,o),
(459,-196,q),
(472,-120,l),
(430,-135,o),
(398,-135,qs),
(377,-135,o),
(353,-117,o),
(353,-102,qs),
(353,-81,o),
(388,-46,o),
(432,-26,qs),
(488,0,l),
(470,60,l),
(444,50,l),
(487,292,ls),
(492,322,o),
(492,342,qs),
(492,421,o),
(396,508,o),
(306,508,qs),
(216,508,o),
(84,417,o),
(53,333,q),
(178,333,l),
(193,365,o),
(249,400,o),
(285,400,qs),
(364,400,o),
(364,323,qs),
(364,315,o),
(362,295,q),
(240,295,ls),
(175,295,o),
(68,254,o),
(5,173,o),
(5,117,qs),
(5,60,o),
(90,-12,o),
(151,-12,qs),
(209,-12,o),
(292,29,o),
(325,66,q),
(322,0,l),
(338,0,l),
(292,-28,o),
(253,-90,o),
(253,-126,qs),
(253,-168,o),
(317,-210,o),
(369,-210,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
46 45 17 3 2 1 56 1 8 2 2 76 47 1 2 1 75
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
46 45 17 3 2 1 56 1 8 3 2 76 47 1 2 1 75
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 6 5 4 5 6 4 128 0 4 0 0 1 4 0 103 0 5 5 7 97 0 7 7 42 77 10 1 1 1 2 97 3 1 2 2 34 77 0 8 8 9 97 11 1 9 9 38 9 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 6 5 4 5 6 4 128 0 4 0 0 1 4 0 103 0 5 5 7 97 0 7 7 42 77 0 2 2 34 77 10 1 1 1 3 97 0 3 3 40 77 0 8 8 9 97 11 1 9 9 38 9 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 6 5 4 5 6 4 128 0 4 0 0 1 4 0 103 0 8 11 1 9 8 9 101 0 5 5 7 97 0 7 7 42 77 0 2 2 34 77 10 1 1 1 3 97 0 3 3 40 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
10 10 0 0 10 59 10 58 55 53 40 38 36 35 33 31 28 26 21 19 16 15 0 9 0 8 34 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = aring;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (230,0);
},
{
name = ogonek;
pos = (488,0);
},
{
name = top;
pos = (366,769);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (158,0);
ref = uni030A;
}
);
width = 516;
}
);
note = aring;
unicode = 229;
},
{
glyphname = atilde;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (230,0);
},
{
name = ogonek;
pos = (488,0);
},
{
name = top;
pos = (355,704);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (98,0);
ref = tildecomb;
}
);
width = 516;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = ae;
kernLeft = a;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (410,0);
},
{
name = top;
pos = (498,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,-12,o),
(365,43,o),
(405,91,q),
(430,42,o),
(528,-12,o),
(593,-12,qs),
(670,-12,o),
(818,73,o),
(858,156,q),
(728,156,l),
(708,127,o),
(648,93,o),
(610,93,qs),
(561,93,o),
(502,150,o),
(502,200,qs),
(502,211,o),
(503,217,q),
(879,217,l),
(894,264,o),
(894,311,qs),
(894,368,o),
(845,457,o),
(750,508,o),
(685,508,qs),
(575,508,o),
(492,438,q),
(446,508,o),
(325,508,qs),
(272,508,o),
(165,471,o),
(81,391,o),
(64,331,q),
(189,331,l),
(201,366,o),
(266,404,o),
(307,404,qs),
(345,404,o),
(391,366,o),
(391,329,qs),
(391,309,o),
(387,293,q),
(247,293,ls),
(186,293,o),
(76,256,o),
(5,176,o),
(5,116,qs),
(5,57,o),
(97,-12,o),
(180,-12,qs)
);
},
{
closed = 1;
nodes = (
(181,88,o),
(144,115,o),
(144,140,qs),
(144,175,o),
(200,213,o),
(247,213,qs),
(366,213,l),
(364,201,ls),
(356,153,o),
(267,88,o),
(214,88,qs)
);
},
{
closed = 1;
nodes = (
(520,297,l),
(538,349,o),
(618,404,o),
(667,404,qs),
(713,404,o),
(767,352,o),
(767,308,qs),
(766,297,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
22 1 1 3 61 1 0 2 46 1 8 6 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
22 1 1 3 61 1 0 2 46 1 11 6 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 2 1 0 1 2 0 128 0 7 5 6 5 7 6 128 13 1 0 10 1 5 7 0 5 103 12 1 1 1 3 97 4 1 3 3 42 77 15 11 2 6 6 8 97 14 9 2 8 8 40 8 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
0 2 1 0 1 2 0 128 0 7 5 6 5 7 6 128 13 1 0 10 1 5 7 0 5 103 12 1 1 1 3 97 4 1 3 3 42 77 0 6 6 8 97 14 9 2 8 8 40 77 15 1 11 11 8 97 14 9 2 8 8 40 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
50 50 0 0 68 67 65 63 50 60 50 59 55 53 0 49 0 48 34 18 36 21 34 35 18 36 37 16 8 31
CALL[ ]	/* CallFunction */";
};
width = 907;
}
);
note = ae;
unicode = 230;
},
{
glyphname = aeacute;
kernLeft = a;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (410,0);
},
{
name = top;
pos = (543,751);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = ae;
},
{
alignment = -1;
pos = (341,0);
ref = acutecomb;
}
);
width = 907;
}
);
note = aeacute;
unicode = 509;
},
{
glyphname = b;
kernLeft = b;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(373,-12,o),
(504,70,o),
(580,210,o),
(580,294,qs),
(580,348,o),
(536,446,o),
(445,508,o),
(378,508,qs),
(273,508,o),
(205,433,q),
(252,700,l),
(124,700,l),
(1,0,l),
(114,0,l),
(140,68,l),
(160,33,o),
(241,-12,o),
(293,-12,qs)
);
},
{
closed = 1;
nodes = (
(233,100,o),
(167,168,o),
(167,220,qs),
(167,263,o),
(204,344,o),
(277,396,o),
(328,396,qs),
(382,396,o),
(447,326,o),
(447,272,qs),
(447,225,o),
(406,146,o),
(333,100,o),
(286,100,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
7 1 4 2 2 1 0 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 1 33 77 0 4 4 2 97 0 2 2 42 77 7 1 5 5 0 98 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 33 77 0 4 4 2 97 0 2 2 42 77 0 0 0 34 77 7 1 5 5 3 98 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
18 18 0 0 18 31 18 30 25 23 0 17 0 16 34 17 19 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = b;
unicode = 98;
},
{
glyphname = c;
kernLeft = c;
kernRight = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (235,0);
},
{
name = top;
pos = (323,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,-12,o),
(484,85,o),
(519,180,q),
(385,180,l),
(370,141,o),
(302,97,o),
(260,97,qs),
(214,97,o),
(156,160,o),
(156,213,qs),
(156,257,o),
(192,343,o),
(263,399,o),
(313,399,qs),
(355,399,o),
(408,355,o),
(408,316,q),
(543,316,l),
(543,405,o),
(429,508,o),
(332,508,qs),
(246,508,o),
(105,427,o),
(24,286,o),
(24,201,qs),
(24,140,o),
(75,43,o),
(173,-12,o),
(241,-12,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 4 2 1 114 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 42 77 0 3 3 5 97 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 42 77 0 3 3 5 97 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 28 0 27 18 37 34 18 38 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
note = c;
unicode = 99;
},
{
glyphname = cacute;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (235,0);
},
{
name = top;
pos = (368,751);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (166,0);
ref = acutecomb;
}
);
width = 558;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = ccaron;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (235,0);
},
{
name = top;
pos = (363,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (133,0);
ref = uni030C;
}
);
width = 558;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = ccedilla;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (188,-263);
},
{
name = top;
pos = (323,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(225,-263,ls),
(286,-263,o),
(376,-195,o),
(376,-134,qs),
(376,-92,o),
(312,-48,o),
(263,-50,q),
(270,-11,l),
(351,-3,o),
(487,93,o),
(519,180,q),
(385,180,l),
(370,141,o),
(302,97,o),
(260,97,qs),
(214,97,o),
(156,160,o),
(156,213,qs),
(156,257,o),
(192,343,o),
(263,399,o),
(313,399,qs),
(355,399,o),
(408,355,o),
(408,316,q),
(543,316,l),
(543,405,o),
(429,508,o),
(332,508,qs),
(246,508,o),
(105,427,o),
(24,286,o),
(24,201,qs),
(24,120,o),
(112,7,o),
(191,-8,q),
(171,-118,l),
(232,-118,ls),
(280,-118,o),
(280,-147,qs),
(279,-168,o),
(245,-189,o),
(219,-189,qs),
(107,-189,l),
(94,-263,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 7 5 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 3 4 6 4 3 114 0 6 5 4 6 5 126 0 5 7 7 5 112 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 42 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 4 6 4 3 114 0 6 5 4 6 5 126 0 5 7 4 5 7 126 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 42 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 5 7 4 5 7 126 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 42 4 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 20 18 37 34 18 39 35 32 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = cdotaccent;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (235,0);
},
{
name = top;
pos = (364,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (195,0);
ref = uni0307;
}
);
width = 558;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = d;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (258,0);
},
{
name = top;
pos = (433,992);
},
{
name = topright;
pos = (725,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(328,-12,o),
(398,71,q),
(400,0,l),
(515,0,l),
(638,700,l),
(510,700,l),
(462,428,l),
(419,508,o),
(305,508,qs),
(233,508,o),
(104,434,o),
(25,297,o),
(25,208,qs),
(25,152,o),
(67,52,o),
(157,-12,o),
(223,-12,qs)
);
},
{
closed = 1;
nodes = (
(219,100,o),
(157,170,o),
(157,223,qs),
(157,263,o),
(193,343,o),
(266,396,o),
(319,396,qs),
(372,396,o),
(435,332,o),
(435,280,qs),
(435,237,o),
(397,154,o),
(323,100,o),
(272,100,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
9 1 4 0 14 1 2 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 1 33 77 0 4 4 0 97 0 0 0 42 77 7 1 5 5 2 97 6 3 2 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 33 77 0 4 4 0 97 0 0 0 42 77 0 2 2 34 77 7 1 5 5 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
17 17 0 0 17 30 17 29 24 22 0 16 0 15 17 18 38 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = d;
unicode = 100;
},
{
glyphname = dcaron;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (258,0);
},
{
name = top;
pos = (433,992);
},
{
name = topright;
pos = (725,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = d;
},
{
alignment = -1;
pos = (593,0);
ref = uni030C.alt;
}
);
width = 605;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = dcroat;
kernLeft = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(328,-12,o),
(398,71,q),
(400,0,l),
(514,0,l),
(613,558,l),
(659,558,l),
(675,648,l),
(629,648,l),
(638,700,l),
(510,700,l),
(501,648,l),
(352,648,l),
(336,558,l),
(485,558,l),
(462,428,l),
(419,508,o),
(305,508,qs),
(233,508,o),
(104,434,o),
(25,297,o),
(25,208,qs),
(25,152,o),
(67,52,o),
(157,-12,o),
(223,-12,qs)
);
},
{
closed = 1;
nodes = (
(157,263,o),
(193,343,o),
(266,396,o),
(319,396,qs),
(372,396,o),
(435,332,o),
(435,280,qs),
(435,237,o),
(397,154,o),
(323,100,o),
(272,100,qs),
(219,100,o),
(157,170,o),
(157,223,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
9 1 9 0 22 1 6 8 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
4 1 2 5 1 1 0 2 1 104 0 3 3 33 77 0 9 9 0 97 0 0 0 42 77 0 8 8 6 97 10 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
4 1 2 5 1 1 0 2 1 104 0 3 3 33 77 0 9 9 0 97 0 0 0 42 77 0 6 6 34 77 0 8 8 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 35 33 28 26 0 24 0 23 17 17 17 17 17 18 38 11 8 29
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = eth;
kernLeft = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(348,-12,o),
(494,76,o),
(583,248,o),
(583,367,qs),
(583,429,o),
(551,553,o),
(520,609,q),
(595,632,l),
(609,709,l),
(479,669,l),
(466,686,o),
(451,700,q),
(331,700,l),
(361,670,o),
(382,639,q),
(301,614,l),
(287,537,l),
(418,577,l),
(447,515,o),
(459,451,q),
(414,503,o),
(323,503,qs),
(241,503,o),
(105,428,o),
(26,297,o),
(26,217,qs),
(26,160,o),
(81,55,o),
(188,-12,o),
(264,-12,qs)
);
},
{
closed = 1;
nodes = (
(225,97,o),
(158,167,o),
(158,224,qs),
(158,264,o),
(196,342,o),
(269,394,o),
(320,394,qs),
(373,394,o),
(440,330,o),
(440,272,qs),
(440,233,o),
(401,151,o),
(328,97,o),
(278,97,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
22 19 14 12 11 5 0 1 9 1 3 0 2 76 20 1 1 74 0 1 1 33 77 0 3 3 0 97 0 0 0 42 77 6 1 4 4 2 97 5 1 2 2 40 2 78 30 30 0 0 30 43 30 42 37 35 0 29 0 28 24 38 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = eth;
unicode = 240;
},
{
glyphname = e;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (350,10);
},
{
name = top;
pos = (322,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(320,-12,o),
(465,74,o),
(504,156,q),
(374,156,l),
(354,127,o),
(295,93,o),
(258,93,qs),
(209,93,o),
(150,150,o),
(150,200,qs),
(150,211,o),
(151,217,q),
(527,217,l),
(542,264,o),
(542,311,qs),
(542,400,o),
(428,508,o),
(331,508,qs),
(243,508,o),
(103,425,o),
(24,284,o),
(24,199,qs),
(24,102,o),
(141,-12,o),
(240,-12,qs)
);
},
{
closed = 1;
nodes = (
(167,297,l),
(185,349,o),
(266,404,o),
(314,404,qs),
(360,404,o),
(416,352,o),
(415,308,qs),
(414,297,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
25 1 6 5 1 76 0 3 1 2 1 3 2 128 0 6 0 1 3 6 1 103 0 5 5 0 97 0 0 0 42 77 0 2 2 4 97 7 1 4 4 40 4 78 0 0 32 31 29 27 0 24 0 23 18 36 20 37 8 8 26
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = e;
unicode = 101;
},
{
glyphname = eacute;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (350,10);
},
{
name = top;
pos = (367,751);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (165,0);
ref = acutecomb;
}
);
width = 556;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ebreve;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (350,10);
},
{
name = top;
pos = (360,712);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (122,0);
ref = uni0306;
}
);
width = 556;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = ecaron;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (350,10);
},
{
name = top;
pos = (362,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (132,0);
ref = uni030C;
}
);
width = 556;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = ecircumflex;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (350,10);
},
{
name = top;
pos = (362,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (132,0);
ref = uni0302;
}
);
width = 556;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (350,10);
},
{
name = top;
pos = (363,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (83,0);
ref = uni0308;
}
);
width = 556;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = edotaccent;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (350,10);
},
{
name = top;
pos = (363,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (194,0);
ref = uni0307;
}
);
width = 556;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = egrave;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (350,10);
},
{
name = top;
pos = (367,751);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (165,0);
ref = gravecomb;
}
);
width = 556;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = emacron;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (350,10);
},
{
name = top;
pos = (348,690);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (83,0);
ref = uni0304;
}
);
width = 556;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = eogonek;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (350,10);
},
{
name = top;
pos = (322,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(167,297,l),
(185,349,o),
(266,404,o),
(314,404,qs),
(360,404,o),
(416,352,o),
(415,308,qs),
(414,297,l)
);
},
{
closed = 1;
nodes = (
(274,-200,o),
(321,-186,q),
(334,-110,l),
(292,-125,o),
(260,-125,qs),
(239,-125,o),
(215,-107,o),
(215,-92,qs),
(215,-71,o),
(250,-36,o),
(294,-16,qs),
(348,9,ls),
(397,29,o),
(479,103,o),
(504,156,q),
(374,156,l),
(354,127,o),
(295,93,o),
(258,93,qs),
(209,93,o),
(150,150,o),
(150,200,qs),
(150,211,o),
(151,217,q),
(527,217,l),
(542,264,o),
(542,311,qs),
(542,400,o),
(428,508,o),
(331,508,qs),
(243,508,o),
(103,425,o),
(24,284,o),
(24,199,qs),
(24,119,o),
(106,12,o),
(178,-5,q),
(144,-30,o),
(115,-84,o),
(115,-116,qs),
(115,-158,o),
(179,-200,o),
(231,-200,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 47 13 2 6 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 5 3 4 3 5 4 128 0 4 6 3 4 6 126 0 1 0 3 5 1 3 103 0 0 0 2 97 0 2 2 42 77 0 6 6 7 98 8 1 7 7 38 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 5 3 4 3 5 4 128 0 4 6 3 4 6 126 0 1 0 3 5 1 3 103 0 6 8 1 7 6 7 102 0 0 0 2 97 0 2 2 42 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
8 8 8 50 8 49 41 18 36 20 44 18 34 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = uni1EBD;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (350,10);
},
{
name = top;
pos = (359,704);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (102,0);
ref = tildecomb;
}
);
width = 556;
}
);
note = uni1EBD;
unicode = 7869;
},
{
glyphname = uni0259;
kernLeft = c;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(313,-12,o),
(453,71,o),
(532,212,o),
(532,297,qs),
(532,394,o),
(415,508,o),
(316,508,qs),
(228,508,o),
(88,413,o),
(52,340,q),
(182,340,l),
(202,369,o),
(261,403,o),
(298,403,qs),
(347,403,o),
(406,346,o),
(406,296,qs),
(406,285,o),
(405,279,q),
(29,279,l),
(14,232,o),
(14,185,qs),
(14,133,o),
(61,43,o),
(156,-12,o),
(225,-12,qs)
);
},
{
closed = 1;
nodes = (
(196,92,o),
(140,144,o),
(141,188,qs),
(142,199,l),
(389,199,l),
(371,147,o),
(290,92,o),
(242,92,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
30 1 6 5 1 76 0 2 1 0 1 2 0 128 0 0 0 5 6 0 5 103 0 1 1 3 97 0 3 3 42 77 8 1 6 6 4 97 7 1 4 4 40 4 78 26 26 0 0 26 33 26 32 29 28 0 25 0 24 34 18 36 21 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = uni0259;
unicode = 601;
},
{
glyphname = f;
kernLeft = f;
kernRight = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,0,l),
(226,389,l),
(315,389,l),
(334,496,l),
(244,496,l),
(251,534,ls),
(257,565,o),
(289,591,o),
(322,591,qs),
(344,591,l),
(364,700,l),
(322,700,ls),
(153,700,o),
(123,534,qs),
(116,496,l),
(59,496,l),
(40,389,l),
(98,389,l),
(29,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 3 3 2 97 0 2 2 33 77 5 1 0 0 1 95 4 1 1 1 36 77 0 6 6 34 6 78 17 17 19 33 34 17 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 315;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (150,-310);
},
{
name = top;
pos = (284,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(295,-232,o),
(438,-133,o),
(438,-41,qs),
(438,21,o),
(351,94,o),
(273,94,qs),
(178,94,ls),
(146,94,o),
(113,115,o),
(113,134,qs),
(113,149,o),
(137,172,o),
(155,175,q),
(191,154,o),
(245,154,qs),
(302,154,o),
(399,199,o),
(459,280,o),
(463,331,qs),
(465,357,o),
(454,400,q),
(529,400,l),
(546,496,l),
(354,496,l),
(318,508,o),
(276,508,qs),
(186,508,o),
(64,411,o),
(57,331,qs),
(55,301,o),
(71,245,o),
(88,223,q),
(51,207,o),
(0,139,o),
(0,98,qs),
(0,75,o),
(20,36,o),
(39,24,q),
(-1,7,o),
(-43,-51,o),
(-43,-92,qs),
(-43,-158,o),
(76,-232,o),
(172,-232,qs)
);
},
{
closed = 1;
nodes = (
(141,-132,o),
(77,-102,o),
(77,-74,qs),
(77,-42,o),
(131,-11,o),
(172,-11,qs),
(244,-11,ls),
(280,-11,o),
(316,-39,o),
(316,-62,qs),
(316,-132,o),
(189,-132,qs)
);
},
{
closed = 1;
nodes = (
(216,254,o),
(174,291,o),
(174,323,qs),
(174,359,o),
(226,408,o),
(266,408,qs),
(302,408,o),
(346,369,o),
(346,338,qs),
(346,301,o),
(294,254,o),
(253,254,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
14 1 9 2 30 11 2 3 9 5 1 6 4 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
12 1 9 0 3 4 9 3 105 8 1 2 2 0 97 1 1 0 0 42 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
12 1 9 0 3 4 9 3 105 8 1 2 2 0 97 0 0 0 42 77 8 1 2 2 1 95 0 1 1 36 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
12 1 9 0 3 4 9 3 105 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
12 1 9 0 3 4 9 3 105 11 1 7 10 1 5 7 5 101 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 77 0 4 4 6 95 0 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
12 1 9 0 3 4 9 3 105 0 4 0 6 7 4 6 103 11 1 7 10 1 5 7 5 101 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
56 56 44 44 0 0 56 67 56 66 62 60 44 55 44 54 50 47 0 43 0 42 38 35 29 27 22 21 20 19 18 16 13 8 22
CALL[ ]	/* CallFunction */";
};
width = 517;
}
);
note = g;
unicode = 103;
},
{
glyphname = gbreve;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (150,-310);
},
{
name = top;
pos = (322,712);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (84,0);
ref = uni0306;
}
);
width = 517;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = uni0123;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (150,-310);
},
{
name = top;
pos = (342,824);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (176,0);
ref = uni0312;
}
);
width = 517;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = gdotaccent;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (150,-310);
},
{
name = top;
pos = (325,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (156,0);
ref = uni0307;
}
);
width = 517;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = h;
kernLeft = b;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(130,0,l),
(175,256,ls),
(187,323,o),
(269,400,o),
(323,400,qs),
(412,400,o),
(412,311,qs),
(412,289,o),
(408,268,qs),
(360,0,l),
(488,0,l),
(538,280,ls),
(544,315,o),
(544,345,qs),
(544,425,o),
(462,508,o),
(384,508,qs),
(329,508,o),
(236,461,o),
(204,420,q),
(253,700,l),
(125,700,l),
(2,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 1 3 1 1 76 0 0 0 33 77 0 3 3 1 97 0 1 1 42 77 4 1 2 2 34 2 78 19 36 21 35 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = h;
unicode = 104;
},
{
glyphname = hbar;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,0,l),
(186,256,ls),
(198,323,o),
(280,400,o),
(334,400,qs),
(423,400,o),
(423,311,qs),
(423,289,o),
(419,268,qs),
(371,0,l),
(499,0,l),
(549,280,ls),
(555,315,o),
(555,345,qs),
(555,425,o),
(473,508,o),
(395,508,qs),
(340,508,o),
(247,461,o),
(215,420,q),
(239,558,l),
(398,558,l),
(414,648,l),
(255,648,l),
(264,700,l),
(136,700,l),
(127,648,l),
(81,648,l),
(65,558,l),
(111,558,l),
(13,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
10 1 7 5 1 76 3 1 1 4 1 0 5 1 0 104 0 2 2 33 77 0 7 7 5 97 0 5 5 42 77 8 1 6 6 34 6 78 19 36 21 35 17 17 17 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = i;
kernLeft = i;
layers = (
{
anchors = (
{
name = bottom;
pos = (71,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,0,l),
(222,496,l),
(94,496,l),
(7,0,l)
);
},
{
closed = 1;
nodes = (
(218,566,o),
(265,613,o),
(265,646,qs),
(265,680,o),
(218,726,o),
(185,726,qs),
(152,726,o),
(105,680,o),
(105,646,qs),
(105,613,o),
(152,566,o),
(185,566,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 3 3 2 97 0 2 2 41 77 0 0 0 36 77 0 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 3 3 2 97 0 2 2 39 77 0 0 0 36 77 0 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 2 4 1 3 0 2 3 105 0 0 0 36 77 0 1 1 34 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 230;
}
);
note = i;
unicode = 105;
},
{
glyphname = dotlessi;
kernLeft = dotlessi;
layers = (
{
anchors = (
{
name = bottom;
pos = (66,0);
},
{
name = ogonek;
pos = (130,0);
},
{
name = top;
pos = (152,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(130,0,l),
(217,496,l),
(89,496,l),
(2,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 36 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 219;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = iacute;
kernLeft = iacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (66,0);
},
{
name = ogonek;
pos = (130,0);
},
{
name = top;
pos = (197,751);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-5,0);
ref = acutecomb;
}
);
width = 219;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = ibreve;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (66,0);
},
{
name = ogonek;
pos = (130,0);
},
{
name = top;
pos = (190,712);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-48,0);
ref = uni0306;
}
);
width = 219;
}
);
note = ibreve;
unicode = 301;
},
{
glyphname = icircumflex;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (66,0);
},
{
name = ogonek;
pos = (130,0);
},
{
name = top;
pos = (192,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-38,0);
ref = uni0302;
}
);
width = 219;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (66,0);
},
{
name = ogonek;
pos = (130,0);
},
{
name = top;
pos = (193,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-108,0);
ref = uni0308.narrow;
}
);
width = 219;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = i.loclTRK;
layers = (
{
anchors = (
{
name = bottom;
pos = (66,0);
},
{
name = ogonek;
pos = (130,0);
},
{
name = top;
pos = (193,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (24,0);
ref = uni0307;
}
);
width = 219;
}
);
note = i.loclTRK;
},
{
glyphname = igrave;
kernLeft = igrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (66,0);
},
{
name = ogonek;
pos = (130,0);
},
{
name = top;
pos = (197,751);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-5,0);
ref = gravecomb;
}
);
width = 219;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = imacron;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (66,0);
},
{
name = ogonek;
pos = (130,0);
},
{
name = top;
pos = (178,690);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-87,0);
ref = uni0304;
}
);
width = 219;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = iogonek;
kernLeft = dotlessi;
layers = (
{
anchors = (
{
name = bottom;
pos = (66,0);
},
{
name = ogonek;
pos = (130,0);
},
{
name = top;
pos = (193,726);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(213,560,o),
(261,608,o),
(261,643,qs),
(261,678,o),
(213,726,o),
(178,726,qs),
(143,726,o),
(95,678,o),
(95,643,qs),
(95,608,o),
(143,560,o),
(178,560,qs)
);
},
{
closed = 1;
nodes = (
(54,-210,o),
(101,-196,q),
(114,-120,l),
(72,-135,o),
(40,-135,qs),
(19,-135,o),
(-5,-117,o),
(-5,-102,qs),
(-5,-81,o),
(30,-46,o),
(74,-26,qs),
(130,0,l),
(217,496,l),
(89,496,l),
(4,14,l),
(-55,-18,o),
(-105,-85,o),
(-105,-126,qs),
(-105,-168,o),
(-41,-210,o),
(11,-210,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
29 1 3 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
5 1 1 1 0 97 0 0 0 41 77 0 2 2 36 77 0 3 3 4 97 6 1 4 4 38 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
5 1 1 1 0 97 0 0 0 39 77 0 2 2 36 77 0 3 3 4 97 6 1 4 4 38 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 0 5 1 1 2 0 1 105 0 2 2 36 77 0 3 3 4 97 6 1 4 4 38 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 5 1 1 2 0 1 105 0 3 6 1 4 3 4 101 0 2 2 36 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
12 12 0 0 12 32 12 31 28 26 19 18 0 11 0 10 36 7 8 23
CALL[ ]	/* CallFunction */";
};
width = 219;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = itilde;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (66,0);
},
{
name = ogonek;
pos = (130,0);
},
{
name = top;
pos = (189,704);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-68,0);
ref = tildecomb;
}
);
width = 219;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = ij;
layers = (
{
anchors = (
{
name = bottom;
pos = (71,0);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = i;
},
{
alignment = -1;
pos = (230,0);
ref = j;
}
);
width = 458;
}
);
note = ij;
unicode = 307;
},
{
glyphname = j;
kernLeft = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-80,-220,ls),
(91,-220,o),
(120,-54,qs),
(216,496,l),
(88,496,l),
(-8,-54,ls),
(-14,-85,o),
(-47,-111,o),
(-80,-111,qs),
(-119,-111,l),
(-138,-220,l)
);
},
{
closed = 1;
nodes = (
(212,566,o),
(259,613,o),
(259,646,qs),
(259,679,o),
(212,726,o),
(179,726,qs),
(146,726,o),
(99,679,o),
(99,646,qs),
(99,613,o),
(146,566,o),
(179,566,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
5 1 4 4 3 97 0 3 3 41 77 0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
5 1 4 4 3 97 0 3 3 39 77 0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 5 1 4 1 3 4 105 0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
11 11 11 22 11 21 37 34 19 32 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 228;
}
);
note = j;
unicode = 106;
},
{
glyphname = uni0237;
layers = (
{
anchors = (
{
name = bottom;
pos = (16,-310);
},
{
name = top;
pos = (158,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-80,-220,ls),
(91,-220,o),
(120,-54,qs),
(216,496,l),
(88,496,l),
(-8,-54,ls),
(-14,-85,o),
(-47,-111,o),
(-80,-111,qs),
(-119,-111,l),
(-138,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78 34 19 32 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 228;
}
);
note = uni0237;
unicode = 567;
},
{
glyphname = uni006A0301;
kernLeft = uni006A0301;
layers = (
{
anchors = (
{
name = bottom;
pos = (16,-310);
},
{
name = top;
pos = (203,751);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni0237;
},
{
alignment = -1;
pos = (1,0);
ref = acutecomb;
}
);
width = 228;
}
);
note = uni006A0301;
},
{
glyphname = k;
kernLeft = b;
kernRight = k;
layers = (
{
anchors = (
{
name = bottom;
pos = (209,0);
},
{
name = top;
pos = (384,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,0,l),
(166,211,l),
(305,0,l),
(462,0,l),
(285,247,l),
(544,496,l),
(382,496,l),
(180,286,l),
(252,700,l),
(125,700,l),
(1,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
8 5 2 3 2 1 1 76 0 0 0 33 77 0 1 1 36 77 3 1 2 2 34 2 78 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 506;
}
);
note = k;
unicode = 107;
},
{
glyphname = uni0137;
kernRight = k;
layers = (
{
anchors = (
{
name = bottom;
pos = (161,-274);
},
{
name = top;
pos = (384,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = k;
},
{
alignment = -1;
pos = (191,0);
ref = uni0326;
}
);
width = 506;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = l;
kernLeft = b;
kernRight = l;
layers = (
{
anchors = (
{
name = bottom;
pos = (66,0);
},
{
name = top;
pos = (190,700);
},
{
name = topright;
pos = (341,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,0,l),
(253,700,l),
(125,700,l),
(1,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 220;
}
);
note = l;
unicode = 108;
},
{
glyphname = lacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (66,0);
},
{
name = top;
pos = (235,952);
},
{
name = topright;
pos = (341,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (-3,0);
ref = acutecomb.case;
}
);
width = 220;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = lcaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (66,0);
},
{
name = top;
pos = (190,700);
},
{
name = topright;
pos = (341,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (209,0);
ref = uni030C.alt;
}
);
width = 220;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = uni013C;
layers = (
{
anchors = (
{
name = bottom;
pos = (18,-274);
},
{
name = top;
pos = (190,700);
},
{
name = topright;
pos = (341,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (48,0);
ref = uni0326;
}
);
width = 220;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(127,0,l),
(251,700,l),
(123,700,l),
(-1,0,l)
);
},
{
closed = 1;
nodes = (
(325,304,o),
(361,339,o),
(361,365,qs),
(361,391,o),
(325,428,o),
(299,428,qs),
(272,428,o),
(237,392,o),
(237,365,qs),
(237,339,o),
(272,304,o),
(299,304,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 4 1 3 1 2 3 105 0 0 0 33 77 0 1 1 34 1 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 351;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = lslash;
kernLeft = lslash;
kernRight = lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(146,0,l),
(208,349,l),
(282,373,l),
(304,495,l),
(230,471,l),
(270,700,l),
(142,700,l),
(94,426,l),
(20,402,l),
(-2,280,l),
(72,304,l),
(18,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
7 6 1 3 1 0 1 76 0 0 0 33 77 0 1 1 34 1 78 21 20 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = m;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(130,0,l),
(175,256,ls),
(187,323,o),
(261,400,o),
(310,400,qs),
(350,400,o),
(392,354,o),
(392,310,qs),
(392,288,o),
(388,268,qs),
(341,0,l),
(468,0,l),
(516,271,ls),
(527,332,o),
(600,400,o),
(647,400,qs),
(687,400,o),
(730,353,o),
(730,308,qs),
(730,296,o),
(726,268,qs),
(679,0,l),
(807,0,l),
(857,280,ls),
(863,313,o),
(863,341,qs),
(863,422,o),
(773,508,o),
(692,508,qs),
(640,508,o),
(546,460,o),
(512,417,q),
(494,462,o),
(416,508,o),
(361,508,qs),
(264,508,o),
(201,426,q),
(202,496,l),
(89,496,l),
(2,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 2 2 4 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
6 1 4 4 0 97 2 1 2 0 0 36 77 7 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 0 36 77 6 1 4 4 1 97 2 1 1 1 42 77 7 5 2 3 3 34 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
19 37 19 37 21 36 34 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 888;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = top;
pos = (329,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(130,0,l),
(176,260,ls),
(187,324,o),
(269,400,o),
(323,400,qs),
(412,400,o),
(412,310,qs),
(412,288,o),
(408,268,qs),
(360,0,l),
(488,0,l),
(538,280,ls),
(544,315,o),
(544,343,qs),
(544,423,o),
(460,508,o),
(382,508,qs),
(326,508,o),
(231,458,o),
(199,414,q),
(202,496,l),
(89,496,l),
(2,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 3 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 3 3 0 97 1 1 0 0 36 77 4 1 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 36 77 0 3 3 1 97 0 1 1 42 77 4 1 2 2 34 2 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
19 36 21 35 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = n;
unicode = 110;
},
{
glyphname = nacute;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = top;
pos = (374,751);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (172,0);
ref = acutecomb;
}
);
width = 569;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = ncaron;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = top;
pos = (369,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (139,0);
ref = uni030C;
}
);
width = 569;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = uni0146;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (193,-274);
},
{
name = top;
pos = (329,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (223,0);
ref = uni0326;
}
);
width = 569;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = ntilde;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = top;
pos = (366,704);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (109,0);
ref = tildecomb;
}
);
width = 569;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = eng;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = top;
pos = (329,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(130,0,l),
(176,260,ls),
(187,324,o),
(269,400,o),
(323,400,qs),
(412,400,o),
(412,310,qs),
(412,288,o),
(408,268,qs),
(350,-54,ls),
(344,-85,o),
(312,-111,o),
(280,-111,qs),
(252,-111,l),
(233,-220,l),
(280,-220,ls),
(359,-220,o),
(462,-143,o),
(478,-54,qs),
(538,280,ls),
(544,315,o),
(544,343,qs),
(544,423,o),
(460,508,o),
(382,508,qs),
(326,508,o),
(231,458,o),
(199,414,q),
(202,496,l),
(89,496,l),
(2,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 4 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 4 4 0 97 1 1 0 0 36 77 0 5 5 34 77 0 3 3 2 97 0 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 0 0 36 77 0 4 4 1 97 0 1 1 42 77 0 5 5 34 77 0 3 3 2 97 0 2 2 38 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
19 38 33 39 35 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = eng;
unicode = 331;
},
{
glyphname = o;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (244,0);
},
{
name = ogonek;
pos = (362,10);
},
{
name = top;
pos = (332,496);
},
{
name = topright;
pos = (605,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(330,-12,o),
(469,68,o),
(550,206,o),
(550,289,qs),
(550,344,o),
(502,444,o),
(401,508,o),
(326,508,qs),
(242,508,o),
(104,429,o),
(25,292,o),
(25,209,qs),
(25,148,o),
(80,47,o),
(181,-12,o),
(246,-12,qs)
);
},
{
closed = 1;
nodes = (
(216,99,o),
(152,167,o),
(152,220,qs),
(152,267,o),
(191,348,o),
(262,397,o),
(308,397,qs),
(360,397,o),
(423,326,o),
(423,272,qs),
(423,225,o),
(384,146,o),
(313,99,o),
(268,99,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 42 77 5 1 3 3 1 97 4 1 1 1 40 1 78 16 16 0 0 16 29 16 28 23 21 0 15 0 14 38 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
note = o;
unicode = 111;
},
{
glyphname = oacute;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (244,0);
},
{
name = ogonek;
pos = (362,10);
},
{
name = top;
pos = (377,751);
},
{
name = topright;
pos = (605,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (175,0);
ref = acutecomb;
}
);
width = 575;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = obreve;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (244,0);
},
{
name = ogonek;
pos = (362,10);
},
{
name = top;
pos = (370,712);
},
{
name = topright;
pos = (605,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (132,0);
ref = uni0306;
}
);
width = 575;
}
);
note = obreve;
unicode = 335;
},
{
glyphname = ocircumflex;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (244,0);
},
{
name = ogonek;
pos = (362,10);
},
{
name = top;
pos = (372,726);
},
{
name = topright;
pos = (605,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (142,0);
ref = uni0302;
}
);
width = 575;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = odieresis;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (244,0);
},
{
name = ogonek;
pos = (362,10);
},
{
name = top;
pos = (373,726);
},
{
name = topright;
pos = (605,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (93,0);
ref = uni0308;
}
);
width = 575;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = ograve;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (244,0);
},
{
name = ogonek;
pos = (362,10);
},
{
name = top;
pos = (377,751);
},
{
name = topright;
pos = (605,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (175,0);
ref = gravecomb;
}
);
width = 575;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = ohungarumlaut;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (244,0);
},
{
name = ogonek;
pos = (362,10);
},
{
name = top;
pos = (372,723);
},
{
name = topright;
pos = (605,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (140,0);
ref = uni030B;
}
);
width = 575;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = omacron;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (244,0);
},
{
name = ogonek;
pos = (362,10);
},
{
name = top;
pos = (358,690);
},
{
name = topright;
pos = (605,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (93,0);
ref = uni0304;
}
);
width = 575;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(316,-12,o),
(455,68,o),
(536,206,o),
(536,289,qs),
(536,322,o),
(517,388,o),
(499,416,q),
(582,496,l),
(481,496,l),
(451,467,l),
(394,508,o),
(312,508,qs),
(228,508,o),
(90,429,o),
(11,292,o),
(11,209,qs),
(11,135,o),
(49,80,q),
(-34,0,l),
(67,0,l),
(98,29,l),
(153,-12,o),
(232,-12,qs)
);
},
{
closed = 1;
nodes = (
(218,99,o),
(189,117,q),
(401,322,l),
(409,298,o),
(409,272,qs),
(409,225,o),
(370,146,o),
(299,99,o),
(254,99,qs)
);
},
{
closed = 1;
nodes = (
(146,173,l),
(138,195,o),
(138,220,qs),
(138,267,o),
(177,348,o),
(248,397,o),
(294,397,qs),
(331,397,o),
(359,378,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
15 12 2 5 1 40 39 29 28 4 4 5 4 1 2 0 4 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
15 12 2 5 2 40 39 29 28 4 4 5 4 1 2 0 4 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 42 77 7 1 4 4 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 36 77 0 5 5 1 97 0 1 1 42 77 0 0 0 34 77 7 1 4 4 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
23 23 0 0 34 32 23 31 23 30 0 22 0 21 18 38 18 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 548;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = otilde;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (244,0);
},
{
name = ogonek;
pos = (362,10);
},
{
name = top;
pos = (369,704);
},
{
name = topright;
pos = (605,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (112,0);
ref = tildecomb;
}
);
width = 575;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = oe;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (436,0);
},
{
name = top;
pos = (524,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(307,-12,o),
(415,31,o),
(457,70,q),
(484,31,o),
(576,-12,o),
(635,-12,qs),
(715,-12,o),
(860,74,o),
(899,156,q),
(769,156,l),
(749,127,o),
(690,93,o),
(653,93,qs),
(604,93,o),
(545,150,o),
(545,200,qs),
(545,211,o),
(546,217,q),
(922,217,l),
(937,264,o),
(937,311,qs),
(937,400,o),
(823,508,o),
(726,508,qs),
(661,508,o),
(551,463,o),
(509,422,q),
(481,462,o),
(389,508,o),
(326,508,qs),
(242,508,o),
(104,429,o),
(25,292,o),
(25,209,qs),
(25,148,o),
(80,47,o),
(181,-12,o),
(246,-12,qs)
);
},
{
closed = 1;
nodes = (
(216,99,o),
(152,167,o),
(152,220,qs),
(152,267,o),
(191,348,o),
(262,397,o),
(308,397,qs),
(360,397,o),
(423,326,o),
(423,272,qs),
(423,225,o),
(384,146,o),
(313,99,o),
(268,99,qs)
);
},
{
closed = 1;
nodes = (
(562,297,l),
(580,349,o),
(661,404,o),
(709,404,qs),
(755,404,o),
(811,352,o),
(810,308,qs),
(809,297,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
10 1 7 0 52 1 10 7 34 1 5 3 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
10 1 9 0 52 1 10 7 34 1 5 3 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 4 2 3 2 4 3 128 0 10 0 2 4 10 2 103 9 1 7 7 0 97 1 1 0 0 42 77 12 8 2 3 3 5 97 11 6 2 5 5 40 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 4 2 3 2 4 3 128 0 10 0 2 4 10 2 103 0 9 9 0 97 1 1 0 0 42 77 0 7 7 0 97 1 1 0 0 42 77 12 8 2 3 3 5 97 11 6 2 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
0 4 2 8 2 4 8 128 0 10 0 2 4 10 2 103 0 9 9 0 97 1 1 0 0 42 77 0 7 7 0 97 1 1 0 0 42 77 12 1 8 8 5 97 11 6 2 5 5 40 77 0 3 3 5 97 11 6 2 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
38 38 0 0 59 58 56 54 38 51 38 50 45 43 0 37 0 36 34 18 36 20 36 38 13 8 28
CALL[ ]	/* CallFunction */";
};
width = 951;
}
);
note = oe;
unicode = 339;
},
{
glyphname = p;
kernLeft = p;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,-220,l),
(142,68,l),
(161,33,o),
(242,-12,o),
(294,-12,qs),
(375,-12,o),
(506,70,o),
(581,210,o),
(581,294,qs),
(581,351,o),
(534,449,o),
(443,508,o),
(379,508,qs),
(273,508,o),
(205,425,q),
(204,496,l),
(89,496,l),
(-36,-220,l)
);
},
{
closed = 1;
nodes = (
(235,100,o),
(168,168,o),
(168,220,qs),
(168,264,o),
(205,345,o),
(279,396,o),
(330,396,qs),
(384,396,o),
(449,326,o),
(449,272,qs),
(449,225,o),
(408,146,o),
(335,100,o),
(288,100,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
2 1 4 0 15 1 2 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 0 97 1 1 0 0 36 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 0 36 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
18 18 18 31 18 30 38 19 38 34 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = p;
unicode = 112;
},
{
glyphname = thorn;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,-220,l),
(142,68,l),
(161,33,o),
(242,-12,o),
(294,-12,qs),
(375,-12,o),
(506,70,o),
(581,210,o),
(581,294,qs),
(581,351,o),
(534,449,o),
(443,508,o),
(379,508,qs),
(277,508,o),
(206,433,q),
(253,700,l),
(125,700,l),
(-36,-220,l)
);
},
{
closed = 1;
nodes = (
(235,100,o),
(168,168,o),
(168,220,qs),
(168,264,o),
(205,345,o),
(279,396,o),
(330,396,qs),
(384,396,o),
(449,326,o),
(449,272,qs),
(449,225,o),
(408,146,o),
(335,100,o),
(288,100,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
2 1 4 1 15 1 2 5 2 76 0 0 0 33 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 2 98 0 2 2 40 77 0 3 3 38 3 78 18 18 18 31 18 30 38 19 38 34 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = q;
kernLeft = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(349,-220,l),
(477,-220,l),
(602,496,l),
(488,496,l),
(462,428,l),
(419,508,o),
(305,508,qs),
(233,508,o),
(104,434,o),
(25,297,o),
(25,208,qs),
(25,152,o),
(67,52,o),
(157,-12,o),
(223,-12,qs),
(328,-12,o),
(398,71,q)
);
},
{
closed = 1;
nodes = (
(219,100,o),
(157,170,o),
(157,223,qs),
(157,263,o),
(193,343,o),
(266,396,o),
(319,396,qs),
(372,396,o),
(435,332,o),
(435,280,qs),
(435,237,o),
(397,154,o),
(323,100,o),
(272,100,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
11 1 4 1 16 1 0 5 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
11 1 4 2 16 1 0 5 2 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 1 97 2 1 1 1 42 77 6 1 5 5 0 97 0 0 0 40 77 0 3 3 38 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 2 36 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 0 97 0 0 0 40 77 0 3 3 38 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
17 17 17 30 17 29 39 17 18 38 32 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = q;
unicode = 113;
},
{
glyphname = r;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (74,0);
},
{
name = top;
pos = (226,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(130,0,l),
(172,235,ls),
(185,309,o),
(273,373,o),
(342,373,qs),
(377,373,l),
(401,508,l),
(340,508,o),
(237,453,o),
(200,406,q),
(204,496,l),
(89,496,l),
(2,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 2 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 2 2 0 97 1 1 0 0 36 77 0 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 36 77 0 2 2 1 97 0 1 1 42 77 0 3 3 34 3 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 33 19 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 363;
}
);
note = r;
unicode = 114;
},
{
glyphname = racute;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (74,0);
},
{
name = top;
pos = (271,751);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (69,0);
ref = acutecomb;
}
);
width = 363;
}
);
note = racute;
unicode = 341;
},
{
glyphname = rcaron;
kernLeft = rcaron;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (74,0);
},
{
name = top;
pos = (266,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (36,0);
ref = uni030C;
}
);
width = 363;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = uni0157;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (26,-274);
},
{
name = top;
pos = (226,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (56,0);
ref = uni0326;
}
);
width = 363;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = s;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (205,0);
},
{
name = top;
pos = (293,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,-12,o),
(390,33,o),
(450,114,o),
(450,166,qs),
(450,222,o),
(364,282,o),
(283,301,qs),
(234,312,o),
(187,336,o),
(187,356,qs),
(187,379,o),
(232,410,o),
(268,410,qs),
(303,410,o),
(346,378,o),
(347,352,q),
(470,352,l),
(472,424,o),
(370,508,o),
(282,508,qs),
(218,508,o),
(117,465,o),
(60,390,o),
(60,342,qs),
(60,269,o),
(150,233,qs),
(182,219,o),
(230,207,qs),
(276,196,o),
(319,173,o),
(319,150,qs),
(319,122,o),
(271,86,o),
(230,86,qs),
(183,86,o),
(134,129,o),
(135,165,q),
(7,165,l),
(3,114,o),
(51,33,o),
(148,-12,o),
(214,-12,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 3 4 0 4 3 114 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 42 77 0 1 1 5 97 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 42 77 0 1 1 5 97 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 41 0 40 34 18 44 34 19 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 493;
}
);
note = s;
unicode = 115;
},
{
glyphname = sacute;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (205,0);
},
{
name = top;
pos = (338,751);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (136,0);
ref = acutecomb;
}
);
width = 493;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = scaron;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (205,0);
},
{
name = top;
pos = (333,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (103,0);
ref = uni030C;
}
);
width = 493;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = scedilla;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (158,-263);
},
{
name = top;
pos = (293,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(195,-263,ls),
(256,-263,o),
(346,-195,o),
(346,-134,qs),
(346,-92,o),
(282,-48,o),
(233,-50,q),
(240,-11,l),
(302,-7,o),
(398,40,o),
(450,118,o),
(450,166,qs),
(450,222,o),
(364,282,o),
(283,301,qs),
(234,312,o),
(187,336,o),
(187,356,qs),
(187,379,o),
(232,410,o),
(268,410,qs),
(303,410,o),
(346,378,o),
(347,352,q),
(470,352,l),
(472,424,o),
(370,508,o),
(282,508,qs),
(218,508,o),
(117,465,o),
(60,390,o),
(60,342,qs),
(60,269,o),
(150,233,qs),
(182,219,o),
(230,207,qs),
(276,196,o),
(319,173,o),
(319,150,qs),
(319,122,o),
(271,86,o),
(230,86,qs),
(183,86,o),
(134,129,o),
(135,165,q),
(7,165,l),
(2,99,o),
(85,5,o),
(161,-8,q),
(141,-118,l),
(202,-118,ls),
(250,-118,o),
(250,-147,qs),
(249,-168,o),
(215,-189,o),
(189,-189,qs),
(77,-189,l),
(64,-263,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 7 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 5 6 2 6 5 114 0 2 3 6 2 3 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 100 0 6 6 4 97 0 4 4 42 77 0 3 3 7 97 0 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 100 0 6 6 4 97 0 4 4 42 77 0 3 3 7 97 0 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
57 55 17 27 34 18 44 34 20 35 32 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 493;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = uni0219;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (157,-274);
},
{
name = top;
pos = (293,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (187,0);
ref = uni0326;
}
);
width = 493;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = germandbls;
kernRight = germandbls;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(477,-10,o),
(582,39,o),
(639,126,o),
(639,180,qs),
(639,233,o),
(586,298,o),
(525,321,qs),
(472,341,o),
(433,365,o),
(433,382,qs),
(433,399,o),
(461,424,o),
(492,445,qs),
(522,463,o),
(537,475,qs),
(593,518,o),
(593,580,qs),
(593,622,o),
(541,692,o),
(445,732,o),
(381,732,qs),
(255,732,o),
(107,607,o),
(89,509,qs),
(-1,0,l),
(127,0,l),
(215,499,ls),
(239,625,o),
(363,625,qs),
(410,625,o),
(461,590,o),
(461,559,qs),
(461,531,o),
(422,491,o),
(381,464,qs),
(357,447,ls),
(330,428,o),
(301,384,o),
(301,355,qs),
(301,316,o),
(362,264,o),
(432,238,qs),
(476,222,o),
(511,189,o),
(511,165,qs),
(511,128,o),
(461,85,o),
(420,85,qs),
(379,85,o),
(337,133,o),
(340,175,q),
(219,175,l),
(213,90,o),
(314,-10,o),
(409,-10,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 0 2 1 1 0 114 0 2 2 4 97 0 4 4 41 77 0 1 1 3 98 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 1 1 3 98 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 3 3 34 77 0 1 1 5 98 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 2 1 2 0 1 128 0 4 0 2 0 4 2 105 0 3 3 34 77 0 1 1 5 98 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 54 0 53 34 32 29 28 26 24 34 18 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = t;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (179,0);
},
{
name = top;
pos = (230,496);
},
{
name = topright;
pos = (383,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(302,0,l),
(322,109,l),
(254,109,ls),
(223,109,o),
(196,129,o),
(196,153,qs),
(196,159,o),
(198,173,qs),
(237,389,l),
(370,389,l),
(390,496,l),
(255,496,l),
(277,617,l),
(148,617,l),
(127,496,l),
(47,496,l),
(28,389,l),
(108,389,l),
(70,174,ls),
(65,144,o),
(65,125,qs),
(65,59,o),
(142,0,o),
(214,0,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 1 1 2 112 4 1 0 0 1 95 3 1 1 1 36 77 0 5 5 6 95 7 1 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 1 2 133 4 1 0 0 1 95 3 1 1 1 36 77 0 5 5 6 95 7 1 6 6 34 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 0 23 0 22 37 17 17 17 17 21 8 8 28
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = t;
unicode = 116;
},
{
glyphname = tcaron;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (179,0);
},
{
name = top;
pos = (230,496);
},
{
name = topright;
pos = (383,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (251,0);
ref = uni030C.alt;
}
);
width = 372;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = uni0163;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (132,-263);
},
{
name = top;
pos = (230,496);
},
{
name = topright;
pos = (383,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,-263,ls),
(230,-263,o),
(320,-195,o),
(320,-134,qs),
(320,-92,o),
(256,-48,o),
(207,-50,q),
(216,0,l),
(302,0,l),
(322,109,l),
(254,109,ls),
(223,109,o),
(196,129,o),
(196,153,qs),
(196,159,o),
(198,173,qs),
(237,389,l),
(370,389,l),
(390,496,l),
(255,496,l),
(277,617,l),
(148,617,l),
(127,496,l),
(47,496,l),
(28,389,l),
(108,389,l),
(70,174,ls),
(65,144,o),
(65,125,qs),
(65,36,o),
(138,11,q),
(115,-118,l),
(176,-118,ls),
(224,-118,o),
(224,-147,qs),
(223,-168,o),
(189,-189,o),
(163,-189,qs),
(51,-189,l),
(38,-263,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 8 7 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 4 3 3 4 112 0 9 0 1 0 9 1 105 0 0 0 10 0 10 99 6 1 2 2 3 95 5 1 3 3 36 77 0 7 7 8 95 0 8 8 34 8 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 4 3 4 133 0 9 0 1 0 9 1 105 0 0 0 10 0 10 99 6 1 2 2 3 95 5 1 3 3 36 77 0 7 7 8 95 0 8 8 34 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
39 37 33 32 17 37 17 17 17 17 22 35 32 11 8 31
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = uni021B;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (131,-274);
},
{
name = top;
pos = (230,496);
},
{
name = topright;
pos = (383,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (161,0);
ref = uni0326;
}
);
width = 372;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = u;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (480,0);
},
{
name = top;
pos = (329,496);
},
{
name = topright;
pos = (603,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(243,-12,o),
(338,38,o),
(370,82,q),
(367,0,l),
(480,0,l),
(567,496,l),
(439,496,l),
(393,236,ls),
(382,172,o),
(300,96,o),
(246,96,qs),
(157,96,o),
(157,186,qs),
(157,208,o),
(161,228,qs),
(209,496,l),
(81,496,l),
(31,216,ls),
(25,182,o),
(25,153,qs),
(25,73,o),
(109,-12,o),
(187,-12,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
19 1 3 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
2 1 0 0 36 77 0 1 1 3 98 5 4 2 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 36 77 0 3 3 34 77 0 1 1 4 98 5 1 4 4 40 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 22 0 21 17 19 36 21 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = u;
unicode = 117;
},
{
glyphname = uacute;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (480,0);
},
{
name = top;
pos = (374,751);
},
{
name = topright;
pos = (603,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (172,0);
ref = acutecomb;
}
);
width = 569;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ubreve;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (480,0);
},
{
name = top;
pos = (367,712);
},
{
name = topright;
pos = (603,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (129,0);
ref = uni0306;
}
);
width = 569;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = ucircumflex;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (480,0);
},
{
name = top;
pos = (369,726);
},
{
name = topright;
pos = (603,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (139,0);
ref = uni0302;
}
);
width = 569;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (480,0);
},
{
name = top;
pos = (370,726);
},
{
name = topright;
pos = (603,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (90,0);
ref = uni0308;
}
);
width = 569;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = ugrave;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (480,0);
},
{
name = top;
pos = (374,751);
},
{
name = topright;
pos = (603,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (172,0);
ref = gravecomb;
}
);
width = 569;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uhungarumlaut;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (480,0);
},
{
name = top;
pos = (369,723);
},
{
name = topright;
pos = (603,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (137,0);
ref = uni030B;
}
);
width = 569;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = umacron;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (480,0);
},
{
name = top;
pos = (355,690);
},
{
name = topright;
pos = (603,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (90,0);
ref = uni0304;
}
);
width = 569;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = uogonek;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (480,0);
},
{
name = top;
pos = (329,496);
},
{
name = topright;
pos = (603,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(243,-12,o),
(338,38,o),
(370,82,q),
(368,20,l),
(301,-12,o),
(245,-84,o),
(245,-126,qs),
(245,-168,o),
(309,-210,o),
(361,-210,qs),
(404,-210,o),
(451,-196,q),
(464,-120,l),
(422,-135,o),
(390,-135,qs),
(369,-135,o),
(345,-117,o),
(345,-102,qs),
(345,-81,o),
(380,-46,o),
(424,-26,qs),
(480,0,l),
(567,496,l),
(439,496,l),
(393,236,ls),
(382,172,o),
(300,96,o),
(246,96,qs),
(157,96,o),
(157,186,qs),
(157,208,o),
(161,228,qs),
(209,496,l),
(81,496,l),
(31,216,ls),
(25,182,o),
(25,153,qs),
(25,73,o),
(109,-12,o),
(187,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
36 35 2 5 1 26 1 3 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
2 1 0 0 36 77 0 1 1 5 98 6 1 5 5 40 77 0 3 3 4 97 0 4 4 38 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 0 4 3 4 101 2 1 0 0 36 77 0 1 1 5 98 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 39 0 38 35 39 19 36 21 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = uring;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (480,0);
},
{
name = top;
pos = (377,769);
},
{
name = topright;
pos = (603,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (169,0);
ref = uni030A;
}
);
width = 569;
}
);
note = uring;
unicode = 367;
},
{
glyphname = utilde;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = ogonek;
pos = (480,0);
},
{
name = top;
pos = (366,704);
},
{
name = topright;
pos = (603,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (109,0);
ref = tildecomb;
}
);
width = 569;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = v;
kernLeft = v;
kernRight = v;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(296,0,l),
(570,496,l),
(434,496,l),
(239,120,l),
(175,496,l),
(42,496,l),
(139,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 2 0 1 76 1 1 0 0 36 77 0 2 2 34 2 78 17 18 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 523;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (338,0);
},
{
name = top;
pos = (426,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(233,0,l),
(404,371,l),
(445,0,l),
(578,0,l),
(810,496,l),
(684,496,l),
(534,138,l),
(497,496,l),
(355,496,l),
(192,139,l),
(168,496,l),
(42,496,l),
(100,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
10 5 2 3 3 0 1 76 2 1 2 0 0 36 77 4 1 3 3 34 3 78 18 17 18 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 764;
}
);
note = w;
unicode = 119;
},
{
glyphname = wacute;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (338,0);
},
{
name = top;
pos = (471,751);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (269,0);
ref = acutecomb;
}
);
width = 764;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = wcircumflex;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (338,0);
},
{
name = top;
pos = (466,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (236,0);
ref = uni0302;
}
);
width = 764;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = wdieresis;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (338,0);
},
{
name = top;
pos = (467,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (187,0);
ref = uni0308;
}
);
width = 764;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = wgrave;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (338,0);
},
{
name = top;
pos = (471,751);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (269,0);
ref = gravecomb;
}
);
width = 764;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = x;
kernLeft = x;
kernRight = x;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,0,l),
(215,154,l),
(292,0,l),
(436,0,l),
(313,249,l),
(521,496,l),
(383,496,l),
(263,343,l),
(188,496,l),
(43,496,l),
(166,249,l),
(-42,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 36 77 3 1 2 2 34 2 78 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 478;
}
);
note = x;
unicode = 120;
},
{
glyphname = y;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (232,0);
},
{
name = top;
pos = (320,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,-220,l),
(600,496,l),
(464,496,l),
(258,147,l),
(178,496,l),
(41,496,l),
(165,6,l),
(23,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
3 1 2 0 1 76 1 1 0 0 36 77 0 2 2 38 2 78 17 18 17 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = y;
unicode = 121;
},
{
glyphname = yacute;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (232,0);
},
{
name = top;
pos = (365,751);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (163,0);
ref = acutecomb;
}
);
width = 552;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = ycircumflex;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (232,0);
},
{
name = top;
pos = (360,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (130,0);
ref = uni0302;
}
);
width = 552;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = ydieresis;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (232,0);
},
{
name = top;
pos = (361,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (81,0);
ref = uni0308;
}
);
width = 552;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = ygrave;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (232,0);
},
{
name = top;
pos = (365,751);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (163,0);
ref = gravecomb;
}
);
width = 552;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = uni1EF9;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (232,0);
},
{
name = top;
pos = (357,704);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (100,0);
ref = tildecomb;
}
);
width = 552;
}
);
note = uni1EF9;
unicode = 7929;
},
{
glyphname = z;
kernLeft = z;
kernRight = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (187,0);
},
{
name = top;
pos = (275,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(380,0,l),
(400,106,l),
(139,106,l),
(454,393,l),
(473,496,l),
(77,496,l),
(58,390,l),
(308,390,l),
(-5,103,l),
(-24,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 0 0 1 95 0 1 1 36 77 0 2 2 3 95 0 3 3 34 3 78 17 18 17 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 451;
}
);
note = z;
unicode = 122;
},
{
glyphname = zacute;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (187,0);
},
{
name = top;
pos = (320,751);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (118,0);
ref = acutecomb;
}
);
width = 451;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = zcaron;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (187,0);
},
{
name = top;
pos = (315,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (85,0);
ref = uni030C;
}
);
width = 451;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = zdotaccent;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (187,0);
},
{
name = top;
pos = (316,726);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (147,0);
ref = uni0307;
}
);
width = 451;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = uniA78C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,330,l),
(267,700,l),
(130,700,l),
(83,330,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 237;
}
);
note = uniA78C;
unicode = 42892;
},
{
glyphname = fi;
layers = (
{
anchors = (
{
name = caret_1;
pos = (273,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,0,l),
(226,389,l),
(315,389,l),
(334,496,l),
(244,496,l),
(251,534,ls),
(257,565,o),
(289,591,o),
(322,591,qs),
(344,591,l),
(364,700,l),
(322,700,ls),
(153,700,o),
(123,534,qs),
(116,496,l),
(59,496,l),
(40,389,l),
(98,389,l),
(29,0,l)
);
},
{
closed = 1;
nodes = (
(450,0,l),
(537,496,l),
(409,496,l),
(322,0,l)
);
},
{
closed = 1;
nodes = (
(533,566,o),
(580,613,o),
(580,646,qs),
(580,680,o),
(533,726,o),
(500,726,qs),
(467,726,o),
(420,680,o),
(420,646,qs),
(420,613,o),
(467,566,o),
(500,566,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 3 2 97 0 2 2 33 77 11 1 10 10 9 97 0 9 9 41 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 3 2 97 0 2 2 33 77 11 1 10 10 9 97 0 9 9 39 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 9 11 1 10 1 9 10 105 0 3 3 2 97 0 2 2 33 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
23 23 23 34 23 33 29 27 17 17 17 17 19 33 34 17 16 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 545;
}
);
note = fi;
unicode = 64257;
},
{
glyphname = fl;
layers = (
{
anchors = (
{
name = caret_1;
pos = (268,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,0,l),
(226,389,l),
(315,389,l),
(334,496,l),
(244,496,l),
(251,534,ls),
(257,565,o),
(289,591,o),
(322,591,qs),
(344,591,l),
(364,700,l),
(322,700,ls),
(153,700,o),
(123,534,qs),
(116,496,l),
(59,496,l),
(40,389,l),
(98,389,l),
(29,0,l)
);
},
{
closed = 1;
nodes = (
(444,0,l),
(568,700,l),
(440,700,l),
(316,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 2 97 7 1 2 2 33 77 5 1 0 0 1 95 4 1 1 1 36 77 8 1 6 6 34 6 78 17 17 17 17 19 33 34 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 535;
}
);
note = fl;
unicode = 64258;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(197,346,o),
(259,376,o),
(286,406,q),
(293,379,o),
(344,354,o),
(393,354,q),
(407,429,l),
(390,429,o),
(375,439,o),
(375,451,qs),
(376,464,l),
(393,559,ls),
(396,577,o),
(396,594,qs),
(396,649,o),
(329,710,o),
(266,710,qs),
(203,710,o),
(111,646,o),
(89,588,q),
(176,588,l),
(186,610,o),
(226,634,o),
(251,634,qs),
(307,634,o),
(307,581,qs),
(307,575,o),
(305,561,q),
(220,561,ls),
(149,561,o),
(55,495,o),
(55,436,qs),
(55,396,o),
(115,346,o),
(158,346,qs)
);
},
{
closed = 1;
nodes = (
(172,417,o),
(147,434,o),
(147,450,qs),
(147,475,o),
(187,504,o),
(216,504,qs),
(293,504,l),
(283,465,o),
(227,417,o),
(192,417,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
24 1 4 7 31 1 5 4 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
24 1 4 7 31 1 5 8 2 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 10 8 2 4 4 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 9 6 2 5 5 58 77 10 1 8 8 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 0 5 5 58 77 10 1 8 8 6 97 9 1 6 6 58 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
35 35 0 0 35 44 35 43 39 37 0 34 0 33 17 24 34 18 35 36 11 10 28
CALL[ ]	/* CallFunction */";
};
width = 390;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(275,348,o),
(373,404,o),
(429,500,o),
(429,559,qs),
(429,597,o),
(395,667,o),
(325,712,o),
(272,712,qs),
(213,712,o),
(117,657,o),
(62,561,o),
(62,503,qs),
(62,460,o),
(100,389,o),
(171,348,o),
(216,348,qs)
);
},
{
closed = 1;
nodes = (
(196,426,o),
(151,473,o),
(151,510,qs),
(151,561,o),
(212,634,o),
(260,634,qs),
(297,634,o),
(340,585,o),
(340,547,qs),
(340,496,o),
(279,426,o),
(232,426,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 59 77 5 1 3 3 1 97 4 1 1 1 58 1 78 16 16 0 0 16 27 16 26 22 20 0 15 0 14 38 6 10 23
CALL[ ]	/* CallFunction */";
};
width = 392;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = uni042F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-39,0,l),
(112,0,l),
(336,295,l),
(414,295,l),
(362,0,l),
(490,0,l),
(614,700,l),
(371,700,ls),
(290,700,o),
(163,645,o),
(91,541,o),
(91,470,qs),
(91,413,o),
(156,330,o),
(212,316,q)
);
},
{
closed = 1;
nodes = (
(270,404,o),
(223,451,o),
(223,486,qs),
(223,539,o),
(286,591,o),
(354,591,qs),
(466,591,l),
(434,404,l),
(322,404,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
14 1 2 5 1 76 3 1 1 2 1 134 0 0 0 4 5 0 4 103 6 1 5 2 2 5 87 6 1 5 5 2 95 0 2 5 2 79 15 15 15 23 15 22 35 17 17 17 37 7 6 27
CALL[ ]	/* CallFunction */";
};
width = 592;
}
);
note = uni042F;
unicode = (1071,1103);
},
{
glyphname = uni0394;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-31,0,l),
(634,0,l),
(652,98,l),
(478,700,l),
(373,700,l),
(-14,98,l)
);
},
{
closed = 1;
nodes = (
(118,98,l),
(399,555,l),
(521,98,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 23 77 0 2 2 1 95 0 1 1 24 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 0 2 0 133 0 2 2 1 95 0 1 1 24 1 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
19 18 16 3 7 25
CALL[ ]	/* CallFunction */";
};
width = 692;
}
);
note = uni0394;
unicode = 916;
},
{
glyphname = Pi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,0,l),
(252,398,l),
(428,398,l),
(357,0,l),
(485,0,l),
(556,398,l),
(630,398,l),
(648,496,l),
(67,496,l),
(49,398,l),
(124,398,l),
(53,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 1 4 2 2 0 3 1 0 103 5 1 3 3 24 3 78 17 17 17 17 17 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = Pi;
unicode = 928;
},
{
glyphname = uni03A9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,0,l),
(296,102,l),
(244,126,o),
(182,236,o),
(182,305,qs),
(182,376,o),
(242,509,o),
(366,595,o),
(455,595,qs),
(542,595,o),
(643,494,o),
(643,407,qs),
(643,349,o),
(600,231,o),
(511,131,o),
(443,102,q),
(424,0,l),
(697,0,l),
(715,98,l),
(597,98,l),
(682,150,o),
(777,325,o),
(777,428,qs),
(777,503,o),
(709,633,o),
(573,712,o),
(476,712,qs),
(361,712,o),
(167,608,o),
(53,425,o),
(53,311,qs),
(53,252,o),
(100,135,o),
(142,98,q),
(22,98,l),
(4,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
33 1 0 4 1 76 0 4 4 1 97 0 1 1 23 77 2 1 0 0 3 95 5 1 3 3 24 3 78 23 39 17 22 38 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 787;
}
);
note = uni03A9;
unicode = 937;
},
{
glyphname = uni03BC;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,-220,l),
(140,6,l),
(167,-12,o),
(207,-12,qs),
(263,-12,o),
(357,38,o),
(388,81,q),
(386,0,l),
(499,0,l),
(586,496,l),
(458,496,l),
(412,235,ls),
(400,170,o),
(318,96,o),
(265,96,qs),
(176,96,o),
(176,183,qs),
(176,203,o),
(181,228,qs),
(228,496,l),
(100,496,l),
(-28,-220,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
19 14 2 3 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
2 1 0 1 0 133 0 3 3 24 77 0 1 1 4 97 0 4 4 24 77 0 5 5 25 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
2 1 0 1 0 133 0 1 0 4 5 1 4 105 0 3 3 24 77 0 5 5 25 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 35 17 19 36 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = uni03BC;
unicode = 956;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(367,-12,o),
(518,141,o),
(582,360,o),
(582,464,qs),
(582,580,o),
(481,712,o),
(373,712,qs),
(255,712,o),
(103,563,o),
(35,346,o),
(35,241,qs),
(35,124,o),
(138,-12,o),
(245,-12,qs)
);
},
{
closed = 1;
nodes = (
(215,102,o),
(166,176,o),
(166,246,qs),
(166,324,o),
(203,486,o),
(287,598,o),
(353,598,qs),
(451,598,o),
(451,455,qs),
(451,390,o),
(413,224,o),
(329,102,o),
(265,102,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 39 77 5 1 3 3 1 97 4 1 1 1 40 1 78 14 14 0 0 14 26 14 25 20 18 0 13 0 12 37 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(509,0,l),
(528,109,l),
(363,109,l),
(468,700,l),
(401,700,l),
(150,614,l),
(130,502,l),
(322,559,l),
(242,109,l),
(54,109,l),
(35,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
3 2 2 0 1 1 76 0 1 1 33 77 2 1 0 0 3 96 0 3 3 34 3 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(491,0,l),
(510,109,l),
(198,109,l),
(358,245,l),
(383,266,ls),
(444,318,o),
(518,391,o),
(568,484,o),
(568,537,qs),
(568,613,o),
(470,712,o),
(374,712,qs),
(267,712,o),
(118,592,o),
(95,481,q),
(219,481,l),
(229,534,o),
(298,604,o),
(352,604,qs),
(394,604,o),
(440,557,o),
(440,521,qs),
(440,475,o),
(347,371,o),
(268,304,qs),
(251,289,l),
(25,93,l),
(9,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 39 77 0 3 3 4 95 0 4 4 34 4 78 17 24 34 18 39 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(336,-12,o),
(469,62,o),
(540,184,o),
(540,254,qs),
(540,325,o),
(455,427,o),
(374,433,q),
(580,594,l),
(599,700,l),
(141,700,l),
(121,591,l),
(419,591,l),
(174,400,l),
(231,317,l),
(269,337,o),
(309,337,qs),
(358,337,o),
(415,289,o),
(415,245,qs),
(415,207,o),
(381,139,o),
(313,97,o),
(265,97,qs),
(214,97,o),
(156,150,o),
(156,194,qs),
(156,200,o),
(158,216,q),
(34,216,l),
(30,193,o),
(30,171,qs),
(30,83,o),
(145,-12,o),
(246,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
26 20 2 2 3 19 1 0 2 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 3 0 3 2 0 128 0 0 1 1 0 112 0 3 3 4 95 0 4 4 33 77 0 1 1 5 98 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 33 77 0 1 1 5 98 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 33 0 32 17 19 37 36 20 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(436,0,l),
(459,130,l),
(540,130,l),
(560,241,l),
(479,241,l),
(511,423,l),
(391,423,l),
(359,241,l),
(168,241,l),
(475,700,l),
(347,700,l),
(29,232,l),
(11,130,l),
(331,130,l),
(308,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 33 77 0 6 6 34 6 78 17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,-12,o),
(472,65,o),
(551,200,o),
(551,284,qs),
(551,337,o),
(509,426,o),
(422,481,o),
(358,481,qs),
(269,481,o),
(206,426,q),
(266,588,l),
(559,588,l),
(578,700,l),
(191,700,l),
(60,300,l),
(183,300,l),
(202,331,o),
(272,377,o),
(321,377,qs),
(368,377,o),
(425,314,o),
(425,264,qs),
(425,224,o),
(391,147,o),
(320,97,o),
(269,97,qs),
(220,97,o),
(157,153,o),
(157,197,q),
(32,197,l),
(30,191,o),
(30,179,qs),
(30,93,o),
(150,-12,o),
(252,-12,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
24 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 3 2 0 2 3 0 128 0 0 1 1 0 112 0 5 5 4 95 0 4 4 33 77 0 2 2 6 97 0 6 6 36 77 0 1 1 7 98 8 1 7 7 40 7 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 5 5 4 95 0 4 4 33 77 0 2 2 6 97 0 6 6 36 77 0 1 1 7 98 8 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 33 77 0 1 1 7 98 8 1 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 34 0 33 34 17 17 18 37 34 35 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(346,-12,o),
(467,58,o),
(539,182,o),
(539,257,qs),
(539,319,o),
(488,407,o),
(405,452,o),
(357,452,qs),
(254,452,o),
(184,366,q),
(206,478,o),
(301,606,o),
(368,606,qs),
(412,606,o),
(456,555,o),
(456,510,q),
(568,510,l),
(572,558,o),
(538,650,o),
(452,712,o),
(382,712,qs),
(302,712,o),
(151,601,o),
(55,385,o),
(55,235,qs),
(55,175,o),
(94,63,o),
(192,-12,o),
(274,-12,qs)
);
},
{
closed = 1;
nodes = (
(235,98,o),
(178,156,o),
(178,204,qs),
(178,264,o),
(258,344,o),
(318,344,qs),
(365,344,o),
(421,285,o),
(421,238,qs),
(421,201,o),
(388,137,o),
(325,98,o),
(283,98,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
18 1 5 3 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 39 77 8 1 6 6 4 97 7 1 4 4 40 4 78 29 29 0 0 29 41 29 40 36 34 0 28 0 27 35 34 19 38 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,0,l),
(606,609,l),
(622,700,l),
(110,700,l),
(90,591,l),
(465,591,l),
(83,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 95 0 1 1 33 77 0 2 2 34 2 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(334,-12,o),
(462,53,o),
(531,163,o),
(531,228,qs),
(531,338,o),
(436,376,q),
(484,396,o),
(568,480,o),
(568,550,qs),
(568,625,o),
(464,712,o),
(371,712,qs),
(291,712,o),
(170,655,o),
(105,558,o),
(105,501,qs),
(105,461,o),
(149,396,o),
(188,376,q),
(118,352,o),
(32,242,o),
(32,171,qs),
(32,87,o),
(147,-12,o),
(250,-12,qs)
);
},
{
closed = 1;
nodes = (
(217,95,o),
(157,147,o),
(157,190,qs),
(157,233,o),
(202,291,o),
(268,319,o),
(301,319,qs),
(349,319,o),
(408,270,o),
(408,225,qs),
(408,183,o),
(365,124,o),
(299,95,o),
(266,95,qs)
);
},
{
closed = 1;
nodes = (
(280,414,o),
(228,457,o),
(228,498,qs),
(228,546,o),
(300,608,o),
(351,608,qs),
(393,608,o),
(442,565,o),
(442,526,qs),
(442,493,o),
(408,442,o),
(352,414,o),
(322,414,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
18 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 39 77 7 1 3 3 1 97 6 1 1 1 40 1 78 39 39 25 25 0 0 39 51 39 50 46 44 25 38 25 37 32 30 0 24 0 23 43 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(315,-12,o),
(466,99,o),
(562,315,o),
(562,465,qs),
(562,525,o),
(523,637,o),
(425,712,o),
(343,712,qs),
(271,712,o),
(150,642,o),
(78,518,o),
(78,443,qs),
(78,381,o),
(129,293,o),
(212,248,o),
(260,248,qs),
(363,248,o),
(433,334,q),
(411,222,o),
(316,94,o),
(249,94,qs),
(205,94,o),
(161,145,o),
(161,190,q),
(49,190,l),
(45,142,o),
(79,50,o),
(165,-12,o),
(235,-12,qs)
);
},
{
closed = 1;
nodes = (
(252,356,o),
(196,415,o),
(196,462,qs),
(196,499,o),
(229,563,o),
(292,602,o),
(334,602,qs),
(382,602,o),
(439,544,o),
(439,496,qs),
(439,436,o),
(359,356,o),
(299,356,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
10 1 2 6 1 76 0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 39 77 0 1 1 4 97 7 1 4 4 40 4 78 29 29 0 0 29 41 29 40 35 33 0 28 0 27 38 35 34 19 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = nine;
unicode = 57;
},
{
glyphname = uni24EA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(331,56,o),
(197,133,o),
(120,267,o),
(120,350,qs),
(120,433,o),
(197,567,o),
(331,644,o),
(413,644,qs),
(496,644,o),
(630,567,o),
(707,433,o),
(707,350,qs),
(707,267,o),
(630,133,o),
(496,56,o),
(413,56,qs)
);
},
{
closed = 1;
nodes = (
(483,165,o),
(516,215,qs),
(548,265,o),
(548,350,qs),
(548,435,o),
(516,485,qs),
(483,535,o),
(414,535,qs),
(344,535,o),
(311,484,qs),
(279,436,o),
(279,350,qs),
(279,264,o),
(311,216,qs),
(344,165,o),
(414,165,qs)
);
},
{
closed = 1;
nodes = (
(387,236,o),
(373,266,qs),
(360,295,o),
(360,350,qs),
(360,405,o),
(373,434,qs),
(386,463,o),
(414,463,qs),
(441,463,o),
(454,434,qs),
(467,402,o),
(467,350,qs),
(467,299,o),
(454,266,qs),
(441,236,o),
(414,236,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
0 4 0 6 7 4 6 105 11 1 7 10 1 5 3 7 5 105 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 48 48 32 32 16 16 0 0 48 63 48 62 56 54 32 47 32 46 40 38 16 31 16 30 24 22 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni24EA;
unicode = 9450;
},
{
glyphname = uni2780;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(331,56,o),
(197,133,o),
(120,267,o),
(120,350,qs),
(120,433,o),
(197,567,o),
(331,644,o),
(413,644,qs),
(496,644,o),
(630,567,o),
(707,433,o),
(707,350,qs),
(707,267,o),
(630,133,o),
(496,56,o),
(413,56,qs)
);
},
{
closed = 1;
nodes = (
(543,176,l),
(543,246,l),
(463,246,l),
(463,533,l),
(421,533,l),
(305,492,l),
(305,429,l),
(388,444,l),
(388,246,l),
(301,246,l),
(301,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
36 35 34 3 4 5 1 76 0 5 2 4 2 5 4 128 6 1 4 0 7 3 4 7 104 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 16 16 0 0 42 41 40 39 38 37 33 32 16 31 16 30 24 22 0 15 0 14 38 10 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2780;
unicode = 10112;
},
{
glyphname = uni2781;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(331,56,o),
(197,133,o),
(120,267,o),
(120,350,qs),
(120,433,o),
(197,567,o),
(331,644,o),
(413,644,qs),
(496,644,o),
(630,567,o),
(707,433,o),
(707,350,qs),
(707,267,o),
(630,133,o),
(496,56,o),
(413,56,qs)
);
},
{
closed = 1;
nodes = (
(542,176,l),
(542,246,l),
(400,246,l),
(445,290,ls),
(476,320,o),
(509,356,o),
(535,405,o),
(535,432,qs),
(535,482,o),
(469,540,o),
(415,540,qs),
(359,540,o),
(289,480,o),
(288,418,q),
(365,418,l),
(365,441,o),
(389,472,o),
(413,472,qs),
(435,472,o),
(457,449,o),
(457,428,qs),
(457,409,o),
(424,369,o),
(391,336,qs),
(288,230,l),
(288,176,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
32 1 8 7 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 5 4 7 4 5 114 0 6 0 4 5 6 4 105 0 7 0 8 3 7 8 103 0 2 2 0 97 0 0 0 39 77 10 1 3 3 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 5 4 7 4 5 7 128 0 6 0 4 5 6 4 105 0 7 0 8 3 7 8 103 0 2 2 0 97 0 0 0 39 77 10 1 3 3 1 97 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
16 16 0 0 57 56 55 54 47 45 43 42 40 38 16 31 16 30 24 22 0 15 0 14 38 11 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2781;
unicode = 10113;
},
{
glyphname = uni2782;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(331,56,o),
(197,133,o),
(120,267,o),
(120,350,qs),
(120,433,o),
(197,567,o),
(331,644,o),
(413,644,qs),
(496,644,o),
(630,567,o),
(707,433,o),
(707,350,qs),
(707,267,o),
(630,133,o),
(496,56,o),
(413,56,qs)
);
},
{
closed = 1;
nodes = (
(471,158,o),
(544,223,o),
(544,280,qs),
(544,322,o),
(502,382,o),
(455,390,q),
(533,454,l),
(533,522,l),
(291,522,l),
(291,453,l),
(433,453,l),
(334,370,l),
(377,320,l),
(394,330,o),
(414,330,qs),
(435,330,o),
(467,304,o),
(467,279,qs),
(467,252,o),
(438,227,o),
(414,227,qs),
(391,227,o),
(360,254,o),
(360,283,q),
(283,283,l),
(282,222,o),
(353,158,o),
(414,158,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
52 1 7 8 53 47 2 6 7 46 1 4 6 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 6 7 4 7 6 114 0 4 5 5 4 112 0 8 0 7 6 8 7 103 0 5 12 1 9 3 5 9 106 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 97 10 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 6 7 4 7 6 4 128 0 4 5 5 4 112 0 8 0 7 6 8 7 103 0 5 12 1 9 3 5 9 106 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 97 10 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 6 7 4 7 6 4 128 0 4 5 7 4 5 126 0 8 0 7 6 8 7 103 0 5 12 1 9 3 5 9 106 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 97 10 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
32 32 16 16 0 0 32 59 32 58 51 50 49 48 45 43 39 37 35 34 16 31 16 30 24 22 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2782;
unicode = 10114;
},
{
glyphname = uni2783;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(506,176,l),
(506,236,l),
(540,236,l),
(540,305,l),
(506,305,l),
(506,392,l),
(431,392,l),
(431,305,l),
(346,305,l),
(457,533,l),
(379,533,l),
(261,301,l),
(261,236,l),
(425,236,l),
(425,176,l)
);
},
{
closed = 1;
nodes = (
(331,56,o),
(197,133,o),
(120,267,o),
(120,350,qs),
(120,433,o),
(197,567,o),
(331,644,o),
(413,644,qs),
(496,644,o),
(630,567,o),
(707,433,o),
(707,350,qs),
(707,267,o),
(630,133,o),
(496,56,o),
(413,56,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 87 values pushed */
18 1 2 4 1 76 0 3 9 5 9 3 5 128 6 1 4 7 1 2 8 4 2 104 0 5 0 8 10 5 8 103 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78 31 31 0 0 31 46 31 45 39 37 30 29 28 27 26 25 24 23 22 21 20 19 17 16 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2783;
unicode = 10115;
},
{
glyphname = uni2784;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(331,56,o),
(197,133,o),
(120,267,o),
(120,350,qs),
(120,433,o),
(197,567,o),
(331,644,o),
(413,644,qs),
(496,644,o),
(630,567,o),
(707,433,o),
(707,350,qs),
(707,267,o),
(630,133,o),
(496,56,o),
(413,56,qs)
);
},
{
closed = 1;
nodes = (
(473,160,o),
(546,234,o),
(546,291,qs),
(546,341,o),
(487,413,o),
(431,413,qs),
(412,413,o),
(375,400,o),
(363,388,q),
(377,454,l),
(523,454,l),
(523,524,l),
(317,524,l),
(287,314,l),
(364,314,l),
(370,329,o),
(400,348,o),
(417,348,qs),
(441,348,o),
(469,316,o),
(469,291,qs),
(469,265,o),
(439,229,o),
(416,229,qs),
(396,229,o),
(366,251,o),
(361,270,q),
(283,270,l),
(285,218,o),
(360,160,o),
(416,160,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
53 1 6 10 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
0 7 6 4 9 7 114 0 4 5 6 4 5 126 0 8 0 9 10 8 9 103 0 10 0 6 7 10 6 105 0 5 14 1 11 3 5 11 105 0 2 2 0 97 0 0 0 39 77 13 1 3 3 1 98 12 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 63 values pushed */
0 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 8 0 9 10 8 9 103 0 10 0 6 7 10 6 105 0 5 14 1 11 3 5 11 105 0 2 2 0 97 0 0 0 39 77 13 1 3 3 1 98 12 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 38 values pushed */
32 32 16 16 0 0 32 62 32 61 57 55 52 51 50 49 48 47 45 43 39 37 35 34 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2784;
unicode = 10116;
},
{
glyphname = uni2785;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(331,56,o),
(197,133,o),
(120,267,o),
(120,350,qs),
(120,433,o),
(197,567,o),
(331,644,o),
(413,644,qs),
(496,644,o),
(630,567,o),
(707,433,o),
(707,350,qs),
(707,267,o),
(630,133,o),
(496,56,o),
(413,56,qs)
);
},
{
closed = 1;
nodes = (
(393,233,o),
(365,263,o),
(365,286,qs),
(365,308,o),
(393,336,o),
(414,336,qs),
(435,336,o),
(465,310,o),
(465,284,qs),
(465,259,o),
(435,233,o),
(416,233,qs)
);
},
{
closed = 1;
nodes = (
(475,165,o),
(541,237,o),
(541,287,qs),
(541,333,o),
(483,404,o),
(437,404,qs),
(411,404,o),
(369,378,o),
(358,359,q),
(359,407,o),
(383,470,o),
(417,470,qs),
(436,470,o),
(459,448,o),
(463,428,q),
(536,428,l),
(534,474,o),
(468,535,o),
(417,535,qs),
(347,535,o),
(278,422,o),
(278,340,qs),
(278,264,o),
(349,165,o),
(420,165,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
59 1 4 9 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 7 8 9 8 7 114 0 6 0 8 7 6 8 105 0 9 0 4 5 9 4 105 13 1 5 14 1 10 3 5 10 105 0 2 2 0 97 0 0 0 39 77 12 1 3 3 1 97 11 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 7 8 9 8 7 9 128 0 6 0 8 7 6 8 105 0 9 0 4 5 9 4 105 13 1 5 14 1 10 3 5 10 105 0 2 2 0 97 0 0 0 39 77 12 1 3 3 1 97 11 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 40 values pushed */
44 44 32 32 16 16 0 0 44 68 44 67 63 61 57 55 53 52 50 48 32 43 32 42 38 36 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2785;
unicode = 10117;
},
{
glyphname = uni2786;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(412,167,l),
(550,468,l),
(550,524,l),
(281,524,l),
(281,456,l),
(464,456,l),
(329,167,l)
);
},
{
closed = 1;
nodes = (
(331,56,o),
(197,133,o),
(120,267,o),
(120,350,qs),
(120,433,o),
(197,567,o),
(331,644,o),
(413,644,qs),
(496,644,o),
(630,567,o),
(707,433,o),
(707,350,qs),
(707,267,o),
(630,133,o),
(496,56,o),
(413,56,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
20 1 2 3 1 76 0 4 2 6 2 4 6 128 0 3 0 2 4 3 2 103 0 5 5 0 97 0 0 0 39 77 8 1 6 6 1 97 7 1 1 1 40 1 78 23 23 0 0 23 38 23 37 31 29 22 21 19 18 17 16 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2786;
unicode = 10118;
},
{
glyphname = uni2787;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(364,231,o),
(364,280,qs),
(364,305,o),
(392,330,o),
(415,330,qs),
(438,330,o),
(464,303,o),
(464,280,qs),
(464,257,o),
(438,231,o),
(415,231,qs)
);
},
{
closed = 1;
nodes = (
(331,56,o),
(197,133,o),
(120,267,o),
(120,350,qs),
(120,433,o),
(197,567,o),
(331,644,o),
(413,644,qs),
(496,644,o),
(630,567,o),
(707,433,o),
(707,350,qs),
(707,267,o),
(630,133,o),
(496,56,o),
(413,56,qs)
);
},
{
closed = 1;
nodes = (
(468,165,o),
(542,222,o),
(542,272,qs),
(542,340,o),
(488,364,q),
(507,374,o),
(533,413,o),
(533,439,qs),
(533,487,o),
(462,535,o),
(414,535,qs),
(361,535,o),
(293,484,o),
(293,439,qs),
(293,393,o),
(339,364,q),
(285,337,o),
(285,272,qs),
(285,224,o),
(361,165,o),
(414,165,qs)
);
},
{
closed = 1;
nodes = (
(395,386,o),
(373,408,o),
(373,428,qs),
(373,471,o),
(414,471,qs),
(454,471,o),
(454,428,qs),
(454,386,o),
(414,386,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 99 values pushed */
58 47 2 2 9 1 76 0 6 0 8 9 6 8 105 14 1 9 0 2 3 9 2 105 11 1 3 13 1 7 5 3 7 105 0 4 4 0 97 0 0 0 39 77 12 1 5 5 1 97 10 1 1 1 40 1 78 64 64 43 43 27 27 16 16 0 0 64 72 64 71 68 66 43 63 43 62 53 51 27 42 27 41 35 33 16 26 16 25 22 20 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2787;
unicode = 10119;
},
{
glyphname = uni2788;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(331,56,o),
(197,133,o),
(120,267,o),
(120,350,qs),
(120,433,o),
(197,567,o),
(331,644,o),
(413,644,qs),
(496,644,o),
(630,567,o),
(707,433,o),
(707,350,qs),
(707,267,o),
(630,133,o),
(496,56,o),
(413,56,qs)
);
},
{
closed = 1;
nodes = (
(477,165,o),
(547,274,o),
(547,360,qs),
(547,435,o),
(479,535,o),
(405,535,qs),
(351,535,o),
(285,464,o),
(285,413,qs),
(285,374,o),
(318,321,o),
(366,296,o),
(389,296,qs),
(415,296,o),
(455,322,o),
(468,341,q),
(465,230,o),
(409,230,qs),
(373,230,o),
(363,272,q),
(290,272,l),
(290,246,o),
(318,196,o),
(372,165,o),
(408,165,qs)
);
},
{
closed = 1;
nodes = (
(389,364,o),
(360,393,o),
(360,416,qs),
(360,438,o),
(389,467,o),
(409,467,qs),
(431,467,o),
(461,437,o),
(461,414,qs),
(461,393,o),
(432,364,o),
(411,364,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 103 values pushed */
40 1 6 10 1 76 0 4 6 5 6 4 5 128 0 7 0 9 10 7 9 105 14 1 10 0 6 4 10 6 105 0 5 13 1 8 3 5 8 105 0 2 2 0 97 0 0 0 39 77 12 1 3 3 1 98 11 1 1 1 40 1 78 57 57 32 32 16 16 0 0 57 68 57 67 63 61 32 56 32 55 51 49 44 42 39 37 36 35 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2788;
unicode = 10120;
},
{
glyphname = uni278A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(301,246,l),
(388,246,l),
(388,444,l),
(305,429,l),
(305,492,l),
(421,533,l),
(463,533,l),
(463,246,l),
(543,246,l),
(543,176,l),
(301,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
23 22 21 3 2 3 1 76 4 1 2 3 5 3 2 5 128 0 3 3 0 97 0 0 0 39 77 7 1 5 5 1 97 6 1 1 1 40 1 78 16 16 0 0 16 26 16 26 25 24 20 19 18 17 0 15 0 14 38 8 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni278A;
unicode = 10122;
},
{
glyphname = uni278B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(288,230,l),
(391,336,ls),
(424,369,o),
(457,409,o),
(457,428,qs),
(457,449,o),
(435,472,o),
(413,472,qs),
(389,472,o),
(365,441,o),
(365,418,q),
(288,418,l),
(289,480,o),
(359,540,o),
(415,540,qs),
(469,540,o),
(535,482,o),
(535,432,qs),
(535,405,o),
(509,356,o),
(476,320,o),
(445,290,qs),
(400,246,l),
(542,246,l),
(542,176,l),
(288,176,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
40 1 6 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 5 2 5 4 2 128 0 3 3 0 97 0 0 0 39 77 0 2 2 5 97 0 5 5 36 77 8 1 6 6 1 98 7 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 5 2 5 4 2 128 0 5 0 2 6 5 2 103 0 3 3 0 97 0 0 0 39 77 8 1 6 6 1 98 7 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
16 16 0 0 16 41 16 41 34 32 30 29 27 25 18 17 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni278B;
unicode = 10123;
},
{
glyphname = uni278C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(353,158,o),
(282,222,o),
(283,283,q),
(360,283,l),
(360,254,o),
(391,227,o),
(414,227,qs),
(438,227,o),
(467,252,o),
(467,279,qs),
(467,304,o),
(435,330,o),
(414,330,qs),
(394,330,o),
(377,320,q),
(334,370,l),
(433,453,l),
(291,453,l),
(291,522,l),
(533,522,l),
(533,454,l),
(455,390,l),
(502,382,o),
(544,322,o),
(544,280,qs),
(544,223,o),
(471,158,o),
(414,158,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 80 values pushed */
22 1 3 2 27 21 2 4 3 28 1 6 4 3 76 0 3 0 6 5 3 6 103 0 4 0 5 7 4 5 105 0 2 2 0 97 0 0 0 39 77 9 1 7 7 1 97 8 1 1 1 40 1 78 16 16 0 0 16 43 16 42 40 39 37 35 31 29 26 25 24 23 0 15 0 14 38 10 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni278C;
unicode = 10124;
},
{
glyphname = uni278D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(425,236,l),
(261,236,l),
(261,301,l),
(379,533,l),
(457,533,l),
(346,305,l),
(431,305,l),
(431,392,l),
(506,392,l),
(506,305,l),
(540,305,l),
(540,236,l),
(506,236,l),
(506,176,l),
(425,176,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
27 1 2 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 4 6 3 6 4 114 5 1 3 2 6 3 2 126 7 1 2 8 8 2 112 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 4 6 3 6 4 3 128 5 1 3 2 6 3 2 126 7 1 2 8 8 2 112 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 4 6 3 6 4 3 128 5 1 3 2 6 3 2 126 7 1 2 8 6 2 8 126 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
16 16 0 0 16 30 16 30 29 28 26 25 24 23 22 21 20 19 18 17 0 15 0 14 38 11 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni278D;
unicode = 10125;
},
{
glyphname = uni278E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(360,160,o),
(285,218,o),
(283,270,q),
(361,270,l),
(366,251,o),
(396,229,o),
(416,229,qs),
(439,229,o),
(469,265,o),
(469,291,qs),
(469,316,o),
(441,348,o),
(417,348,qs),
(400,348,o),
(370,329,o),
(364,314,q),
(287,314,l),
(317,524,l),
(523,524,l),
(523,454,l),
(377,454,l),
(363,388,l),
(375,400,o),
(412,413,o),
(431,413,qs),
(487,413,o),
(546,341,o),
(546,291,qs),
(546,234,o),
(473,160,o),
(416,160,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
24 1 6 2 1 76 0 3 0 2 6 3 2 105 0 5 0 8 7 5 8 103 0 6 0 7 9 6 7 105 0 4 4 0 97 0 0 0 39 77 11 1 9 9 1 97 10 1 1 1 40 1 78 16 16 0 0 16 46 16 45 43 42 40 38 34 32 30 29 28 27 26 25 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni278E;
unicode = 10126;
},
{
glyphname = uni278F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(435,233,o),
(465,259,o),
(465,284,qs),
(465,310,o),
(435,336,o),
(414,336,qs),
(393,336,o),
(365,308,o),
(365,286,qs),
(365,263,o),
(393,233,o),
(416,233,qs)
);
},
{
closed = 1;
nodes = (
(349,165,o),
(278,264,o),
(278,340,qs),
(278,422,o),
(347,535,o),
(417,535,qs),
(468,535,o),
(534,474,o),
(536,428,q),
(463,428,l),
(459,448,o),
(436,470,o),
(417,470,qs),
(383,470,o),
(359,407,o),
(358,359,q),
(369,378,o),
(411,404,o),
(437,404,qs),
(483,404,o),
(541,333,o),
(541,287,qs),
(541,237,o),
(475,165,o),
(420,165,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
36 1 2 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 6 5 4 5 6 114 0 5 0 4 2 5 4 105 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 11 1 8 8 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 6 5 4 5 6 4 128 0 5 0 4 2 5 4 105 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 11 1 8 8 1 97 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
28 28 16 16 0 0 28 52 28 51 47 45 43 42 40 38 34 32 16 27 16 26 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni278F;
unicode = 10127;
},
{
glyphname = uni2790;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(464,456,l),
(281,456,l),
(281,524,l),
(550,524,l),
(550,468,l),
(412,167,l),
(329,167,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
17 1 3 2 1 76 0 3 2 4 2 3 4 128 0 2 2 0 97 0 0 0 39 77 6 1 4 4 1 98 5 1 1 1 40 1 78 16 16 0 0 16 22 16 22 21 20 19 18 0 15 0 14 38 7 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2790;
unicode = 10128;
},
{
glyphname = uni2791;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(361,165,o),
(285,224,o),
(285,272,qs),
(285,337,o),
(339,364,q),
(293,393,o),
(293,439,qs),
(293,484,o),
(361,535,o),
(414,535,qs),
(462,535,o),
(533,487,o),
(533,439,qs),
(533,413,o),
(507,374,o),
(488,364,q),
(542,340,o),
(542,272,qs),
(542,222,o),
(468,165,o),
(414,165,qs)
);
},
{
closed = 1;
nodes = (
(438,231,o),
(464,257,o),
(464,280,qs),
(464,303,o),
(438,330,o),
(415,330,qs),
(392,330,o),
(364,305,o),
(364,280,qs),
(364,231,o),
(415,231,qs)
);
},
{
closed = 1;
nodes = (
(454,386,o),
(454,428,qs),
(454,471,o),
(414,471,qs),
(373,471,o),
(373,428,qs),
(373,408,o),
(395,386,o),
(414,386,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 82 values pushed */
31 20 2 4 7 1 76 0 6 11 1 7 4 6 7 105 0 4 10 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 48 48 37 37 16 16 0 0 48 56 48 55 53 51 37 47 37 46 42 40 16 36 16 35 27 25 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2791;
unicode = 10129;
},
{
glyphname = uni2792;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(372,165,o),
(318,196,o),
(290,246,o),
(290,272,q),
(363,272,l),
(373,230,o),
(409,230,qs),
(465,230,o),
(468,341,q),
(455,322,o),
(415,296,o),
(389,296,qs),
(366,296,o),
(318,321,o),
(285,374,o),
(285,413,qs),
(285,464,o),
(351,535,o),
(405,535,qs),
(479,535,o),
(547,435,o),
(547,360,qs),
(547,274,o),
(477,165,o),
(408,165,qs)
);
},
{
closed = 1;
nodes = (
(432,364,o),
(461,393,o),
(461,414,qs),
(461,437,o),
(431,467,o),
(409,467,qs),
(389,467,o),
(360,438,o),
(360,416,qs),
(360,393,o),
(389,364,o),
(411,364,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 86 values pushed */
31 1 3 8 1 76 0 5 3 4 3 5 4 128 0 7 11 1 8 3 7 8 105 0 3 0 4 6 3 4 105 0 2 2 0 97 0 0 0 39 77 10 1 6 6 1 97 9 1 1 1 40 1 78 41 41 16 16 0 0 41 52 41 51 47 45 16 40 16 39 36 35 34 32 29 27 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2792;
unicode = 10130;
},
{
glyphname = uni24EA.solid;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(344,165,o),
(311,216,qs),
(279,264,o),
(279,350,qs),
(279,436,o),
(311,484,qs),
(344,535,o),
(414,535,qs),
(483,535,o),
(516,485,qs),
(548,435,o),
(548,350,qs),
(548,265,o),
(516,215,qs),
(483,165,o),
(414,165,qs)
);
},
{
closed = 1;
nodes = (
(441,236,o),
(454,266,qs),
(467,299,o),
(467,350,qs),
(467,402,o),
(454,434,qs),
(441,463,o),
(414,463,qs),
(386,463,o),
(373,434,qs),
(360,405,o),
(360,350,qs),
(360,295,o),
(373,266,qs),
(387,236,o),
(414,236,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 4 8 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 7 1 3 3 1 97 6 1 1 1 40 1 78 32 32 16 16 0 0 32 47 32 46 40 38 16 31 16 30 24 22 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni24EA.solid;
},
{
glyphname = zero.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,-5,o),
(247,76,o),
(279,187,o),
(279,236,qs),
(279,293,o),
(227,358,o),
(171,358,qs),
(110,358,o),
(33,280,o),
(0,170,o),
(0,119,qs),
(0,-5,o),
(107,-5,qs)
);
},
{
closed = 1;
nodes = (
(77,65,o),
(77,129,qs),
(77,156,o),
(93,231,o),
(130,288,o),
(159,288,qs),
(200,288,o),
(200,227,qs),
(200,198,o),
(183,122,o),
(147,65,o),
(120,65,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 0 0 2 3 0 2 105 5 1 3 3 1 97 4 1 1 1 34 1 78 13 13 0 0 13 24 13 23 19 17 0 12 0 11 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = zero.dnom;
},
{
glyphname = one.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(230,0,l),
(242,68,l),
(162,68,l),
(213,353,l),
(172,353,l),
(44,309,l),
(33,247,l),
(123,267,l),
(88,68,l),
(-2,68,l),
(-14,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
3 2 2 0 1 1 76 0 1 0 1 133 2 1 0 0 3 96 0 3 3 34 3 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 296;
}
);
note = one.dnom;
},
{
glyphname = two.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,0,l),
(238,68,l),
(98,68,l),
(151,112,l),
(169,127,ls),
(217,168,o),
(267,230,o),
(267,269,qs),
(267,306,o),
(218,358,o),
(165,358,qs),
(109,358,o),
(32,297,o),
(18,238,q),
(95,238,l),
(99,261,o),
(127,292,o),
(151,292,qs),
(168,292,o),
(188,275,o),
(188,259,qs),
(188,238,o),
(149,194,o),
(105,156,qs),
(87,141,l),
(-14,53,l),
(-23,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
0 1 0 3 0 1 3 128 0 2 0 0 1 2 0 105 0 3 3 4 95 0 4 4 34 4 78 17 23 34 18 39 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = two.dnom;
},
{
glyphname = three.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,-5,o),
(255,75,o),
(255,135,qs),
(255,168,o),
(217,214,o),
(184,222,q),
(273,291,l),
(284,353,l),
(49,353,l),
(37,285,l),
(169,285,l),
(61,201,l),
(95,151,l),
(116,163,o),
(134,163,qs),
(154,163,o),
(179,143,o),
(179,125,qs),
(179,99,o),
(145,63,o),
(116,63,qs),
(94,63,o),
(70,84,o),
(70,102,qs),
(70,109,o),
(71,112,q),
(-4,112,l),
(-6,94,o),
(-6,87,qs),
(-6,43,o),
(53,-5,o),
(104,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
25 19 2 2 3 18 1 0 2 7 2 2 1 0 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 2 3 0 3 2 114 0 0 1 1 0 112 0 4 0 3 2 4 3 103 0 1 1 5 98 6 1 5 5 34 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 3 0 3 2 0 128 0 0 1 1 0 112 0 4 0 3 2 4 3 103 0 1 1 5 98 6 1 5 5 34 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 4 0 3 2 4 3 103 0 1 1 5 98 6 1 5 5 34 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 31 0 30 17 19 36 36 20 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 297;
}
);
note = three.dnom;
},
{
glyphname = four.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,0,l),
(217,63,l),
(256,63,l),
(269,132,l),
(230,132,l),
(244,213,l),
(171,213,l),
(157,132,l),
(74,132,l),
(222,353,l),
(144,353,l),
(-13,122,l),
(-24,63,l),
(140,63,l),
(129,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 3 1 133 0 3 2 2 3 112 4 1 2 5 1 0 6 2 0 104 0 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 3 1 133 0 3 2 3 133 4 1 2 5 1 0 6 2 0 104 0 6 6 34 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = four.dnom;
},
{
glyphname = five.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,-5,o),
(213,36,o),
(255,107,o),
(255,151,qs),
(255,193,o),
(204,247,o),
(157,247,qs),
(123,247,o),
(96,232,q),
(115,284,l),
(257,284,l),
(270,353,l),
(69,353,l),
(1,145,l),
(74,145,l),
(96,182,o),
(135,182,qs),
(155,182,o),
(179,158,o),
(179,137,qs),
(179,105,o),
(140,63,o),
(113,63,qs),
(92,63,o),
(66,86,o),
(66,105,q),
(-10,105,l),
(-15,53,o),
(44,-5,o),
(101,-5,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
20 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 2 0 5 3 114 0 0 1 1 0 112 0 4 0 5 6 4 5 103 0 6 0 2 3 6 2 105 0 1 1 7 98 8 1 7 7 34 7 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 0 2 3 0 128 0 0 1 1 0 112 0 4 0 5 6 4 5 103 0 6 0 2 3 6 2 105 0 1 1 7 98 8 1 7 7 34 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 4 0 5 6 4 5 103 0 6 0 2 3 6 2 105 0 1 1 7 98 8 1 7 7 34 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 29 0 28 34 17 17 17 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = five.dnom;
},
{
glyphname = six.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(151,-5,o),
(216,37,o),
(254,104,o),
(254,141,qs),
(254,185,o),
(200,233,o),
(163,233,qs),
(144,233,o),
(104,218,o),
(88,204,q),
(112,292,o),
(162,292,qs),
(196,292,o),
(198,254,q),
(270,254,l),
(273,300,o),
(223,358,o),
(173,358,qs),
(119,358,o),
(40,283,o),
(0,171,o),
(0,119,qs),
(0,63,o),
(55,-5,o),
(111,-5,qs)
);
},
{
closed = 1;
nodes = (
(101,63,o),
(79,85,o),
(79,103,qs),
(79,129,o),
(114,166,o),
(138,166,qs),
(157,166,o),
(178,144,o),
(178,126,qs),
(178,100,o),
(145,63,o),
(120,63,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 5 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 3 2 1 114 0 0 0 2 1 0 2 105 0 3 0 5 6 3 5 105 8 1 6 6 4 97 7 1 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 1 2 3 2 1 3 128 0 0 0 2 1 0 2 105 0 3 0 5 6 3 5 105 8 1 6 6 4 97 7 1 4 4 34 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
25 25 0 0 25 36 25 35 31 29 0 24 0 23 35 33 18 37 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = six.dnom;
},
{
glyphname = seven.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(98,-1,l),
(289,299,l),
(298,352,l),
(36,352,l),
(24,284,l),
(201,284,l),
(17,-1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 1 0 0 2 1 0 103 0 2 2 34 2 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 298;
}
);
note = seven.dnom;
},
{
glyphname = eight.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(146,-5,o),
(212,28,o),
(247,84,o),
(247,117,qs),
(247,169,o),
(203,190,q),
(229,202,o),
(265,246,o),
(265,276,qs),
(265,313,o),
(212,358,o),
(164,358,qs),
(104,358,o),
(25,299,o),
(25,251,qs),
(25,215,o),
(62,190,q),
(28,177,o),
(-10,121,o),
(-10,88,qs),
(-10,50,o),
(48,-5,o),
(102,-5,qs)
);
},
{
closed = 1;
nodes = (
(92,59,o),
(67,82,o),
(67,100,qs),
(67,124,o),
(104,156,o),
(127,156,qs),
(148,156,o),
(172,134,o),
(172,116,qs),
(172,90,o),
(137,59,o),
(112,59,qs)
);
},
{
closed = 1;
nodes = (
(120,212,o),
(100,231,o),
(100,248,qs),
(100,267,o),
(131,295,o),
(151,295,qs),
(168,295,o),
(188,274,o),
(188,260,qs),
(188,240,o),
(158,212,o),
(138,212,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
16 5 2 2 5 1 76 0 0 0 4 5 0 4 105 8 1 5 0 2 3 5 2 105 7 1 3 3 1 97 6 1 1 1 34 1 78 35 35 23 23 0 0 35 46 35 45 41 39 23 34 23 33 29 27 0 22 0 21 41 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 289;
}
);
note = eight.dnom;
},
{
glyphname = nine.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(148,-5,o),
(227,69,o),
(268,181,o),
(268,234,qs),
(268,290,o),
(213,358,o),
(157,358,qs),
(118,358,o),
(52,317,o),
(14,250,o),
(14,215,qs),
(14,173,o),
(64,120,o),
(105,120,qs),
(124,120,o),
(164,135,o),
(181,149,q),
(157,61,o),
(107,61,qs),
(71,61,o),
(71,101,q),
(-1,101,l),
(-4,53,o),
(45,-5,o),
(95,-5,qs)
);
},
{
closed = 1;
nodes = (
(112,187,o),
(90,209,o),
(90,228,qs),
(90,253,o),
(124,290,o),
(148,290,qs),
(167,290,o),
(190,267,o),
(190,249,qs),
(190,224,o),
(155,187,o),
(131,187,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 0 2 1 1 0 114 0 3 0 5 6 3 5 105 8 1 6 0 2 0 6 2 105 0 1 1 4 98 7 1 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 0 2 1 2 0 1 128 0 3 0 5 6 3 5 105 8 1 6 0 2 0 6 2 105 0 1 1 4 98 7 1 4 4 34 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
25 25 0 0 25 36 25 35 31 29 0 24 0 23 37 35 33 18 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = nine.dnom;
},
{
glyphname = zero.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,342,o),
(308,421,o),
(340,532,o),
(340,582,qs),
(340,639,o),
(289,705,o),
(233,705,qs),
(171,705,o),
(94,625,o),
(61,514,o),
(61,465,qs),
(61,408,o),
(113,342,o),
(169,342,qs)
);
},
{
closed = 1;
nodes = (
(163,412,o),
(139,440,o),
(139,474,qs),
(139,502,o),
(154,578,o),
(191,635,o),
(220,635,qs),
(262,635,o),
(262,572,qs),
(262,544,o),
(246,468,o),
(209,412,o),
(181,412,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 3 4 1 1 3 1 101 0 2 2 0 97 0 0 0 33 2 78 14 14 0 0 14 26 14 25 20 18 0 13 0 12 37 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = zero.numr;
},
{
glyphname = one.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(291,347,l),
(303,415,l),
(223,415,l),
(274,700,l),
(233,700,l),
(105,656,l),
(94,594,l),
(185,614,l),
(149,415,l),
(59,415,l),
(47,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
3 2 2 0 1 1 76 2 1 0 0 3 0 3 100 0 1 1 33 1 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 296;
}
);
note = one.numr;
},
{
glyphname = two.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(287,347,l),
(299,415,l),
(159,415,l),
(212,459,l),
(230,474,ls),
(278,515,o),
(328,577,o),
(328,616,qs),
(328,653,o),
(279,705,o),
(226,705,qs),
(170,705,o),
(93,644,o),
(79,585,q),
(156,585,l),
(160,608,o),
(188,639,o),
(212,639,qs),
(229,639,o),
(249,622,o),
(249,606,qs),
(249,585,o),
(210,541,o),
(166,503,qs),
(148,488,l),
(47,400,l),
(38,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 0 3 0 1 3 128 0 3 0 4 3 4 99 0 0 0 2 97 0 2 2 33 0 78 17 23 34 18 39 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = two.numr;
},
{
glyphname = three.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(234,342,o),
(316,422,o),
(316,482,qs),
(316,515,o),
(278,561,o),
(245,569,q),
(334,638,l),
(345,700,l),
(110,700,l),
(98,632,l),
(230,632,l),
(122,548,l),
(156,498,l),
(177,510,o),
(195,510,qs),
(215,510,o),
(240,490,o),
(240,472,qs),
(240,446,o),
(206,410,o),
(177,410,qs),
(155,410,o),
(131,431,o),
(131,449,qs),
(131,456,o),
(132,459,q),
(57,459,l),
(55,441,o),
(55,434,qs),
(55,390,o),
(114,342,o),
(165,342,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
25 19 2 2 3 18 1 0 2 7 2 2 1 0 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 2 3 0 3 2 114 0 0 1 1 0 112 0 1 6 1 5 1 5 102 0 3 3 4 95 0 4 4 33 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 2 3 0 3 2 0 128 0 0 1 1 0 112 0 1 6 1 5 1 5 102 0 3 3 4 95 0 4 4 33 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 1 6 1 5 1 5 102 0 3 3 4 95 0 4 4 33 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 31 0 30 17 19 36 36 20 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 297;
}
);
note = three.numr;
},
{
glyphname = four.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(268,347,l),
(279,410,l),
(318,410,l),
(331,479,l),
(292,479,l),
(306,560,l),
(233,560,l),
(219,479,l),
(136,479,l),
(284,700,l),
(206,700,l),
(49,469,l),
(38,410,l),
(202,410,l),
(191,347,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 3 1 2 2 3 114 0 6 0 0 6 113 0 1 1 33 77 5 1 0 0 2 95 4 1 2 2 36 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 3 1 2 1 3 2 128 0 6 0 0 6 113 0 1 1 33 77 5 1 0 0 2 95 4 1 2 2 36 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 3 1 2 1 3 2 128 0 6 0 6 134 0 1 1 33 77 5 1 0 0 2 95 4 1 2 2 36 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 0 6 0 6 134 4 1 2 5 1 0 6 2 0 104 0 1 1 33 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 295;
}
);
note = four.numr;
},
{
glyphname = five.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,342,o),
(275,383,o),
(316,454,o),
(316,498,qs),
(316,540,o),
(265,594,o),
(218,594,qs),
(184,594,o),
(157,579,q),
(177,631,l),
(319,631,l),
(331,700,l),
(130,700,l),
(62,492,l),
(135,492,l),
(157,529,o),
(197,529,qs),
(217,529,o),
(240,505,o),
(240,484,qs),
(240,452,o),
(202,410,o),
(175,410,qs),
(154,410,o),
(128,433,o),
(127,452,q),
(51,452,l),
(47,400,o),
(106,342,o),
(163,342,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
20 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 3 2 0 5 3 114 0 0 1 1 0 112 0 6 0 2 3 6 2 105 0 1 8 1 7 1 7 102 0 5 5 4 95 0 4 4 33 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 2 0 2 3 0 128 0 0 1 1 0 112 0 6 0 2 3 6 2 105 0 1 8 1 7 1 7 102 0 5 5 4 95 0 4 4 33 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 1 8 1 7 1 7 102 0 5 5 4 95 0 4 4 33 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 29 0 28 34 17 17 17 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = five.numr;
},
{
glyphname = six.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(211,342,o),
(276,383,o),
(314,451,o),
(314,488,qs),
(314,532,o),
(261,580,o),
(224,580,qs),
(205,580,o),
(165,565,o),
(148,551,q),
(172,639,o),
(222,639,qs),
(258,639,o),
(258,601,q),
(330,601,l),
(333,648,o),
(283,705,o),
(234,705,qs),
(180,705,o),
(101,631,o),
(61,519,o),
(61,466,qs),
(61,410,o),
(116,342,o),
(172,342,qs)
);
},
{
closed = 1;
nodes = (
(162,410,o),
(139,433,o),
(139,451,qs),
(139,476,o),
(174,513,o),
(198,513,qs),
(217,513,o),
(239,491,o),
(239,472,qs),
(239,447,o),
(205,410,o),
(181,410,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 5 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 1 2 3 2 1 114 0 3 0 5 6 3 5 105 8 1 6 7 1 4 6 4 101 0 2 2 0 97 0 0 0 33 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 8 1 6 7 1 4 6 4 101 0 2 2 0 97 0 0 0 33 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
25 25 0 0 25 36 25 35 31 29 0 24 0 23 35 33 18 37 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 292;
}
);
note = six.numr;
},
{
glyphname = seven.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,346,l),
(350,646,l),
(360,699,l),
(98,699,l),
(86,631,l),
(263,631,l),
(78,346,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 2 0 2 134 0 0 0 1 95 0 1 1 33 0 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 298;
}
);
note = seven.numr;
},
{
glyphname = eight.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(208,342,o),
(274,375,o),
(309,431,o),
(309,464,qs),
(309,516,o),
(265,537,q),
(291,549,o),
(327,593,o),
(327,623,qs),
(327,660,o),
(274,705,o),
(226,705,qs),
(166,705,o),
(87,646,o),
(87,598,qs),
(87,562,o),
(124,537,q),
(90,524,o),
(52,468,o),
(52,435,qs),
(52,397,o),
(110,342,o),
(164,342,qs)
);
},
{
closed = 1;
nodes = (
(154,406,o),
(129,429,o),
(129,447,qs),
(129,471,o),
(166,503,o),
(189,503,qs),
(210,503,o),
(234,481,o),
(234,463,qs),
(234,437,o),
(199,406,o),
(174,406,qs)
);
},
{
closed = 1;
nodes = (
(182,559,o),
(162,578,o),
(162,595,qs),
(162,614,o),
(193,642,o),
(213,642,qs),
(230,642,o),
(250,621,o),
(250,607,qs),
(250,587,o),
(220,559,o),
(200,559,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
16 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 7 1 3 6 1 1 3 1 101 0 4 4 0 97 0 0 0 33 4 78 35 35 23 23 0 0 35 46 35 45 41 39 23 34 23 33 29 27 0 22 0 21 41 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 290;
}
);
note = eight.numr;
},
{
glyphname = nine.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,342,o),
(289,416,o),
(330,528,o),
(330,580,qs),
(330,636,o),
(275,705,o),
(219,705,qs),
(180,705,o),
(113,663,o),
(75,597,o),
(75,562,qs),
(75,521,o),
(126,467,o),
(167,467,qs),
(186,467,o),
(226,482,o),
(242,496,q),
(218,408,o),
(168,408,qs),
(133,408,o),
(132,448,q),
(60,448,l),
(57,400,o),
(107,342,o),
(157,342,qs)
);
},
{
closed = 1;
nodes = (
(173,534,o),
(152,556,o),
(152,574,qs),
(152,600,o),
(185,637,o),
(210,637,qs),
(229,637,o),
(251,615,o),
(251,597,qs),
(251,571,o),
(216,534,o),
(192,534,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 1 0 114 8 1 6 0 2 0 6 2 105 0 1 7 1 4 1 4 102 0 5 5 3 97 0 3 3 33 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 1 7 1 4 1 4 102 0 5 5 3 97 0 3 3 33 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
25 25 0 0 25 36 25 35 31 29 0 24 0 23 37 35 33 18 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = nine.numr;
},
{
glyphname = fraction;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(37,0,l),
(681,700,l),
(583,700,l),
(-61,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = fraction;
unicode = 8260;
},
{
glyphname = onehalf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(130,0,l),
(774,700,l),
(676,700,l),
(32,0,l)
);
},
{
closed = 1;
nodes = (
(286,347,l),
(298,415,l),
(218,415,l),
(269,700,l),
(228,700,l),
(100,656,l),
(89,594,l),
(180,614,l),
(144,415,l),
(54,415,l),
(42,347,l)
);
},
{
closed = 1;
nodes = (
(672,0,l),
(684,68,l),
(544,68,l),
(597,112,l),
(615,127,ls),
(663,168,o),
(713,230,o),
(713,269,qs),
(713,306,o),
(664,358,o),
(611,358,qs),
(555,358,o),
(478,297,o),
(464,238,q),
(541,238,l),
(545,261,o),
(573,292,o),
(597,292,qs),
(614,292,o),
(634,275,o),
(634,259,qs),
(634,238,o),
(595,194,o),
(551,156,qs),
(533,141,l),
(432,53,l),
(423,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 71 values pushed */
7 6 2 2 0 1 76 3 1 0 2 0 133 0 7 6 9 6 7 9 128 4 1 2 0 5 6 2 5 104 0 8 0 6 7 8 6 105 0 9 1 1 9 87 0 9 9 1 95 10 1 1 9 1 79 41 40 39 38 34 18 40 17 17 20 17 17 16 11 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 750;
}
);
note = onehalf;
unicode = 189;
},
{
glyphname = onequarter;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,0,l),
(768,700,l),
(670,700,l),
(26,0,l)
);
},
{
closed = 1;
nodes = (
(286,347,l),
(298,415,l),
(218,415,l),
(269,700,l),
(228,700,l),
(100,656,l),
(89,594,l),
(180,614,l),
(144,415,l),
(54,415,l),
(42,347,l)
);
},
{
closed = 1;
nodes = (
(631,0,l),
(642,63,l),
(681,63,l),
(694,132,l),
(655,132,l),
(669,213,l),
(596,213,l),
(582,132,l),
(499,132,l),
(647,353,l),
(569,353,l),
(412,122,l),
(401,63,l),
(565,63,l),
(554,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 7 values pushed */
7 6 2 2 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
3 1 0 2 0 133 0 7 2 5 2 7 5 128 0 9 5 8 8 9 114 12 1 1 6 6 1 113 4 1 2 0 5 9 2 5 104 10 1 8 6 6 8 87 10 1 8 8 6 96 11 1 6 8 6 80
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
3 1 0 2 0 133 0 7 2 5 2 7 5 128 0 9 5 8 5 9 8 128 12 1 1 6 6 1 113 4 1 2 0 5 9 2 5 104 10 1 8 6 6 8 87 10 1 8 8 6 96 11 1 6 8 6 80
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
3 1 0 2 0 133 0 7 2 5 2 7 5 128 0 9 5 8 5 9 8 128 12 1 1 6 1 134 4 1 2 0 5 9 2 5 104 10 1 8 6 6 8 87 10 1 8 8 6 96 11 1 6 8 6 80
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
29 28 27 26 25 24 23 22 17 18 17 17 17 20 17 17 16 13 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 745;
}
);
note = onequarter;
unicode = 188;
},
{
glyphname = threequarters;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(134,0,l),
(778,700,l),
(680,700,l),
(36,0,l)
);
},
{
closed = 1;
nodes = (
(641,0,l),
(652,63,l),
(691,63,l),
(704,132,l),
(665,132,l),
(679,213,l),
(606,213,l),
(592,132,l),
(509,132,l),
(657,353,l),
(579,353,l),
(422,122,l),
(411,63,l),
(575,63,l),
(564,0,l)
);
},
{
closed = 1;
nodes = (
(244,342,o),
(326,422,o),
(326,482,qs),
(326,515,o),
(288,561,o),
(255,569,q),
(344,638,l),
(355,700,l),
(120,700,l),
(108,632,l),
(240,632,l),
(132,548,l),
(166,498,l),
(187,510,o),
(205,510,qs),
(225,510,o),
(250,490,o),
(250,472,qs),
(250,446,o),
(216,410,o),
(187,410,qs),
(165,410,o),
(141,431,o),
(141,449,qs),
(141,456,o),
(142,459,q),
(67,459,l),
(65,441,o),
(65,434,qs),
(65,390,o),
(124,342,o),
(175,342,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 16 values pushed */
44 38 2 11 12 37 1 9 11 26 21 2 10 9 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
0 11 12 9 12 11 114 0 9 10 10 9 112 0 3 10 14 10 3 14 128 0 5 14 4 4 5 114 8 1 1 2 2 1 113 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 106 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
0 11 12 9 12 11 9 128 0 9 10 10 9 112 0 3 10 14 10 3 14 128 0 5 14 4 4 5 114 8 1 1 2 2 1 113 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 106 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 74 values pushed */
0 11 12 9 12 11 9 128 0 9 10 10 9 112 0 3 10 14 10 3 14 128 0 5 14 4 14 5 4 128 8 1 1 2 2 1 113 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 106 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
0 11 12 9 12 11 9 128 0 9 10 10 9 112 0 3 10 14 10 3 14 128 0 5 14 4 14 5 4 128 8 1 1 2 1 134 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 106 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 74 values pushed */
0 11 12 9 12 11 9 128 0 9 10 12 9 10 126 0 3 10 14 10 3 14 128 0 5 14 4 14 5 4 128 8 1 1 2 1 134 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 106 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
19 19 19 50 19 49 42 41 40 39 36 34 30 28 24 23 17 17 17 17 17 18 17 17 16 16 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 755;
}
);
note = threequarters;
unicode = 190;
},
{
glyphname = oneeighth;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(125,-1,l),
(769,699,l),
(671,699,l),
(27,-1,l)
);
},
{
closed = 1;
nodes = (
(286,347,l),
(298,415,l),
(218,415,l),
(269,700,l),
(228,700,l),
(100,656,l),
(89,594,l),
(180,614,l),
(144,415,l),
(54,415,l),
(42,347,l)
);
},
{
closed = 1;
nodes = (
(535,59,o),
(510,82,o),
(510,100,qs),
(510,124,o),
(547,156,o),
(570,156,qs),
(591,156,o),
(615,134,o),
(615,116,qs),
(615,90,o),
(580,59,o),
(555,59,qs)
);
},
{
closed = 1;
nodes = (
(589,-5,o),
(655,28,o),
(690,84,o),
(690,117,qs),
(690,169,o),
(646,190,q),
(672,202,o),
(708,246,o),
(708,276,qs),
(708,313,o),
(655,358,o),
(607,358,qs),
(547,358,o),
(468,299,o),
(468,251,qs),
(468,215,o),
(505,190,q),
(471,177,o),
(433,121,o),
(433,88,qs),
(433,50,o),
(491,-5,o),
(545,-5,qs)
);
},
{
closed = 1;
nodes = (
(563,212,o),
(543,231,o),
(543,248,qs),
(543,267,o),
(574,295,o),
(594,295,qs),
(611,295,o),
(631,274,o),
(631,260,qs),
(631,240,o),
(601,212,o),
(581,212,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 90 values pushed */
7 6 2 2 0 43 32 2 6 11 2 76 4 1 2 0 5 10 2 5 104 0 8 0 10 11 8 10 105 14 1 11 0 6 7 11 6 105 3 1 0 0 33 77 12 1 7 7 1 97 13 9 2 1 1 34 1 78 50 50 27 27 15 15 50 61 50 60 56 54 27 49 27 48 38 36 15 26 15 25 37 17 17 20 17 17 16 15 8 29
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = oneeighth;
unicode = 8539;
},
{
glyphname = threeeighths;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,-1,l),
(767,699,l),
(669,699,l),
(25,-1,l)
);
},
{
closed = 1;
nodes = (
(244,342,o),
(326,422,o),
(326,482,qs),
(326,515,o),
(288,561,o),
(255,569,q),
(344,638,l),
(355,700,l),
(120,700,l),
(108,632,l),
(240,632,l),
(132,548,l),
(166,498,l),
(187,510,o),
(205,510,qs),
(225,510,o),
(250,490,o),
(250,472,qs),
(250,446,o),
(216,410,o),
(187,410,qs),
(165,410,o),
(141,431,o),
(141,449,qs),
(141,456,o),
(142,459,q),
(67,459,l),
(65,441,o),
(65,434,qs),
(65,390,o),
(124,342,o),
(175,342,qs)
);
},
{
closed = 1;
nodes = (
(589,-5,o),
(655,28,o),
(690,84,o),
(690,117,qs),
(690,169,o),
(646,190,q),
(672,202,o),
(708,246,o),
(708,276,qs),
(708,313,o),
(655,358,o),
(607,358,qs),
(547,358,o),
(468,299,o),
(468,251,qs),
(468,215,o),
(505,190,q),
(471,177,o),
(433,121,o),
(433,88,qs),
(433,50,o),
(491,-5,o),
(545,-5,qs)
);
},
{
closed = 1;
nodes = (
(535,59,o),
(510,82,o),
(510,100,qs),
(510,124,o),
(547,156,o),
(570,156,qs),
(591,156,o),
(615,134,o),
(615,116,qs),
(615,90,o),
(580,59,o),
(555,59,qs)
);
},
{
closed = 1;
nodes = (
(563,212,o),
(543,231,o),
(543,248,qs),
(543,267,o),
(574,295,o),
(594,295,qs),
(611,295,o),
(631,274,o),
(631,260,qs),
(631,240,o),
(601,212,o),
(581,212,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
29 23 2 4 5 22 1 2 4 11 6 2 3 2 52 41 2 10 13 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 4 5 2 5 4 114 0 2 3 3 2 112 0 3 14 1 7 12 3 7 106 0 8 0 12 13 8 12 105 17 1 13 0 10 11 13 10 105 0 5 5 0 95 6 1 0 0 33 77 16 1 11 11 1 97 15 9 2 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
0 4 5 2 5 4 2 128 0 2 3 3 2 112 0 3 14 1 7 12 3 7 106 0 8 0 12 13 8 12 105 17 1 13 0 10 11 13 10 105 0 5 5 0 95 6 1 0 0 33 77 16 1 11 11 1 97 15 9 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 66 values pushed */
0 4 5 2 5 4 2 128 0 2 3 5 2 3 126 0 3 14 1 7 12 3 7 106 0 8 0 12 13 8 12 105 17 1 13 0 10 11 13 10 105 0 5 5 0 95 6 1 0 0 33 77 16 1 11 11 1 97 15 9 2 1 1 34 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 40 values pushed */
71 71 59 59 36 36 4 4 71 82 71 81 77 75 59 70 59 69 65 63 36 58 36 57 47 45 4 35 4 34 17 19 36 36 21 17 16 18 8 29
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = threeeighths;
unicode = 8540;
},
{
glyphname = fiveeighths;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(127,-1,l),
(771,699,l),
(672,699,l),
(28,-1,l)
);
},
{
closed = 1;
nodes = (
(219,342,o),
(289,383,o),
(330,454,o),
(330,498,qs),
(330,540,o),
(279,594,o),
(232,594,qs),
(198,594,o),
(171,579,q),
(191,631,l),
(333,631,l),
(345,700,l),
(144,700,l),
(76,492,l),
(149,492,l),
(171,529,o),
(211,529,qs),
(231,529,o),
(254,505,o),
(254,484,qs),
(254,452,o),
(216,410,o),
(189,410,qs),
(168,410,o),
(142,433,o),
(141,452,q),
(65,452,l),
(61,400,o),
(120,342,o),
(177,342,qs)
);
},
{
closed = 1;
nodes = (
(593,-5,o),
(659,28,o),
(694,84,o),
(694,117,qs),
(694,169,o),
(650,190,q),
(676,202,o),
(712,246,o),
(712,276,qs),
(712,313,o),
(659,358,o),
(611,358,qs),
(551,358,o),
(472,299,o),
(472,251,qs),
(472,215,o),
(509,190,q),
(475,177,o),
(437,121,o),
(437,88,qs),
(437,50,o),
(495,-5,o),
(549,-5,qs)
);
},
{
closed = 1;
nodes = (
(539,59,o),
(514,82,o),
(514,100,qs),
(514,124,o),
(551,156,o),
(574,156,qs),
(595,156,o),
(619,134,o),
(619,116,qs),
(619,90,o),
(584,59,o),
(559,59,qs)
);
},
{
closed = 1;
nodes = (
(567,212,o),
(547,231,o),
(547,248,qs),
(547,267,o),
(578,295,o),
(598,295,qs),
(615,295,o),
(635,274,o),
(635,260,qs),
(635,240,o),
(605,212,o),
(585,212,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
24 1 4 8 50 39 2 12 15 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
0 5 4 2 7 5 114 0 2 3 3 2 112 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 106 0 10 0 14 15 10 14 105 19 1 15 0 12 13 15 12 105 0 7 7 0 95 6 1 0 0 33 77 18 1 13 13 1 97 17 11 2 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
0 5 4 2 4 5 2 128 0 2 3 3 2 112 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 106 0 10 0 14 15 10 14 105 19 1 15 0 12 13 15 12 105 0 7 7 0 95 6 1 0 0 33 77 18 1 13 13 1 97 17 11 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 74 values pushed */
0 5 4 2 4 5 2 128 0 2 3 4 2 3 126 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 106 0 10 0 14 15 10 14 105 19 1 15 0 12 13 15 12 105 0 7 7 0 95 6 1 0 0 33 77 18 1 13 13 1 97 17 11 2 1 1 34 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 42 values pushed */
69 69 57 57 34 34 4 4 69 80 69 79 75 73 57 68 57 67 63 61 34 56 34 55 45 43 4 33 4 32 34 17 17 17 36 34 19 17 16 20 8 31
CALL[ ]	/* CallFunction */";
};
width = 744;
}
);
note = fiveeighths;
unicode = 8541;
},
{
glyphname = seveneighths;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(95,-1,l),
(739,699,l),
(640,699,l),
(-4,-1,l)
);
},
{
closed = 1;
nodes = (
(182,346,l),
(373,646,l),
(383,699,l),
(121,699,l),
(109,631,l),
(286,631,l),
(101,346,l)
);
},
{
closed = 1;
nodes = (
(573,-5,o),
(639,28,o),
(674,84,o),
(674,117,qs),
(674,169,o),
(630,190,q),
(656,202,o),
(692,246,o),
(692,276,qs),
(692,313,o),
(639,358,o),
(591,358,qs),
(531,358,o),
(452,299,o),
(452,251,qs),
(452,215,o),
(489,190,q),
(455,177,o),
(417,121,o),
(417,88,qs),
(417,50,o),
(475,-5,o),
(529,-5,qs)
);
},
{
closed = 1;
nodes = (
(519,59,o),
(494,82,o),
(494,100,qs),
(494,124,o),
(531,156,o),
(554,156,qs),
(575,156,o),
(599,134,o),
(599,116,qs),
(599,90,o),
(564,59,o),
(539,59,qs)
);
},
{
closed = 1;
nodes = (
(547,212,o),
(527,231,o),
(527,248,qs),
(527,267,o),
(558,295,o),
(578,295,qs),
(595,295,o),
(615,274,o),
(615,260,qs),
(615,240,o),
(585,212,o),
(565,212,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 88 values pushed */
27 16 2 7 10 1 76 0 4 5 9 5 4 9 128 0 5 0 9 10 5 9 105 13 1 10 0 7 8 10 7 105 0 2 2 0 95 3 1 0 0 33 77 12 1 8 8 1 97 11 6 2 1 1 34 1 78 46 46 34 34 11 11 46 57 46 56 52 50 34 45 34 44 40 38 11 33 11 32 42 18 17 17 17 16 14 8 28
CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = seveneighths;
unicode = 8542;
},
{
glyphname = uni2080;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,-5,o),
(247,76,o),
(279,187,o),
(279,236,qs),
(279,293,o),
(227,358,o),
(171,358,qs),
(110,358,o),
(33,280,o),
(0,170,o),
(0,119,qs),
(0,-5,o),
(107,-5,qs)
);
},
{
closed = 1;
nodes = (
(77,65,o),
(77,129,qs),
(77,156,o),
(93,231,o),
(130,288,o),
(159,288,qs),
(200,288,o),
(200,227,qs),
(200,198,o),
(183,122,o),
(147,65,o),
(120,65,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 51 77 5 1 3 3 1 97 4 1 1 1 52 1 78 13 13 0 0 13 24 13 23 19 17 0 12 0 11 36 6 9 23
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = uni2080;
unicode = 8320;
},
{
glyphname = uni2081;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(230,0,l),
(242,68,l),
(162,68,l),
(213,353,l),
(172,353,l),
(44,309,l),
(33,247,l),
(123,267,l),
(88,68,l),
(-2,68,l),
(-14,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
3 2 2 0 1 1 76 0 1 1 49 77 2 1 0 0 3 96 0 3 3 50 3 78 17 17 20 16 4 9 26
CALL[ ]	/* CallFunction */";
};
width = 296;
}
);
note = uni2081;
unicode = 8321;
},
{
glyphname = uni2082;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,0,l),
(238,68,l),
(98,68,l),
(151,112,l),
(169,127,ls),
(217,168,o),
(267,230,o),
(267,269,qs),
(267,306,o),
(218,358,o),
(165,358,qs),
(109,358,o),
(32,297,o),
(18,238,q),
(95,238,l),
(99,261,o),
(127,292,o),
(151,292,qs),
(168,292,o),
(188,275,o),
(188,259,qs),
(188,238,o),
(149,194,o),
(105,156,qs),
(87,141,l),
(-14,53,l),
(-23,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 51 77 0 3 3 4 95 0 4 4 50 4 78 17 23 34 18 39 5 9 27
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = uni2082;
unicode = 8322;
},
{
glyphname = uni2083;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,-5,o),
(255,75,o),
(255,135,qs),
(255,168,o),
(217,214,o),
(184,222,q),
(273,291,l),
(284,353,l),
(49,353,l),
(37,285,l),
(169,285,l),
(61,201,l),
(95,151,l),
(116,163,o),
(134,163,qs),
(154,163,o),
(179,143,o),
(179,125,qs),
(179,99,o),
(145,63,o),
(116,63,qs),
(94,63,o),
(70,84,o),
(70,102,qs),
(70,109,o),
(71,112,q),
(-4,112,l),
(-6,94,o),
(-6,87,qs),
(-6,43,o),
(53,-5,o),
(104,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
25 19 2 2 3 18 1 0 2 7 2 2 1 0 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 3 0 3 2 114 0 0 1 1 0 112 0 3 3 4 95 0 4 4 49 77 0 1 1 5 98 6 1 5 5 52 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 3 0 3 2 0 128 0 0 1 1 0 112 0 3 3 4 95 0 4 4 49 77 0 1 1 5 98 6 1 5 5 52 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 49 77 0 1 1 5 98 6 1 5 5 52 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 31 0 30 17 19 36 36 20 7 9 27
CALL[ ]	/* CallFunction */";
};
width = 297;
}
);
note = uni2083;
unicode = 8323;
},
{
glyphname = uni2084;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,0,l),
(217,63,l),
(256,63,l),
(269,132,l),
(230,132,l),
(244,213,l),
(171,213,l),
(157,132,l),
(74,132,l),
(222,353,l),
(144,353,l),
(-13,122,l),
(-24,63,l),
(140,63,l),
(129,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 1 2 2 3 114 4 1 2 5 1 0 6 2 0 104 0 1 1 49 77 0 6 6 50 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 49 77 0 6 6 50 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 9 29
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = uni2084;
unicode = 8324;
},
{
glyphname = uni2085;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,-5,o),
(213,36,o),
(255,107,o),
(255,151,qs),
(255,193,o),
(204,247,o),
(157,247,qs),
(123,247,o),
(96,232,q),
(115,284,l),
(257,284,l),
(270,353,l),
(69,353,l),
(1,145,l),
(74,145,l),
(96,182,o),
(135,182,qs),
(155,182,o),
(179,158,o),
(179,137,qs),
(179,105,o),
(140,63,o),
(113,63,qs),
(92,63,o),
(66,86,o),
(66,105,q),
(-10,105,l),
(-15,53,o),
(44,-5,o),
(101,-5,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
20 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 3 2 0 5 3 114 0 0 1 1 0 112 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 49 77 0 1 1 7 98 8 1 7 7 52 7 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 3 2 0 2 3 0 128 0 0 1 1 0 112 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 49 77 0 1 1 7 98 8 1 7 7 52 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 49 77 0 1 1 7 98 8 1 7 7 52 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 29 0 28 34 17 17 17 36 34 18 9 9 29
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = uni2085;
unicode = 8325;
},
{
glyphname = uni2086;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(151,-5,o),
(216,37,o),
(254,104,o),
(254,141,qs),
(254,185,o),
(200,233,o),
(163,233,qs),
(144,233,o),
(104,218,o),
(88,204,q),
(112,292,o),
(162,292,qs),
(196,292,o),
(198,254,q),
(270,254,l),
(273,300,o),
(223,358,o),
(173,358,qs),
(119,358,o),
(40,283,o),
(0,171,o),
(0,119,qs),
(0,63,o),
(55,-5,o),
(111,-5,qs)
);
},
{
closed = 1;
nodes = (
(101,63,o),
(79,85,o),
(79,103,qs),
(79,129,o),
(114,166,o),
(138,166,qs),
(157,166,o),
(178,144,o),
(178,126,qs),
(178,100,o),
(145,63,o),
(120,63,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 5 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 1 2 3 2 1 114 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 51 77 8 1 6 6 4 97 7 1 4 4 52 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 51 77 8 1 6 6 4 97 7 1 4 4 52 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
25 25 0 0 25 36 25 35 31 29 0 24 0 23 35 33 18 37 9 9 26
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = uni2086;
unicode = 8326;
},
{
glyphname = uni2087;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(98,-1,l),
(289,299,l),
(298,352,l),
(36,352,l),
(24,284,l),
(201,284,l),
(17,-1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 95 0 1 1 49 77 0 2 2 50 2 78 18 17 16 3 9 25
CALL[ ]	/* CallFunction */";
};
width = 298;
}
);
note = uni2087;
unicode = 8327;
},
{
glyphname = uni2088;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(146,-5,o),
(212,28,o),
(247,84,o),
(247,117,qs),
(247,169,o),
(203,190,q),
(229,202,o),
(265,246,o),
(265,276,qs),
(265,313,o),
(212,358,o),
(164,358,qs),
(104,358,o),
(25,299,o),
(25,251,qs),
(25,215,o),
(62,190,q),
(28,177,o),
(-10,121,o),
(-10,88,qs),
(-10,50,o),
(48,-5,o),
(102,-5,qs)
);
},
{
closed = 1;
nodes = (
(92,59,o),
(67,82,o),
(67,100,qs),
(67,124,o),
(104,156,o),
(127,156,qs),
(148,156,o),
(172,134,o),
(172,116,qs),
(172,90,o),
(137,59,o),
(112,59,qs)
);
},
{
closed = 1;
nodes = (
(120,212,o),
(100,231,o),
(100,248,qs),
(100,267,o),
(131,295,o),
(151,295,qs),
(168,295,o),
(188,274,o),
(188,260,qs),
(188,240,o),
(158,212,o),
(138,212,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
16 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 51 77 7 1 3 3 1 97 6 1 1 1 52 1 78 35 35 23 23 0 0 35 46 35 45 41 39 23 34 23 33 29 27 0 22 0 21 41 9 9 23
CALL[ ]	/* CallFunction */";
};
width = 289;
}
);
note = uni2088;
unicode = 8328;
},
{
glyphname = uni2089;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(148,-5,o),
(227,69,o),
(268,181,o),
(268,234,qs),
(268,290,o),
(213,358,o),
(157,358,qs),
(118,358,o),
(52,317,o),
(14,250,o),
(14,215,qs),
(14,173,o),
(64,120,o),
(105,120,qs),
(124,120,o),
(164,135,o),
(181,149,q),
(157,61,o),
(107,61,qs),
(71,61,o),
(71,101,q),
(-1,101,l),
(-4,53,o),
(45,-5,o),
(95,-5,qs)
);
},
{
closed = 1;
nodes = (
(112,187,o),
(90,209,o),
(90,228,qs),
(90,253,o),
(124,290,o),
(148,290,qs),
(167,290,o),
(190,267,o),
(190,249,qs),
(190,224,o),
(155,187,o),
(131,187,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 0 2 1 1 0 114 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 51 77 0 1 1 4 98 7 1 4 4 52 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 51 77 0 1 1 4 98 7 1 4 4 52 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
25 25 0 0 25 36 25 35 31 29 0 24 0 23 37 35 33 18 9 9 26
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = uni2089;
unicode = 8329;
},
{
glyphname = uni2070;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,342,o),
(308,421,o),
(340,532,o),
(340,582,qs),
(340,639,o),
(289,705,o),
(233,705,qs),
(171,705,o),
(94,625,o),
(61,514,o),
(61,465,qs),
(61,408,o),
(113,342,o),
(169,342,qs)
);
},
{
closed = 1;
nodes = (
(163,412,o),
(139,440,o),
(139,474,qs),
(139,502,o),
(154,578,o),
(191,635,o),
(220,635,qs),
(262,635,o),
(262,572,qs),
(262,544,o),
(246,468,o),
(209,412,o),
(181,412,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 59 77 5 1 3 3 1 97 4 1 1 1 60 1 78 14 14 0 0 14 26 14 25 20 18 0 13 0 12 37 6 10 23
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = uni2070;
unicode = 8304;
},
{
glyphname = uni00B9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(291,347,l),
(303,415,l),
(223,415,l),
(274,700,l),
(233,700,l),
(105,656,l),
(94,594,l),
(185,614,l),
(149,415,l),
(59,415,l),
(47,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
3 2 2 0 1 1 76 0 1 1 57 77 2 1 0 0 3 96 0 3 3 58 3 78 17 17 20 16 4 10 26
CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni00B9;
unicode = 185;
},
{
glyphname = uni00B2;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(287,347,l),
(299,415,l),
(159,415,l),
(212,459,l),
(230,474,ls),
(278,515,o),
(328,577,o),
(328,616,qs),
(328,653,o),
(279,705,o),
(226,705,qs),
(170,705,o),
(93,644,o),
(79,585,q),
(156,585,l),
(160,608,o),
(188,639,o),
(212,639,qs),
(229,639,o),
(249,622,o),
(249,606,qs),
(249,585,o),
(210,541,o),
(166,503,qs),
(148,488,l),
(47,400,l),
(38,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 59 77 0 3 3 4 95 0 4 4 58 4 78 17 23 34 18 39 5 10 27
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = uni00B2;
unicode = 178;
},
{
glyphname = uni00B3;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(234,342,o),
(316,422,o),
(316,482,qs),
(316,515,o),
(278,561,o),
(245,569,q),
(334,638,l),
(345,700,l),
(110,700,l),
(98,632,l),
(230,632,l),
(122,548,l),
(156,498,l),
(177,510,o),
(195,510,qs),
(215,510,o),
(240,490,o),
(240,472,qs),
(240,446,o),
(206,410,o),
(177,410,qs),
(155,410,o),
(131,431,o),
(131,449,qs),
(131,456,o),
(132,459,q),
(57,459,l),
(55,441,o),
(55,434,qs),
(55,390,o),
(114,342,o),
(165,342,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
25 19 2 2 3 18 1 0 2 7 2 2 1 0 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 3 0 3 2 114 0 0 1 1 0 112 0 3 3 4 95 0 4 4 57 77 0 1 1 5 98 6 1 5 5 60 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 3 0 3 2 0 128 0 0 1 1 0 112 0 3 3 4 95 0 4 4 57 77 0 1 1 5 98 6 1 5 5 60 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 57 77 0 1 1 5 98 6 1 5 5 60 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 31 0 30 17 19 36 36 20 7 10 27
CALL[ ]	/* CallFunction */";
};
width = 297;
}
);
note = uni00B3;
unicode = 179;
},
{
glyphname = uni2074;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(268,347,l),
(279,410,l),
(318,410,l),
(331,479,l),
(292,479,l),
(306,560,l),
(233,560,l),
(219,479,l),
(136,479,l),
(284,700,l),
(206,700,l),
(49,469,l),
(38,410,l),
(202,410,l),
(191,347,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 1 2 2 3 114 4 1 2 5 1 0 6 2 0 104 0 1 1 57 77 0 6 6 58 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 57 77 0 6 6 58 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 10 29
CALL[ ]	/* CallFunction */";
};
width = 295;
}
);
note = uni2074;
unicode = 8308;
},
{
glyphname = uni2075;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,342,o),
(275,383,o),
(316,454,o),
(316,498,qs),
(316,540,o),
(265,594,o),
(218,594,qs),
(184,594,o),
(157,579,q),
(177,631,l),
(319,631,l),
(331,700,l),
(130,700,l),
(62,492,l),
(135,492,l),
(157,529,o),
(197,529,qs),
(217,529,o),
(240,505,o),
(240,484,qs),
(240,452,o),
(202,410,o),
(175,410,qs),
(154,410,o),
(128,433,o),
(127,452,q),
(51,452,l),
(47,400,o),
(106,342,o),
(163,342,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
20 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 3 2 0 5 3 114 0 0 1 1 0 112 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 57 77 0 1 1 7 98 8 1 7 7 60 7 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 3 2 0 2 3 0 128 0 0 1 1 0 112 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 57 77 0 1 1 7 98 8 1 7 7 60 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 57 77 0 1 1 7 98 8 1 7 7 60 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 29 0 28 34 17 17 17 36 34 18 9 10 29
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = uni2075;
unicode = 8309;
},
{
glyphname = uni2076;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(211,342,o),
(276,383,o),
(314,451,o),
(314,488,qs),
(314,532,o),
(261,580,o),
(224,580,qs),
(205,580,o),
(165,565,o),
(148,551,q),
(172,639,o),
(222,639,qs),
(258,639,o),
(258,601,q),
(330,601,l),
(333,648,o),
(283,705,o),
(234,705,qs),
(180,705,o),
(101,631,o),
(61,519,o),
(61,466,qs),
(61,410,o),
(116,342,o),
(172,342,qs)
);
},
{
closed = 1;
nodes = (
(162,410,o),
(139,433,o),
(139,451,qs),
(139,476,o),
(174,513,o),
(198,513,qs),
(217,513,o),
(239,491,o),
(239,472,qs),
(239,447,o),
(205,410,o),
(181,410,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 5 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 1 2 3 2 1 114 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 59 77 8 1 6 6 4 97 7 1 4 4 60 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 59 77 8 1 6 6 4 97 7 1 4 4 60 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
25 25 0 0 25 36 25 35 31 29 0 24 0 23 35 33 18 37 9 10 26
CALL[ ]	/* CallFunction */";
};
width = 292;
}
);
note = uni2076;
unicode = 8310;
},
{
glyphname = uni2077;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,346,l),
(350,646,l),
(360,699,l),
(98,699,l),
(86,631,l),
(263,631,l),
(78,346,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 95 0 1 1 57 77 0 2 2 58 2 78 18 17 16 3 10 25
CALL[ ]	/* CallFunction */";
};
width = 298;
}
);
note = uni2077;
unicode = 8311;
},
{
glyphname = uni2078;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(208,342,o),
(274,375,o),
(309,431,o),
(309,464,qs),
(309,516,o),
(265,537,q),
(291,549,o),
(327,593,o),
(327,623,qs),
(327,660,o),
(274,705,o),
(226,705,qs),
(166,705,o),
(87,646,o),
(87,598,qs),
(87,562,o),
(124,537,q),
(90,524,o),
(52,468,o),
(52,435,qs),
(52,397,o),
(110,342,o),
(164,342,qs)
);
},
{
closed = 1;
nodes = (
(154,406,o),
(129,429,o),
(129,447,qs),
(129,471,o),
(166,503,o),
(189,503,qs),
(210,503,o),
(234,481,o),
(234,463,qs),
(234,437,o),
(199,406,o),
(174,406,qs)
);
},
{
closed = 1;
nodes = (
(182,559,o),
(162,578,o),
(162,595,qs),
(162,614,o),
(193,642,o),
(213,642,qs),
(230,642,o),
(250,621,o),
(250,607,qs),
(250,587,o),
(220,559,o),
(200,559,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
16 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 59 77 7 1 3 3 1 97 6 1 1 1 60 1 78 35 35 23 23 0 0 35 46 35 45 41 39 23 34 23 33 29 27 0 22 0 21 41 9 10 23
CALL[ ]	/* CallFunction */";
};
width = 290;
}
);
note = uni2078;
unicode = 8312;
},
{
glyphname = uni2079;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,342,o),
(289,416,o),
(330,528,o),
(330,580,qs),
(330,636,o),
(275,705,o),
(219,705,qs),
(180,705,o),
(113,663,o),
(75,597,o),
(75,562,qs),
(75,521,o),
(126,467,o),
(167,467,qs),
(186,467,o),
(226,482,o),
(242,496,q),
(218,408,o),
(168,408,qs),
(133,408,o),
(132,448,q),
(60,448,l),
(57,400,o),
(107,342,o),
(157,342,qs)
);
},
{
closed = 1;
nodes = (
(173,534,o),
(152,556,o),
(152,574,qs),
(152,600,o),
(185,637,o),
(210,637,qs),
(229,637,o),
(251,615,o),
(251,597,qs),
(251,571,o),
(216,534,o),
(192,534,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 0 2 1 1 0 114 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 59 77 0 1 1 4 98 7 1 4 4 60 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 59 77 0 1 1 4 98 7 1 4 4 60 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
25 25 0 0 25 36 25 35 31 29 0 24 0 23 37 35 33 18 9 10 26
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = uni2079;
unicode = 8313;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 238;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = period;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,-12,o),
(163,37,o),
(163,71,qs),
(163,106,o),
(115,154,o),
(80,154,qs),
(45,154,o),
(-3,106,o),
(-3,71,qs),
(-3,36,o),
(45,-12,o),
(80,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 97 2 1 1 1 40 1 78 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 222;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
kernLeft = comma;
kernRight = comma;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(22,-116,l),
(163,133,l),
(39,133,l),
(-62,-116,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 212;
}
);
note = comma;
unicode = 44;
},
{
glyphname = colon;
kernLeft = colon;
kernRight = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,346,o),
(227,395,o),
(227,429,qs),
(227,464,o),
(179,512,o),
(144,512,qs),
(109,512,o),
(61,464,o),
(61,429,qs),
(61,394,o),
(109,346,o),
(144,346,qs)
);
},
{
closed = 1;
nodes = (
(115,-12,o),
(163,37,o),
(163,71,qs),
(163,106,o),
(115,154,o),
(80,154,qs),
(45,154,o),
(-3,106,o),
(-3,71,qs),
(-3,36,o),
(45,-12,o),
(80,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
4 1 1 1 0 97 0 0 0 42 77 0 2 2 3 97 5 1 3 3 40 3 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 222;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
kernLeft = semicolon;
kernRight = semicolon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,-116,l),
(172,133,l),
(48,133,l),
(-53,-116,l)
);
},
{
closed = 1;
nodes = (
(203,346,o),
(251,395,o),
(251,429,qs),
(251,464,o),
(203,512,o),
(168,512,qs),
(133,512,o),
(85,464,o),
(85,429,qs),
(85,394,o),
(133,346,o),
(168,346,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 0 3 1 3 0 1 128 0 1 1 132 4 1 3 3 2 97 0 2 2 42 3 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 245;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = ellipsis;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(560,-12,o),
(608,37,o),
(608,71,qs),
(608,106,o),
(560,154,o),
(525,154,qs),
(490,154,o),
(442,106,o),
(442,71,qs),
(442,36,o),
(490,-12,o),
(525,-12,qs)
);
},
{
closed = 1;
nodes = (
(118,-12,o),
(166,37,o),
(166,71,qs),
(166,106,o),
(118,154,o),
(83,154,qs),
(48,154,o),
(0,106,o),
(0,71,qs),
(0,36,o),
(48,-12,o),
(83,-12,qs)
);
},
{
closed = 1;
nodes = (
(339,-12,o),
(387,37,o),
(387,71,qs),
(387,106,o),
(339,154,o),
(304,154,qs),
(269,154,o),
(221,106,o),
(221,71,qs),
(221,36,o),
(269,-12,o),
(304,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
4 2 2 0 0 1 97 8 5 7 3 6 5 1 1 40 1 78 24 24 12 12 0 0 24 35 24 34 30 28 12 23 12 22 18 16 0 11 0 10 36 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 671;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,221,l),
(278,700,l),
(141,700,l),
(71,221,l)
);
},
{
closed = 1;
nodes = (
(143,-12,o),
(191,37,o),
(191,71,qs),
(191,106,o),
(143,154,o),
(108,154,qs),
(73,154,o),
(25,106,o),
(25,71,qs),
(25,36,o),
(73,-12,o),
(108,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 1 0 95 0 0 0 33 77 0 2 2 3 97 4 1 3 3 40 3 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 278;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = exclamdown;
kernLeft = exclamdown;
kernRight = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(149,-139,l),
(219,340,l),
(111,340,l),
(12,-139,l)
);
},
{
closed = 1;
nodes = (
(217,407,o),
(265,455,o),
(265,490,qs),
(265,525,o),
(217,573,o),
(182,573,qs),
(148,573,o),
(99,525,o),
(99,490,qs),
(99,456,o),
(148,407,o),
(182,407,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 2 4 1 3 0 2 3 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 279;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = question;
kernLeft = question;
kernRight = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,218,l),
(249,298,l),
(332,300,o),
(391,327,qs),
(454,355,o),
(524,463,o),
(524,537,qs),
(524,618,o),
(418,712,o),
(328,712,qs),
(256,712,o),
(200,685,qs),
(143,658,o),
(72,564,o),
(62,504,q),
(183,504,l),
(191,551,o),
(258,606,o),
(308,606,qs),
(350,606,o),
(398,560,o),
(398,522,qs),
(398,467,o),
(370,438,qs),
(320,383,o),
(189,383,qs),
(144,383,l),
(119,218,l)
);
},
{
closed = 1;
nodes = (
(188,-12,o),
(236,37,o),
(236,71,qs),
(236,106,o),
(188,154,o),
(153,154,qs),
(118,154,o),
(70,106,o),
(70,71,qs),
(70,36,o),
(118,-12,o),
(153,-12,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 2 1 0 1 2 0 128 0 5 4 6 4 5 114 0 0 0 4 5 0 4 105 0 1 1 3 97 0 3 3 39 77 0 6 6 7 97 8 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 2 1 0 1 2 0 128 0 5 4 6 4 5 6 128 0 0 0 4 5 0 4 105 0 1 1 3 97 0 3 3 39 77 0 6 6 7 97 8 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
28 28 28 39 28 38 37 17 22 36 18 37 32 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 507;
}
);
note = question;
unicode = 63;
},
{
glyphname = questiondown;
kernLeft = questiondown;
kernRight = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(249,-156,o),
(362,-112,o),
(445,-18,o),
(456,52,q),
(335,52,l),
(327,5,o),
(260,-50,o),
(210,-50,qs),
(168,-50,o),
(120,-4,o),
(120,34,qs),
(120,106,o),
(224,173,o),
(329,173,qs),
(374,173,l),
(399,338,l),
(287,338,l),
(269,258,l),
(199,257,o),
(75,209,o),
(-6,103,o),
(-6,19,qs),
(-6,-62,o),
(100,-156,o),
(190,-156,qs)
);
},
{
closed = 1;
nodes = (
(400,402,o),
(448,450,o),
(448,485,qs),
(448,520,o),
(400,568,o),
(365,568,qs),
(331,568,o),
(282,520,o),
(282,485,qs),
(282,451,o),
(331,402,o),
(365,402,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 1 7 0 0 1 114 0 4 2 3 2 4 3 128 0 6 9 1 7 1 6 7 105 0 0 0 2 4 0 2 106 0 3 5 5 3 89 0 3 3 5 97 8 1 5 3 5 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 1 7 0 7 1 0 128 0 4 2 3 2 4 3 128 0 6 9 1 7 1 6 7 105 0 0 0 2 4 0 2 106 0 3 5 5 3 89 0 3 3 5 97 8 1 5 3 5 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
25 25 0 0 25 36 25 35 31 29 0 24 0 23 18 36 33 17 21 10 8 27
CALL[ ]	/* CallFunction */";
};
width = 507;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(162,255,o),
(210,304,o),
(210,338,qs),
(210,373,o),
(162,421,o),
(127,421,qs),
(92,421,o),
(44,373,o),
(44,338,qs),
(44,303,o),
(92,255,o),
(127,255,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 222;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(235,198,o),
(298,234,o),
(334,296,o),
(334,333,qs),
(334,370,o),
(298,433,o),
(235,469,o),
(198,469,qs),
(161,469,o),
(99,433,o),
(63,370,o),
(63,333,qs),
(63,296,o),
(99,234,o),
(161,198,o),
(198,198,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 15 0 14 38 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 367;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = asterisk;
kernLeft = asterisk;
kernRight = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(296,360,l),
(317,480,l),
(410,420,l),
(463,489,l),
(369,549,l),
(483,608,l),
(456,677,l),
(341,617,l),
(362,737,l),
(283,737,l),
(262,617,l),
(169,677,l),
(117,608,l),
(210,549,l),
(97,489,l),
(123,420,l),
(238,480,l),
(217,360,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
15 14 13 12 11 10 9 6 5 4 3 2 1 13 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 24 23 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 486;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(202,0,l),
(271,175,l),
(461,175,l),
(392,0,l),
(513,0,l),
(581,175,l),
(739,175,l),
(759,290,l),
(626,290,l),
(683,436,l),
(839,436,l),
(859,551,l),
(728,551,l),
(795,723,l),
(675,723,l),
(607,551,l),
(418,551,l),
(485,723,l),
(364,723,l),
(297,551,l),
(125,551,l),
(106,436,l),
(252,436,l),
(195,290,l),
(26,290,l),
(6,175,l),
(150,175,l),
(82,0,l)
);
},
{
closed = 1;
nodes = (
(373,436,l),
(563,436,l),
(505,290,l),
(316,290,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 5 2 3 14 8 2 2 1 3 2 104 16 15 9 3 1 12 10 2 0 11 1 0 103 6 1 4 4 33 77 13 1 11 11 34 11 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
6 1 4 3 4 133 7 5 2 3 14 8 2 2 1 3 2 104 16 15 9 3 1 12 10 2 0 11 1 0 103 13 1 11 11 34 11 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
28 28 28 31 28 31 30 29 27 26 25 24 23 22 21 20 19 18 17 17 17 17 17 17 17 17 16 17 8 31
CALL[ ]	/* CallFunction */";
};
width = 840;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = slash;
kernLeft = slash;
kernRight = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,-111,l),
(481,777,l),
(356,777,l),
(-50,-111,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 401;
}
);
note = slash;
unicode = 47;
},
{
glyphname = backslash;
kernLeft = backslash;
kernRight = backslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(324,-111,l),
(231,777,l),
(107,777,l),
(200,-111,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 401;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = periodcentered.loclCAT;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(130,255,o),
(178,304,o),
(178,338,qs),
(178,373,o),
(130,421,o),
(95,421,qs),
(60,421,o),
(12,373,o),
(12,338,qs),
(12,303,o),
(60,255,o),
(95,255,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 158;
}
);
note = periodcentered.loclCAT;
},
{
glyphname = periodcentered.loclCAT.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-99,267,o),
(-50,316,o),
(-50,350,qs),
(-50,385,o),
(-99,433,o),
(-133,433,qs),
(-168,433,o),
(-216,385,o),
(-216,350,qs),
(-216,315,o),
(-168,267,o),
(-133,267,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = periodcentered.loclCAT.case;
},
{
glyphname = hyphen;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(391,236,l),
(410,343,l),
(71,343,l),
(53,236,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 447;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = endash;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(582,236,l),
(601,343,l),
(61,343,l),
(43,236,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(802,236,l),
(821,343,l),
(61,343,l),
(43,236,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 849;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = underscore;
kernLeft = underscore;
kernRight = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(545,-160,l),
(566,-38,l),
(-6,-38,l),
(-27,-160,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 661;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = parenleft;
kernRight = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(288,-145,l),
(291,-133,l),
(232,-57,o),
(167,133,o),
(167,233,qs),
(167,334,o),
(201,433,qs),
(235,532,o),
(364,718,o),
(455,799,q),
(456,811,l),
(329,811,l),
(238,734,o),
(175,640,qs),
(109,543,o),
(40,327,o),
(40,217,qs),
(40,111,o),
(104,-78,o),
(160,-145,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 26 23 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 380;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
kernLeft = parenright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-46,-145,l),
(82,-145,l),
(171,-69,o),
(235,27,qs),
(301,124,o),
(370,339,o),
(370,449,qs),
(370,555,o),
(306,744,o),
(250,811,q),
(122,811,l),
(119,799,l),
(179,724,o),
(243,534,o),
(243,433,qs),
(243,332,o),
(209,234,qs),
(175,135,o),
(47,-51,o),
(-44,-133,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 24 24 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 380;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(317,-173,l),
(335,-67,l),
(297,-67,ls),
(267,-67,o),
(235,-42,o),
(235,-12,qs),
(235,12,o),
(249,62,o),
(262,98,qs),
(276,137,o),
(290,188,o),
(290,213,qs),
(290,253,o),
(247,309,o),
(203,318,q),
(203,320,l),
(266,333,o),
(327,416,o),
(343,508,o),
(343,561,qs),
(343,601,o),
(351,659,o),
(391,705,o),
(433,705,qs),
(471,705,l),
(490,811,l),
(428,811,ls),
(330,811,o),
(222,686,o),
(222,577,qs),
(222,506,o),
(210,429,o),
(158,377,o),
(101,371,q),
(83,268,l),
(126,262,o),
(167,223,o),
(167,194,qs),
(167,167,o),
(153,117,o),
(139,81,qs),
(123,40,o),
(108,-14,o),
(108,-46,qs),
(108,-108,o),
(186,-173,o),
(254,-173,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
30 11 2 2 1 1 76 0 0 0 1 2 0 1 105 0 2 3 3 2 89 0 2 2 3 97 4 1 3 2 3 81 0 0 0 46 0 45 44 42 23 21 20 18 5 8 22
CALL[ ]	/* CallFunction */";
};
width = 443;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = braceright;
kernLeft = braceright;
kernRight = braceright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(40,-173,ls),
(138,-173,o),
(246,-51,o),
(246,61,qs),
(246,128,o),
(259,206,o),
(311,260,o),
(367,267,q),
(385,370,l),
(342,376,o),
(301,415,o),
(301,444,qs),
(301,469,o),
(314,515,o),
(329,555,qs),
(344,596,o),
(360,653,o),
(360,684,qs),
(360,746,o),
(282,811,o),
(214,811,qs),
(151,811,l),
(133,705,l),
(171,705,ls),
(200,705,o),
(232,680,o),
(232,650,qs),
(232,632,o),
(219,584,o),
(206,542,qs),
(192,499,o),
(178,446,o),
(178,425,qs),
(178,384,o),
(220,329,o),
(265,320,q),
(265,318,l),
(204,306,o),
(142,229,o),
(125,138,o),
(125,82,qs),
(125,34,o),
(113,-29,o),
(74,-67,o),
(35,-67,qs),
(-3,-67,l),
(-23,-173,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
37 9 2 0 1 1 76 0 2 0 1 0 2 1 105 0 0 3 3 0 89 0 0 0 3 97 0 3 0 3 81 46 44 26 24 23 21 32 4 8 23
CALL[ ]	/* CallFunction */";
};
width = 442;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(222,-171,l),
(241,-66,l),
(123,-66,l),
(259,706,l),
(377,706,l),
(395,810,l),
(157,810,l),
(-16,-171,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 341;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,-170,l),
(382,811,l),
(144,811,l),
(125,706,l),
(243,706,l),
(107,-66,l),
(-11,-66,l),
(-29,-170,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 2 0 1 0 2 1 103 0 0 3 3 0 87 0 0 0 3 95 0 3 0 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 341;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(26,-113,l),
(172,133,l),
(37,133,l),
(-61,-113,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 220;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(235,-113,l),
(380,133,l),
(246,133,l),
(147,-113,l)
);
},
{
closed = 1;
nodes = (
(35,-113,l),
(181,133,l),
(46,133,l),
(-52,-113,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 429;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(389,454,l),
(486,700,l),
(399,700,l),
(254,454,l)
);
},
{
closed = 1;
nodes = (
(192,454,l),
(289,700,l),
(202,700,l),
(57,454,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 441;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quotedblright;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(355,454,l),
(500,700,l),
(365,700,l),
(268,454,l)
);
},
{
closed = 1;
nodes = (
(158,454,l),
(303,700,l),
(168,700,l),
(71,454,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 441;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(192,454,l),
(289,700,l),
(202,700,l),
(57,454,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 33 0 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 244;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = quoteright;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,454,l),
(304,700,l),
(169,700,l),
(71,454,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 33 0 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 244;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = guillemotleft;
kernLeft = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(97,120,l),
(219,120,l),
(156,295,l),
(280,470,l),
(159,470,l),
(38,295,l)
);
},
{
closed = 1;
nodes = (
(299,120,l),
(420,120,l),
(358,295,l),
(482,470,l),
(361,470,l),
(240,295,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
11 8 5 2 4 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 485;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(19,120,l),
(140,120,l),
(261,295,l),
(202,470,l),
(81,470,l),
(144,295,l)
);
},
{
closed = 1;
nodes = (
(221,120,l),
(342,120,l),
(463,295,l),
(404,470,l),
(283,470,l),
(345,295,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
11 8 5 2 4 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 485;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = guilsinglleft;
kernLeft = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,120,l),
(156,295,l),
(280,470,l),
(159,470,l),
(38,295,l),
(97,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 284;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(140,120,l),
(261,295,l),
(202,470,l),
(81,470,l),
(144,295,l),
(19,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 283;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = quotedbl;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(355,454,l),
(500,700,l),
(365,700,l),
(268,454,l)
);
},
{
closed = 1;
nodes = (
(158,454,l),
(303,700,l),
(168,700,l),
(71,454,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 441;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,454,l),
(304,700,l),
(169,700,l),
(71,454,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 33 0 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 244;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = florin;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-128,-229,ls),
(-45,-229,o),
(63,-154,o),
(88,-68,qs),
(233,447,l),
(334,447,l),
(363,553,l),
(263,553,l),
(272,588,ls),
(284,630,o),
(339,666,o),
(388,666,q),
(417,774,l),
(305,774,o),
(173,685,o),
(144,588,qs),
(135,553,l),
(72,553,l),
(42,447,l),
(105,447,l),
(-41,-68,ls),
(-49,-97,o),
(-76,-121,o),
(-100,-121,qs),
(-125,-121,l),
(-155,-229,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
0 3 0 4 2 3 4 105 5 1 2 6 1 1 0 2 1 103 0 0 0 7 97 0 7 7 38 7 78 35 17 19 17 19 17 19 32 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 314;
}
);
note = florin;
unicode = 402;
},
{
glyphname = at;
kernLeft = at;
kernRight = at;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,-212,o),
(610,-188,o),
(655,-167,q),
(641,-81,l),
(553,-122,o),
(450,-122,qs),
(357,-122,o),
(222,-51,o),
(152,74,o),
(152,153,qs),
(152,260,o),
(265,450,o),
(459,565,o),
(575,565,qs),
(662,565,o),
(796,503,o),
(870,388,o),
(870,309,qs),
(870,268,o),
(845,167,o),
(791,93,o),
(750,93,qs),
(708,93,o),
(708,133,q),
(710,150,l),
(760,433,l),
(653,433,l),
(643,374,l),
(626,409,o),
(559,443,o),
(516,443,qs),
(447,443,o),
(333,365,o),
(268,239,o),
(268,171,qs),
(268,93,o),
(358,-7,o),
(437,-7,qs),
(534,-7,o),
(603,79,q),
(612,38,o),
(672,-5,o),
(719,-5,qs),
(796,-5,o),
(908,91,o),
(967,243,o),
(967,322,qs),
(967,421,o),
(872,571,o),
(701,654,o),
(590,654,qs),
(441,654,o),
(196,509,o),
(55,270,o),
(55,135,qs),
(55,34,o),
(145,-123,o),
(316,-212,o),
(434,-212,qs)
);
},
{
closed = 1;
nodes = (
(431,90,o),
(378,146,o),
(378,191,qs),
(378,236,o),
(418,307,o),
(484,347,o),
(522,347,qs),
(567,347,o),
(620,290,o),
(620,245,qs),
(620,203,o),
(583,132,o),
(517,90,o),
(477,90,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
30 1 9 3 34 1 5 9 18 1 1 5 54 1 7 1 55 1 8 7 5 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
30 1 9 4 34 1 5 9 18 1 1 5 54 1 7 1 55 1 8 7 5 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 0 0 6 3 0 6 105 4 1 3 0 9 5 3 9 105 12 10 2 5 5 1 98 2 1 1 1 34 77 0 7 7 8 97 11 1 8 8 38 8 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 4 3 9 3 4 9 128 0 0 0 6 3 0 6 105 0 3 0 9 5 3 9 105 12 10 2 5 5 1 98 2 1 1 1 34 77 0 7 7 8 97 11 1 8 8 38 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
59 59 0 0 59 72 59 71 66 64 0 58 0 57 38 38 35 19 37 35 38 38 13 8 30
CALL[ ]	/* CallFunction */";
};
width = 1029;
}
);
note = at;
unicode = 64;
},
{
glyphname = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(321,-12,o),
(406,58,qs),
(417,68,l),
(473,0,l),
(634,0,l),
(502,161,l),
(698,405,l),
(562,405,l),
(433,244,l),
(334,365,ls),
(291,417,o),
(256,473,o),
(256,502,qs),
(256,541,o),
(314,597,o),
(357,597,qs),
(396,597,o),
(433,558,o),
(433,528,qs),
(433,522,o),
(431,510,q),
(558,510,l),
(562,530,o),
(562,552,qs),
(562,626,o),
(463,712,o),
(379,712,qs),
(308,712,o),
(193,649,o),
(127,545,o),
(127,485,qs),
(127,443,o),
(148,402,qs),
(155,389,l),
(145,382,ls),
(86,342,o),
(16,227,o),
(16,162,qs),
(16,109,o),
(69,30,o),
(160,-12,o),
(217,-12,qs)
);
},
{
closed = 1;
nodes = (
(202,105,o),
(148,156,o),
(148,195,qs),
(148,225,o),
(179,282,o),
(205,299,qs),
(219,308,l),
(351,148,l),
(339,138,ls),
(297,105,o),
(246,105,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
45 44 35 32 7 5 6 3 38 1 4 6 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 1 2 3 2 1 114 0 2 2 0 97 0 0 0 39 77 0 3 3 4 97 7 5 2 4 4 34 77 8 1 6 6 4 97 7 5 2 4 4 34 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 1 2 3 2 1 3 128 0 2 2 0 97 0 0 0 39 77 0 3 3 4 97 7 5 2 4 4 34 77 8 1 6 6 4 97 7 5 2 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 1 2 3 2 1 3 128 0 2 2 0 97 0 0 0 39 77 0 3 3 4 95 0 4 4 34 77 8 1 6 6 5 97 7 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
42 42 0 0 42 52 42 51 0 41 0 40 18 23 36 20 45 9 8 27
CALL[ ]	/* CallFunction */";
};
width = 688;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(325,-100,l),
(449,602,l),
(521,602,l),
(397,-100,l),
(505,-100,l),
(646,700,l),
(342,700,ls),
(272,700,o),
(146,654,o),
(64,550,o),
(64,468,qs),
(64,424,o),
(103,339,o),
(195,283,o),
(268,283,qs),
(285,283,l),
(217,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 0 3 2 3 0 2 128 4 1 2 2 132 0 3 3 1 95 0 1 1 33 3 78 17 17 17 38 32 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 624;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(296,-232,o),
(416,-170,o),
(483,-61,o),
(483,7,qs),
(483,40,o),
(470,63,q),
(507,94,o),
(554,178,o),
(554,229,qs),
(554,297,o),
(465,383,o),
(397,405,qs),
(295,439,o),
(267,461,qs),
(247,476,o),
(247,506,qs),
(247,551,o),
(312,604,o),
(361,604,qs),
(408,604,o),
(451,556,o),
(451,523,qs),
(451,515,o),
(450,510,q),
(586,510,l),
(588,521,o),
(588,542,qs),
(588,595,o),
(530,672,o),
(433,712,o),
(373,712,qs),
(300,712,o),
(179,654,o),
(108,548,o),
(108,477,qs),
(108,445,o),
(122,417,q),
(84,384,o),
(38,301,o),
(38,251,qs),
(38,184,o),
(122,101,o),
(196,73,qs),
(205,69,o),
(224,64,qs),
(261,52,o),
(311,32,o),
(326,19,qs),
(346,2,o),
(346,-26,qs),
(346,-68,o),
(280,-124,o),
(231,-124,qs),
(186,-124,o),
(142,-78,o),
(142,-45,qs),
(142,-35,o),
(143,-30,q),
(6,-30,l),
(4,-41,o),
(4,-61,qs),
(4,-142,o),
(126,-232,o),
(219,-232,qs)
);
},
{
closed = 1;
nodes = (
(362,145,o),
(326,158,qs),
(306,165,ls),
(247,186,o),
(178,232,o),
(178,272,qs),
(178,316,o),
(211,346,q),
(235,333,o),
(265,322,qs),
(284,315,ls),
(344,294,o),
(414,248,o),
(414,208,qs),
(414,167,o),
(381,134,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
41 1 3 4 79 71 57 26 4 0 3 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 3 4 0 4 3 0 128 0 0 1 1 0 112 0 4 4 2 97 0 2 2 39 77 0 1 1 5 98 6 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 39 77 0 1 1 5 98 6 1 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 1 6 1 5 1 5 102 0 4 4 2 97 0 2 2 39 4 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 63 0 62 45 43 39 38 33 31 36 20 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = section;
unicode = 167;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(448,-6,o),
(640,105,o),
(751,299,o),
(751,417,qs),
(751,492,o),
(689,624,o),
(557,708,o),
(458,708,qs),
(340,708,o),
(147,595,o),
(38,402,o),
(38,288,qs),
(38,208,o),
(106,74,o),
(239,-6,o),
(332,-6,qs)
);
},
{
closed = 1;
nodes = (
(266,40,o),
(153,100,o),
(90,214,o),
(90,291,qs),
(90,395,o),
(179,565,o),
(344,663,o),
(451,663,qs),
(521,663,o),
(635,607,o),
(701,494,o),
(701,413,qs),
(701,309,o),
(610,139,o),
(446,40,o),
(341,40,qs)
);
},
{
closed = 1;
nodes = (
(432,123,o),
(560,209,o),
(590,281,q),
(478,281,l),
(441,211,o),
(368,211,qs),
(327,211,o),
(279,263,o),
(279,313,qs),
(279,352,o),
(308,435,o),
(371,492,o),
(418,492,qs),
(454,492,o),
(498,455,o),
(502,422,q),
(615,422,l),
(611,496,o),
(514,581,o),
(436,581,qs),
(370,581,o),
(249,516,o),
(172,391,o),
(172,307,qs),
(172,223,o),
(273,123,o),
(355,123,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 5 6 8 6 5 114 0 8 7 6 8 7 126 0 0 0 2 4 0 2 105 0 4 0 6 5 4 6 105 0 7 12 1 9 3 7 9 105 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
0 5 6 8 6 5 8 128 0 8 7 6 8 7 126 0 0 0 2 4 0 2 105 0 4 0 6 5 4 6 105 0 7 12 1 9 3 7 9 105 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 5 6 8 6 5 114 0 8 7 6 8 7 126 0 0 0 2 4 0 2 105 0 4 0 6 5 4 6 105 0 7 12 1 9 3 7 9 105 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 59 values pushed */
0 5 6 8 6 5 8 128 0 8 7 6 8 7 126 0 0 0 2 4 0 2 105 0 4 0 6 5 4 6 105 0 7 12 1 9 3 7 9 105 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
32 32 16 16 0 0 32 58 32 57 55 54 53 51 46 44 42 41 39 37 16 31 16 30 24 22 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 766;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(267,425,o),
(333,463,o),
(371,529,o),
(371,568,qs),
(371,607,o),
(333,673,o),
(267,712,o),
(228,712,qs),
(189,712,o),
(123,673,o),
(84,607,o),
(84,568,qs),
(84,529,o),
(123,463,o),
(189,425,o),
(228,425,qs)
);
},
{
closed = 1;
nodes = (
(179,448,o),
(108,519,o),
(108,568,qs),
(108,618,o),
(179,688,o),
(228,688,qs),
(278,688,o),
(348,618,o),
(348,568,qs),
(348,519,o),
(278,448,o),
(228,448,qs)
);
},
{
closed = 1;
nodes = (
(207,496,l),
(207,561,l),
(225,561,l),
(260,496,l),
(293,496,l),
(252,568,l),
(281,578,o),
(281,607,qs),
(281,625,o),
(259,651,o),
(233,651,qs),
(179,651,l),
(179,496,l)
);
},
{
closed = 1;
nodes = (
(207,585,l),
(207,628,l),
(229,628,ls),
(241,628,o),
(254,617,o),
(254,607,qs),
(254,596,o),
(239,585,o),
(226,585,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 6 values pushed */
34 1 6 9 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
0 4 2 8 0 4 114 0 8 9 2 8 112 12 1 9 6 3 9 112 0 6 5 2 6 5 126 7 1 5 3 2 5 3 126 0 0 0 2 4 0 2 105 11 1 3 1 1 3 89 11 1 3 3 1 98 10 1 1 3 1 82
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 63 values pushed */
0 4 2 8 0 4 114 0 8 9 2 8 112 12 1 9 6 2 9 6 126 0 6 5 2 6 5 126 7 1 5 3 2 5 3 126 0 0 0 2 4 0 2 105 11 1 3 1 1 3 89 11 1 3 3 1 98 10 1 1 3 1 82
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
0 4 2 8 2 4 8 128 0 8 9 2 8 9 126 12 1 9 6 2 9 6 126 0 6 5 2 6 5 126 7 1 5 3 2 5 3 126 0 0 0 2 4 0 2 105 11 1 3 1 1 3 89 11 1 3 3 1 98 10 1 1 3 1 82
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
41 41 16 16 0 0 41 49 41 48 47 45 40 39 38 37 36 35 30 28 16 27 16 26 22 20 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 342;
}
);
note = registered;
unicode = 174;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(435,350,l),
(471,552,l),
(513,393,l),
(571,393,l),
(670,552,l),
(634,350,l),
(710,350,l),
(772,700,l),
(687,700,l),
(560,492,l),
(506,700,l),
(421,700,l),
(359,350,l)
);
},
{
closed = 1;
nodes = (
(208,350,l),
(258,634,l),
(357,634,l),
(369,700,l),
(96,700,l),
(84,634,l),
(182,634,l),
(132,350,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
10 7 2 3 3 5 1 76 0 3 5 2 5 3 2 128 8 4 2 2 2 132 6 1 2 0 5 5 0 87 6 1 2 0 0 5 95 7 1 5 0 5 79 17 17 17 17 18 18 17 18 16 9 6 31
CALL[ ]	/* CallFunction */";
};
width = 732;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(293,426,o),
(375,504,o),
(375,569,qs),
(375,634,o),
(293,712,o),
(230,712,qs),
(170,712,o),
(86,633,o),
(86,569,qs),
(86,505,o),
(170,426,o),
(230,426,qs)
);
},
{
closed = 1;
nodes = (
(206,508,o),
(172,542,o),
(172,569,qs),
(172,596,o),
(205,630,o),
(230,630,qs),
(255,630,o),
(290,596,o),
(290,569,qs),
(290,542,o),
(255,508,o),
(230,508,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 348;
}
);
note = degree;
unicode = 176;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(125,-100,l),
(270,720,l),
(142,720,l),
(-3,-100,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 0 1 134 0 0 0 33 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 9 values pushed */
0 0 1 0 133 0 1 1 118
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 245;
}
);
note = bar;
unicode = 124;
},
{
glyphname = brokenbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,394,l),
(270,720,l),
(142,720,l),
(84,394,l)
);
},
{
closed = 1;
nodes = (
(125,-100,l),
(183,226,l),
(55,226,l),
(-3,-100,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 2 0 3 2 3 99 0 1 1 0 95 0 0 0 33 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 245;
}
);
note = brokenbar;
unicode = 166;
},
{
glyphname = dagger;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(254,-263,l),
(369,464,l),
(567,454,l),
(585,553,l),
(383,542,l),
(439,785,l),
(310,785,l),
(281,542,l),
(83,553,l),
(66,454,l),
(267,464,l),
(126,-263,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 1 2 133 0 5 0 5 134 3 1 1 0 0 1 87 3 1 1 1 0 96 4 1 0 1 0 80 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = dagger;
unicode = 8224;
},
{
glyphname = uni2113;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(125,-100,l),
(271,720,l),
(143,720,l),
(-3,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = uni2113;
unicode = 8467;
},
{
glyphname = daggerdbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(253,-263,l),
(284,-20,l),
(482,-31,l),
(500,68,l),
(297,58,l),
(369,464,l),
(567,454,l),
(585,553,l),
(383,542,l),
(438,785,l),
(310,785,l),
(281,542,l),
(83,553,l),
(66,454,l),
(267,464,l),
(195,58,l),
(-2,68,l),
(-20,-31,l),
(182,-20,l),
(126,-263,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 19 18 17 17 17 17 17 17 17 17 16 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = daggerdbl;
unicode = 8225;
},
{
glyphname = estimated;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,-7,o),
(648,135,q),
(609,191,l),
(540,131,o),
(410,71,o),
(339,71,qs),
(281,71,o),
(198,108,o),
(167,146,q),
(198,317,l),
(709,317,l),
(721,379,ls),
(726,405,o),
(726,439,qs),
(726,508,o),
(667,630,o),
(539,706,o),
(441,706,qs),
(298,706,o),
(114,551,o),
(33,342,o),
(33,258,qs),
(33,185,o),
(95,65,o),
(226,-7,o),
(325,-7,qs)
);
},
{
closed = 1;
nodes = (
(239,555,l),
(316,629,o),
(428,629,qs),
(537,629,o),
(587,564,q),
(557,392,l),
(211,392,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
27 1 5 4 23 22 16 3 2 1 2 76 0 0 0 4 5 0 4 105 7 1 5 0 1 2 5 1 103 0 2 3 3 2 89 0 2 2 3 97 6 1 3 2 3 81 26 26 0 0 26 32 26 32 30 28 0 25 0 24 35 22 38 8 6 25
CALL[ ]	/* CallFunction */";
};
width = 735;
}
);
note = estimated;
unicode = 8494;
},
{
glyphname = at.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(512,-84,o),
(632,-60,o),
(677,-39,q),
(663,47,l),
(575,6,o),
(472,6,qs),
(379,6,o),
(244,77,o),
(174,202,o),
(174,281,qs),
(174,388,o),
(287,578,o),
(481,693,o),
(597,693,qs),
(684,693,o),
(818,631,o),
(892,516,o),
(892,437,qs),
(892,396,o),
(867,295,o),
(813,221,o),
(772,221,qs),
(730,221,o),
(730,261,q),
(732,278,l),
(782,561,l),
(675,561,l),
(665,502,l),
(648,537,o),
(581,571,o),
(538,571,qs),
(469,571,o),
(355,493,o),
(290,367,o),
(290,299,qs),
(290,221,o),
(380,121,o),
(459,121,qs),
(556,121,o),
(625,207,q),
(634,166,o),
(694,123,o),
(741,123,qs),
(818,123,o),
(930,219,o),
(989,371,o),
(989,450,qs),
(989,549,o),
(894,699,o),
(723,782,o),
(612,782,qs),
(463,782,o),
(218,637,o),
(77,398,o),
(77,263,qs),
(77,162,o),
(167,5,o),
(338,-84,o),
(456,-84,qs)
);
},
{
closed = 1;
nodes = (
(453,218,o),
(400,274,o),
(400,319,qs),
(400,364,o),
(440,435,o),
(506,475,o),
(544,475,qs),
(589,475,o),
(642,418,o),
(642,373,qs),
(642,331,o),
(605,260,o),
(539,218,o),
(499,218,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
30 1 9 3 34 1 5 9 18 1 1 5 54 1 7 1 55 1 8 7 5 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
30 1 9 4 34 1 5 9 18 1 1 5 54 1 7 1 55 1 8 7 5 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 6 3 0 6 105 4 1 3 0 9 5 3 9 105 12 10 2 5 2 1 1 7 5 1 106 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 4 3 9 3 4 9 128 0 0 0 6 3 0 6 105 0 3 0 9 5 3 9 105 12 10 2 5 2 1 1 7 5 1 106 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
59 59 0 0 59 72 59 71 66 64 0 58 0 57 38 38 35 19 37 35 38 38 13 8 30
CALL[ ]	/* CallFunction */";
};
width = 1029;
}
);
note = at.case;
},
{
glyphname = registered.case;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (36,204);
ref = registered;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 4
PUSHB[ ]	/* 1 value pushed */
204
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 342;
}
);
note = registered.case;
},
{
glyphname = uni20BF;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,0,l),
(120,-86,l),
(189,-86,l),
(204,0,l),
(264,0,l),
(249,-86,l),
(318,-86,l),
(333,1,l),
(403,6,o),
(512,65,o),
(573,160,o),
(573,217,qs),
(573,269,o),
(513,358,o),
(467,375,q),
(532,399,o),
(599,492,o),
(599,547,qs),
(599,604,o),
(525,684,o),
(456,696,q),
(472,791,l),
(403,791,l),
(387,700,l),
(327,700,l),
(343,791,l),
(274,791,l),
(258,700,l),
(138,700,l),
(14,0,l)
);
},
{
closed = 1;
nodes = (
(162,109,l),
(197,311,l),
(346,311,ls),
(395,311,o),
(444,264,o),
(444,225,qs),
(444,170,o),
(378,109,o),
(313,109,qs)
);
},
{
closed = 1;
nodes = (
(216,420,l),
(246,591,l),
(370,591,ls),
(418,591,o),
(464,550,o),
(464,516,qs),
(464,420,o),
(342,420,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
8 1 10 0 14 1 8 11 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
3 1 1 0 0 1 112 6 1 4 5 5 4 113 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
3 1 1 0 1 133 6 1 4 5 5 4 113 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
3 1 1 0 1 133 6 1 4 5 4 134 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
39 39 30 30 39 46 39 45 44 42 30 38 30 37 37 17 17 17 31 17 17 17 16 14 8 31
CALL[ ]	/* CallFunction */";
};
width = 618;
}
);
note = uni20BF;
unicode = 8383;
},
{
glyphname = cent;
layers = (
{
anchors = (
{
name = bottom;
pos = (314,0);
},
{
name = top;
pos = (436,691);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(190,-86,l),
(222,4,l),
(246,-5,o),
(274,-8,q),
(247,-86,l),
(318,-86,l),
(344,-12,l),
(462,-8,o),
(635,111,o),
(672,215,q),
(532,215,l),
(490,119,o),
(385,104,q),
(542,552,l),
(574,521,o),
(576,468,q),
(716,468,l),
(715,545,o),
(649,653,o),
(587,679,q),
(626,791,l),
(555,791,l),
(522,697,l),
(497,701,o),
(467,703,q),
(498,791,l),
(427,791,l),
(395,699,l),
(294,685,o),
(136,563,o),
(48,375,o),
(48,265,qs),
(48,194,o),
(104,70,o),
(161,33,q),
(119,-86,l)
);
},
{
closed = 1;
nodes = (
(179,339,o),
(218,459,o),
(295,553,o),
(351,574,q),
(208,168,l),
(179,212,o),
(179,279,qs)
);
},
{
closed = 1;
nodes = (
(427,588,l),
(433,588,ls),
(457,588,o),
(482,583,q),
(314,105,l),
(288,108,o),
(263,121,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
15 1 8 1 45 38 21 3 3 8 49 37 33 31 22 5 5 4 3 76 0 4 3 5 3 4 5 128 7 1 6 5 6 134 0 8 3 0 8 89 2 1 0 0 3 4 0 3 103 0 1 1 33 77 0 5 5 40 5 78 27 20 17 18 21 20 18 17 24 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 715;
}
);
note = cent;
unicode = 162;
},
{
glyphname = currency;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(149,144,l),
(189,119,o),
(245,119,qs),
(301,119,o),
(352,142,q),
(401,81,l),
(462,134,l),
(417,189,l),
(472,246,o),
(472,327,qs),
(472,370,o),
(452,405,q),
(521,464,l),
(478,516,l),
(403,452,l),
(362,475,o),
(309,475,qs),
(253,475,o),
(203,454,q),
(152,516,l),
(91,464,l),
(137,408,l),
(83,352,o),
(83,271,qs),
(83,227,o),
(102,193,q),
(33,134,l),
(75,81,l)
);
},
{
closed = 1;
nodes = (
(229,201,o),
(190,239,o),
(190,274,qs),
(190,326,o),
(250,394,o),
(294,394,qs),
(323,394,o),
(364,355,o),
(364,320,qs),
(364,269,o),
(304,201,o),
(260,201,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
15 14 12 8 6 5 6 2 0 26 22 20 19 1 5 1 3 2 76 13 7 2 0 74 27 21 2 1 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
4 1 3 0 1 3 1 101 0 2 2 0 97 0 0 0 36 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 2 3 0 2 105 4 1 3 1 1 3 89 4 1 3 3 1 97 0 1 3 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
28 28 28 39 28 38 39 44 41 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 535;
}
);
note = currency;
unicode = 164;
},
{
glyphname = dollar;
kernLeft = S;
kernRight = S;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,-87,l),
(260,-87,l),
(273,-12,l),
(346,-9,o),
(467,45,o),
(539,148,o),
(539,219,qs),
(539,285,o),
(456,375,o),
(382,401,qs),
(348,413,l),
(381,599,l),
(408,590,o),
(437,552,o),
(437,527,qs),
(437,516,o),
(436,510,q),
(573,510,l),
(575,541,ls),
(575,612,o),
(481,701,o),
(400,710,q),
(415,792,l),
(349,792,l),
(335,711,l),
(268,706,o),
(158,650,o),
(95,552,o),
(95,488,qs),
(95,431,o),
(165,347,o),
(231,323,qs),
(253,315,o),
(264,312,q),
(227,103,l),
(197,113,o),
(163,159,o),
(163,191,qs),
(163,204,o),
(164,211,q),
(28,211,l),
(25,193,o),
(25,172,qs),
(25,98,o),
(124,3,o),
(208,-9,q)
);
},
{
closed = 1;
nodes = (
(326,288,l),
(362,272,o),
(400,232,o),
(400,202,qs),
(400,157,o),
(342,100,o),
(292,96,q)
);
},
{
closed = 1;
nodes = (
(287,438,l),
(260,452,o),
(233,486,o),
(233,511,qs),
(233,545,o),
(277,595,o),
(315,602,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
59 33 23 3 2 1 58 51 34 11 4 0 2 52 45 10 3 3 0 3 76 0 1 2 1 133 0 2 0 2 133 0 0 3 0 133 0 4 3 4 134 0 3 3 40 3 78 44 43 42 41 28 27 22 21 20 5 8 23
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = Euro;
kernRight = Cacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,-12,o),
(684,109,o),
(724,218,q),
(582,218,l),
(558,162,o),
(465,103,o),
(397,103,qs),
(326,103,o),
(239,173,o),
(228,237,q),
(435,237,l),
(448,313,l),
(225,313,l),
(228,351,o),
(237,387,q),
(462,387,l),
(474,463,l),
(268,463,l),
(302,525,o),
(414,596,o),
(482,596,qs),
(551,596,o),
(625,532,o),
(626,474,q),
(769,474,l),
(768,587,o),
(627,712,o),
(501,712,qs),
(417,712,o),
(346,681,qs),
(274,650,o),
(163,538,o),
(131,463,q),
(42,463,l),
(30,387,l),
(106,387,l),
(97,351,o),
(94,313,q),
(16,313,l),
(3,237,l),
(93,237,l),
(102,123,o),
(251,-12,o),
(376,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
0 5 6 3 6 5 3 128 0 12 0 11 0 12 11 128 7 1 3 8 1 2 1 3 2 103 9 1 1 10 1 0 12 1 0 103 0 6 6 4 97 0 4 4 39 77 0 11 11 13 97 14 1 13 13 40 13 78 0 0 0 43 0 42 40 39 37 35 33 32 31 30 17 18 34 18 36 17 18 17 18 15 8 31
CALL[ ]	/* CallFunction */";
};
width = 764;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = uni20BD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(187,0,l),
(205,104,l),
(394,104,l),
(412,203,l),
(223,203,l),
(237,283,l),
(358,283,ls),
(426,283,o),
(560,333,o),
(648,439,o),
(648,519,qs),
(648,603,o),
(539,700,o),
(432,700,qs),
(183,700,l),
(127,383,l),
(36,383,l),
(19,283,l),
(109,283,l),
(95,203,l),
(5,203,l),
(-13,104,l),
(77,104,l),
(59,0,l)
);
},
{
closed = 1;
nodes = (
(255,383,l),
(293,602,l),
(410,602,ls),
(463,602,o),
(515,555,o),
(515,512,qs),
(515,454,o),
(439,383,o),
(371,383,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
11 10 2 3 5 1 2 1 3 2 103 6 1 1 7 1 0 8 1 0 103 0 9 9 4 95 0 4 4 33 77 0 8 8 34 8 78 24 24 24 32 24 31 30 28 17 17 17 37 33 17 17 17 16 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 625;
}
);
note = uni20BD;
unicode = 8381;
},
{
glyphname = uni20A8;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (793,0);
},
{
name = top;
pos = (881,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (588,0);
ref = s;
}
);
width = 1081;
}
);
note = uni20A8;
unicode = 8360;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,0,l),
(504,0,l),
(521,102,l),
(166,102,l),
(268,182,o),
(268,291,qs),
(268,298,l),
(431,298,l),
(446,386,l),
(258,386,l),
(248,436,o),
(248,464,qs),
(248,525,o),
(317,606,o),
(380,606,qs),
(426,606,o),
(477,557,o),
(477,517,qs),
(477,503,o),
(476,496,q),
(593,496,l),
(595,522,o),
(595,532,qs),
(595,612,o),
(490,712,o),
(391,712,qs),
(322,712,o),
(202,652,o),
(129,534,o),
(129,451,qs),
(129,416,o),
(135,386,q),
(48,386,l),
(33,298,l),
(146,298,l),
(146,291,ls),
(146,227,o),
(89,120,o),
(32,70,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 3 4 1 4 3 114 5 1 1 6 1 0 7 1 0 103 0 4 4 2 97 0 2 2 39 77 0 7 7 8 95 0 8 8 34 8 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 3 4 1 4 3 1 128 5 1 1 6 1 0 7 1 0 103 0 4 4 2 97 0 2 2 39 77 0 7 7 8 95 0 8 8 34 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
17 19 17 20 36 20 37 17 34 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = yen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(334,0,l),
(361,150,l),
(561,150,l),
(576,238,l),
(377,238,l),
(379,249,l),
(424,313,l),
(590,313,l),
(605,402,l),
(486,402,l),
(693,700,l),
(549,700,l),
(336,367,l),
(240,700,l),
(94,700,l),
(198,402,l),
(77,402,l),
(62,314,l),
(229,314,l),
(251,249,l),
(249,238,l),
(48,238,l),
(33,150,l),
(233,150,l),
(206,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
11 1 2 3 1 76 6 1 3 7 1 2 1 3 2 104 8 1 1 9 1 0 10 1 0 103 5 1 4 4 33 77 0 10 10 34 10 78 24 23 22 21 18 17 17 18 17 17 18 17 16 11 8 31
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = yen;
unicode = 165;
},
{
glyphname = cent.001;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,-93,l),
(293,-93,l),
(309,-7,l),
(385,8,o),
(503,108,o),
(529,180,q),
(395,180,l),
(380,141,o),
(312,97,o),
(270,97,qs),
(224,97,o),
(166,160,o),
(166,213,qs),
(166,266,o),
(187,308,qs),
(208,350,o),
(280,399,o),
(323,399,qs),
(365,399,o),
(418,355,o),
(418,316,q),
(553,316,l),
(553,391,o),
(471,489,o),
(398,503,q),
(415,598,l),
(297,598,l),
(280,502,l),
(210,489,o),
(153,446,qs),
(97,403,o),
(34,275,o),
(34,201,qs),
(34,121,o),
(118,11,o),
(191,-5,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
10 1 2 0 35 1 5 3 2 76 0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 3 5 5 3 89 0 3 3 5 95 0 5 3 5 79 20 18 38 34 20 24 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = cent.001;
},
{
glyphname = uni2215;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,-111,l),
(481,777,l),
(356,777,l),
(-50,-111,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 401;
}
);
note = uni2215;
unicode = 8725;
},
{
glyphname = plus;
kernLeft = plus;
kernRight = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(321,53,l),
(353,236,l),
(540,236,l),
(559,343,l),
(372,343,l),
(404,526,l),
(295,526,l),
(263,343,l),
(75,343,l),
(56,236,l),
(244,236,l),
(212,53,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 1 2 133 0 5 0 5 134 3 1 1 0 0 1 87 3 1 1 1 0 96 4 1 0 1 0 80 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = plus;
unicode = 43;
},
{
glyphname = minus;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(508,236,l),
(527,343,l),
(108,343,l),
(90,236,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = multiply;
kernLeft = multiply;
kernRight = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(294,215,l),
(394,92,l),
(483,167,l),
(382,289,l),
(530,415,l),
(468,491,l),
(320,364,l),
(219,487,l),
(131,412,l),
(231,290,l),
(85,164,l),
(147,89,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
11 5 1 50
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(513,236,l),
(532,343,l),
(102,343,l),
(84,236,l)
);
},
{
closed = 1;
nodes = (
(316,22,o),
(362,70,o),
(362,104,qs),
(362,141,o),
(317,188,o),
(280,188,qs),
(243,188,o),
(197,141,o),
(197,104,qs),
(197,70,o),
(244,22,o),
(280,22,qs)
);
},
{
closed = 1;
nodes = (
(373,391,o),
(419,439,o),
(419,473,qs),
(419,509,o),
(373,557,o),
(337,557,qs),
(300,557,o),
(254,509,o),
(254,473,qs),
(254,438,o),
(300,391,o),
(337,391,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 4 7 1 5 0 4 5 105 0 0 0 1 2 0 1 103 0 2 2 3 97 6 1 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 7 1 5 0 4 5 105 0 0 0 1 2 0 1 103 0 2 3 3 2 89 0 2 2 3 97 6 1 3 2 3 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
16 16 4 4 16 27 16 26 22 20 4 15 4 14 37 17 16 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = divide;
unicode = 247;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(491,123,l),
(511,235,l),
(86,235,l),
(66,123,l)
);
},
{
closed = 1;
nodes = (
(530,345,l),
(549,457,l),
(125,457,l),
(105,345,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 2 0 3 0 2 3 103 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = equal;
unicode = 61;
},
{
glyphname = notequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,56,l),
(241,123,l),
(491,123,l),
(511,235,l),
(320,235,l),
(397,345,l),
(530,345,l),
(549,457,l),
(476,457,l),
(523,524,l),
(422,524,l),
(375,457,l),
(125,457,l),
(105,345,l),
(296,345,l),
(219,235,l),
(86,235,l),
(66,123,l),
(140,123,l),
(93,56,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 3 3 4 112 0 9 0 0 9 113 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 18 17 17 17 17 17 17 17 17 16 10 6 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = greater;
kernRight = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(249,133,l),
(512,359,l),
(328,584,l),
(167,584,l),
(352,359,l),
(88,133,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = greater;
unicode = 62;
},
{
glyphname = less;
kernLeft = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(473,133,l),
(288,359,l),
(552,584,l),
(392,584,l),
(128,359,l),
(312,133,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = less;
unicode = 60;
},
{
glyphname = greaterequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(262,207,l),
(519,395,l),
(328,584,l),
(166,584,l),
(355,396,l),
(100,207,l)
);
},
{
closed = 1;
nodes = (
(446,44,l),
(464,142,l),
(90,142,l),
(72,44,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lessequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,207,l),
(297,396,l),
(553,584,l),
(390,584,l),
(132,395,l),
(324,207,l)
);
},
{
closed = 1;
nodes = (
(456,44,l),
(474,142,l),
(100,142,l),
(83,44,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = plusminus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(338,154,l),
(361,282,l),
(553,282,l),
(572,389,l),
(380,389,l),
(403,516,l),
(294,516,l),
(271,389,l),
(79,389,l),
(60,282,l),
(252,282,l),
(229,154,l)
);
},
{
closed = 1;
nodes = (
(503,0,l),
(523,112,l),
(31,112,l),
(11,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 5 0 6 0 5 114 3 1 1 4 1 0 5 1 0 104 0 2 2 36 77 0 6 6 7 95 0 7 7 34 7 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 5 0 6 0 5 6 128 3 1 1 4 1 0 5 1 0 104 0 2 2 36 77 0 6 6 7 95 0 7 7 34 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 1 2 133 0 5 0 6 0 5 6 128 3 1 1 4 1 0 5 1 0 104 0 6 6 7 95 0 7 7 34 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 17 17 17 17 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = approxequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(463,315,o),
(567,404,o),
(598,495,q),
(502,495,l),
(492,463,o),
(453,429,o),
(426,429,qs),
(407,429,o),
(378,443,o),
(352,459,qs),
(325,477,o),
(284,495,o),
(257,495,qs),
(191,495,o),
(89,407,o),
(57,316,q),
(152,316,l),
(175,381,o),
(229,381,qs),
(249,381,o),
(280,366,o),
(304,351,qs),
(330,333,o),
(371,315,o),
(398,315,qs)
);
},
{
closed = 1;
nodes = (
(423,86,o),
(527,175,o),
(558,266,q),
(462,266,l),
(452,234,o),
(413,200,o),
(386,200,qs),
(367,200,o),
(338,214,o),
(312,230,qs),
(285,248,o),
(244,266,o),
(217,266,qs),
(151,266,o),
(49,178,o),
(17,87,q),
(112,87,l),
(135,152,o),
(189,152,qs),
(209,152,o),
(240,137,o),
(264,122,qs),
(290,104,o),
(331,86,o),
(358,86,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
4 1 2 0 0 1 2 0 105 0 3 12 5 2 1 8 3 1 105 0 9 6 7 9 89 10 1 8 0 6 7 8 6 105 0 9 9 7 97 13 11 2 7 9 7 81 25 25 0 0 25 49 25 48 46 45 43 41 37 35 33 32 31 29 0 24 0 23 18 36 34 17 36 14 6 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(448,228,o),
(552,317,o),
(583,408,q),
(487,408,l),
(477,376,o),
(438,342,o),
(411,342,qs),
(392,342,o),
(363,356,o),
(337,372,qs),
(310,390,o),
(269,408,o),
(242,408,qs),
(176,408,o),
(74,320,o),
(42,229,q),
(137,229,l),
(160,294,o),
(214,294,qs),
(234,294,o),
(265,279,o),
(289,264,qs),
(315,246,o),
(356,228,o),
(383,228,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 24 0 23 18 36 34 17 36 7 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = logicalnot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(548,201,l),
(590,437,l),
(77,437,l),
(60,338,l),
(445,338,l),
(421,201,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 0 0 2 113 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 2 134 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
17 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = logicalnot;
unicode = 172;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(132,170,l),
(370,549,l),
(472,170,l),
(602,170,l),
(457,700,l),
(335,700,l),
(3,170,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 0 1 76 0 0 1 0 133 2 1 1 1 118 18 17 16 3 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 645;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = infinity;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(224,128,o),
(316,177,o),
(351,219,q),
(382,177,o),
(456,128,o),
(511,128,qs),
(566,128,o),
(611,152,qs),
(656,177,o),
(708,260,o),
(708,312,qs),
(708,375,o),
(630,447,o),
(565,447,qs),
(510,447,o),
(416,394,o),
(382,350,q),
(353,395,o),
(280,447,o),
(223,447,qs),
(168,447,o),
(124,423,qs),
(79,399,o),
(29,316,o),
(29,263,qs),
(29,199,o),
(107,128,o),
(170,128,qs)
);
},
{
closed = 1;
nodes = (
(170,216,o),
(133,248,o),
(133,277,qs),
(133,312,o),
(181,360,o),
(214,360,qs),
(244,360,o),
(287,320,o),
(311,281,q),
(287,251,o),
(228,216,o),
(198,216,qs)
);
},
{
closed = 1;
nodes = (
(488,215,o),
(442,252,o),
(420,287,q),
(447,320,o),
(511,359,o),
(541,359,qs),
(571,359,o),
(604,327,o),
(604,297,qs),
(604,263,o),
(556,215,o),
(520,215,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
48 30 24 10 4 5 4 1 76 1 1 0 6 1 4 5 0 4 105 10 7 9 3 5 2 2 5 89 10 7 9 3 5 5 2 97 8 3 2 2 5 2 81 40 40 28 28 0 0 40 51 40 50 46 44 28 39 28 38 34 32 0 27 0 26 38 36 38 11 6 25
CALL[ ]	/* CallFunction */";
};
width = 723;
}
);
note = infinity;
unicode = 8734;
},
{
glyphname = integral;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-125,-229,ls),
(-44,-229,o),
(62,-154,o),
(87,-68,qs),
(324,770,ls),
(332,797,o),
(359,820,o),
(380,820,qs),
(398,820,l),
(428,929,l),
(407,929,ls),
(327,929,o),
(220,856,o),
(196,770,qs),
(-41,-68,ls),
(-49,-97,o),
(-74,-121,o),
(-96,-121,qs),
(-115,-121,l),
(-144,-229,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 1 0 2 0 1 2 105 0 0 3 3 0 89 0 0 0 3 97 0 3 0 3 81 37 33 37 32 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 255;
}
);
note = integral;
unicode = 8747;
},
{
glyphname = uni2126;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(260,0,l),
(279,102,l),
(227,126,o),
(165,236,o),
(165,305,qs),
(165,376,o),
(225,509,o),
(349,595,o),
(438,595,qs),
(525,595,o),
(626,494,o),
(626,407,qs),
(626,349,o),
(583,231,o),
(494,131,o),
(426,102,q),
(407,0,l),
(680,0,l),
(698,98,l),
(580,98,l),
(665,150,o),
(760,325,o),
(760,428,qs),
(760,503,o),
(692,633,o),
(556,712,o),
(459,712,qs),
(344,712,o),
(150,608,o),
(36,425,o),
(36,311,qs),
(36,252,o),
(83,135,o),
(125,98,q),
(5,98,l),
(-13,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
33 1 0 4 1 76 0 1 0 4 0 1 4 105 2 1 0 3 3 0 87 2 1 0 0 3 95 5 1 3 0 3 79 23 39 17 22 38 16 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 768;
}
);
note = uni2126;
unicode = 8486;
},
{
glyphname = uni2206;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(634,0,l),
(652,98,l),
(478,700,l),
(373,700,l),
(-14,98,l),
(-31,0,l)
);
},
{
closed = 1;
nodes = (
(399,555,l),
(521,98,l),
(118,98,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
7 1 2 0 1 76 0 0 2 0 133 3 1 2 1 1 2 87 3 1 2 2 1 95 0 1 2 1 79 6 6 6 8 6 8 18 17 4 6 24
CALL[ ]	/* CallFunction */";
};
width = 692;
}
);
note = uni2206;
unicode = 8710;
},
{
glyphname = product;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(178,0,l),
(283,602,l),
(558,602,l),
(452,0,l),
(580,0,l),
(685,602,l),
(761,602,l),
(779,700,l),
(100,700,l),
(81,602,l),
(155,602,l),
(50,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
5 1 3 0 3 134 0 1 0 0 1 87 0 1 1 0 95 4 2 2 0 1 0 79 17 17 17 17 17 16 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 717;
}
);
note = product;
unicode = 8719;
},
{
glyphname = summation;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(419,-50,l),
(437,48,l),
(125,48,l),
(423,284,l),
(439,377,l),
(218,602,l),
(534,602,l),
(552,700,l),
(129,700,l),
(102,552,l),
(311,330,l),
(22,99,l),
(-4,-50,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
7 2 1 3 2 1 1 76 0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 19 17 19 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 530;
}
);
note = summation;
unicode = 8721;
},
{
glyphname = radical;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(259,-42,l),
(931,885,l),
(849,885,l),
(286,107,l),
(201,326,l),
(-3,218,l),
(24,156,l),
(104,198,l),
(197,-42,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
4 3 2 1 4 1 0 1 76 0 0 1 0 133 0 1 1 118 17 21 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 763;
}
);
note = radical;
unicode = 8730;
},
{
glyphname = uni00B5;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,-220,l),
(140,6,l),
(167,-12,o),
(207,-12,qs),
(263,-12,o),
(357,38,o),
(388,81,q),
(386,0,l),
(499,0,l),
(586,496,l),
(458,496,l),
(412,235,ls),
(400,170,o),
(318,96,o),
(265,96,qs),
(176,96,o),
(176,186,qs),
(176,201,o),
(181,228,qs),
(228,496,l),
(100,496,l),
(-28,-220,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
19 14 2 3 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 36 77 0 1 1 3 98 4 1 3 3 34 77 0 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
2 1 0 0 36 77 0 3 3 34 77 0 1 1 4 98 0 4 4 40 77 0 5 5 38 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 35 17 19 36 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = uni00B5;
unicode = 181;
},
{
glyphname = partialdiff;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(320,-8,o),
(494,172,o),
(576,417,o),
(576,514,qs),
(576,623,o),
(475,740,o),
(378,740,qs),
(323,740,o),
(270,725,q),
(258,656,l),
(298,666,o),
(332,666,qs),
(395,666,o),
(456,592,o),
(456,515,qs),
(456,493,o),
(455,481,q),
(435,559,o),
(345,559,qs),
(247,559,o),
(95,437,o),
(11,256,o),
(11,172,qs),
(11,99,o),
(96,-8,o),
(189,-8,qs)
);
},
{
closed = 1;
nodes = (
(186,101,o),
(144,146,o),
(144,192,qs),
(144,244,o),
(191,367,o),
(278,452,o),
(335,452,qs),
(373,452,o),
(414,407,o),
(414,363,qs),
(414,311,o),
(367,188,o),
(279,101,o),
(222,101,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
15 1 0 1 8 1 4 0 2 76 0 2 0 1 0 2 1 105 0 0 0 4 5 0 4 105 7 1 5 3 3 5 89 7 1 5 5 3 97 6 1 3 5 3 81 26 26 0 0 26 39 26 38 33 31 0 25 0 24 35 37 37 8 6 25
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = partialdiff;
unicode = 8706;
},
{
glyphname = percent;
kernLeft = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(246,0,l),
(764,700,l),
(639,700,l),
(121,0,l)
);
},
{
closed = 1;
nodes = (
(284,356,o),
(330,384,qs),
(376,412,o),
(428,508,o),
(428,567,qs),
(428,633,o),
(345,712,o),
(280,712,qs),
(223,712,o),
(177,684,qs),
(130,655,o),
(77,559,o),
(77,501,qs),
(77,436,o),
(161,356,o),
(227,356,qs)
);
},
{
closed = 1;
nodes = (
(210,444,o),
(178,479,o),
(178,511,qs),
(178,558,o),
(231,625,o),
(268,625,qs),
(295,625,o),
(327,590,o),
(327,558,qs),
(327,510,o),
(274,444,o),
(237,444,qs)
);
},
{
closed = 1;
nodes = (
(668,-12,o),
(713,17,qs),
(759,46,o),
(811,141,o),
(811,199,qs),
(811,265,o),
(728,343,o),
(663,343,qs),
(606,343,o),
(560,315,qs),
(513,287,o),
(460,191,o),
(460,133,qs),
(460,67,o),
(545,-12,o),
(610,-12,qs)
);
},
{
closed = 1;
nodes = (
(594,76,o),
(562,110,o),
(562,142,qs),
(562,190,o),
(614,257,o),
(652,257,qs),
(678,257,o),
(710,222,o),
(710,189,qs),
(710,143,o),
(658,76,o),
(620,76,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 106 0 4 4 0 97 2 1 0 0 33 77 13 1 9 9 1 97 12 7 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 106 0 0 0 33 77 0 4 4 2 97 0 2 2 39 77 0 1 1 34 77 13 1 9 9 7 97 12 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 36 values pushed */
48 48 32 32 20 20 4 4 48 59 48 58 54 52 32 47 32 46 40 38 20 31 20 30 26 24 4 19 4 18 39 17 16 14 8 25
CALL[ ]	/* CallFunction */";
};
width = 853;
}
);
note = percent;
unicode = 37;
},
{
glyphname = perthousand;
kernLeft = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(246,0,l),
(765,700,l),
(640,700,l),
(122,0,l)
);
},
{
closed = 1;
nodes = (
(284,356,o),
(330,384,qs),
(376,412,o),
(429,509,o),
(429,567,qs),
(429,633,o),
(345,712,o),
(281,712,qs),
(224,712,o),
(178,684,qs),
(131,655,o),
(78,559,o),
(78,501,qs),
(78,436,o),
(162,356,o),
(228,356,qs)
);
},
{
closed = 1;
nodes = (
(211,444,o),
(179,479,o),
(179,511,qs),
(179,558,o),
(232,625,o),
(269,625,qs),
(296,625,o),
(328,590,o),
(328,558,qs),
(328,510,o),
(275,444,o),
(238,444,qs)
);
},
{
closed = 1;
nodes = (
(669,-12,o),
(714,17,qs),
(760,46,o),
(812,141,o),
(812,199,qs),
(812,265,o),
(729,343,o),
(664,343,qs),
(607,343,o),
(561,315,qs),
(514,287,o),
(461,191,o),
(461,133,qs),
(461,68,o),
(546,-12,o),
(610,-12,qs)
);
},
{
closed = 1;
nodes = (
(595,76,o),
(563,110,o),
(563,142,qs),
(563,190,o),
(615,257,o),
(652,257,qs),
(679,257,o),
(711,222,o),
(711,189,qs),
(711,143,o),
(659,76,o),
(621,76,qs)
);
},
{
closed = 1;
nodes = (
(1049,-12,o),
(1094,17,qs),
(1140,46,o),
(1193,141,o),
(1193,199,qs),
(1193,264,o),
(1109,343,o),
(1045,343,qs),
(986,343,o),
(942,315,qs),
(895,287,o),
(842,191,o),
(842,133,qs),
(842,67,o),
(926,-12,o),
(991,-12,qs)
);
},
{
closed = 1;
nodes = (
(975,76,o),
(944,110,o),
(944,142,qs),
(944,190,o),
(996,257,o),
(1033,257,qs),
(1060,257,o),
(1091,222,o),
(1091,189,qs),
(1091,143,o),
(1039,76,o),
(1002,76,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
15 1 5 14 1 3 6 5 3 105 10 1 6 12 1 8 9 6 8 106 0 4 4 0 97 2 1 0 0 33 77 19 13 17 3 9 9 1 97 18 11 16 7 4 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
15 1 5 14 1 3 6 5 3 105 10 1 6 12 1 8 9 6 8 106 0 0 0 33 77 0 4 4 2 97 0 2 2 39 77 0 1 1 34 77 19 13 17 3 9 9 7 97 18 11 16 3 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 52 values pushed */
76 76 60 60 48 48 32 32 20 20 4 4 76 87 76 86 82 80 60 75 60 74 68 66 48 59 48 58 54 52 32 47 32 46 40 38 20 31 20 30 26 24 4 19 4 18 39 17 16 20 8 25
CALL[ ]	/* CallFunction */";
};
width = 1235;
}
);
note = perthousand;
unicode = 8240;
},
{
glyphname = plus.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(318,106,l),
(350,289,l),
(537,289,l),
(556,396,l),
(369,396,l),
(401,579,l),
(292,579,l),
(260,396,l),
(72,396,l),
(53,289,l),
(241,289,l),
(209,106,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 1 2 133 0 5 0 5 134 3 1 1 0 0 1 87 3 1 1 1 0 96 4 1 0 1 0 80 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = plus.case;
},
{
glyphname = arrowup;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(327,712,l),
(56,483,l),
(115,412,l),
(195,480,l),
(241,524,l),
(148,0,l),
(253,0,l),
(346,524,l),
(376,480,l),
(432,412,l),
(515,483,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
10 9 8 7 5 2 6 0 74 0 0 0 34 0 78 19 1 8 23
CALL[ ]	/* CallFunction */";
};
width = 489;
}
);
note = arrowup;
unicode = 8593;
},
{
glyphname = arrowright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(785,350,l),
(597,580,l),
(513,509,l),
(569,441,l),
(606,403,l),
(81,403,l),
(63,298,l),
(588,298,l),
(537,259,l),
(457,192,l),
(515,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
9 1 0 1 1 76 8 7 2 1 74 10 1 0 73 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 18 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 801;
}
);
note = arrowright;
unicode = 8594;
},
{
glyphname = arrowdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,-12,l),
(469,217,l),
(410,288,l),
(330,220,l),
(284,176,l),
(377,700,l),
(272,700,l),
(179,176,l),
(149,220,l),
(93,288,l),
(10,217,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
10 9 8 7 5 2 6 0 73 0 0 0 33 0 78 19 1 8 23
CALL[ ]	/* CallFunction */";
};
width = 489;
}
);
note = arrowdown;
unicode = 8595;
},
{
glyphname = arrowleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(324,192,l),
(268,259,l),
(231,298,l),
(756,298,l),
(774,403,l),
(249,403,l),
(300,441,l),
(380,509,l),
(322,580,l),
(52,350,l),
(240,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
2 1 2 0 74 10 9 2 1 73 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 20 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 801;
}
);
note = arrowleft;
unicode = 8592;
},
{
glyphname = lozenge;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(533,351,l),
(326,602,l),
(30,351,l),
(237,100,l)
);
},
{
closed = 1;
nodes = (
(156,351,l),
(305,476,l),
(407,352,l),
(259,225,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 5 3 1 2 50
CALL[ ]	/* CallFunction */";
};
width = 539;
}
);
note = lozenge;
unicode = 9674;
},
{
glyphname = uni0308;
layers = (
{
anchors = (
{
name = _top;
pos = (239,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(411,560,o),
(459,608,o),
(459,643,qs),
(459,678,o),
(411,726,o),
(376,726,qs),
(341,726,o),
(293,678,o),
(293,643,qs),
(293,608,o),
(341,560,o),
(376,560,qs)
);
},
{
closed = 1;
nodes = (
(189,560,o),
(237,608,o),
(237,643,qs),
(237,678,o),
(189,726,o),
(154,726,qs),
(119,726,o),
(71,678,o),
(71,643,qs),
(71,608,o),
(119,560,o),
(154,560,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0308;
unicode = 776;
},
{
glyphname = uni0307;
layers = (
{
anchors = (
{
name = _top;
pos = (128,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,560,o),
(237,608,o),
(237,643,qs),
(237,678,o),
(189,726,o),
(154,726,qs),
(119,726,o),
(71,678,o),
(71,643,qs),
(71,608,o),
(119,560,o),
(154,560,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0307;
unicode = 775;
},
{
glyphname = gravecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (157,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(293,629,l),
(89,751,l),
(70,647,l),
(277,539,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = gravecomb;
unicode = 768;
},
{
glyphname = acutecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (157,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(296,647,l),
(315,751,l),
(67,629,l),
(51,539,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = acutecomb;
unicode = 769;
},
{
glyphname = uni030B;
layers = (
{
anchors = (
{
name = _top;
pos = (192,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(302,544,l),
(440,723,l),
(335,723,l),
(222,544,l)
);
},
{
closed = 1;
nodes = (
(133,544,l),
(259,723,l),
(155,723,l),
(52,544,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030B;
unicode = 779;
},
{
glyphname = uni030C.alt;
layers = (
{
anchors = (
{
name = _topright;
pos = (132,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(136,546,l),
(249,700,l),
(129,700,l),
(53,546,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.alt;
},
{
glyphname = uni0302;
layers = (
{
anchors = (
{
name = _top;
pos = (190,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(214,636,l),
(346,554,l),
(362,646,l),
(230,726,l),
(70,646,l),
(54,554,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0302;
unicode = 770;
},
{
glyphname = uni030C;
layers = (
{
anchors = (
{
name = _top;
pos = (190,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(360,634,l),
(376,726,l),
(215,641,l),
(84,726,l),
(68,634,l),
(200,554,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C;
unicode = 780;
},
{
glyphname = uni0306;
layers = (
{
anchors = (
{
name = _top;
pos = (200,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(279,544,o),
(378,626,o),
(390,695,qs),
(393,712,l),
(325,712,l),
(319,677,o),
(271,640,o),
(224,640,qs),
(148,640,o),
(148,694,q),
(150,712,l),
(82,712,l),
(76,688,o),
(76,662,qs),
(76,607,o),
(145,544,o),
(207,544,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 6 values pushed */
6 1 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
2 1 0 1 1 0 112 0 1 3 3 1 89 0 1 1 3 98 4 1 3 1 3 82
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 1 0 133 0 1 3 3 1 89 0 1 1 3 98 4 1 3 1 3 82
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 16 0 15 18 34 20 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0306;
unicode = 774;
},
{
glyphname = uni030A;
layers = (
{
anchors = (
{
name = _top;
pos = (160,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(236,545,o),
(302,606,o),
(302,657,qs),
(302,708,o),
(236,769,o),
(187,769,qs),
(140,769,o),
(74,707,o),
(74,657,qs),
(74,607,o),
(140,545,o),
(187,545,qs)
);
},
{
closed = 1;
nodes = (
(166,603,o),
(136,633,o),
(136,657,qs),
(136,681,o),
(165,711,o),
(187,711,qs),
(211,711,o),
(240,682,o),
(240,657,qs),
(240,633,o),
(210,603,o),
(187,603,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030A;
unicode = 778;
},
{
glyphname = tildecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (220,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(340,579,o),
(412,641,o),
(432,703,q),
(364,703,l),
(349,658,o),
(313,658,qs),
(298,658,o),
(277,668,o),
(260,680,qs),
(244,692,o),
(217,704,o),
(198,704,qs),
(151,704,o),
(80,642,o),
(59,580,q),
(127,580,l),
(142,625,o),
(178,625,qs),
(193,625,o),
(214,615,o),
(231,603,qs),
(247,591,o),
(274,579,o),
(293,579,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 23 0 22 17 36 34 17 36 7 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = tildecomb;
unicode = 771;
},
{
glyphname = uni0304;
layers = (
{
anchors = (
{
name = _top;
pos = (239,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(436,599,l),
(452,690,l),
(78,690,l),
(62,599,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0304;
unicode = 772;
},
{
glyphname = uni0312;
layers = (
{
anchors = (
{
name = _top;
pos = (108,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,824,l),
(141,824,o),
(73,712,o),
(73,636,qs),
(73,616,o),
(76,595,q),
(185,595,l),
(202,695,l),
(147,695,l),
(150,710,ls),
(162,772,o),
(211,772,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 37 values pushed */
0 2 4 1 3 0 2 3 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 0 0 0 11 0 11 20 17 18 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0312;
unicode = 786;
},
{
glyphname = uni0326;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = _bottom;
pos = (18,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-87,-274,l),
(-8,-274,o),
(60,-162,o),
(60,-86,qs),
(60,-66,o),
(57,-45,q),
(-52,-45,l),
(-69,-145,l),
(-14,-145,l),
(-17,-160,ls),
(-29,-222,o),
(-78,-222,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 38 values pushed */
0 1 0 0 3 1 0 103 4 1 3 2 2 3 89 4 1 3 3 2 97 0 2 3 2 81 0 0 0 11 0 11 20 17 18 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0326;
unicode = 806;
},
{
glyphname = uni0327;
layers = (
{
anchors = (
{
name = _bottom;
pos = (51,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(41,-263,ls),
(102,-263,o),
(192,-195,o),
(192,-134,qs),
(192,-92,o),
(128,-48,o),
(79,-50,q),
(91,17,l),
(11,17,l),
(-13,-118,l),
(48,-118,ls),
(96,-118,o),
(96,-147,qs),
(95,-168,o),
(61,-189,o),
(35,-189,qs),
(-77,-189,l),
(-90,-263,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 3 2 1 2 3 114 0 2 0 1 0 2 1 105 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 2 1 2 3 1 128 0 2 0 1 0 2 1 105 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 17 17 35 32 5 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0327;
unicode = 807;
},
{
glyphname = uni0328;
layers = (
{
anchors = (
{
name = _ogonek;
pos = (171,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(95,-210,o),
(142,-196,q),
(155,-120,l),
(113,-135,o),
(81,-135,qs),
(60,-135,o),
(36,-117,o),
(36,-102,qs),
(36,-81,o),
(71,-46,o),
(115,-26,qs),
(171,0,l),
(153,60,l),
(103,40,ls),
(11,3,o),
(-64,-77,o),
(-64,-126,qs),
(-64,-168,o),
(0,-210,o),
(52,-210,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 33 values pushed */
16 7 6 3 0 74 0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 19 0 18 45 3 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0328;
unicode = 808;
},
{
glyphname = uni0308.case;
layers = (
{
anchors = (
{
name = _top;
pos = (275,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(448,768,o),
(496,816,o),
(496,851,qs),
(496,886,o),
(448,934,o),
(413,934,qs),
(378,934,o),
(330,886,o),
(330,851,qs),
(330,816,o),
(378,768,o),
(413,768,qs)
);
},
{
closed = 1;
nodes = (
(226,768,o),
(274,816,o),
(274,851,qs),
(274,886,o),
(226,934,o),
(191,934,qs),
(156,934,o),
(108,886,o),
(108,851,qs),
(108,816,o),
(156,768,o),
(191,768,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0308.case;
},
{
glyphname = uni0307.case;
layers = (
{
anchors = (
{
name = _top;
pos = (164,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,768,o),
(274,816,o),
(274,851,qs),
(274,886,o),
(226,934,o),
(191,934,qs),
(156,934,o),
(108,886,o),
(108,851,qs),
(108,816,o),
(156,768,o),
(191,768,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0307.case;
},
{
glyphname = gravecomb.case;
layers = (
{
anchors = (
{
name = _top;
pos = (193,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,830,l),
(125,952,l),
(106,848,l),
(313,740,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = gravecomb.case;
},
{
glyphname = acutecomb.case;
layers = (
{
anchors = (
{
name = _top;
pos = (193,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(332,848,l),
(351,952,l),
(103,830,l),
(87,740,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = acutecomb.case;
},
{
glyphname = uni030B.case;
layers = (
{
anchors = (
{
name = _top;
pos = (258,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(338,748,l),
(476,927,l),
(371,927,l),
(258,748,l)
);
},
{
closed = 1;
nodes = (
(169,748,l),
(295,927,l),
(191,927,l),
(88,748,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030B.case;
},
{
glyphname = uni030C.alt.case;
layers = (
{
anchors = (
{
name = _topright;
pos = (81,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(136,546,l),
(249,700,l),
(129,700,l),
(53,546,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.alt.case;
},
{
glyphname = uni0302.case;
layers = (
{
anchors = (
{
name = _top;
pos = (226,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(248,829,l),
(380,747,l),
(396,839,l),
(264,919,l),
(104,839,l),
(88,747,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0302.case;
},
{
glyphname = uni030C.case;
layers = (
{
anchors = (
{
name = _top;
pos = (226,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(394,826,l),
(410,918,l),
(249,833,l),
(118,918,l),
(102,826,l),
(234,746,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.case;
},
{
glyphname = uni0306.case;
layers = (
{
anchors = (
{
name = _top;
pos = (237,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(316,749,o),
(415,831,o),
(427,900,qs),
(430,917,l),
(362,917,l),
(356,882,o),
(308,845,o),
(261,845,qs),
(185,845,o),
(185,899,q),
(187,917,l),
(119,917,l),
(113,893,o),
(113,867,qs),
(113,812,o),
(182,749,o),
(244,749,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
6 1 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
2 1 0 1 1 0 112 0 1 3 3 1 89 0 1 1 3 98 4 1 3 1 3 82
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 1 0 133 0 1 3 3 1 89 0 1 1 3 98 4 1 3 1 3 82
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 16 0 15 18 34 20 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0306.case;
},
{
glyphname = uni030A.case;
layers = (
{
anchors = (
{
name = _top;
pos = (195,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(272,751,o),
(338,812,o),
(338,863,qs),
(338,914,o),
(272,975,o),
(223,975,qs),
(176,975,o),
(110,913,o),
(110,863,qs),
(110,813,o),
(176,751,o),
(223,751,qs)
);
},
{
closed = 1;
nodes = (
(202,809,o),
(172,839,o),
(172,863,qs),
(172,887,o),
(201,917,o),
(223,917,qs),
(247,917,o),
(276,888,o),
(276,863,qs),
(276,839,o),
(246,809,o),
(223,809,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030A.case;
},
{
glyphname = tildecomb.case;
layers = (
{
anchors = (
{
name = _top;
pos = (256,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(370,752,o),
(442,814,o),
(462,876,q),
(394,876,l),
(379,831,o),
(343,831,qs),
(328,831,o),
(307,841,o),
(290,853,qs),
(274,865,o),
(247,877,o),
(228,877,qs),
(181,877,o),
(110,815,o),
(89,753,q),
(157,753,l),
(172,798,o),
(208,798,qs),
(223,798,o),
(244,788,o),
(261,776,qs),
(277,764,o),
(304,752,o),
(323,752,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 23 0 22 17 36 34 17 36 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = tildecomb.case;
},
{
glyphname = uni0304.case;
layers = (
{
anchors = (
{
name = _top;
pos = (266,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(468,783,l),
(484,874,l),
(110,874,l),
(94,783,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0304.case;
},
{
glyphname = uni0327.case;
layers = (
{
anchors = (
{
name = _bottom;
pos = (49,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(41,-263,ls),
(102,-263,o),
(192,-195,o),
(192,-134,qs),
(192,-92,o),
(128,-48,o),
(79,-50,q),
(91,17,l),
(11,17,l),
(-13,-118,l),
(48,-118,ls),
(96,-118,o),
(96,-147,qs),
(95,-168,o),
(61,-189,o),
(35,-189,qs),
(-77,-189,l),
(-90,-263,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 3 2 1 2 3 114 0 2 0 1 0 2 1 105 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 2 1 2 3 1 128 0 2 0 1 0 2 1 105 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 17 17 35 32 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0327.case;
},
{
glyphname = uni0328.case;
layers = (
{
anchors = (
{
name = _ogonek;
pos = (171,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(95,-210,o),
(142,-196,q),
(155,-120,l),
(113,-135,o),
(81,-135,qs),
(60,-135,o),
(36,-117,o),
(36,-102,qs),
(36,-81,o),
(71,-46,o),
(115,-26,qs),
(171,0,l),
(153,60,l),
(103,40,ls),
(11,3,o),
(-64,-77,o),
(-64,-126,qs),
(-64,-168,o),
(0,-210,o),
(52,-210,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
16 7 6 3 0 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 1 97 2 1 1 1 38 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 19 0 18 45 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0328.case;
},
{
glyphname = uni0308.narrow;
layers = (
{
anchors = (
{
name = _top;
pos = (260,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(406,560,o),
(451,608,o),
(451,643,qs),
(451,678,o),
(406,726,o),
(373,726,qs),
(340,726,o),
(296,678,o),
(296,643,qs),
(296,608,o),
(340,560,o),
(373,560,qs)
);
},
{
closed = 1;
nodes = (
(228,560,o),
(272,608,o),
(272,643,qs),
(272,678,o),
(228,726,o),
(195,726,qs),
(162,726,o),
(117,678,o),
(117,643,qs),
(117,608,o),
(162,560,o),
(195,560,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 1 0 97 2 1 0 0 41 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 1 0 97 2 1 0 0 39 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0308.narrow;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-200,0);
ref = uni0308;
}
);
width = 0;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-89,0);
ref = uni0307;
}
);
width = 0;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-113,0);
ref = gravecomb;
}
);
width = 0;
}
);
note = grave;
unicode = 96;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-119,0);
ref = acutecomb;
}
);
width = 0;
}
);
note = acute;
unicode = 180;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-184,0);
ref = uni030B;
}
);
width = 0;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-152,0);
ref = uni0302;
}
);
width = 0;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-152,0);
ref = uni030C;
}
);
width = 0;
}
);
note = caron;
unicode = 711;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-161,0);
ref = uni0306;
}
);
width = 0;
}
);
note = breve;
unicode = 728;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-116,0);
ref = uni030A;
}
);
width = 0;
}
);
note = ring;
unicode = 730;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-182,0);
ref = tildecomb;
}
);
width = 0;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-193,0);
ref = uni0304;
}
);
width = 0;
}
);
note = macron;
unicode = 175;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-130,0);
ref = uni0327;
}
);
width = 0;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-110,0);
ref = uni0328;
}
);
width = 0;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = uni02BA;
kernLeft = uni02BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(342,546,l),
(390,755,l),
(279,755,l),
(255,546,l)
);
},
{
closed = 1;
nodes = (
(181,546,l),
(229,755,l),
(119,755,l),
(95,546,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 330;
}
);
note = uni02BA;
unicode = 698;
},
{
glyphname = uni02B9;
kernLeft = uni02BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,546,l),
(229,755,l),
(119,755,l),
(95,546,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 169;
}
);
note = uni02B9;
unicode = 697;
},
{
glyphname = uniE000;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(294,0,l),
(294,214,l),
(499,0,l),
(645,0,l),
(401,260,l),
(630,511,l),
(486,511,l),
(294,309,l),
(294,700,l),
(180,700,l),
(180,0,l)
);
},
{
closed = 1;
nodes = (
(966,-12,o),
(1091,57,o),
(1162,179,o),
(1162,254,qs),
(1162,329,o),
(1091,452,o),
(966,523,o),
(888,523,qs),
(810,523,o),
(686,452,o),
(615,329,o),
(615,254,qs),
(615,179,o),
(686,57,o),
(810,-12,o),
(888,-12,qs)
);
},
{
closed = 1;
nodes = (
(839,95,o),
(768,137,o),
(729,210,o),
(729,254,qs),
(729,298,o),
(768,371,o),
(839,413,o),
(886,413,qs),
(933,413,o),
(1005,371,o),
(1045,298,o),
(1045,254,qs),
(1045,210,o),
(1005,137,o),
(933,95,o),
(886,95,qs)
);
},
{
closed = 1;
nodes = (
(812,566,o),
(853,607,o),
(853,637,qs),
(853,667,o),
(813,707,o),
(782,707,qs),
(752,707,o),
(711,665,o),
(711,636,qs),
(711,607,o),
(752,566,o),
(782,566,qs)
);
},
{
closed = 1;
nodes = (
(1023,566,o),
(1064,607,o),
(1064,637,qs),
(1064,667,o),
(1024,707,o),
(993,707,qs),
(963,707,o),
(922,665,o),
(922,636,qs),
(922,607,o),
(963,566,o),
(993,566,qs)
);
},
{
closed = 1;
nodes = (
(1342,0,l),
(1342,700,l),
(1232,700,l),
(1232,0,l)
);
},
{
closed = 1;
nodes = (
(1657,95,o),
(1585,140,o),
(1547,213,o),
(1547,254,qs),
(1547,297,o),
(1588,370,o),
(1660,413,o),
(1706,413,qs),
(1774,413,o),
(1862,323,o),
(1862,254,qs),
(1862,209,o),
(1822,136,o),
(1751,95,o),
(1706,95,qs)
);
},
{
closed = 1;
nodes = (
(1802,-12,o),
(1916,60,o),
(1978,182,o),
(1978,254,qs),
(1978,331,o),
(1912,454,o),
(1798,523,o),
(1727,523,qs),
(1670,523,o),
(1582,478,o),
(1547,431,q),
(1547,700,l),
(1437,700,l),
(1437,0,l),
(1547,0,l),
(1547,80,l),
(1582,33,o),
(1670,-12,o),
(1727,-12,qs)
);
},
{
closed = 1;
nodes = (
(2161,0,l),
(2161,511,l),
(2048,511,l),
(2048,0,l)
);
},
{
closed = 1;
nodes = (
(2134,566,o),
(2175,607,o),
(2175,637,qs),
(2175,667,o),
(2135,707,o),
(2104,707,qs),
(2074,707,o),
(2033,665,o),
(2033,636,qs),
(2033,607,o),
(2074,566,o),
(2104,566,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 171 values pushed */
93 1 6 1 8 5 2 3 7 6 88 1 2 7 3 76 17 12 2 0 8 9 8 0 9 128 20 1 1 4 6 4 1 6 128 21 16 13 3 4 2 7 5 7 2 5 128 22 10 2 8 30 23 27 11 26 5 9 4 8 9 105 18 1 4 14 1 6 7 4 6 105 28 15 25 3 7 2 5 7 89 28 15 25 3 7 7 5 97 29 19 24 3 5 7 5 81 109 109 86 86 71 71 55 55 43 43 27 27 11 11 109 120 109 119 115 113 108 107 106 105 86 104 86 103 97 95 92 91 90 89 71 85 71 84 78 76 70 69 68 67 55 66 55 65 61 59 43 54 43 53 49 47 27 42 27 41 35 33 11 26 11 25 39 18 18 18 16 31 6 27
CALL[ ]	/* CallFunction */";
};
width = 2305;
}
);
note = uniE000;
unicode = 57344;
},
{
glyphname = uniE001;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,225,l),
(239,173,o),
(312,118,o),
(359,118,qs),
(411,118,o),
(478,177,o),
(478,227,qs),
(478,278,o),
(410,339,o),
(355,339,qs),
(284,339,o),
(233,288,q),
(139,330,l),
(180,700,l),
(587,700,l),
(587,579,l),
(294,579,l),
(277,426,l),
(294,440,o),
(355,458,o),
(390,458,qs),
(462,458,o),
(567,400,o),
(623,296,o),
(623,229,qs),
(623,160,o),
(556,52,o),
(437,-8,o),
(361,-8,qs),
(272,-8,o),
(141,82,o),
(106,166,q)
);
},
{
closed = 1;
nodes = (
(942,-8,o),
(776,88,o),
(680,253,o),
(680,352,qs),
(680,449,o),
(770,614,o),
(934,711,o),
(1039,711,qs),
(1135,711,o),
(1296,620,o),
(1345,546,q),
(1235,468,l),
(1162,581,o),
(1039,581,qs),
(939,581,o),
(824,456,o),
(824,352,qs),
(824,283,o),
(882,177,o),
(981,120,o),
(1041,120,qs),
(1124,120,o),
(1226,203,o),
(1240,265,q),
(1027,265,l),
(1027,383,l),
(1379,383,l),
(1381,369,o),
(1381,328,qs),
(1381,238,o),
(1298,84,o),
(1143,-8,o),
(1041,-8,qs)
);
},
{
closed = 1;
nodes = (
(861,949,o),
(818,904,o),
(818,873,qs),
(818,843,o),
(861,798,o),
(894,798,qs),
(927,798,o),
(970,843,o),
(970,874,qs),
(970,904,o),
(927,949,o),
(894,949,qs)
);
},
{
closed = 1;
nodes = (
(1673,107,l),
(1720,157,o),
(1769,278,o),
(1769,342,qs),
(1769,405,o),
(1722,525,o),
(1676,575,q),
(1761,663,l),
(1824,597,o),
(1890,430,o),
(1890,342,qs),
(1890,254,o),
(1824,89,o),
(1761,23,q)
);
},
{
closed = 1;
nodes = (
(1845,-59,l),
(1925,23,o),
(2007,231,o),
(2007,342,qs),
(2007,453,o),
(1925,661,o),
(1845,742,q),
(1931,831,l),
(2029,731,o),
(2131,477,o),
(2131,342,qs),
(2131,208,o),
(2029,-47,o),
(1931,-148,q)
);
},
{
closed = 1;
nodes = (
(1094,949,o),
(1051,904,o),
(1051,873,qs),
(1051,843,o),
(1094,798,o),
(1127,798,qs),
(1160,798,o),
(1203,843,o),
(1203,874,qs),
(1203,904,o),
(1160,949,o),
(1127,949,qs)
);
},
{
closed = 1;
nodes = (
(1603,248,o),
(1658,303,o),
(1658,342,qs),
(1658,381,o),
(1603,436,o),
(1564,436,qs),
(1525,436,o),
(1470,381,o),
(1470,342,qs),
(1470,303,o),
(1525,248,o),
(1564,248,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
96 1 12 13 97 1 10 12 82 1 2 3 83 53 52 3 1 2 13 1 6 16 19 18 2 7 4 31 30 2 5 17 90 89 2 0 5 8 76 104 103 2 0 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
20 15 19 3 13 12 13 133 14 1 12 10 10 12 112 0 16 1 6 1 16 6 128 21 1 17 7 5 7 17 5 128 0 10 3 2 10 89 0 3 9 1 2 1 3 2 105 0 1 0 4 7 1 4 105 0 6 0 7 17 6 7 103 8 1 5 0 0 5 89 8 1 5 5 0 97 18 11 2 0 5 0 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 82 values pushed */
20 15 19 3 13 12 13 133 14 1 12 10 12 133 0 16 1 6 1 16 6 128 21 1 17 7 5 7 17 5 128 0 10 3 2 10 89 0 3 9 1 2 1 3 2 105 0 1 0 4 7 1 4 105 0 6 0 7 17 6 7 103 8 1 5 0 0 5 89 8 1 5 5 0 97 18 11 2 0 5 0 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 46 values pushed */
117 117 105 105 65 65 32 32 117 128 117 127 123 121 105 116 105 115 111 109 65 76 65 75 71 69 32 64 32 63 57 55 51 49 34 17 25 36 35 17 19 38 33 22 6 31
CALL[ ]	/* CallFunction */";
};
width = 2225;
}
);
note = uniE001;
unicode = 57345;
},
{
glyphname = uniE002;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,48,o),
(533,48,qs),
(540,48,o),
(545,53,qs),
(722,229,ls),
(781,288,o),
(781,367,qs),
(781,386,ls),
(781,393,o),
(784,399,o),
(790,401,qs),
(838,418,o),
(900,499,o),
(900,550,qs),
(900,594,o),
(858,667,o),
(786,710,o),
(741,710,qs),
(688,710,o),
(611,653,o),
(591,603,qs),
(587,592,o),
(575,584,o),
(566,584,qs),
(501,584,ls),
(490,584,o),
(478,592,o),
(474,603,qs),
(454,653,o),
(377,710,o),
(324,710,qs),
(279,710,o),
(207,667,o),
(165,594,o),
(165,550,qs),
(165,499,o),
(227,418,o),
(275,401,qs),
(281,399,o),
(284,393,o),
(284,386,qs),
(284,367,ls),
(284,294,o),
(343,229,q),
(520,53,l)
);
},
{
closed = 1;
nodes = (
(496,0,ls),
(502,0,o),
(509,7,o),
(509,12,qs),
(509,17,o),
(505,21,qs),
(302,222,ls),
(266,258,o),
(213,258,qs),
(179,258,o),
(119,227,o),
(81,168,o),
(81,130,qs),
(81,97,o),
(114,37,o),
(174,0,o),
(213,0,qs)
);
},
{
closed = 1;
nodes = (
(275,435,o),
(205,505,o),
(205,554,qs),
(205,603,o),
(275,672,o),
(324,672,qs),
(373,672,o),
(442,603,o),
(442,554,qs),
(442,505,o),
(373,435,o),
(324,435,qs)
);
},
{
closed = 1;
nodes = (
(364,456,o),
(421,514,o),
(421,554,qs),
(421,594,o),
(364,651,o),
(324,651,qs),
(284,651,o),
(226,594,o),
(226,554,qs),
(226,514,o),
(284,456,o),
(324,456,qs)
);
},
{
closed = 1;
nodes = (
(295,484,o),
(254,525,o),
(254,554,qs),
(254,583,o),
(295,623,o),
(324,623,qs),
(338,623,o),
(354,616,q),
(346,614,o),
(336,600,o),
(336,592,qs),
(336,581,o),
(351,566,o),
(362,566,qs),
(370,566,o),
(384,576,o),
(386,584,q),
(393,568,o),
(393,554,qs),
(393,525,o),
(353,484,o),
(324,484,qs)
);
},
{
closed = 1;
nodes = (
(852,0,ls),
(891,0,o),
(951,37,o),
(984,97,o),
(984,130,qs),
(984,168,o),
(946,227,o),
(886,258,o),
(852,258,qs),
(799,258,o),
(763,222,qs),
(560,21,ls),
(556,17,o),
(556,12,qs),
(556,7,o),
(563,0,o),
(569,0,qs)
);
},
{
closed = 1;
nodes = (
(693,435,o),
(623,505,o),
(623,554,qs),
(623,603,o),
(693,672,o),
(742,672,qs),
(791,672,o),
(860,603,o),
(860,554,qs),
(860,505,o),
(791,435,o),
(742,435,qs)
);
},
{
closed = 1;
nodes = (
(782,456,o),
(839,514,o),
(839,554,qs),
(839,594,o),
(782,651,o),
(742,651,qs),
(702,651,o),
(644,594,o),
(644,554,qs),
(644,514,o),
(702,456,o),
(742,456,qs)
);
},
{
closed = 1;
nodes = (
(713,484,o),
(672,525,o),
(672,554,qs),
(672,583,o),
(713,623,o),
(742,623,qs),
(756,623,o),
(772,616,q),
(764,614,o),
(754,600,o),
(754,592,qs),
(754,581,o),
(769,566,o),
(780,566,qs),
(788,566,o),
(802,576,o),
(804,584,q),
(811,568,o),
(811,554,qs),
(811,525,o),
(771,484,o),
(742,484,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
162 159 99 96 4 1 11 3 1 4 7 2 76 153 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
0 1 11 10 11 1 10 128 19 1 10 12 11 10 112 26 16 23 3 7 9 4 9 7 4 128 13 1 4 3 9 4 3 126 0 3 5 9 3 5 126 14 22 2 5 5 132 2 1 0 15 1 6 8 0 6 105 17 1 8 20 1 11 1 8 11 105 28 21 25 3 12 9 9 12 89 28 21 25 3 12 12 9 97 27 18 24 3 9 12 9 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 93 values pushed */
0 1 11 10 11 1 10 128 19 1 10 12 11 10 12 126 26 16 23 3 7 9 4 9 7 4 128 13 1 4 3 9 4 3 126 0 3 5 9 3 5 126 14 22 2 5 5 132 2 1 0 15 1 6 8 0 6 105 17 1 8 20 1 11 1 8 11 105 28 21 25 3 12 9 9 12 89 28 21 25 3 12 12 9 97 27 18 24 3 9 12 9 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 70 values pushed */
149 149 137 137 125 125 86 86 74 74 62 62 45 45 149 170 149 169 165 163 157 155 137 148 137 147 143 141 125 136 125 135 131 129 124 122 116 114 86 107 86 106 102 100 94 92 74 85 74 84 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 29 6 27
CALL[ ]	/* CallFunction */";
};
width = 1107;
}
);
note = uniE002;
unicode = 57346;
},
{
glyphname = uniE003;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,48,o),
(533,48,qs),
(540,48,o),
(545,53,qs),
(722,229,ls),
(781,288,o),
(781,367,qs),
(781,386,ls),
(781,393,o),
(784,399,o),
(790,401,qs),
(838,418,o),
(900,499,o),
(900,550,qs),
(900,594,o),
(858,667,o),
(786,710,o),
(741,710,qs),
(688,710,o),
(611,653,o),
(591,603,qs),
(587,592,o),
(575,584,o),
(566,584,qs),
(501,584,ls),
(490,584,o),
(478,592,o),
(474,603,qs),
(454,653,o),
(377,710,o),
(324,710,qs),
(279,710,o),
(207,667,o),
(165,594,o),
(165,550,qs),
(165,499,o),
(227,418,o),
(275,401,qs),
(281,399,o),
(284,393,o),
(284,386,qs),
(284,367,ls),
(284,294,o),
(343,229,q),
(520,53,l)
);
},
{
closed = 1;
nodes = (
(496,0,ls),
(502,0,o),
(509,7,o),
(509,12,qs),
(509,17,o),
(505,21,qs),
(302,222,ls),
(266,258,o),
(213,258,qs),
(179,258,o),
(119,227,o),
(81,168,o),
(81,130,qs),
(81,97,o),
(114,37,o),
(174,0,o),
(213,0,qs)
);
},
{
closed = 1;
nodes = (
(284,456,o),
(226,514,o),
(226,554,qs),
(226,594,o),
(284,651,o),
(324,651,qs),
(364,651,o),
(421,594,o),
(421,554,qs),
(421,514,o),
(364,456,o),
(324,456,qs)
);
},
{
closed = 1;
nodes = (
(353,484,o),
(393,525,o),
(393,554,qs),
(393,568,o),
(386,584,q),
(384,576,o),
(370,566,o),
(362,566,qs),
(351,566,o),
(336,581,o),
(336,592,qs),
(336,600,o),
(346,614,o),
(354,616,q),
(338,623,o),
(324,623,qs),
(295,623,o),
(254,583,o),
(254,554,qs),
(254,525,o),
(295,484,o),
(324,484,qs)
);
},
{
closed = 1;
nodes = (
(852,0,ls),
(891,0,o),
(951,37,o),
(984,97,o),
(984,130,qs),
(984,168,o),
(946,227,o),
(886,258,o),
(852,258,qs),
(799,258,o),
(763,222,qs),
(560,21,ls),
(556,17,o),
(556,12,qs),
(556,7,o),
(563,0,o),
(569,0,qs)
);
},
{
closed = 1;
nodes = (
(702,456,o),
(644,514,o),
(644,554,qs),
(644,594,o),
(702,651,o),
(742,651,qs),
(782,651,o),
(839,594,o),
(839,554,qs),
(839,514,o),
(782,456,o),
(742,456,qs)
);
},
{
closed = 1;
nodes = (
(771,484,o),
(811,525,o),
(811,554,qs),
(811,568,o),
(804,584,q),
(802,576,o),
(788,566,o),
(780,566,qs),
(769,566,o),
(754,581,o),
(754,592,qs),
(754,600,o),
(764,614,o),
(772,616,q),
(756,623,o),
(742,623,qs),
(713,623,o),
(672,583,o),
(672,554,qs),
(672,525,o),
(713,484,o),
(742,484,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 150 values pushed */
132 81 2 1 8 3 1 4 7 2 76 141 90 2 1 1 75 0 1 8 9 8 1 9 128 16 1 9 10 8 9 10 126 21 14 19 3 7 10 4 10 7 4 128 11 1 4 3 10 4 3 126 0 3 5 10 3 5 126 12 18 2 5 5 132 2 1 0 13 1 6 8 0 6 105 15 1 8 1 10 8 89 15 1 8 8 10 97 22 17 20 3 10 8 10 81 125 125 113 113 74 74 62 62 45 45 125 146 125 145 138 137 131 129 113 124 113 123 119 117 112 110 104 102 74 95 74 94 87 86 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 23 6 27
CALL[ ]	/* CallFunction */";
};
width = 1107;
}
);
note = uniE003;
unicode = 57347;
},
{
glyphname = uniE004;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,48,o),
(533,48,qs),
(540,48,o),
(545,53,qs),
(722,229,ls),
(781,288,o),
(781,367,qs),
(781,386,ls),
(781,393,o),
(784,399,o),
(790,401,qs),
(838,418,o),
(900,499,o),
(900,550,qs),
(900,594,o),
(858,667,o),
(786,710,o),
(741,710,qs),
(688,710,o),
(611,653,o),
(591,603,qs),
(587,592,o),
(575,584,o),
(566,584,qs),
(501,584,ls),
(490,584,o),
(478,592,o),
(474,603,qs),
(454,653,o),
(377,710,o),
(324,710,qs),
(279,710,o),
(207,667,o),
(165,594,o),
(165,550,qs),
(165,499,o),
(227,418,o),
(275,401,qs),
(281,399,o),
(284,393,o),
(284,386,qs),
(284,367,ls),
(284,294,o),
(343,229,q),
(520,53,l)
);
},
{
closed = 1;
nodes = (
(496,0,ls),
(502,0,o),
(509,7,o),
(509,12,qs),
(509,17,o),
(505,21,qs),
(302,222,ls),
(266,258,o),
(213,258,qs),
(179,258,o),
(119,227,o),
(81,168,o),
(81,130,qs),
(81,97,o),
(114,37,o),
(174,0,o),
(213,0,qs)
);
},
{
closed = 1;
nodes = (
(275,435,o),
(205,505,o),
(205,554,qs),
(205,603,o),
(275,672,o),
(324,672,qs),
(373,672,o),
(442,603,o),
(442,554,qs),
(442,505,o),
(373,435,o),
(324,435,qs)
);
},
{
closed = 1;
nodes = (
(364,456,o),
(421,514,o),
(421,554,qs),
(421,594,o),
(364,651,o),
(324,651,qs),
(284,651,o),
(226,594,o),
(226,554,qs),
(226,514,o),
(284,456,o),
(324,456,qs)
);
},
{
closed = 1;
nodes = (
(295,484,o),
(254,525,o),
(254,554,qs),
(254,583,o),
(295,623,o),
(324,623,qs),
(338,623,o),
(354,616,q),
(346,614,o),
(336,600,o),
(336,592,qs),
(336,581,o),
(351,566,o),
(362,566,qs),
(370,566,o),
(384,576,o),
(386,584,q),
(393,568,o),
(393,554,qs),
(393,525,o),
(353,484,o),
(324,484,qs)
);
},
{
closed = 1;
nodes = (
(852,0,ls),
(891,0,o),
(951,37,o),
(984,97,o),
(984,130,qs),
(984,168,o),
(946,227,o),
(886,258,o),
(852,258,qs),
(799,258,o),
(763,222,qs),
(560,21,ls),
(556,17,o),
(556,12,qs),
(556,7,o),
(563,0,o),
(569,0,qs)
);
},
{
closed = 1;
nodes = (
(1236,0,l),
(1236,214,l),
(1441,0,l),
(1587,0,l),
(1343,260,l),
(1572,511,l),
(1428,511,l),
(1236,309,l),
(1236,700,l),
(1122,700,l),
(1122,0,l)
);
},
{
closed = 1;
nodes = (
(1908,-12,o),
(2033,57,o),
(2104,179,o),
(2104,254,qs),
(2104,329,o),
(2033,452,o),
(1908,523,o),
(1830,523,qs),
(1752,523,o),
(1628,452,o),
(1557,329,o),
(1557,254,qs),
(1557,179,o),
(1628,57,o),
(1752,-12,o),
(1830,-12,qs)
);
},
{
closed = 1;
nodes = (
(1781,95,o),
(1710,137,o),
(1671,210,o),
(1671,254,qs),
(1671,298,o),
(1710,371,o),
(1781,413,o),
(1828,413,qs),
(1875,413,o),
(1947,371,o),
(1987,298,o),
(1987,254,qs),
(1987,210,o),
(1947,137,o),
(1875,95,o),
(1828,95,qs)
);
},
{
closed = 1;
nodes = (
(1754,566,o),
(1795,607,o),
(1795,637,qs),
(1795,667,o),
(1755,707,o),
(1724,707,qs),
(1694,707,o),
(1653,665,o),
(1653,636,qs),
(1653,607,o),
(1694,566,o),
(1724,566,qs)
);
},
{
closed = 1;
nodes = (
(1965,566,o),
(2006,607,o),
(2006,637,qs),
(2006,667,o),
(1966,707,o),
(1935,707,qs),
(1905,707,o),
(1864,665,o),
(1864,636,qs),
(1864,607,o),
(1905,566,o),
(1935,566,qs)
);
},
{
closed = 1;
nodes = (
(2284,0,l),
(2284,700,l),
(2174,700,l),
(2174,0,l)
);
},
{
closed = 1;
nodes = (
(2599,95,o),
(2527,140,o),
(2489,213,o),
(2489,254,qs),
(2489,297,o),
(2530,370,o),
(2602,413,o),
(2648,413,qs),
(2716,413,o),
(2804,323,o),
(2804,254,qs),
(2804,209,o),
(2764,136,o),
(2693,95,o),
(2648,95,qs)
);
},
{
closed = 1;
nodes = (
(2744,-12,o),
(2858,60,o),
(2920,182,o),
(2920,254,qs),
(2920,331,o),
(2854,454,o),
(2740,523,o),
(2669,523,qs),
(2612,523,o),
(2524,478,o),
(2489,431,q),
(2489,700,l),
(2379,700,l),
(2379,0,l),
(2489,0,l),
(2489,80,l),
(2524,33,o),
(2612,-12,o),
(2669,-12,qs)
);
},
{
closed = 1;
nodes = (
(3103,0,l),
(3103,511,l),
(2990,511,l),
(2990,0,l)
);
},
{
closed = 1;
nodes = (
(3076,566,o),
(3117,607,o),
(3117,637,qs),
(3117,667,o),
(3077,707,o),
(3046,707,qs),
(3016,707,o),
(2975,665,o),
(2975,636,qs),
(2975,607,o),
(3016,566,o),
(3046,566,qs)
);
},
{
closed = 1;
nodes = (
(693,435,o),
(623,505,o),
(623,554,qs),
(623,603,o),
(693,672,o),
(742,672,qs),
(791,672,o),
(860,603,o),
(860,554,qs),
(860,505,o),
(791,435,o),
(742,435,qs)
);
},
{
closed = 1;
nodes = (
(782,456,o),
(839,514,o),
(839,554,qs),
(839,594,o),
(782,651,o),
(742,651,qs),
(702,651,o),
(644,594,o),
(644,554,qs),
(644,514,o),
(702,456,o),
(742,456,qs)
);
},
{
closed = 1;
nodes = (
(713,484,o),
(672,525,o),
(672,554,qs),
(672,583,o),
(713,623,o),
(742,623,qs),
(756,623,o),
(772,616,q),
(764,614,o),
(754,600,o),
(754,592,qs),
(754,581,o),
(769,566,o),
(780,566,qs),
(788,566,o),
(802,576,o),
(804,584,q),
(811,568,o),
(811,554,qs),
(811,525,o),
(771,484,o),
(742,484,qs)
);
}
);
userData = {
assembly = "NPUSHW[ ]	/* 33 values pushed */
283 280 99 96 4 1 11 218 1 21 7 130 127 3 3 4 21 133 1 22 4 213 1 3 22 5 76 274 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 154 values pushed */
32 27 2 15 0 6 0 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 39 1 6 8 0 6 89 41 1 8 44 1 11 1 8 11 105 37 25 23 2 4 0 43 56 38 53 26 52 24 7 10 19 0 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 155 values pushed */
32 27 2 15 23 6 23 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 2 1 0 39 1 6 8 0 6 105 41 1 8 44 1 11 1 8 11 105 37 25 2 23 43 56 38 53 26 52 24 7 10 19 23 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 154 values pushed */
32 27 2 15 0 6 0 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 39 1 6 8 0 6 89 41 1 8 44 1 11 1 8 11 105 37 25 23 2 4 0 43 56 38 53 26 52 24 7 10 19 0 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 146 values pushed */
270 270 258 258 246 246 234 234 211 211 196 196 180 180 168 168 152 152 136 136 86 86 74 74 62 62 45 45 270 291 270 290 286 284 278 276 258 269 258 268 264 262 246 257 246 256 252 250 234 245 234 244 240 238 233 232 231 230 211 229 211 228 222 220 217 216 215 214 196 210 196 209 203 201 195 194 193 192 180 191 180 190 186 184 168 179 168 178 174 172 152 167 152 166 160 158 136 151 136 150 144 142 135 134 132 131 129 128 126 125 124 122 116 114 86 107 86 106 102 100 94 92 74 85 74 84 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 60 6 27
CALL[ ]	/* CallFunction */";
};
width = 3247;
}
);
note = uniE004;
},
{
glyphname = uniE005;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,48,o),
(533,48,qs),
(540,48,o),
(545,53,qs),
(722,229,ls),
(781,288,o),
(781,367,qs),
(781,386,ls),
(781,393,o),
(784,399,o),
(790,401,qs),
(838,418,o),
(900,499,o),
(900,550,qs),
(900,594,o),
(858,667,o),
(786,710,o),
(741,710,qs),
(688,710,o),
(611,653,o),
(591,603,qs),
(587,592,o),
(575,584,o),
(566,584,qs),
(501,584,ls),
(490,584,o),
(478,592,o),
(474,603,qs),
(454,653,o),
(377,710,o),
(324,710,qs),
(279,710,o),
(207,667,o),
(165,594,o),
(165,550,qs),
(165,499,o),
(227,418,o),
(275,401,qs),
(281,399,o),
(284,393,o),
(284,386,qs),
(284,367,ls),
(284,294,o),
(343,229,q),
(520,53,l)
);
},
{
closed = 1;
nodes = (
(496,0,ls),
(502,0,o),
(509,7,o),
(509,12,qs),
(509,17,o),
(505,21,qs),
(302,222,ls),
(266,258,o),
(213,258,qs),
(179,258,o),
(119,227,o),
(81,168,o),
(81,130,qs),
(81,97,o),
(114,37,o),
(174,0,o),
(213,0,qs)
);
},
{
closed = 1;
nodes = (
(284,456,o),
(226,514,o),
(226,554,qs),
(226,594,o),
(284,651,o),
(324,651,qs),
(364,651,o),
(421,594,o),
(421,554,qs),
(421,514,o),
(364,456,o),
(324,456,qs)
);
},
{
closed = 1;
nodes = (
(353,484,o),
(393,525,o),
(393,554,qs),
(393,568,o),
(386,584,q),
(384,576,o),
(370,566,o),
(362,566,qs),
(351,566,o),
(336,581,o),
(336,592,qs),
(336,600,o),
(346,614,o),
(354,616,q),
(338,623,o),
(324,623,qs),
(295,623,o),
(254,583,o),
(254,554,qs),
(254,525,o),
(295,484,o),
(324,484,qs)
);
},
{
closed = 1;
nodes = (
(852,0,ls),
(891,0,o),
(951,37,o),
(984,97,o),
(984,130,qs),
(984,168,o),
(946,227,o),
(886,258,o),
(852,258,qs),
(799,258,o),
(763,222,qs),
(560,21,ls),
(556,17,o),
(556,12,qs),
(556,7,o),
(563,0,o),
(569,0,qs)
);
},
{
closed = 1;
nodes = (
(702,456,o),
(644,514,o),
(644,554,qs),
(644,594,o),
(702,651,o),
(742,651,qs),
(782,651,o),
(839,594,o),
(839,554,qs),
(839,514,o),
(782,456,o),
(742,456,qs)
);
},
{
closed = 1;
nodes = (
(771,484,o),
(811,525,o),
(811,554,qs),
(811,568,o),
(804,584,q),
(802,576,o),
(788,566,o),
(780,566,qs),
(769,566,o),
(754,581,o),
(754,592,qs),
(754,600,o),
(764,614,o),
(772,616,q),
(756,623,o),
(742,623,qs),
(713,623,o),
(672,583,o),
(672,554,qs),
(672,525,o),
(713,484,o),
(742,484,qs)
);
},
{
closed = 1;
nodes = (
(1236,0,l),
(1236,214,l),
(1441,0,l),
(1587,0,l),
(1343,260,l),
(1572,511,l),
(1428,511,l),
(1236,309,l),
(1236,700,l),
(1122,700,l),
(1122,0,l)
);
},
{
closed = 1;
nodes = (
(1908,-12,o),
(2033,57,o),
(2104,179,o),
(2104,254,qs),
(2104,329,o),
(2033,452,o),
(1908,523,o),
(1830,523,qs),
(1752,523,o),
(1628,452,o),
(1557,329,o),
(1557,254,qs),
(1557,179,o),
(1628,57,o),
(1752,-12,o),
(1830,-12,qs)
);
},
{
closed = 1;
nodes = (
(1781,95,o),
(1710,137,o),
(1671,210,o),
(1671,254,qs),
(1671,298,o),
(1710,371,o),
(1781,413,o),
(1828,413,qs),
(1875,413,o),
(1947,371,o),
(1987,298,o),
(1987,254,qs),
(1987,210,o),
(1947,137,o),
(1875,95,o),
(1828,95,qs)
);
},
{
closed = 1;
nodes = (
(1754,566,o),
(1795,607,o),
(1795,637,qs),
(1795,667,o),
(1755,707,o),
(1724,707,qs),
(1694,707,o),
(1653,665,o),
(1653,636,qs),
(1653,607,o),
(1694,566,o),
(1724,566,qs)
);
},
{
closed = 1;
nodes = (
(1965,566,o),
(2006,607,o),
(2006,637,qs),
(2006,667,o),
(1966,707,o),
(1935,707,qs),
(1905,707,o),
(1864,665,o),
(1864,636,qs),
(1864,607,o),
(1905,566,o),
(1935,566,qs)
);
},
{
closed = 1;
nodes = (
(2284,0,l),
(2284,700,l),
(2174,700,l),
(2174,0,l)
);
},
{
closed = 1;
nodes = (
(2599,95,o),
(2527,140,o),
(2489,213,o),
(2489,254,qs),
(2489,297,o),
(2530,370,o),
(2602,413,o),
(2648,413,qs),
(2716,413,o),
(2804,323,o),
(2804,254,qs),
(2804,209,o),
(2764,136,o),
(2693,95,o),
(2648,95,qs)
);
},
{
closed = 1;
nodes = (
(2744,-12,o),
(2858,60,o),
(2920,182,o),
(2920,254,qs),
(2920,331,o),
(2854,454,o),
(2740,523,o),
(2669,523,qs),
(2612,523,o),
(2524,478,o),
(2489,431,q),
(2489,700,l),
(2379,700,l),
(2379,0,l),
(2489,0,l),
(2489,80,l),
(2524,33,o),
(2612,-12,o),
(2669,-12,qs)
);
},
{
closed = 1;
nodes = (
(3103,0,l),
(3103,511,l),
(2990,511,l),
(2990,0,l)
);
},
{
closed = 1;
nodes = (
(3076,566,o),
(3117,607,o),
(3117,637,qs),
(3117,667,o),
(3077,707,o),
(3046,707,qs),
(3016,707,o),
(2975,665,o),
(2975,636,qs),
(2975,607,o),
(3016,566,o),
(3046,566,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
132 81 2 1 8 240 1 24 7 152 149 3 3 4 24 155 1 25 4 235 1 3 25 5 76 141 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 149 values pushed */
35 30 2 18 0 6 0 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 13 1 6 8 0 6 89 40 28 26 2 4 0 53 41 50 29 49 5 27 9 0 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 150 values pushed */
35 30 2 18 26 6 26 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 2 1 0 13 1 6 8 0 6 105 40 28 2 26 53 41 50 29 49 5 27 9 26 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 149 values pushed */
35 30 2 18 0 6 0 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 13 1 6 8 0 6 89 40 28 26 2 4 0 53 41 50 29 49 5 27 9 0 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 130 values pushed */
256 256 233 233 218 218 202 202 190 190 174 174 158 158 125 125 113 113 74 74 62 62 45 45 256 267 256 266 262 260 255 254 253 252 233 251 233 250 244 242 239 238 237 236 218 232 218 231 225 223 217 216 215 214 202 213 202 212 208 206 190 201 190 200 196 194 174 189 174 188 182 180 158 173 158 172 166 164 157 156 154 153 151 150 148 147 125 146 125 145 138 137 131 129 113 124 113 123 119 117 112 110 104 102 74 95 74 94 87 86 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 54 6 27
CALL[ ]	/* CallFunction */";
};
width = 3247;
}
);
note = uniE005;
},
{
glyphname = REbackwards;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-59,0,l),
(92,0,l),
(316,295,l),
(394,295,l),
(342,0,l),
(470,0,l),
(594,700,l),
(351,700,ls),
(270,700,o),
(143,645,o),
(71,541,o),
(71,470,qs),
(71,413,o),
(136,330,o),
(192,316,q)
);
},
{
closed = 1;
nodes = (
(250,404,o),
(203,451,o),
(203,486,qs),
(203,539,o),
(266,591,o),
(334,591,qs),
(446,591,l),
(414,404,l),
(302,404,ls)
);
},
{
closed = 1;
nodes = (
(1048,0,l),
(1172,700,l),
(723,700,l),
(703,591,l),
(1024,591,l),
(995,424,l),
(720,424,l),
(701,315,l),
(976,315,l),
(940,109,l),
(619,109,l),
(599,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
14 1 2 5 1 76
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
14 1 7 5 1 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
8 12 2 5 7 1 2 6 5 2 103 9 1 4 4 0 95 10 1 0 0 33 77 0 6 6 1 95 11 3 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 8 0 7 2 8 7 103 12 1 5 0 2 6 5 2 103 9 1 4 4 0 95 10 1 0 0 33 77 0 6 6 1 95 11 3 2 1 1 34 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
15 15 35 34 33 32 31 30 29 28 27 26 25 24 15 23 15 22 35 17 17 17 37 13 8 27
CALL[ ]	/* CallFunction */";
};
width = 1150;
}
);
note = REbackwards;
},
{
glyphname = RethinkWordmark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(3260,0,l),
(3260,488,l),
(3589,0,l),
(3717,0,l),
(3717,700,l),
(3589,700,l),
(3589,211,l),
(3260,700,l),
(3132,700,l),
(3132,0,l)
);
},
{
closed = 1;
nodes = (
(24,0,l),
(175,0,l),
(347,295,l),
(425,295,l),
(425,0,l),
(553,0,l),
(553,700,l),
(310,700,ls),
(202,700,o),
(135,647,qs),
(70,594,o),
(70,498,qs),
(70,426,o),
(109,379,qs),
(148,333,o),
(219,316,q)
);
},
{
closed = 1;
nodes = (
(251,404,o),
(225,428,qs),
(200,455,o),
(200,498,qs),
(200,542,o),
(226,566,qs),
(251,591,o),
(313,591,qs),
(425,591,l),
(425,404,l),
(313,404,ls)
);
},
{
closed = 1;
nodes = (
(1187,0,l),
(1187,700,l),
(738,700,l),
(738,591,l),
(1059,591,l),
(1059,424,l),
(784,424,l),
(784,315,l),
(1059,315,l),
(1059,109,l),
(738,109,l),
(738,0,l)
);
},
{
closed = 1;
nodes = (
(1682,0,l),
(1682,591,l),
(1887,591,l),
(1887,700,l),
(1350,700,l),
(1350,591,l),
(1554,591,l),
(1554,0,l)
);
},
{
closed = 1;
nodes = (
(2172,0,l),
(2172,316,l),
(2486,316,l),
(2486,0,l),
(2614,0,l),
(2614,700,l),
(2486,700,l),
(2486,425,l),
(2172,425,l),
(2172,700,l),
(2044,700,l),
(2044,0,l)
);
},
{
closed = 1;
nodes = (
(2937,0,l),
(2937,700,l),
(2809,700,l),
(2809,0,l)
);
},
{
closed = 1;
nodes = (
(4039,0,l),
(4039,261,l),
(4110,339,l),
(4312,0,l),
(4463,0,l),
(4196,433,l),
(4440,700,l),
(4279,700,l),
(4039,431,l),
(4039,700,l),
(3911,700,l),
(3911,0,l)
);
},
{
closed = 1;
nodes = (
(4613,700,l),
(4646,700,l),
(4681,765,l),
(4699,765,l),
(4699,700,l),
(4727,700,l),
(4727,855,l),
(4673,855,ls),
(4647,855,o),
(4625,830,o),
(4625,811,qs),
(4625,783,o),
(4654,772,q)
);
},
{
closed = 1;
nodes = (
(4720,629,o),
(4785,667,o),
(4823,733,o),
(4823,772,qs),
(4823,811,o),
(4785,877,o),
(4719,916,o),
(4680,916,qs),
(4637,916,o),
(4572,874,o),
(4536,808,o),
(4536,772,qs),
(4536,734,o),
(4574,668,o),
(4640,629,o),
(4680,629,qs)
);
},
{
closed = 1;
nodes = (
(4648,652,o),
(4593,685,o),
(4560,740,o),
(4560,772,qs),
(4560,822,o),
(4631,892,o),
(4680,892,qs),
(4730,892,o),
(4800,822,o),
(4800,772,qs),
(4800,723,o),
(4730,652,o),
(4680,652,qs)
);
},
{
closed = 1;
nodes = (
(4668,789,o),
(4652,800,o),
(4652,811,qs),
(4652,832,o),
(4677,832,qs),
(4699,832,l),
(4699,789,l),
(4680,789,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
97 1 34 41 78 75 7 3 9 8 81 25 2 6 9 82 2 2 10 6 4 76
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
97 1 34 41 78 75 7 3 21 8 81 1 24 9 82 2 2 10 6 4 76 25 1 24 1 75
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
97 1 34 41 78 75 7 3 12 8 81 25 2 11 9 82 2 2 10 6 4 76
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 104 values pushed */
45 1 41 40 34 40 41 34 128 0 34 33 40 34 112 35 1 33 0 40 33 112 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 44 1 39 43 1 37 8 39 37 105 21 12 42 3 9 24 11 2 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 105 values pushed */
45 1 41 40 34 40 41 34 128 0 34 33 40 34 112 35 1 33 0 40 33 0 126 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 44 1 39 43 1 37 8 39 37 105 21 12 42 3 9 24 11 2 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 111 values pushed */
45 1 41 40 34 40 41 34 128 0 34 33 40 34 112 35 1 33 0 40 33 0 126 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 44 1 39 43 1 37 8 39 37 105 0 21 0 24 6 21 24 103 12 42 2 9 11 1 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 111 values pushed */
45 1 41 40 34 40 41 34 128 0 34 33 40 34 112 35 1 33 0 40 33 0 126 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 44 1 39 43 1 37 8 39 37 105 21 1 12 24 1 11 6 12 11 103 42 1 9 0 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 112 values pushed */
45 1 41 40 34 40 41 34 128 0 34 33 40 34 33 126 35 1 33 0 40 33 0 126 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 44 1 39 43 1 37 8 39 37 105 21 1 12 24 1 11 6 12 11 103 42 1 9 0 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 94 values pushed */
127 127 114 114 98 98 26 26 127 134 127 133 130 128 114 126 114 125 120 118 98 113 98 112 106 104 96 95 94 93 92 91 90 88 84 83 80 79 77 76 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 26 36 26 35 35 17 17 17 39 18 17 18 16 46 8 31
CALL[ ]	/* CallFunction */";
};
width = 4789;
}
);
note = RethinkWordmark;
},
{
glyphname = Rlogobig;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(525,-12,o),
(692,85,o),
(789,252,o),
(789,350,qs),
(789,448,o),
(692,615,o),
(525,712,o),
(427,712,qs),
(329,712,o),
(162,615,o),
(65,448,o),
(65,350,qs),
(65,252,o),
(162,85,o),
(329,-12,o),
(427,-12,qs)
);
},
{
closed = 1;
nodes = (
(345,47,o),
(206,129,o),
(124,268,o),
(124,350,qs),
(124,432,o),
(206,571,o),
(345,652,o),
(427,652,qs),
(509,652,o),
(648,571,o),
(729,432,o),
(729,350,qs),
(729,268,o),
(648,129,o),
(509,47,o),
(427,47,qs)
);
},
{
closed = 1;
nodes = (
(342,168,l),
(356,196,o),
(416,308,o),
(429,333,q),
(474,333,l),
(474,168,l),
(547,168,l),
(547,559,l),
(410,559,ls),
(344,559,o),
(287,493,o),
(287,447,qs),
(287,411,o),
(327,361,o),
(361,349,q),
(258,168,l)
);
},
{
closed = 1;
nodes = (
(395,392,o),
(356,420,o),
(356,447,qs),
(356,473,o),
(391,501,o),
(419,501,qs),
(474,501,l),
(474,392,l),
(428,392,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
7 1 5 6 3 6 5 3 128 0 4 0 8 9 4 8 105 12 1 9 0 6 5 9 6 103 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 97 10 1 1 1 40 1 78 48 48 16 16 0 0 48 56 48 55 51 49 47 46 43 42 41 40 39 37 16 31 16 30 24 22 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 818;
}
);
note = Rlogobig;
}
);
instances = (
{
customParameters = (
{
name = styleMapFamilyName;
value = "Rethink Sans";
}
);
instanceInterpolations = {
m01 = 1;
};
isBold = 1;
isItalic = 1;
name = "Bold Italic";
properties = (
{
key = postscriptFontName;
value = "KolbiSans-BoldItalic";
},
{
key = postscriptFullNames;
values = (
{
language = ENG;
value = "Kolbi Sans Bold Italic";
}
);
}
);
weightClass = 700;
}
);
kerningLTR = {
m01 = {
"@MMK_L_A" = {
"@MMK_R_C" = -60;
"@MMK_R_S" = -15;
"@MMK_R_T" = -80;
"@MMK_R_U" = -36;
"@MMK_R_V" = -113;
"@MMK_R_W" = -85;
"@MMK_R_X" = -35;
"@MMK_R_Y" = -99;
"@MMK_R_a" = -15;
"@MMK_R_asterisk" = -103;
"@MMK_R_at" = -29;
"@MMK_R_backslash" = -66;
"@MMK_R_c" = -35;
"@MMK_R_f" = -25;
"@MMK_R_hyphen" = -40;
"@MMK_R_multiply" = -44;
"@MMK_R_parenright" = -13;
"@MMK_R_plus" = -49;
"@MMK_R_question" = -40;
"@MMK_R_s" = -20;
"@MMK_R_t" = -50;
"@MMK_R_u" = -23;
"@MMK_R_v" = -70;
"@MMK_R_w" = -50;
"@MMK_R_x" = -40;
"@MMK_R_y" = -74;
"@MMK_R_z" = 11;
};
"@MMK_L_B" = {
"@MMK_R_A" = -30;
"@MMK_R_AE" = -34;
"@MMK_R_S" = -10;
"@MMK_R_T" = -50;
"@MMK_R_V" = -45;
"@MMK_R_W" = -30;
"@MMK_R_X" = -30;
"@MMK_R_Y" = -60;
"@MMK_R_asterisk" = -26;
"@MMK_R_backslash" = -36;
"@MMK_R_braceright" = -40;
"@MMK_R_c" = -5;
"@MMK_R_comma" = -26;
"@MMK_R_g" = -15;
"@MMK_R_parenright" = -64;
"@MMK_R_period" = -30;
"@MMK_R_slash" = -39;
"@MMK_R_underscore" = -50;
"@MMK_R_x" = -10;
};
"@MMK_L_Cacute" = {
"@MMK_R_AE" = -9;
"@MMK_R_T" = -20;
"@MMK_R_V" = -13;
"@MMK_R_W" = -20;
"@MMK_R_X" = -20;
"@MMK_R_Y" = -40;
"@MMK_R_parenright" = -20;
};
"@MMK_L_E" = {
"@MMK_R_C" = -10;
};
"@MMK_L_F" = {
"@MMK_R_A" = -60;
"@MMK_R_a" = -40;
"@MMK_R_c" = -30;
"@MMK_R_g" = -35;
"@MMK_R_period" = -60;
"@MMK_R_s" = -20;
};
"@MMK_L_G" = {
"@MMK_R_T" = -25;
"@MMK_R_W" = -25;
"@MMK_R_Y" = -50;
};
"@MMK_L_J" = {
"@MMK_R_A" = -21;
};
"@MMK_L_K" = {
"@MMK_R_A" = -40;
"@MMK_R_C" = -65;
"@MMK_R_J" = -11;
"@MMK_R_S" = -50;
"@MMK_R_T" = -20;
"@MMK_R_a" = -35;
"@MMK_R_asterisk" = -17;
"@MMK_R_at" = -20;
"@MMK_R_c" = -65;
"@MMK_R_dotlessi" = -40;
"@MMK_R_f" = -30;
"@MMK_R_g" = -40;
"@MMK_R_guillemotleft" = -46;
"@MMK_R_hyphen" = -60;
"@MMK_R_i" = -30;
"@MMK_R_igrave" = -20;
"@MMK_R_j" = -30;
"@MMK_R_p" = -20;
"@MMK_R_plus" = -40;
"@MMK_R_question" = -18;
"@MMK_R_s" = -45;
"@MMK_R_t" = -50;
"@MMK_R_u" = -45;
"@MMK_R_v" = -75;
"@MMK_R_w" = -70;
"@MMK_R_x" = -65;
"@MMK_R_y" = -75;
"@MMK_R_z" = -25;
};
"@MMK_L_L" = {
"@MMK_R_C" = -74;
"@MMK_R_S" = -24;
"@MMK_R_T" = -120;
"@MMK_R_U" = -40;
"@MMK_R_V" = -134;
"@MMK_R_W" = -80;
"@MMK_R_Y" = -127;
"@MMK_R_asterisk" = -111;
"@MMK_R_at" = -30;
"@MMK_R_backslash" = -66;
"@MMK_R_c" = -40;
"@MMK_R_hyphen" = -60;
"@MMK_R_percent" = -79;
"@MMK_R_plus" = -60;
"@MMK_R_question" = -30;
"@MMK_R_t" = -34;
"@MMK_R_uni018F" = -30;
"@MMK_R_uni02BA" = -107;
"@MMK_R_v" = -65;
"@MMK_R_w" = -45;
"@MMK_R_y" = -70;
};
"@MMK_L_N" = {
"@MMK_R_c" = -5;
};
"@MMK_L_P" = {
"@MMK_R_A" = -71;
"@MMK_R_AE" = -104;
"@MMK_R_S" = 6;
"@MMK_R_Y" = -18;
"@MMK_R_a" = -15;
"@MMK_R_c" = -19;
"@MMK_R_dotlessi" = 20;
"@MMK_R_g" = -26;
"@MMK_R_period" = -50;
};
"@MMK_L_Q" = {
"@MMK_R_A" = -13;
"@MMK_R_T" = -40;
"@MMK_R_U" = 11;
"@MMK_R_V" = -40;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -49;
"@MMK_R_u" = 5;
};
"@MMK_L_R" = {
"@MMK_R_C" = -10;
"@MMK_R_T" = -20;
"@MMK_R_V" = -40;
"@MMK_R_W" = -35;
"@MMK_R_Y" = -30;
"@MMK_R_a" = -25;
"@MMK_R_c" = -40;
"@MMK_R_plus" = -9;
"@MMK_R_s" = -9;
"@MMK_R_u" = -15;
};
"@MMK_L_S" = {
"@MMK_R_C" = -10;
"@MMK_R_T" = -20;
"@MMK_R_V" = -30;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -50;
"@MMK_R_c" = -10;
"@MMK_R_y" = -10;
};
"@MMK_L_T" = {
"@MMK_R_A" = -76;
"@MMK_R_AE" = -90;
"@MMK_R_C" = -25;
"@MMK_R_J" = -60;
"@MMK_R_a" = -115;
"@MMK_R_at" = -57;
"@MMK_R_backslash" = 26;
"@MMK_R_c" = -115;
"@MMK_R_comma" = -80;
"@MMK_R_dotlessi" = -110;
"@MMK_R_exclamdown" = -26;
"@MMK_R_f" = -20;
"@MMK_R_g" = -115;
"@MMK_R_hyphen" = -50;
"@MMK_R_iacute" = 10;
"@MMK_R_ibreve" = 80;
"@MMK_R_igrave" = 10;
"@MMK_R_multiply" = -79;
"@MMK_R_p" = -110;
"@MMK_R_period" = -80;
"@MMK_R_plus" = -49;
"@MMK_R_question" = 20;
"@MMK_R_questiondown" = -64;
"@MMK_R_rcaron" = -40;
"@MMK_R_s" = -110;
"@MMK_R_semicolon" = -56;
"@MMK_R_slash" = -46;
"@MMK_R_t" = -24;
"@MMK_R_u" = -110;
"@MMK_R_underscore" = -60;
"@MMK_R_uni006A0301" = 20;
"@MMK_R_v" = -85;
"@MMK_R_w" = -90;
"@MMK_R_x" = -85;
"@MMK_R_y" = -85;
"@MMK_R_z" = -90;
};
"@MMK_L_Thorn" = {
"@MMK_R_A" = -18;
"@MMK_R_T" = -89;
"@MMK_R_V" = -60;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -74;
"@MMK_R_period" = -13;
};
"@MMK_L_U" = {
"@MMK_R_A" = -34;
"@MMK_R_AE" = -43;
"@MMK_R_g" = -25;
"@MMK_R_period" = -20;
"@MMK_R_s" = -10;
"@MMK_R_slash" = -30;
"@MMK_R_underscore" = -34;
};
"@MMK_L_V" = {
"@MMK_R_A" = -85;
"@MMK_R_AE" = -99;
"@MMK_R_C" = -23;
"@MMK_R_J" = -75;
"@MMK_R_S" = -20;
"@MMK_R_a" = -65;
"@MMK_R_at" = -64;
"@MMK_R_backslash" = 11;
"@MMK_R_c" = -75;
"@MMK_R_colon" = -30;
"@MMK_R_comma" = -74;
"@MMK_R_dotlessi" = -40;
"@MMK_R_exclamdown" = -36;
"@MMK_R_f" = -20;
"@MMK_R_g" = -70;
"@MMK_R_hyphen" = -44;
"@MMK_R_igrave" = 20;
"@MMK_R_multiply" = -49;
"@MMK_R_p" = -40;
"@MMK_R_period" = -60;
"@MMK_R_plus" = -53;
"@MMK_R_rcaron" = -20;
"@MMK_R_s" = -65;
"@MMK_R_slash" = -59;
"@MMK_R_t" = -15;
"@MMK_R_u" = -45;
"@MMK_R_underscore" = -70;
"@MMK_R_uni006A0301" = 10;
"@MMK_R_v" = -20;
"@MMK_R_w" = -25;
"@MMK_R_x" = -25;
"@MMK_R_y" = -15;
"@MMK_R_z" = -20;
};
"@MMK_L_W" = {
"@MMK_R_A" = -95;
"@MMK_R_AE" = -83;
"@MMK_R_C" = -40;
"@MMK_R_J" = -55;
"@MMK_R_Oslash" = -20;
"@MMK_R_S" = -20;
"@MMK_R_a" = -80;
"@MMK_R_at" = -70;
"@MMK_R_c" = -85;
"@MMK_R_comma" = -54;
"@MMK_R_dotlessi" = -50;
"@MMK_R_exclamdown" = -31;
"@MMK_R_f" = -20;
"@MMK_R_g" = -75;
"@MMK_R_hyphen" = -44;
"@MMK_R_i" = -15;
"@MMK_R_iacute" = -10;
"@MMK_R_igrave" = 5;
"@MMK_R_j" = -5;
"@MMK_R_multiply" = -44;
"@MMK_R_p" = -50;
"@MMK_R_period" = -70;
"@MMK_R_plus" = -49;
"@MMK_R_rcaron" = -30;
"@MMK_R_s" = -75;
"@MMK_R_semicolon" = -31;
"@MMK_R_slash" = -54;
"@MMK_R_t" = -20;
"@MMK_R_u" = -50;
"@MMK_R_underscore" = -39;
"@MMK_R_v" = -35;
"@MMK_R_w" = -35;
"@MMK_R_x" = -35;
"@MMK_R_y" = -35;
"@MMK_R_z" = -40;
};
"@MMK_L_X" = {
"@MMK_R_A" = -25;
"@MMK_R_C" = -60;
"@MMK_R_S" = -20;
"@MMK_R_a" = -40;
"@MMK_R_c" = -55;
"@MMK_R_g" = -30;
"@MMK_R_s" = -45;
"@MMK_R_t" = -50;
"@MMK_R_u" = -36;
"@MMK_R_w" = -60;
"@MMK_R_y" = -75;
"@MMK_R_z" = -20;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -84;
"@MMK_R_AE" = -86;
"@MMK_R_C" = -50;
"@MMK_R_J" = -75;
"@MMK_R_Oslash" = -37;
"@MMK_R_S" = -20;
"@MMK_R_a" = -100;
"@MMK_R_at" = -80;
"@MMK_R_c" = -115;
"@MMK_R_colon" = -40;
"@MMK_R_comma" = -61;
"@MMK_R_dotlessi" = -75;
"@MMK_R_exclamdown" = -46;
"@MMK_R_f" = -25;
"@MMK_R_g" = -90;
"@MMK_R_hyphen" = -46;
"@MMK_R_i" = -15;
"@MMK_R_iacute" = -15;
"@MMK_R_multiply" = -79;
"@MMK_R_p" = -65;
"@MMK_R_period" = -81;
"@MMK_R_plus" = -84;
"@MMK_R_questiondown" = -76;
"@MMK_R_rcaron" = -40;
"@MMK_R_s" = -105;
"@MMK_R_semicolon" = -47;
"@MMK_R_slash" = -61;
"@MMK_R_t" = -30;
"@MMK_R_u" = -85;
"@MMK_R_underscore" = -76;
"@MMK_R_uni02BA" = 30;
"@MMK_R_v" = -50;
"@MMK_R_w" = -40;
"@MMK_R_x" = -50;
"@MMK_R_y" = -50;
"@MMK_R_z" = -50;
};
"@MMK_L_Z" = {
"@MMK_R_C" = -20;
"@MMK_R_a" = -25;
"@MMK_R_c" = -35;
};
"@MMK_L_a" = {
"@MMK_R_asterisk" = -36;
"@MMK_R_backslash" = -40;
"@MMK_R_lslash" = 10;
"@MMK_R_uni02BA" = -66;
"@MMK_R_v" = -26;
"@MMK_R_w" = -18;
"@MMK_R_y" = -28;
};
"@MMK_L_aacute" = {
"@MMK_R_asterisk" = -36;
"@MMK_R_backslash" = -60;
"@MMK_R_c" = -10;
"@MMK_R_f" = -15;
"@MMK_R_t" = -25;
"@MMK_R_v" = -35;
"@MMK_R_w" = -30;
"@MMK_R_y" = -45;
};
"@MMK_L_ae" = {
"@MMK_R_Y" = -100;
"@MMK_R_asterisk" = -47;
"@MMK_R_backslash" = -66;
"@MMK_R_g" = -11;
"@MMK_R_lslash" = 20;
"@MMK_R_question" = -20;
"@MMK_R_uni02BA" = -71;
"@MMK_R_v" = -27;
"@MMK_R_w" = -20;
"@MMK_R_x" = -30;
"@MMK_R_y" = -29;
};
"@MMK_L_asterisk" = {
"@MMK_R_A" = -83;
"@MMK_R_AE" = -116;
"@MMK_R_C" = -12;
"@MMK_R_a" = -11;
"@MMK_R_c" = -27;
"@MMK_R_s" = -19;
};
"@MMK_L_at" = {
"@MMK_R_A" = -30;
"@MMK_R_AE" = -30;
"@MMK_R_T" = -94;
"@MMK_R_V" = -104;
"@MMK_R_W" = -91;
"@MMK_R_Y" = -109;
"@MMK_R_percent" = -66;
"@MMK_R_period" = -26;
"@MMK_R_uni02BA" = -91;
"@MMK_R_w" = -34;
"@MMK_R_y" = -44;
};
"@MMK_L_b" = {
"@MMK_R_T" = -120;
"@MMK_R_V" = -80;
"@MMK_R_asterisk" = -61;
"@MMK_R_backslash" = -86;
"@MMK_R_braceright" = -50;
"@MMK_R_c" = -10;
"@MMK_R_f" = -5;
"@MMK_R_g" = -10;
"@MMK_R_lslash" = 10;
"@MMK_R_parenright" = -54;
"@MMK_R_question" = -40;
"@MMK_R_s" = -10;
"@MMK_R_slash" = -4;
"@MMK_R_t" = -20;
"@MMK_R_uni02BA" = -84;
"@MMK_R_v" = -41;
"@MMK_R_w" = -31;
"@MMK_R_x" = -35;
"@MMK_R_y" = -44;
};
"@MMK_L_backslash" = {
"@MMK_R_C" = -40;
"@MMK_R_T" = -73;
"@MMK_R_U" = -17;
"@MMK_R_V" = -97;
"@MMK_R_W" = -64;
"@MMK_R_Y" = -70;
"@MMK_R_c" = -20;
"@MMK_R_hyphen" = -39;
"@MMK_R_uni02BA" = -106;
};
"@MMK_L_braceright" = {
"@MMK_R_A" = -44;
"@MMK_R_AE" = -50;
"@MMK_R_T" = -47;
"@MMK_R_W" = -26;
"@MMK_R_Y" = -50;
"@MMK_R_period" = -50;
};
"@MMK_L_c" = {
"@MMK_R_w" = -20;
"@MMK_R_y" = -20;
};
"@MMK_L_colon" = {
"@MMK_R_V" = -30;
"@MMK_R_Y" = -40;
};
"@MMK_L_comma" = {
"@MMK_R_C" = -34;
"@MMK_R_T" = -80;
"@MMK_R_V" = -80;
"@MMK_R_W" = -49;
"@MMK_R_Y" = -81;
"@MMK_R_percent" = -92;
"@MMK_R_t" = -31;
"@MMK_R_w" = -30;
"@MMK_R_y" = -50;
};
"@MMK_L_exclamdown" = {
"@MMK_R_T" = -34;
"@MMK_R_V" = -36;
"@MMK_R_W" = -17;
"@MMK_R_Y" = -46;
};
"@MMK_L_f" = {
"@MMK_R_a" = -15;
"@MMK_R_c" = -10;
"@MMK_R_g" = -20;
"@MMK_R_period" = -17;
"@MMK_R_s" = -7;
};
"@MMK_L_g" = {
"@MMK_R_a" = -10;
"@MMK_R_c" = -17;
"@MMK_R_f" = 10;
"@MMK_R_j" = 50;
"@MMK_R_t" = 20;
};
"@MMK_L_germandbls" = {
"@MMK_R_y" = -40;
};
"@MMK_L_greater" = {
"@MMK_R_period" = -60;
};
"@MMK_L_hyphen" = {
"@MMK_R_A" = -34;
"@MMK_R_T" = -56;
"@MMK_R_V" = -44;
"@MMK_R_W" = -34;
"@MMK_R_Y" = -56;
"@MMK_R_backslash" = -63;
"@MMK_R_slash" = -39;
};
"@MMK_L_ibreve" = {
"@MMK_R_T" = 80;
"@MMK_R_b" = 40;
};
"@MMK_L_k" = {
"@MMK_R_a" = -33;
"@MMK_R_at" = -20;
"@MMK_R_c" = -36;
"@MMK_R_s" = -23;
};
"@MMK_L_l" = {
"@MMK_R_ibreve" = 30;
};
"@MMK_L_lslash" = {
"@MMK_R_a" = 5;
"@MMK_R_c" = 10;
"@MMK_R_w" = 20;
};
"@MMK_L_multiply" = {
"@MMK_R_A" = -9;
"@MMK_R_AE" = -13;
"@MMK_R_T" = -79;
"@MMK_R_V" = -56;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -76;
};
"@MMK_L_parenleft" = {
"@MMK_R_A" = -17;
"@MMK_R_C" = -54;
"@MMK_R_a" = -50;
"@MMK_R_c" = -36;
"@MMK_R_s" = -20;
};
"@MMK_L_period" = {
"@MMK_R_C" = -50;
"@MMK_R_T" = -80;
"@MMK_R_U" = -20;
"@MMK_R_V" = -60;
"@MMK_R_W" = -70;
"@MMK_R_Y" = -87;
"@MMK_R_at" = -20;
"@MMK_R_backslash" = -93;
"@MMK_R_less" = -60;
"@MMK_R_question" = -39;
"@MMK_R_v" = -51;
"@MMK_R_w" = -40;
"@MMK_R_y" = -60;
};
"@MMK_L_plus" = {
"@MMK_R_A" = -17;
"@MMK_R_T" = -54;
"@MMK_R_V" = -69;
"@MMK_R_W" = -49;
"@MMK_R_Y" = -80;
};
"@MMK_L_question" = {
"@MMK_R_A" = -64;
"@MMK_R_AE" = -73;
"@MMK_R_period" = -90;
};
"@MMK_L_questiondown" = {
"@MMK_R_T" = -69;
"@MMK_R_Y" = -70;
"@MMK_R_c" = -36;
"@MMK_R_percent" = -36;
"@MMK_R_z" = 20;
};
"@MMK_L_quotedblright" = {
"@MMK_R_J" = -76;
"@MMK_R_at" = -34;
"@MMK_R_s" = -51;
"@MMK_R_slash" = -106;
};
"@MMK_L_r" = {
"@MMK_R_c" = -9;
"@MMK_R_colon" = 9;
"@MMK_R_f" = 10;
"@MMK_R_period" = -40;
"@MMK_R_t" = 20;
"@MMK_R_u" = 6;
"@MMK_R_w" = 10;
"@MMK_R_y" = 15;
};
"@MMK_L_s" = {
"@MMK_R_asterisk" = -61;
"@MMK_R_backslash" = -64;
"@MMK_R_f" = -10;
"@MMK_R_parenright" = -26;
"@MMK_R_question" = -24;
"@MMK_R_t" = -15;
"@MMK_R_u" = -5;
"@MMK_R_v" = -30;
"@MMK_R_w" = -20;
"@MMK_R_x" = -20;
"@MMK_R_y" = -30;
};
"@MMK_L_semicolon" = {
"@MMK_R_T" = -40;
"@MMK_R_Y" = -23;
};
"@MMK_L_slash" = {
"@MMK_R_C" = -29;
"@MMK_R_T" = 17;
"@MMK_R_V" = 36;
"@MMK_R_W" = 17;
"@MMK_R_Y" = 40;
"@MMK_R_a" = -30;
"@MMK_R_c" = -45;
"@MMK_R_dotlessi" = -13;
"@MMK_R_g" = -36;
"@MMK_R_hyphen" = -39;
"@MMK_R_period" = -103;
"@MMK_R_s" = -27;
};
"@MMK_L_t" = {
"@MMK_R_c" = -17;
"@MMK_R_comma" = 26;
};
"@MMK_L_underscore" = {
"@MMK_R_C" = -71;
"@MMK_R_T" = -76;
"@MMK_R_U" = -51;
"@MMK_R_V" = -90;
"@MMK_R_W" = -71;
"@MMK_R_Y" = -76;
};
"@MMK_L_v" = {
"@MMK_R_A" = -60;
"@MMK_R_a" = -13;
"@MMK_R_c" = -23;
"@MMK_R_g" = -26;
"@MMK_R_period" = -40;
"@MMK_R_s" = -14;
"@MMK_R_t" = 20;
};
"@MMK_L_w" = {
"@MMK_R_a" = -9;
"@MMK_R_at" = -13;
"@MMK_R_c" = -11;
"@MMK_R_comma" = -30;
"@MMK_R_f" = 10;
"@MMK_R_g" = -25;
"@MMK_R_lslash" = 10;
"@MMK_R_period" = -40;
"@MMK_R_questiondown" = -9;
"@MMK_R_t" = 10;
};
"@MMK_L_x" = {
"@MMK_R_c" = -30;
"@MMK_R_s" = -20;
};
"@MMK_L_y" = {
"@MMK_R_T" = -60;
"@MMK_R_a" = -19;
"@MMK_R_at" = -13;
"@MMK_R_c" = -25;
"@MMK_R_comma" = -60;
"@MMK_R_g" = -31;
"@MMK_R_multiply" = -9;
"@MMK_R_period" = -50;
"@MMK_R_questiondown" = -34;
"@MMK_R_s" = -9;
"@MMK_R_slash" = -30;
};
"@MMK_L_z" = {
"@MMK_R_c" = -5;
};
AE = {
ibreve = 24;
imacron = 56;
itilde = 41;
v = -15;
};
AEacute = {
ibreve = 24;
imacron = 56;
itilde = 41;
v = -15;
};
Aacute = {
asterisk = -103;
at = -29;
backslash = -66;
f = -9;
multiply = -44;
parenright = -13;
plus = -49;
question = -40;
v = -70;
};
Abreve = {
asterisk = -103;
at = -29;
backslash = -66;
f = -9;
multiply = -44;
parenright = -13;
plus = -49;
question = -40;
v = -70;
};
Acircumflex = {
asterisk = -103;
at = -29;
backslash = -66;
f = -9;
multiply = -44;
parenright = -13;
plus = -49;
question = -40;
v = -70;
};
Adieresis = {
asterisk = -103;
at = -29;
backslash = -66;
f = -9;
multiply = -44;
parenright = -13;
plus = -49;
question = -40;
v = -70;
};
Agrave = {
asterisk = -103;
at = -29;
backslash = -66;
f = -9;
multiply = -44;
parenright = -13;
plus = -49;
question = -40;
v = -70;
};
Amacron = {
asterisk = -103;
at = -29;
backslash = -66;
f = -9;
multiply = -44;
parenright = -13;
plus = -49;
question = -40;
v = -70;
};
Aogonek = {
asterisk = -103;
at = -29;
backslash = -66;
f = -9;
multiply = -44;
parenright = -13;
plus = -49;
question = -40;
v = -70;
};
Aring = {
asterisk = -103;
at = -29;
backslash = -66;
f = -9;
multiply = -44;
parenright = -13;
plus = -49;
question = -40;
v = -70;
};
Atilde = {
asterisk = -103;
at = -29;
backslash = -66;
f = -9;
multiply = -44;
parenright = -13;
plus = -49;
question = -40;
v = -70;
};
B = {
A = -25;
Aacute = -25;
Abreve = -25;
Acircumflex = -25;
Adieresis = -25;
Agrave = -25;
Amacron = -25;
Aogonek = -25;
Aring = -25;
Atilde = -25;
C = -10;
Cacute = -10;
Ccaron = -10;
Ccedilla = -10;
Cdotaccent = -10;
G = -10;
Gbreve = -10;
Gdotaccent = -10;
O = -10;
OE = -10;
Oacute = -10;
Obreve = -10;
Ocircumflex = -10;
Odieresis = -10;
Ograve = -10;
Ohungarumlaut = -10;
Omacron = -10;
Otilde = -10;
Q = -10;
T = -20;
Tcaron = -20;
V = -30;
W = -30;
Wacute = -30;
Wcircumflex = -30;
Wdieresis = -30;
Wgrave = -30;
X = -20;
Y = -20;
Yacute = -20;
Ycircumflex = -20;
Ydieresis = -20;
Ygrave = -20;
imacron = 20;
itilde = 20;
uni0122 = -10;
uni0162 = -20;
uni021A = -20;
uni1EF8 = -20;
uni1EF9 = -15;
y = -15;
yacute = -15;
ycircumflex = -15;
ydieresis = -15;
ygrave = -15;
};
C = {
dotlessi = 10;
eng = 10;
idieresis = 20;
imacron = 20;
iogonek = 10;
itilde = 20;
m = 10;
n = 10;
nacute = 10;
ncaron = 10;
ntilde = 10;
r = 10;
racute = 10;
uni0146 = 10;
uni0157 = 10;
uni0326 = 10;
};
Cacute = {
imacron = 30;
itilde = 30;
};
Ccaron = {
imacron = 30;
itilde = 30;
};
Ccedilla = {
imacron = 30;
itilde = 30;
};
Cdotaccent = {
imacron = 30;
itilde = 30;
};
E = {
ibreve = 25;
icircumflex = 20;
imacron = 56;
itilde = 41;
v = -15;
};
Eacute = {
ibreve = 24;
imacron = 56;
itilde = 41;
v = -15;
};
Ebreve = {
ibreve = 24;
imacron = 56;
itilde = 41;
v = -15;
};
Ecaron = {
ibreve = 24;
imacron = 56;
itilde = 41;
v = -15;
};
Ecircumflex = {
ibreve = 24;
imacron = 56;
itilde = 41;
v = -15;
};
Edieresis = {
ibreve = 24;
imacron = 56;
itilde = 41;
v = -15;
};
Edotaccent = {
ibreve = 24;
imacron = 56;
itilde = 41;
v = -15;
};
Egrave = {
ibreve = 24;
imacron = 56;
itilde = 41;
v = -15;
};
Emacron = {
ibreve = 24;
imacron = 56;
itilde = 41;
v = -15;
};
Eogonek = {
ibreve = 24;
imacron = 56;
itilde = 41;
v = -15;
};
Euro = {
imacron = 30;
itilde = 30;
};
F = {
J = -43;
at = -30;
comma = -40;
iacute = 10;
ibreve = 35;
icircumflex = 35;
igrave = 15;
imacron = 75;
itilde = 45;
multiply = -20;
underscore = -40;
uni006A0301 = 15;
};
G = {
imacron = 30;
};
Gbreve = {
imacron = 30;
};
Gdotaccent = {
imacron = 30;
};
H = {
ibreve = 20;
imacron = 50;
itilde = 25;
};
I = {
ibreve = 20;
imacron = 50;
itilde = 25;
};
Iacute = {
imacron = 40;
itilde = 17;
};
Ibreve = {
imacron = 40;
itilde = 17;
};
Icircumflex = {
imacron = 40;
itilde = 17;
};
Idieresis = {
imacron = 40;
itilde = 17;
};
Idotaccent = {
imacron = 40;
itilde = 17;
};
Igrave = {
imacron = 40;
itilde = 17;
};
Imacron = {
imacron = 40;
itilde = 17;
};
Iogonek = {
imacron = 40;
itilde = 17;
};
Itilde = {
imacron = 40;
itilde = 17;
};
J = {
ibreve = 20;
igrave = 50;
imacron = 50;
itilde = 25;
};
K = {
ibreve = 20;
icircumflex = -10;
imacron = 50;
l = -5;
};
L = {
V = -80;
};
Lacute = {
V = -80;
};
Lcaron = {
V = -80;
};
Ldot = {
V = -80;
};
Lslash = {
V = -80;
};
M = {
ibreve = 20;
imacron = 50;
itilde = 25;
};
N = {
ibreve = 20;
imacron = 50;
itilde = 25;
};
Nacute = {
imacron = 40;
itilde = 17;
};
Ncaron = {
imacron = 40;
itilde = 17;
};
Ntilde = {
imacron = 40;
itilde = 17;
};
OE = {
ibreve = 24;
imacron = 56;
itilde = 41;
v = -15;
};
Oslash = {
igrave = 50;
imacron = 57;
slash = -39;
underscore = -29;
};
P = {
J = -57;
X = -30;
Z = -20;
Zacute = -20;
Zcaron = -20;
Zdotaccent = -20;
at = -24;
comma = -91;
imacron = 30;
itilde = 40;
parenright = -40;
slash = -69;
underscore = -46;
};
Q = {
X = -20;
};
R = {
imacron = 30;
itilde = 20;
};
Racute = {
imacron = 30;
itilde = 20;
};
Rcaron = {
imacron = 30;
itilde = 20;
};
S = {
imacron = 36;
itilde = 20;
};
Sacute = {
imacron = 36;
itilde = 20;
};
Scaron = {
imacron = 36;
itilde = 20;
};
Scedilla = {
imacron = 36;
itilde = 20;
};
T = {
abreve = -100;
adieresis = -60;
amacron = -75;
atilde = -100;
ebreve = -100;
edieresis = -60;
emacron = -75;
gbreve = -90;
ibreve = 45;
imacron = 80;
itilde = 50;
ntilde = -90;
odieresis = -60;
omacron = -80;
otilde = -100;
racute = -60;
scaron = -90;
udieresis = -60;
umacron = -80;
uni1EBD = -100;
utilde = -100;
ydieresis = -55;
};
Tcaron = {
abreve = -100;
adieresis = -60;
amacron = -75;
atilde = -100;
ebreve = -100;
edieresis = -60;
emacron = -75;
gbreve = -90;
ibreve = 45;
imacron = 80;
itilde = 50;
ntilde = -90;
odieresis = -60;
omacron = -80;
otilde = -100;
racute = -60;
scaron = -90;
udieresis = -60;
umacron = -80;
uni1EBD = -100;
utilde = -100;
ydieresis = -55;
};
Thorn = {
X = -70;
parenright = -50;
};
U = {
ibreve = 20;
imacron = 50;
itilde = 25;
};
Uacute = {
ibreve = 20;
imacron = 50;
itilde = 25;
};
Ubreve = {
ibreve = 20;
imacron = 50;
itilde = 25;
};
Ucircumflex = {
ibreve = 20;
imacron = 50;
itilde = 25;
};
Udieresis = {
ibreve = 20;
imacron = 50;
itilde = 25;
};
Ugrave = {
ibreve = 20;
imacron = 50;
itilde = 25;
};
Uhungarumlaut = {
ibreve = 20;
imacron = 50;
itilde = 25;
};
Umacron = {
ibreve = 20;
imacron = 50;
itilde = 25;
};
Uogonek = {
ibreve = 20;
imacron = 50;
itilde = 25;
};
Uring = {
ibreve = 20;
imacron = 50;
itilde = 25;
};
Utilde = {
ibreve = 20;
imacron = 50;
itilde = 25;
};
V = {
adieresis = -55;
edieresis = -55;
emacron = -65;
ibreve = 50;
icircumflex = 30;
imacron = 80;
itilde = 50;
odieresis = -55;
omacron = -70;
};
W = {
adieresis = -70;
edieresis = -70;
ibreve = 46;
icircumflex = 30;
imacron = 75;
itilde = 40;
odieresis = -70;
};
Wacute = {
adieresis = -70;
edieresis = -70;
ibreve = 46;
icircumflex = 30;
imacron = 75;
itilde = 40;
odieresis = -70;
};
Wcircumflex = {
adieresis = -70;
edieresis = -70;
ibreve = 46;
icircumflex = 30;
imacron = 75;
itilde = 40;
odieresis = -70;
};
Wdieresis = {
adieresis = -70;
edieresis = -70;
ibreve = 46;
icircumflex = 30;
imacron = 75;
itilde = 40;
odieresis = -70;
};
Wgrave = {
adieresis = -70;
edieresis = -70;
ibreve = 46;
icircumflex = 30;
imacron = 75;
itilde = 40;
odieresis = -70;
};
X = {
J = -15;
at = -44;
f = -30;
ibreve = 24;
imacron = 50;
itilde = 10;
multiply = -64;
question = -26;
v = -75;
x = -40;
};
Y = {
adieresis = -70;
amacron = -80;
edieresis = -70;
emacron = -90;
ibreve = 40;
icircumflex = 20;
imacron = 75;
itilde = 35;
odieresis = -70;
omacron = -90;
racute = -55;
scaron = -90;
udieresis = -70;
};
Yacute = {
adieresis = -70;
amacron = -80;
edieresis = -70;
emacron = -90;
ibreve = 40;
icircumflex = 20;
imacron = 75;
itilde = 35;
odieresis = -70;
omacron = -90;
racute = -55;
scaron = -90;
udieresis = -70;
};
Ycircumflex = {
adieresis = -70;
amacron = -80;
edieresis = -70;
emacron = -90;
ibreve = 40;
icircumflex = 20;
imacron = 75;
itilde = 35;
odieresis = -70;
omacron = -90;
racute = -55;
scaron = -90;
udieresis = -70;
};
Ydieresis = {
adieresis = -70;
amacron = -80;
edieresis = -70;
emacron = -90;
ibreve = 40;
icircumflex = 20;
imacron = 75;
itilde = 35;
odieresis = -70;
omacron = -90;
racute = -55;
scaron = -90;
udieresis = -70;
};
Ygrave = {
adieresis = -70;
amacron = -80;
edieresis = -70;
emacron = -90;
ibreve = 40;
icircumflex = 20;
imacron = 75;
itilde = 35;
odieresis = -70;
omacron = -90;
racute = -55;
scaron = -90;
udieresis = -70;
};
Z = {
ibreve = 34;
imacron = 60;
itilde = 36;
};
Zacute = {
ibreve = 34;
imacron = 60;
itilde = 36;
};
Zcaron = {
ibreve = 34;
imacron = 60;
itilde = 36;
};
Zdotaccent = {
ibreve = 34;
imacron = 60;
itilde = 36;
};
asterisk = {
J = -64;
at = -60;
exclam = -17;
imacron = 64;
itilde = 40;
questiondown = -86;
slash = -126;
};
at = {
X = -20;
asterisk = -106;
backslash = -89;
braceright = -51;
comma = -26;
greater = -40;
less = -39;
parenright = -86;
question = -66;
quotedblleft = -13;
quotedblright = -23;
quoteleft = -13;
quoteright = -23;
semicolon = -23;
slash = -34;
underscore = -40;
};
backslash = {
at = -39;
backslash = -124;
comma = 50;
question = -30;
quotedblbase = 54;
quotedblleft = -64;
quotedblright = -99;
quoteleft = -64;
quoteright = -99;
quotesinglbase = 54;
underscore = 31;
};
bar = {
imacron = 40;
itilde = 17;
};
bracketleft = {
imacron = 34;
};
bracketright = {
imacron = 60;
itilde = 31;
};
brokenbar = {
imacron = 40;
itilde = 17;
};
c = {
asterisk = -43;
backslash = -76;
parenright = -30;
question = -36;
v = -20;
x = -20;
};
cacute = {
asterisk = -43;
backslash = -76;
parenright = -30;
question = -36;
v = -22;
};
ccaron = {
asterisk = -43;
backslash = -76;
parenright = -30;
question = -36;
v = -22;
};
ccedilla = {
asterisk = -43;
backslash = -76;
parenright = -30;
question = -36;
v = -22;
};
cdotaccent = {
asterisk = -43;
backslash = -76;
parenright = -30;
question = -36;
v = -22;
};
comma = {
backslash = -84;
question = -17;
v = -56;
};
d = {
imacron = 40;
};
dcaron = {
questiondown = -29;
};
dcroat = {
imacron = 77;
};
dollar = {
imacron = 36;
itilde = 20;
};
eth = {
imacron = 30;
};
exclam = {
asterisk = -23;
igrave = 44;
imacron = 50;
itilde = 11;
};
f = {
aacute = -17;
abreve = -17;
acircumflex = -17;
adieresis = -17;
aeacute = -17;
agrave = -17;
amacron = -17;
aogonek = -17;
aring = -17;
atilde = -17;
ibreve = 24;
igrave = 40;
imacron = 60;
itilde = 41;
};
fl = {
imacron = 40;
};
germandbls = {
asterisk = -60;
v = -60;
};
greater = {
at = -43;
parenright = -60;
};
i = {
lslash = 10;
};
iacute = {
asterisk = 17;
b = 60;
backslash = 76;
braceright = 17;
bracketleft = 60;
bracketright = 34;
exclam = 44;
f = 40;
h = 60;
idieresis = 80;
imacron = 60;
itilde = 63;
k = 60;
l = 60;
lacute = 60;
lcaron = 60;
ldot = 60;
lslash = 40;
parenright = 23;
question = 54;
quotedblleft = 49;
quotedblright = 40;
quoteleft = 49;
quoteright = 40;
uni0137 = 60;
uni013C = 60;
};
ibreve = {
backslash = 56;
question = 40;
};
imacron = {
B = 40;
D = 40;
Dcaron = 40;
E = 40;
Eacute = 40;
Ebreve = 40;
Ecaron = 40;
Ecircumflex = 40;
Edieresis = 40;
Edotaccent = 40;
Egrave = 40;
Emacron = 40;
Eogonek = 40;
F = 40;
H = 40;
I = 40;
Iacute = 40;
Ibreve = 40;
Icircumflex = 40;
Idieresis = 40;
Idotaccent = 40;
Igrave = 40;
Imacron = 40;
Itilde = 40;
K = 40;
L = 40;
Lacute = 40;
Lcaron = 40;
Ldot = 40;
M = 40;
N = 40;
Nacute = 40;
Ncaron = 40;
Ntilde = 40;
P = 40;
R = 40;
Racute = 40;
Rcaron = 40;
Thorn = 40;
asterisk = 70;
b = 60;
backslash = 89;
bar = 40;
bracketleft = 60;
bracketright = 34;
brokenbar = 40;
exclam = 70;
f = 40;
germandbls = 60;
h = 60;
k = 60;
l = 60;
lacute = 60;
lcaron = 60;
ldot = 60;
lslash = 64;
question = 69;
quotedblleft = 69;
quotedblright = 70;
quoteleft = 69;
quoteright = 70;
thorn = 60;
uni0136 = 40;
uni0137 = 60;
uni013B = 40;
uni013C = 60;
uni0145 = 40;
uni0156 = 40;
uni02B9 = 100;
uni02BA = 100;
uni1EBC = 40;
uni20A8 = 40;
z = 40;
zacute = 40;
zcaron = 40;
zdotaccent = 40;
};
itilde = {
asterisk = 40;
b = 23;
bracketleft = 31;
exclam = 17;
f = 30;
h = 23;
j = 36;
k = 23;
l = 23;
lacute = 23;
lcaron = 23;
ldot = 23;
question = 40;
quotedblleft = 30;
quotedblright = 30;
quoteleft = 30;
quoteright = 30;
uni0137 = 23;
uni013C = 23;
uni02B9 = 60;
uni02BA = 60;
};
j = {
itilde = 40;
};
l = {
imacron = 40;
};
lacute = {
imacron = 40;
};
lcaron = {
b = 140;
h = 140;
k = 140;
l = 140;
questiondown = -29;
};
less = {
at = -50;
parenright = -46;
};
lslash = {
i = 10;
imacron = 60;
questiondown = 26;
v = 20;
};
multiply = {
X = -29;
};
parenleft = {
at = -79;
};
plus = {
slash = -34;
};
q = {
backslash = -40;
j = 30;
};
question = {
J = -29;
X = -30;
at = -29;
comma = -73;
ibreve = 30;
igrave = 40;
imacron = 56;
itilde = 41;
parenright = -87;
questiondown = -89;
quotedblbase = -41;
quotesinglbase = -41;
slash = -70;
underscore = -66;
};
questiondown = {
asterisk = -51;
backslash = -50;
question = -51;
quotedblbase = 40;
quotesinglbase = 40;
v = -9;
};
quotedbl = {
ibreve = 24;
imacron = 73;
itilde = 30;
};
quotedblbase = {
backslash = -120;
question = -30;
};
quotedblleft = {
J = -76;
at = -44;
ibreve = 9;
imacron = 59;
itilde = 26;
questiondown = -71;
slash = -93;
};
quotedblright = {
ibreve = 24;
imacron = 73;
itilde = 30;
};
quoteleft = {
J = -76;
at = -44;
ibreve = 9;
imacron = 59;
itilde = 26;
questiondown = -71;
slash = -93;
};
quoteright = {
ibreve = 24;
imacron = 73;
itilde = 30;
};
quotesinglbase = {
backslash = -120;
question = -30;
};
quotesingle = {
ibreve = 24;
imacron = 73;
itilde = 30;
};
sacute = {
v = -39;
};
scaron = {
v = -39;
};
scedilla = {
v = -39;
};
slash = {
B = 46;
D = 46;
Dcaron = 46;
E = 46;
Eacute = 46;
Ebreve = 46;
Ecaron = 46;
Ecircumflex = 46;
Edieresis = 46;
Edotaccent = 46;
Egrave = 46;
Emacron = 46;
Eogonek = 46;
F = 46;
H = 46;
I = 46;
Iacute = 46;
Ibreve = 46;
Icircumflex = 60;
Idieresis = 56;
Idotaccent = 46;
Igrave = 40;
Imacron = 90;
Itilde = 46;
J = -34;
K = 46;
L = 46;
Lacute = 46;
Lcaron = 46;
Ldot = 46;
M = 46;
N = 46;
Nacute = 46;
Ncaron = 46;
Ntilde = 46;
Oslash = -29;
P = 46;
R = 46;
Racute = 46;
Rcaron = 46;
Thorn = 46;
at = -64;
bar = 46;
brokenbar = 46;
comma = -46;
ibreve = 40;
icircumflex = 41;
idieresis = 37;
igrave = 84;
imacron = 80;
plus = -47;
questiondown = -54;
quotedblbase = -38;
quotesinglbase = -38;
slash = -119;
underscore = -126;
uni0136 = 46;
uni013B = 46;
uni0145 = 46;
uni0156 = 46;
uni1EBC = 46;
uni20A8 = 46;
};
underscore = {
asterisk = -94;
at = -66;
backslash = -154;
j = 34;
question = -60;
underscore = -110;
};
uni0122 = {
imacron = 30;
};
uni0136 = {
ibreve = 20;
icircumflex = -10;
imacron = 50;
l = -5;
};
uni013B = {
V = -80;
};
uni013C = {
imacron = 40;
};
uni0145 = {
imacron = 40;
itilde = 17;
};
uni0156 = {
imacron = 30;
itilde = 20;
};
uni0162 = {
abreve = -100;
adieresis = -60;
amacron = -75;
atilde = -100;
ebreve = -100;
edieresis = -60;
emacron = -75;
gbreve = -90;
ibreve = 45;
imacron = 80;
itilde = 50;
ntilde = -90;
odieresis = -60;
omacron = -80;
otilde = -100;
racute = -60;
scaron = -90;
udieresis = -60;
umacron = -80;
uni1EBD = -100;
utilde = -100;
ydieresis = -55;
};
uni0218 = {
imacron = 36;
itilde = 20;
};
uni0219 = {
v = -39;
};
uni021A = {
abreve = -100;
adieresis = -60;
amacron = -75;
atilde = -100;
ebreve = -100;
edieresis = -60;
emacron = -75;
gbreve = -90;
ibreve = 45;
imacron = 80;
itilde = 50;
ntilde = -90;
odieresis = -60;
omacron = -80;
otilde = -100;
racute = -60;
scaron = -90;
udieresis = -60;
umacron = -80;
uni1EBD = -100;
utilde = -100;
ydieresis = -55;
};
uni02B9 = {
J = -47;
at = -50;
backslash = 20;
imacron = 100;
itilde = 60;
};
uni02BA = {
J = -47;
at = -50;
backslash = 20;
imacron = 100;
itilde = 60;
};
uni1EBC = {
ibreve = 24;
imacron = 56;
itilde = 41;
v = -15;
};
uni1EF8 = {
adieresis = -70;
amacron = -80;
edieresis = -70;
emacron = -90;
ibreve = 40;
icircumflex = 20;
imacron = 75;
itilde = 35;
odieresis = -70;
omacron = -90;
racute = -55;
scaron = -90;
udieresis = -70;
};
uni20A8 = {
v = -39;
};
v = {
at = -30;
comma = -40;
f = 20;
lslash = 10;
questiondown = -13;
};
z = {
imacron = 40;
};
zacute = {
imacron = 40;
};
zcaron = {
imacron = 40;
};
zdotaccent = {
imacron = 40;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2022 The Rethink Sans Project Authors (https://github.com/hans-thiessen/Rethink-Sans)";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "The Rethink Sans project authors (Hans Thiessen). DM Sans designed by Colophon Foundry.";
}
);
},
{
key = designerURL;
value = "https://www.hansthiessen.com/";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://scripts.sil.org/OFL";
}
);
},
{
key = licenseURL;
value = "https://scripts.sil.org/OFL";
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Rethink Communications LLC";
}
);
},
{
key = manufacturerURL;
value = "https://rethinkideas.com/";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 1;
}
