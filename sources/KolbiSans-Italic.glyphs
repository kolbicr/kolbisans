{
.appVersion = "3343";
.formatVersion = 3;
customParameters = (
{
name = panose;
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
4,
5,
6,
7,
9,
29,
31,
32,
33,
35,
36,
37,
38,
42,
45,
47,
60,
62
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
CR,
space,
A,
Aacute,
Abreve,
uni01CD,
Acircumflex,
Adieresis,
Agrave,
Amacron,
Aogonek,
Aring,
Atilde,
AE,
AEacute,
B,
C,
Cacute,
Ccaron,
Ccedilla,
Cdotaccent,
D,
Dcaron,
Dcroat,
Eth,
E,
Eacute,
Ebreve,
Ecaron,
Ecircumflex,
Edieresis,
Edotaccent,
Egrave,
Emacron,
Eogonek,
uni018E,
uni1EBC,
uni018F,
F,
G,
Gbreve,
uni0122,
Gdotaccent,
H,
Hbar,
I,
IJ,
Iacute,
Ibreve,
Icircumflex,
Idieresis,
Idotaccent,
Igrave,
Imacron,
Iogonek,
Itilde,
J,
uni004A0301,
K,
uni0136,
L,
Lacute,
Lcaron,
uni013B,
Ldot,
Lslash,
M,
N,
Nacute,
Ncaron,
uni0145,
Ntilde,
Eng,
O,
Oacute,
Obreve,
Ocircumflex,
Odieresis,
Ograve,
Ohungarumlaut,
Omacron,
Oslash,
Otilde,
OE,
P,
Thorn,
Q,
R,
Racute,
Rcaron,
uni0156,
S,
Sacute,
Scaron,
Scedilla,
uni0218,
uni1E9E,
T,
Tcaron,
uni0162,
uni021A,
U,
Uacute,
Ubreve,
Ucircumflex,
Udieresis,
Ugrave,
Uhungarumlaut,
Umacron,
Uogonek,
Uring,
Utilde,
V,
W,
Wacute,
Wcircumflex,
Wdieresis,
Wgrave,
X,
Y,
Yacute,
Ycircumflex,
Ydieresis,
Ygrave,
uni1EF8,
Z,
Zacute,
Zcaron,
Zdotaccent,
uniA78B,
a,
aacute,
abreve,
uni01CE,
acircumflex,
adieresis,
agrave,
amacron,
aogonek,
aring,
atilde,
ae,
aeacute,
b,
c,
cacute,
ccaron,
ccedilla,
cdotaccent,
d,
dcaron,
dcroat,
eth,
e,
eacute,
ebreve,
ecaron,
ecircumflex,
edieresis,
edotaccent,
egrave,
emacron,
eogonek,
uni1EBD,
uni0259,
f,
g,
gbreve,
uni0123,
gdotaccent,
h,
hbar,
i,
dotlessi,
iacute,
ibreve,
icircumflex,
idieresis,
i.loclTRK,
igrave,
imacron,
iogonek,
itilde,
ij,
j,
uni0237,
uni006A0301,
k,
uni0137,
l,
lacute,
lcaron,
uni013C,
ldot,
lslash,
m,
n,
nacute,
ncaron,
uni0146,
ntilde,
eng,
o,
oacute,
obreve,
ocircumflex,
odieresis,
ograve,
ohungarumlaut,
omacron,
oslash,
otilde,
oe,
p,
thorn,
q,
r,
racute,
rcaron,
uni0157,
s,
sacute,
scaron,
scedilla,
uni0219,
germandbls,
t,
tcaron,
uni0163,
uni021B,
u,
uacute,
ubreve,
ucircumflex,
udieresis,
ugrave,
uhungarumlaut,
umacron,
uogonek,
uring,
utilde,
v,
w,
wacute,
wcircumflex,
wdieresis,
wgrave,
x,
y,
yacute,
ycircumflex,
ydieresis,
ygrave,
uni1EF9,
z,
zacute,
zcaron,
zdotaccent,
uniA78C,
fi,
fl,
ordfeminine,
ordmasculine,
uni042F,
uni0394,
Pi,
uni03A9,
uni03BC,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
uni24EA,
uni2780,
uni2781,
uni2782,
uni2783,
uni2784,
uni2785,
uni2786,
uni2787,
uni2788,
uni278A,
uni278B,
uni278C,
uni278D,
uni278E,
uni278F,
uni2790,
uni2791,
uni2792,
uni24EA.solid,
zero.dnom,
one.dnom,
two.dnom,
three.dnom,
four.dnom,
five.dnom,
six.dnom,
seven.dnom,
eight.dnom,
nine.dnom,
zero.numr,
one.numr,
two.numr,
three.numr,
four.numr,
five.numr,
six.numr,
seven.numr,
eight.numr,
nine.numr,
fraction,
onehalf,
onequarter,
threequarters,
oneeighth,
threeeighths,
fiveeighths,
seveneighths,
uni2080,
uni2081,
uni2082,
uni2083,
uni2084,
uni2085,
uni2086,
uni2087,
uni2088,
uni2089,
uni2070,
uni00B9,
uni00B2,
uni00B3,
uni2074,
uni2075,
uni2076,
uni2077,
uni2078,
uni2079,
uni00A0,
period,
comma,
colon,
semicolon,
ellipsis,
exclam,
exclamdown,
question,
questiondown,
periodcentered,
bullet,
asterisk,
numbersign,
slash,
backslash,
periodcentered.loclCAT,
periodcentered.loclCAT.case,
hyphen,
endash,
emdash,
underscore,
parenleft,
parenright,
braceleft,
braceright,
bracketleft,
bracketright,
quotesinglbase,
quotedblbase,
quotedblleft,
quotedblright,
quoteleft,
quoteright,
guillemotleft,
guillemotright,
guilsinglleft,
guilsinglright,
quotedbl,
quotesingle,
florin,
at,
ampersand,
paragraph,
section,
copyright,
registered,
trademark,
degree,
bar,
brokenbar,
dagger,
uni2113,
daggerdbl,
estimated,
at.case,
registered.case,
uni20BF,
cent,
currency,
dollar,
Euro,
uni20BD,
uni20A8,
sterling,
yen,
cent.001,
uni2215,
plus,
minus,
multiply,
divide,
equal,
notequal,
greater,
less,
greaterequal,
lessequal,
plusminus,
approxequal,
asciitilde,
logicalnot,
asciicircum,
infinity,
integral,
uni2126,
uni2206,
product,
summation,
radical,
uni00B5,
partialdiff,
percent,
perthousand,
plus.case,
arrowup,
arrowright,
arrowdown,
arrowleft,
lozenge,
uni0308,
uni0307,
gravecomb,
acutecomb,
uni030B,
uni030C.alt,
uni0302,
uni030C,
uni0306,
uni030A,
tildecomb,
uni0304,
uni0312,
uni0326,
uni0327,
uni0328,
uni0308.case,
uni0307.case,
gravecomb.case,
acutecomb.case,
uni030B.case,
uni030C.alt.case,
uni0302.case,
uni030C.case,
uni0306.case,
uni030A.case,
tildecomb.case,
uni0304.case,
uni0327.case,
uni0328.case,
uni0308.narrow,
dieresis,
dotaccent,
grave,
acute,
hungarumlaut,
circumflex,
caron,
breve,
ring,
tilde,
macron,
cedilla,
ogonek,
uni02BA,
uni02B9,
uniE000,
uniE001,
uniE002,
uniE003,
uniE004,
uniE005,
REbackwards,
RethinkWordmark,
Rlogobig
);
}
);
date = "2021-03-04 17:58:23 +0000";
familyName = "Kolbi Sans";
featurePrefixes = (
{
code = "lookup SUB_1 {
	sub L periodcentered by Ldot;
	sub l periodcentered by ldot;
} SUB_1;
lookup SUB_20 {
	sub i by dotlessi;
	sub j by uni0237;
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_20;
lookup SUB_21 {
	sub iogonek by dotlessi uni0328;
} SUB_21;
lookup SUB_22 {
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_22;
lookup SUB_23 {
	sub periodcentered by periodcentered.loclCAT;
} SUB_23;
lookup SUB_24 {
	sub J by uni004A0301;
	sub j by uni006A0301;
	sub periodcentered by periodcentered.loclCAT.case;
} SUB_24;
lookup SUB_25 {
	sub zero.numr by zero.dnom;
	sub one.numr by one.dnom;
	sub two.numr by two.dnom;
	sub three.numr by three.dnom;
	sub four.numr by four.dnom;
	sub five.numr by five.dnom;
	sub six.numr by six.dnom;
	sub seven.numr by seven.dnom;
	sub eight.numr by eight.dnom;
	sub nine.numr by nine.dnom;
} SUB_25;
lookup SUB_26 {
	sub A by ordfeminine;
	sub O by ordmasculine;
	sub a by ordfeminine;
	sub o by ordmasculine;
} SUB_26;
";
name = Prefix;
}
);
features = (
{
automatic = 1;
code = "";
tag = aalt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_2 {
	@SUB_2_0_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub [i j]' lookup SUB_20 @SUB_2_0_LA_0;
	@SUB_2_1_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub [i j]' lookup SUB_20 [uni0327 uni0328] @SUB_2_1_LA_0;
	@SUB_2_2_BT_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	@SUB_2_2_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_2_2_BT_0 @SUB_2_2_1' lookup SUB_20;
	@SUB_2_3_BT_0 = [A Aacute Abreve uni01CD Acircumflex Adieresis Agrave Amacron Aogonek Aring Atilde AE AEacute B C Cacute Ccaron Ccedilla Cdotaccent D Dcaron Dcroat Eth E Eacute Ebreve Ecaron Ecircumflex Edieresis Edotaccent Egrave Emacron Eogonek uni018E uni1EBC uni018F F G Gbreve uni0122 Gdotaccent H Hbar I IJ Iacute Ibreve Icircumflex Idieresis Idotaccent Igrave Imacron Iogonek Itilde J uni004A0301 K uni0136 L Lacute Lcaron uni013B Ldot Lslash M N Nacute Ncaron uni0145 Ntilde Eng O Oacute Obreve Ocircumflex Odieresis Ograve Ohungarumlaut Omacron Oslash Otilde OE P Thorn Q R Racute Rcaron uni0156 S Sacute Scaron Scedilla uni0218 uni1E9E T Tcaron uni0162 uni021A U Uacute Ubreve Ucircumflex Udieresis Ugrave Uhungarumlaut Umacron Uogonek Uring Utilde V W Wacute Wcircumflex Wdieresis Wgrave X Y Yacute Ycircumflex Ydieresis Ygrave uni1EF8 Z Zacute Zcaron Zdotaccent uniA78B uni042F uni0394 Pi uni03A9];
	@SUB_2_3_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_2_3_BT_0 @SUB_2_3_1' lookup SUB_20;
	@SUB_2_4_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub iogonek' lookup SUB_21 @SUB_2_4_LA_0;
} SUB_2;
lookup SUB_3 {
	@SUB_3_0_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	@SUB_3_0_LA_1 = [uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni030C.alt.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0327.case uni0328.case];
	sub @SUB_3_0_0' lookup SUB_22 @SUB_3_0_LA_1;
	@SUB_3_1_BT_0 = [uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni030C.alt.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0327.case uni0328.case];
	@SUB_3_1_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_3_1_BT_0 @SUB_3_1_1' lookup SUB_22;
} SUB_3;
lookup SUB_4 {
	sub Ldot by L periodcentered.loclCAT.case;
	sub fi by f i;
	sub fl by f l;
} SUB_4;
script latn;
language dflt;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language AZE;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language CAT;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language CRT;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language KAZ;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language MOL;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language NLD;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language ROM;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language TAT;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language TRK;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
";
tag = ccmp;
},
{
code = "script latn;
language AZE;
lookup SUB_5 {
	sub i by i.loclTRK;
} SUB_5;
language CRT;
lookup SUB_5;
language KAZ;
lookup SUB_5;
language TAT;
lookup SUB_5;
language TRK;
lookup SUB_5;
language MOL;
lookup SUB_6 {
	sub Scedilla by uni0218;
	sub uni0162 by uni021A;
	sub uni0163 by uni021B;
} SUB_6;
language ROM;
lookup SUB_6;
language CAT;
lookup SUB_7 {
	sub L periodcentered' lookup SUB_24 L;
	sub l periodcentered' lookup SUB_23 l;
} SUB_7;
language NLD;
lookup SUB_8 {
	sub Iacute J' lookup SUB_24;
	sub iacute j' lookup SUB_24;
} SUB_8;
";
tag = locl;
},
{
code = "script DFLT;
language dflt;
lookup SUB_9 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_9;
script latn;
language dflt;
lookup SUB_9;
language AZE;
lookup SUB_9;
language CAT;
lookup SUB_9;
language CRT;
lookup SUB_9;
language KAZ;
lookup SUB_9;
language MOL;
lookup SUB_9;
language NLD;
lookup SUB_9;
language ROM;
lookup SUB_9;
language TAT;
lookup SUB_9;
language TRK;
lookup SUB_9;
";
tag = subs;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_10;
script latn;
language dflt;
lookup SUB_10;
language AZE;
lookup SUB_10;
language CAT;
lookup SUB_10;
language CRT;
lookup SUB_10;
language KAZ;
lookup SUB_10;
language MOL;
lookup SUB_10;
language NLD;
lookup SUB_10;
language ROM;
lookup SUB_10;
language TAT;
lookup SUB_10;
language TRK;
lookup SUB_10;
";
tag = sinf;
},
{
code = "script DFLT;
language dflt;
lookup SUB_11 {
	sub zero by uni2070;
	sub one by uni00B9;
	sub two by uni00B2;
	sub three by uni00B3;
	sub four by uni2074;
	sub five by uni2075;
	sub six by uni2076;
	sub seven by uni2077;
	sub eight by uni2078;
	sub nine by uni2079;
} SUB_11;
script latn;
language dflt;
lookup SUB_11;
language AZE;
lookup SUB_11;
language CAT;
lookup SUB_11;
language CRT;
lookup SUB_11;
language KAZ;
lookup SUB_11;
language MOL;
lookup SUB_11;
language NLD;
lookup SUB_11;
language ROM;
lookup SUB_11;
language TAT;
lookup SUB_11;
language TRK;
lookup SUB_11;
";
tag = sups;
},
{
code = "script DFLT;
language dflt;
lookup SUB_12 {
	sub zero by zero.numr;
	sub one by one.numr;
	sub two by two.numr;
	sub three by three.numr;
	sub four by four.numr;
	sub five by five.numr;
	sub six by six.numr;
	sub seven by seven.numr;
	sub eight by eight.numr;
	sub nine by nine.numr;
} SUB_12;
script latn;
language dflt;
lookup SUB_12;
language AZE;
lookup SUB_12;
language CAT;
lookup SUB_12;
language CRT;
lookup SUB_12;
language KAZ;
lookup SUB_12;
language MOL;
lookup SUB_12;
language NLD;
lookup SUB_12;
language ROM;
lookup SUB_12;
language TAT;
lookup SUB_12;
language TRK;
lookup SUB_12;
";
tag = numr;
},
{
code = "script DFLT;
language dflt;
lookup SUB_13 {
	sub zero by zero.dnom;
	sub one by one.dnom;
	sub two by two.dnom;
	sub three by three.dnom;
	sub four by four.dnom;
	sub five by five.dnom;
	sub six by six.dnom;
	sub seven by seven.dnom;
	sub eight by eight.dnom;
	sub nine by nine.dnom;
} SUB_13;
script latn;
language dflt;
lookup SUB_13;
language AZE;
lookup SUB_13;
language CAT;
lookup SUB_13;
language CRT;
lookup SUB_13;
language KAZ;
lookup SUB_13;
language MOL;
lookup SUB_13;
language NLD;
lookup SUB_13;
language ROM;
lookup SUB_13;
language TAT;
lookup SUB_13;
language TRK;
lookup SUB_13;
";
tag = dnom;
},
{
code = "script DFLT;
language dflt;
lookup SUB_14 {
	sub slash by fraction;
} SUB_14;
lookup SUB_15 {
	sub zero by zero.numr;
	sub one by one.numr;
	sub two by two.numr;
	sub three by three.numr;
	sub four by four.numr;
	sub five by five.numr;
	sub six by six.numr;
	sub seven by seven.numr;
	sub eight by eight.numr;
	sub nine by nine.numr;
} SUB_15;
lookup SUB_16 {
	@SUB_16_0_0 = [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
	sub fraction @SUB_16_0_0' lookup SUB_25;
	@SUB_16_1_BT_0 = [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];
	@SUB_16_1_1 = [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
	sub @SUB_16_1_BT_0 @SUB_16_1_1' lookup SUB_25;
} SUB_16;
script latn;
language dflt;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language AZE;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language CAT;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language CRT;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language KAZ;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language MOL;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language NLD;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language ROM;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language TAT;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language TRK;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
";
tag = frac;
},
{
code = "script DFLT;
language dflt;
lookup SUB_17 {
	lookupflag IgnoreMarks;
	sub E less by uni018E;
	sub R E less by REbackwards;
	sub R less E by REbackwards;
	sub R greater by RethinkWordmark;
	sub R less by uni042F;
	sub f i by fi;
	sub f l by fl;
	sub hyphen hyphen hyphen greater by arrowdown;
	sub hyphen hyphen greater by arrowright;
	sub parenleft R parenright by Rlogobig;
	sub parenleft zero parenright by uni24EA;
	sub parenleft one parenright by uni2780;
	sub parenleft two parenright by uni2781;
	sub parenleft three parenright by uni2782;
	sub parenleft four parenright by uni2783;
	sub parenleft five parenright by uni2784;
	sub parenleft six parenright by uni2785;
	sub parenleft seven parenright by uni2786;
	sub parenleft eight parenright by uni2787;
	sub parenleft nine parenright by uni2788;
	sub braceleft zero braceright by uni24EA.solid;
	sub braceleft one braceright by uni278A;
	sub braceleft two braceright by uni278B;
	sub braceleft three braceright by uni278C;
	sub braceleft four braceright by uni278D;
	sub braceleft five braceright by uni278E;
	sub braceleft six braceright by uni278F;
	sub braceleft seven braceright by uni2790;
	sub braceleft eight braceright by uni2791;
	sub braceleft nine braceright by uni2792;
	sub registered plus by registered.case;
	sub less hyphen hyphen hyphen by arrowup;
	sub less hyphen hyphen by arrowleft;
} SUB_17;
script latn;
language dflt;
lookup SUB_17;
language AZE;
lookup SUB_17;
language CAT;
lookup SUB_17;
language CRT;
lookup SUB_17;
language KAZ;
lookup SUB_17;
language MOL;
lookup SUB_17;
language NLD;
lookup SUB_17;
language ROM;
lookup SUB_17;
language TAT;
lookup SUB_17;
language TRK;
lookup SUB_17;
";
tag = liga;
},
{
code = "script DFLT;
language dflt;
lookup SUB_18 {
	@SUB_18_0_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_18_0_BT_0 [A a]' lookup SUB_26;
	@SUB_18_1_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_18_1_BT_0 [O o]' lookup SUB_26;
} SUB_18;
script latn;
language dflt;
lookup SUB_18;
language AZE;
lookup SUB_18;
language CAT;
lookup SUB_18;
language CRT;
lookup SUB_18;
language KAZ;
lookup SUB_18;
language MOL;
lookup SUB_18;
language NLD;
lookup SUB_18;
language ROM;
lookup SUB_18;
language TAT;
lookup SUB_18;
language TRK;
lookup SUB_18;
";
tag = ordn;
},
{
code = "script DFLT;
language dflt;
lookup SUB_19 {
	sub periodcentered.loclCAT by periodcentered.loclCAT.case;
	sub at by at.case;
	sub registered by registered.case;
	sub plus by plus.case;
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_19;
script latn;
language dflt;
lookup SUB_19;
language AZE;
lookup SUB_19;
language CAT;
lookup SUB_19;
language CRT;
lookup SUB_19;
language KAZ;
lookup SUB_19;
language MOL;
lookup SUB_19;
language NLD;
lookup SUB_19;
language ROM;
lookup SUB_19;
language TAT;
lookup SUB_19;
language TRK;
lookup SUB_19;
";
tag = case;
},
{
code = "script DFLT;
language dflt;
lookup POS_2 {
	markClass uni0326 <anchor 5 0> @POS_2_0_MARK_0;
	markClass uni0327 <anchor 30 0> @POS_2_0_MARK_0;
	markClass uni0327.case <anchor 26 0> @POS_2_0_MARK_0;
	markClass uni0308 <anchor 192 496> @POS_2_0_MARK_1;
	markClass uni0307 <anchor 103 496> @POS_2_0_MARK_1;
	markClass gravecomb <anchor 148 496> @POS_2_0_MARK_1;
	markClass acutecomb <anchor 149 496> @POS_2_0_MARK_1;
	markClass uni030B <anchor 160 496> @POS_2_0_MARK_1;
	markClass uni0302 <anchor 181 496> @POS_2_0_MARK_1;
	markClass uni030C <anchor 181 496> @POS_2_0_MARK_1;
	markClass uni0306 <anchor 185 496> @POS_2_0_MARK_1;
	markClass uni030A <anchor 151 496> @POS_2_0_MARK_1;
	markClass tildecomb <anchor 195 496> @POS_2_0_MARK_1;
	markClass uni0304 <anchor 225 496> @POS_2_0_MARK_1;
	markClass uni0312 <anchor 95 496> @POS_2_0_MARK_1;
	markClass uni0308.case <anchor 228 700> @POS_2_0_MARK_1;
	markClass uni0307.case <anchor 139 700> @POS_2_0_MARK_1;
	markClass gravecomb.case <anchor 185 700> @POS_2_0_MARK_1;
	markClass acutecomb.case <anchor 185 700> @POS_2_0_MARK_1;
	markClass uni030B.case <anchor 226 700> @POS_2_0_MARK_1;
	markClass uni0302.case <anchor 216 700> @POS_2_0_MARK_1;
	markClass uni030C.case <anchor 218 700> @POS_2_0_MARK_1;
	markClass uni0306.case <anchor 221 700> @POS_2_0_MARK_1;
	markClass uni030A.case <anchor 186 700> @POS_2_0_MARK_1;
	markClass tildecomb.case <anchor 231 700> @POS_2_0_MARK_1;
	markClass uni0304.case <anchor 255 700> @POS_2_0_MARK_1;
	markClass uni0308.narrow <anchor 192 496> @POS_2_0_MARK_1;
	pos base cent <anchor 312 0> mark @POS_2_0_MARK_0 <anchor 434 691> mark @POS_2_0_MARK_1;
	pos base uni20A8 <anchor 792 0> mark @POS_2_0_MARK_0 <anchor 880 496> mark @POS_2_0_MARK_1;
} POS_2;
lookup POS_3 {
	markClass uni0326 <anchor 5 0> @POS_3_0_MARK_0;
	markClass uni0327 <anchor 30 0> @POS_3_0_MARK_0;
	markClass uni0327.case <anchor 26 0> @POS_3_0_MARK_0;
	markClass uni0308 <anchor 192 496> @POS_3_0_MARK_1;
	markClass uni0307 <anchor 103 496> @POS_3_0_MARK_1;
	markClass gravecomb <anchor 148 496> @POS_3_0_MARK_1;
	markClass acutecomb <anchor 149 496> @POS_3_0_MARK_1;
	markClass uni030B <anchor 160 496> @POS_3_0_MARK_1;
	markClass uni0302 <anchor 181 496> @POS_3_0_MARK_1;
	markClass uni030C <anchor 181 496> @POS_3_0_MARK_1;
	markClass uni0306 <anchor 185 496> @POS_3_0_MARK_1;
	markClass uni030A <anchor 151 496> @POS_3_0_MARK_1;
	markClass tildecomb <anchor 195 496> @POS_3_0_MARK_1;
	markClass uni0304 <anchor 225 496> @POS_3_0_MARK_1;
	markClass uni0312 <anchor 95 496> @POS_3_0_MARK_1;
	markClass uni0308.case <anchor 228 700> @POS_3_0_MARK_1;
	markClass uni0307.case <anchor 139 700> @POS_3_0_MARK_1;
	markClass gravecomb.case <anchor 185 700> @POS_3_0_MARK_1;
	markClass acutecomb.case <anchor 185 700> @POS_3_0_MARK_1;
	markClass uni030B.case <anchor 226 700> @POS_3_0_MARK_1;
	markClass uni0302.case <anchor 216 700> @POS_3_0_MARK_1;
	markClass uni030C.case <anchor 218 700> @POS_3_0_MARK_1;
	markClass uni0306.case <anchor 221 700> @POS_3_0_MARK_1;
	markClass uni030A.case <anchor 186 700> @POS_3_0_MARK_1;
	markClass tildecomb.case <anchor 231 700> @POS_3_0_MARK_1;
	markClass uni0304.case <anchor 255 700> @POS_3_0_MARK_1;
	markClass uni0308.narrow <anchor 192 496> @POS_3_0_MARK_1;
	pos base A <anchor 288 0> mark @POS_3_0_MARK_0 <anchor 412 700> mark @POS_3_0_MARK_1;
	pos base Aacute <anchor 288 0> mark @POS_3_0_MARK_0 <anchor 453 931> mark @POS_3_0_MARK_1;
	pos base Abreve <anchor 288 0> mark @POS_3_0_MARK_0 <anchor 448 901> mark @POS_3_0_MARK_1;
	pos base uni01CD <anchor 288 0> mark @POS_3_0_MARK_0 <anchor 447 901> mark @POS_3_0_MARK_1;
	pos base Acircumflex <anchor 288 0> mark @POS_3_0_MARK_0 <anchor 448 902> mark @POS_3_0_MARK_1;
	pos base Adieresis <anchor 288 0> mark @POS_3_0_MARK_0 <anchor 445 889> mark @POS_3_0_MARK_1;
	pos base Agrave <anchor 288 0> mark @POS_3_0_MARK_0 <anchor 453 931> mark @POS_3_0_MARK_1;
	pos base Amacron <anchor 288 0> mark @POS_3_0_MARK_0 <anchor 440 859> mark @POS_3_0_MARK_1;
	pos base Aogonek <anchor 288 0> mark @POS_3_0_MARK_0 <anchor 412 700> mark @POS_3_0_MARK_1;
	pos base Aring <anchor 288 0> mark @POS_3_0_MARK_0 <anchor 459 967> mark @POS_3_0_MARK_1;
	pos base Atilde <anchor 288 0> mark @POS_3_0_MARK_0 <anchor 440 859> mark @POS_3_0_MARK_1;
	pos base AE <anchor 415 0> mark @POS_3_0_MARK_0 <anchor 719 700> mark @POS_3_0_MARK_1;
	pos base AEacute <anchor 415 0> mark @POS_3_0_MARK_0 <anchor 760 931> mark @POS_3_0_MARK_1;
	pos base C <anchor 317 0> mark @POS_3_0_MARK_0 <anchor 441 700> mark @POS_3_0_MARK_1;
	pos base Cacute <anchor 317 0> mark @POS_3_0_MARK_0 <anchor 482 931> mark @POS_3_0_MARK_1;
	pos base Ccaron <anchor 317 0> mark @POS_3_0_MARK_0 <anchor 476 901> mark @POS_3_0_MARK_1;
	pos base Ccedilla <anchor 272 -259> mark @POS_3_0_MARK_0 <anchor 441 700> mark @POS_3_0_MARK_1;
	pos base Cdotaccent <anchor 317 0> mark @POS_3_0_MARK_0 <anchor 474 889> mark @POS_3_0_MARK_1;
	pos base D <anchor 307 0> mark @POS_3_0_MARK_0 <anchor 431 700> mark @POS_3_0_MARK_1;
	pos base Dcaron <anchor 307 0> mark @POS_3_0_MARK_0 <anchor 466 901> mark @POS_3_0_MARK_1;
	pos base E <anchor 227 0> mark @POS_3_0_MARK_0 <anchor 351 700> mark @POS_3_0_MARK_1;
	pos base Eacute <anchor 227 0> mark @POS_3_0_MARK_0 <anchor 392 931> mark @POS_3_0_MARK_1;
	pos base Ebreve <anchor 227 0> mark @POS_3_0_MARK_0 <anchor 387 901> mark @POS_3_0_MARK_1;
	pos base Ecaron <anchor 227 0> mark @POS_3_0_MARK_0 <anchor 386 901> mark @POS_3_0_MARK_1;
	pos base Ecircumflex <anchor 227 0> mark @POS_3_0_MARK_0 <anchor 387 902> mark @POS_3_0_MARK_1;
	pos base Edieresis <anchor 227 0> mark @POS_3_0_MARK_0 <anchor 384 889> mark @POS_3_0_MARK_1;
	pos base Edotaccent <anchor 227 0> mark @POS_3_0_MARK_0 <anchor 384 889> mark @POS_3_0_MARK_1;
	pos base Egrave <anchor 227 0> mark @POS_3_0_MARK_0 <anchor 392 931> mark @POS_3_0_MARK_1;
	pos base Emacron <anchor 227 0> mark @POS_3_0_MARK_0 <anchor 379 859> mark @POS_3_0_MARK_1;
	pos base Eogonek <anchor 227 0> mark @POS_3_0_MARK_0 <anchor 351 700> mark @POS_3_0_MARK_1;
	pos base uni1EBC <anchor 227 0> mark @POS_3_0_MARK_0 <anchor 379 859> mark @POS_3_0_MARK_1;
	pos base G <anchor 337 0> mark @POS_3_0_MARK_0 <anchor 461 700> mark @POS_3_0_MARK_1;
	pos base Gbreve <anchor 337 0> mark @POS_3_0_MARK_0 <anchor 497 901> mark @POS_3_0_MARK_1;
	pos base uni0122 <anchor 295 -238> mark @POS_3_0_MARK_0 <anchor 461 700> mark @POS_3_0_MARK_1;
	pos base Gdotaccent <anchor 337 0> mark @POS_3_0_MARK_0 <anchor 494 889> mark @POS_3_0_MARK_1;
	pos base I <anchor 73 0> mark @POS_3_0_MARK_0 <anchor 197 700> mark @POS_3_0_MARK_1;
	pos base IJ <anchor 432 0> mark @POS_3_0_MARK_0 <anchor 680 700> mark @POS_3_0_MARK_1;
	pos base Iacute <anchor 73 0> mark @POS_3_0_MARK_0 <anchor 238 931> mark @POS_3_0_MARK_1;
	pos base Ibreve <anchor 73 0> mark @POS_3_0_MARK_0 <anchor 233 901> mark @POS_3_0_MARK_1;
	pos base Icircumflex <anchor 73 0> mark @POS_3_0_MARK_0 <anchor 233 902> mark @POS_3_0_MARK_1;
	pos base Idieresis <anchor 73 0> mark @POS_3_0_MARK_0 <anchor 230 889> mark @POS_3_0_MARK_1;
	pos base Idotaccent <anchor 73 0> mark @POS_3_0_MARK_0 <anchor 230 889> mark @POS_3_0_MARK_1;
	pos base Igrave <anchor 73 0> mark @POS_3_0_MARK_0 <anchor 238 931> mark @POS_3_0_MARK_1;
	pos base Imacron <anchor 73 0> mark @POS_3_0_MARK_0 <anchor 225 859> mark @POS_3_0_MARK_1;
	pos base Iogonek <anchor 73 0> mark @POS_3_0_MARK_0 <anchor 197 700> mark @POS_3_0_MARK_1;
	pos base Itilde <anchor 73 0> mark @POS_3_0_MARK_0 <anchor 225 859> mark @POS_3_0_MARK_1;
	pos base J <anchor 199 0> mark @POS_3_0_MARK_0 <anchor 447 700> mark @POS_3_0_MARK_1;
	pos base uni004A0301 <anchor 199 0> mark @POS_3_0_MARK_0 <anchor 488 931> mark @POS_3_0_MARK_1;
	pos base K <anchor 251 0> mark @POS_3_0_MARK_0 <anchor 375 700> mark @POS_3_0_MARK_1;
	pos base uni0136 <anchor 209 -238> mark @POS_3_0_MARK_0 <anchor 375 700> mark @POS_3_0_MARK_1;
	pos base L <anchor 219 0> mark @POS_3_0_MARK_0 <anchor 254 700> mark @POS_3_0_MARK_1;
	pos base Lacute <anchor 219 0> mark @POS_3_0_MARK_0 <anchor 295 931> mark @POS_3_0_MARK_1;
	pos base Lcaron <anchor 219 0> mark @POS_3_0_MARK_0 <anchor 254 700> mark @POS_3_0_MARK_1;
	pos base uni013B <anchor 177 -238> mark @POS_3_0_MARK_0 <anchor 254 700> mark @POS_3_0_MARK_1;
	pos base N <anchor 301 0> mark @POS_3_0_MARK_0 <anchor 425 700> mark @POS_3_0_MARK_1;
	pos base Nacute <anchor 301 0> mark @POS_3_0_MARK_0 <anchor 466 931> mark @POS_3_0_MARK_1;
	pos base Ncaron <anchor 301 0> mark @POS_3_0_MARK_0 <anchor 460 901> mark @POS_3_0_MARK_1;
	pos base uni0145 <anchor 259 -238> mark @POS_3_0_MARK_0 <anchor 425 700> mark @POS_3_0_MARK_1;
	pos base Ntilde <anchor 301 0> mark @POS_3_0_MARK_0 <anchor 453 859> mark @POS_3_0_MARK_1;
	pos base Eng <anchor 301 0> mark @POS_3_0_MARK_0 <anchor 425 700> mark @POS_3_0_MARK_1;
	pos base O <anchor 352 0> mark @POS_3_0_MARK_0 <anchor 476 700> mark @POS_3_0_MARK_1;
	pos base Oacute <anchor 352 0> mark @POS_3_0_MARK_0 <anchor 517 931> mark @POS_3_0_MARK_1;
	pos base Obreve <anchor 352 0> mark @POS_3_0_MARK_0 <anchor 512 901> mark @POS_3_0_MARK_1;
	pos base Ocircumflex <anchor 352 0> mark @POS_3_0_MARK_0 <anchor 512 902> mark @POS_3_0_MARK_1;
	pos base Odieresis <anchor 352 0> mark @POS_3_0_MARK_0 <anchor 509 889> mark @POS_3_0_MARK_1;
	pos base Ograve <anchor 352 0> mark @POS_3_0_MARK_0 <anchor 517 931> mark @POS_3_0_MARK_1;
	pos base Ohungarumlaut <anchor 352 0> mark @POS_3_0_MARK_0 <anchor 511 902> mark @POS_3_0_MARK_1;
	pos base Omacron <anchor 352 0> mark @POS_3_0_MARK_0 <anchor 504 859> mark @POS_3_0_MARK_1;
	pos base Otilde <anchor 352 0> mark @POS_3_0_MARK_0 <anchor 504 859> mark @POS_3_0_MARK_1;
	pos base OE <anchor 514 0> mark @POS_3_0_MARK_0 <anchor 638 700> mark @POS_3_0_MARK_1;
	pos base R <anchor 250 0> mark @POS_3_0_MARK_0 <anchor 374 700> mark @POS_3_0_MARK_1;
	pos base Racute <anchor 250 0> mark @POS_3_0_MARK_0 <anchor 415 931> mark @POS_3_0_MARK_1;
	pos base Rcaron <anchor 250 0> mark @POS_3_0_MARK_0 <anchor 409 901> mark @POS_3_0_MARK_1;
	pos base uni0156 <anchor 208 -238> mark @POS_3_0_MARK_0 <anchor 374 700> mark @POS_3_0_MARK_1;
	pos base S <anchor 252 0> mark @POS_3_0_MARK_0 <anchor 376 700> mark @POS_3_0_MARK_1;
	pos base Sacute <anchor 252 0> mark @POS_3_0_MARK_0 <anchor 417 931> mark @POS_3_0_MARK_1;
	pos base Scaron <anchor 252 0> mark @POS_3_0_MARK_0 <anchor 411 901> mark @POS_3_0_MARK_1;
	pos base Scedilla <anchor 207 -259> mark @POS_3_0_MARK_0 <anchor 376 700> mark @POS_3_0_MARK_1;
	pos base uni0218 <anchor 210 -238> mark @POS_3_0_MARK_0 <anchor 376 700> mark @POS_3_0_MARK_1;
	pos base T <anchor 236 0> mark @POS_3_0_MARK_0 <anchor 360 700> mark @POS_3_0_MARK_1;
	pos base Tcaron <anchor 236 0> mark @POS_3_0_MARK_0 <anchor 395 901> mark @POS_3_0_MARK_1;
	pos base uni0162 <anchor 191 -259> mark @POS_3_0_MARK_0 <anchor 360 700> mark @POS_3_0_MARK_1;
	pos base uni021A <anchor 194 -238> mark @POS_3_0_MARK_0 <anchor 360 700> mark @POS_3_0_MARK_1;
	pos base U <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 414 700> mark @POS_3_0_MARK_1;
	pos base Uacute <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 455 931> mark @POS_3_0_MARK_1;
	pos base Ubreve <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 450 901> mark @POS_3_0_MARK_1;
	pos base Ucircumflex <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 450 902> mark @POS_3_0_MARK_1;
	pos base Udieresis <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 447 889> mark @POS_3_0_MARK_1;
	pos base Ugrave <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 455 931> mark @POS_3_0_MARK_1;
	pos base Uhungarumlaut <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 449 902> mark @POS_3_0_MARK_1;
	pos base Umacron <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 442 859> mark @POS_3_0_MARK_1;
	pos base Uogonek <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 414 700> mark @POS_3_0_MARK_1;
	pos base Uring <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 461 967> mark @POS_3_0_MARK_1;
	pos base Utilde <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 442 859> mark @POS_3_0_MARK_1;
	pos base W <anchor 450 0> mark @POS_3_0_MARK_0 <anchor 566 700> mark @POS_3_0_MARK_1;
	pos base Wacute <anchor 450 0> mark @POS_3_0_MARK_0 <anchor 607 931> mark @POS_3_0_MARK_1;
	pos base Wcircumflex <anchor 450 0> mark @POS_3_0_MARK_0 <anchor 602 902> mark @POS_3_0_MARK_1;
	pos base Wdieresis <anchor 450 0> mark @POS_3_0_MARK_0 <anchor 599 889> mark @POS_3_0_MARK_1;
	pos base Wgrave <anchor 450 0> mark @POS_3_0_MARK_0 <anchor 607 931> mark @POS_3_0_MARK_1;
	pos base Y <anchor 246 0> mark @POS_3_0_MARK_0 <anchor 370 700> mark @POS_3_0_MARK_1;
	pos base Yacute <anchor 246 0> mark @POS_3_0_MARK_0 <anchor 411 931> mark @POS_3_0_MARK_1;
	pos base Ycircumflex <anchor 246 0> mark @POS_3_0_MARK_0 <anchor 406 902> mark @POS_3_0_MARK_1;
	pos base Ydieresis <anchor 246 0> mark @POS_3_0_MARK_0 <anchor 403 889> mark @POS_3_0_MARK_1;
	pos base Ygrave <anchor 246 0> mark @POS_3_0_MARK_0 <anchor 411 931> mark @POS_3_0_MARK_1;
	pos base uni1EF8 <anchor 246 0> mark @POS_3_0_MARK_0 <anchor 398 859> mark @POS_3_0_MARK_1;
	pos base Z <anchor 224 0> mark @POS_3_0_MARK_0 <anchor 348 700> mark @POS_3_0_MARK_1;
	pos base Zacute <anchor 224 0> mark @POS_3_0_MARK_0 <anchor 389 931> mark @POS_3_0_MARK_1;
	pos base Zcaron <anchor 224 0> mark @POS_3_0_MARK_0 <anchor 383 901> mark @POS_3_0_MARK_1;
	pos base Zdotaccent <anchor 224 0> mark @POS_3_0_MARK_0 <anchor 381 889> mark @POS_3_0_MARK_1;
	pos base a <anchor 238 0> mark @POS_3_0_MARK_0 <anchor 326 496> mark @POS_3_0_MARK_1;
	pos base aacute <anchor 238 0> mark @POS_3_0_MARK_0 <anchor 371 747> mark @POS_3_0_MARK_1;
	pos base abreve <anchor 238 0> mark @POS_3_0_MARK_0 <anchor 368 732> mark @POS_3_0_MARK_1;
	pos base uni01CE <anchor 238 0> mark @POS_3_0_MARK_0 <anchor 368 733> mark @POS_3_0_MARK_1;
	pos base acircumflex <anchor 238 0> mark @POS_3_0_MARK_0 <anchor 368 733> mark @POS_3_0_MARK_1;
	pos base adieresis <anchor 238 0> mark @POS_3_0_MARK_0 <anchor 365 720> mark @POS_3_0_MARK_1;
	pos base agrave <anchor 238 0> mark @POS_3_0_MARK_0 <anchor 371 747> mark @POS_3_0_MARK_1;
	pos base amacron <anchor 238 0> mark @POS_3_0_MARK_0 <anchor 355 695> mark @POS_3_0_MARK_1;
	pos base aogonek <anchor 238 0> mark @POS_3_0_MARK_0 <anchor 326 496> mark @POS_3_0_MARK_1;
	pos base aring <anchor 238 0> mark @POS_3_0_MARK_0 <anchor 373 763> mark @POS_3_0_MARK_1;
	pos base atilde <anchor 238 0> mark @POS_3_0_MARK_0 <anchor 363 705> mark @POS_3_0_MARK_1;
	pos base ae <anchor 419 0> mark @POS_3_0_MARK_0 <anchor 507 496> mark @POS_3_0_MARK_1;
	pos base aeacute <anchor 419 0> mark @POS_3_0_MARK_0 <anchor 552 747> mark @POS_3_0_MARK_1;
	pos base c <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 329 496> mark @POS_3_0_MARK_1;
	pos base cacute <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 374 747> mark @POS_3_0_MARK_1;
	pos base ccaron <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 371 733> mark @POS_3_0_MARK_1;
	pos base ccedilla <anchor 196 -259> mark @POS_3_0_MARK_0 <anchor 329 496> mark @POS_3_0_MARK_1;
	pos base cdotaccent <anchor 241 0> mark @POS_3_0_MARK_0 <anchor 368 720> mark @POS_3_0_MARK_1;
	pos base d <anchor 266 0> mark @POS_3_0_MARK_0 <anchor 441 992> mark @POS_3_0_MARK_1;
	pos base dcaron <anchor 266 0> mark @POS_3_0_MARK_0 <anchor 441 992> mark @POS_3_0_MARK_1;
	pos base e <anchor 240 0> mark @POS_3_0_MARK_0 <anchor 328 496> mark @POS_3_0_MARK_1;
	pos base eacute <anchor 240 0> mark @POS_3_0_MARK_0 <anchor 373 747> mark @POS_3_0_MARK_1;
	pos base ebreve <anchor 240 0> mark @POS_3_0_MARK_0 <anchor 370 732> mark @POS_3_0_MARK_1;
	pos base ecaron <anchor 240 0> mark @POS_3_0_MARK_0 <anchor 370 733> mark @POS_3_0_MARK_1;
	pos base ecircumflex <anchor 240 0> mark @POS_3_0_MARK_0 <anchor 370 733> mark @POS_3_0_MARK_1;
	pos base edieresis <anchor 240 0> mark @POS_3_0_MARK_0 <anchor 367 720> mark @POS_3_0_MARK_1;
	pos base edotaccent <anchor 240 0> mark @POS_3_0_MARK_0 <anchor 367 720> mark @POS_3_0_MARK_1;
	pos base egrave <anchor 240 0> mark @POS_3_0_MARK_0 <anchor 373 747> mark @POS_3_0_MARK_1;
	pos base emacron <anchor 240 0> mark @POS_3_0_MARK_0 <anchor 357 695> mark @POS_3_0_MARK_1;
	pos base eogonek <anchor 240 0> mark @POS_3_0_MARK_0 <anchor 328 496> mark @POS_3_0_MARK_1;
	pos base uni1EBD <anchor 240 0> mark @POS_3_0_MARK_0 <anchor 365 705> mark @POS_3_0_MARK_1;
	pos base g <anchor 167 -310> mark @POS_3_0_MARK_0 <anchor 300 496> mark @POS_3_0_MARK_1;
	pos base gbreve <anchor 167 -310> mark @POS_3_0_MARK_0 <anchor 342 732> mark @POS_3_0_MARK_1;
	pos base uni0123 <anchor 167 -310> mark @POS_3_0_MARK_0 <anchor 351 783> mark @POS_3_0_MARK_1;
	pos base gdotaccent <anchor 167 -310> mark @POS_3_0_MARK_0 <anchor 339 720> mark @POS_3_0_MARK_1;
	pos base i <anchor 77 0> mark @POS_3_0_MARK_0;
	pos base dotlessi <anchor 68 0> mark @POS_3_0_MARK_0 <anchor 156 496> mark @POS_3_0_MARK_1;
	pos base iacute <anchor 68 0> mark @POS_3_0_MARK_0 <anchor 201 747> mark @POS_3_0_MARK_1;
	pos base ibreve <anchor 68 0> mark @POS_3_0_MARK_0 <anchor 198 732> mark @POS_3_0_MARK_1;
	pos base icircumflex <anchor 68 0> mark @POS_3_0_MARK_0 <anchor 198 733> mark @POS_3_0_MARK_1;
	pos base idieresis <anchor 68 0> mark @POS_3_0_MARK_0 <anchor 195 720> mark @POS_3_0_MARK_1;
	pos base i.loclTRK <anchor 68 0> mark @POS_3_0_MARK_0 <anchor 195 720> mark @POS_3_0_MARK_1;
	pos base igrave <anchor 68 0> mark @POS_3_0_MARK_0 <anchor 201 747> mark @POS_3_0_MARK_1;
	pos base imacron <anchor 68 0> mark @POS_3_0_MARK_0 <anchor 185 695> mark @POS_3_0_MARK_1;
	pos base iogonek <anchor 68 0> mark @POS_3_0_MARK_0 <anchor 195 720> mark @POS_3_0_MARK_1;
	pos base itilde <anchor 68 0> mark @POS_3_0_MARK_0 <anchor 193 705> mark @POS_3_0_MARK_1;
	pos base ij <anchor 77 0> mark @POS_3_0_MARK_0;
	pos base uni0237 <anchor 23 -310> mark @POS_3_0_MARK_0 <anchor 165 496> mark @POS_3_0_MARK_1;
	pos base uni006A0301 <anchor 23 -310> mark @POS_3_0_MARK_0 <anchor 210 747> mark @POS_3_0_MARK_1;
	pos base k <anchor 212 0> mark @POS_3_0_MARK_0 <anchor 387 992> mark @POS_3_0_MARK_1;
	pos base uni0137 <anchor 170 -238> mark @POS_3_0_MARK_0 <anchor 387 992> mark @POS_3_0_MARK_1;
	pos base l <anchor 68 0> mark @POS_3_0_MARK_0 <anchor 190 700> mark @POS_3_0_MARK_1;
	pos base lacute <anchor 68 0> mark @POS_3_0_MARK_0 <anchor 231 931> mark @POS_3_0_MARK_1;
	pos base lcaron <anchor 68 0> mark @POS_3_0_MARK_0 <anchor 190 700> mark @POS_3_0_MARK_1;
	pos base uni013C <anchor 26 -238> mark @POS_3_0_MARK_0 <anchor 190 700> mark @POS_3_0_MARK_1;
	pos base n <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 331 496> mark @POS_3_0_MARK_1;
	pos base nacute <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 376 747> mark @POS_3_0_MARK_1;
	pos base ncaron <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 373 733> mark @POS_3_0_MARK_1;
	pos base uni0146 <anchor 201 -238> mark @POS_3_0_MARK_0 <anchor 331 496> mark @POS_3_0_MARK_1;
	pos base ntilde <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 368 705> mark @POS_3_0_MARK_1;
	pos base eng <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 331 496> mark @POS_3_0_MARK_1;
	pos base o <anchor 253 0> mark @POS_3_0_MARK_0 <anchor 341 496> mark @POS_3_0_MARK_1;
	pos base oacute <anchor 253 0> mark @POS_3_0_MARK_0 <anchor 386 747> mark @POS_3_0_MARK_1;
	pos base obreve <anchor 253 0> mark @POS_3_0_MARK_0 <anchor 383 732> mark @POS_3_0_MARK_1;
	pos base ocircumflex <anchor 253 0> mark @POS_3_0_MARK_0 <anchor 383 733> mark @POS_3_0_MARK_1;
	pos base odieresis <anchor 253 0> mark @POS_3_0_MARK_0 <anchor 380 720> mark @POS_3_0_MARK_1;
	pos base ograve <anchor 253 0> mark @POS_3_0_MARK_0 <anchor 386 747> mark @POS_3_0_MARK_1;
	pos base ohungarumlaut <anchor 253 0> mark @POS_3_0_MARK_0 <anchor 376 698> mark @POS_3_0_MARK_1;
	pos base omacron <anchor 253 0> mark @POS_3_0_MARK_0 <anchor 370 695> mark @POS_3_0_MARK_1;
	pos base otilde <anchor 253 0> mark @POS_3_0_MARK_0 <anchor 378 705> mark @POS_3_0_MARK_1;
	pos base oe <anchor 448 0> mark @POS_3_0_MARK_0 <anchor 536 496> mark @POS_3_0_MARK_1;
	pos base r <anchor 71 0> mark @POS_3_0_MARK_0 <anchor 229 496> mark @POS_3_0_MARK_1;
	pos base racute <anchor 71 0> mark @POS_3_0_MARK_0 <anchor 274 747> mark @POS_3_0_MARK_1;
	pos base rcaron <anchor 71 0> mark @POS_3_0_MARK_0 <anchor 271 733> mark @POS_3_0_MARK_1;
	pos base uni0157 <anchor 29 -238> mark @POS_3_0_MARK_0 <anchor 229 496> mark @POS_3_0_MARK_1;
	pos base s <anchor 216 0> mark @POS_3_0_MARK_0 <anchor 304 496> mark @POS_3_0_MARK_1;
	pos base sacute <anchor 216 0> mark @POS_3_0_MARK_0 <anchor 349 747> mark @POS_3_0_MARK_1;
	pos base scaron <anchor 216 0> mark @POS_3_0_MARK_0 <anchor 346 733> mark @POS_3_0_MARK_1;
	pos base scedilla <anchor 171 -259> mark @POS_3_0_MARK_0 <anchor 304 496> mark @POS_3_0_MARK_1;
	pos base uni0219 <anchor 174 -238> mark @POS_3_0_MARK_0 <anchor 304 496> mark @POS_3_0_MARK_1;
	pos base t <anchor 160 0> mark @POS_3_0_MARK_0 <anchor 229 496> mark @POS_3_0_MARK_1;
	pos base tcaron <anchor 160 0> mark @POS_3_0_MARK_0 <anchor 229 496> mark @POS_3_0_MARK_1;
	pos base uni0163 <anchor 115 -259> mark @POS_3_0_MARK_0 <anchor 229 496> mark @POS_3_0_MARK_1;
	pos base uni021B <anchor 118 -238> mark @POS_3_0_MARK_0 <anchor 229 496> mark @POS_3_0_MARK_1;
	pos base u <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 331 496> mark @POS_3_0_MARK_1;
	pos base uacute <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 376 747> mark @POS_3_0_MARK_1;
	pos base ubreve <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 373 732> mark @POS_3_0_MARK_1;
	pos base ucircumflex <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 373 733> mark @POS_3_0_MARK_1;
	pos base udieresis <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 370 720> mark @POS_3_0_MARK_1;
	pos base ugrave <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 376 747> mark @POS_3_0_MARK_1;
	pos base uhungarumlaut <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 366 698> mark @POS_3_0_MARK_1;
	pos base umacron <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 360 695> mark @POS_3_0_MARK_1;
	pos base uogonek <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 331 496> mark @POS_3_0_MARK_1;
	pos base uring <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 378 763> mark @POS_3_0_MARK_1;
	pos base utilde <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 368 705> mark @POS_3_0_MARK_1;
	pos base w <anchor 329 0> mark @POS_3_0_MARK_0 <anchor 417 496> mark @POS_3_0_MARK_1;
	pos base wacute <anchor 329 0> mark @POS_3_0_MARK_0 <anchor 462 747> mark @POS_3_0_MARK_1;
	pos base wcircumflex <anchor 329 0> mark @POS_3_0_MARK_0 <anchor 459 733> mark @POS_3_0_MARK_1;
	pos base wdieresis <anchor 329 0> mark @POS_3_0_MARK_0 <anchor 456 720> mark @POS_3_0_MARK_1;
	pos base wgrave <anchor 329 0> mark @POS_3_0_MARK_0 <anchor 462 747> mark @POS_3_0_MARK_1;
	pos base y <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 322 496> mark @POS_3_0_MARK_1;
	pos base yacute <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 367 747> mark @POS_3_0_MARK_1;
	pos base ycircumflex <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 364 733> mark @POS_3_0_MARK_1;
	pos base ydieresis <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 361 720> mark @POS_3_0_MARK_1;
	pos base ygrave <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 367 747> mark @POS_3_0_MARK_1;
	pos base uni1EF9 <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 359 705> mark @POS_3_0_MARK_1;
	pos base z <anchor 193 0> mark @POS_3_0_MARK_0 <anchor 281 496> mark @POS_3_0_MARK_1;
	pos base zacute <anchor 193 0> mark @POS_3_0_MARK_0 <anchor 326 747> mark @POS_3_0_MARK_1;
	pos base zcaron <anchor 193 0> mark @POS_3_0_MARK_0 <anchor 323 733> mark @POS_3_0_MARK_1;
	pos base zdotaccent <anchor 193 0> mark @POS_3_0_MARK_0 <anchor 320 720> mark @POS_3_0_MARK_1;
} POS_3;
lookup POS_4 {
	markClass uni0328 <anchor 147 0> @POS_4_0_MARK_0;
	markClass uni0328.case <anchor 147 0> @POS_4_0_MARK_0;
	pos base A <anchor 590 0> mark @POS_4_0_MARK_0;
	pos base Aacute <anchor 590 0> mark @POS_4_0_MARK_0;
	pos base Abreve <anchor 590 0> mark @POS_4_0_MARK_0;
	pos base uni01CD <anchor 590 0> mark @POS_4_0_MARK_0;
	pos base Acircumflex <anchor 590 0> mark @POS_4_0_MARK_0;
	pos base Adieresis <anchor 590 0> mark @POS_4_0_MARK_0;
	pos base Agrave <anchor 590 0> mark @POS_4_0_MARK_0;
	pos base Amacron <anchor 590 0> mark @POS_4_0_MARK_0;
	pos base Aogonek <anchor 590 0> mark @POS_4_0_MARK_0;
	pos base Aring <anchor 590 0> mark @POS_4_0_MARK_0;
	pos base Atilde <anchor 590 0> mark @POS_4_0_MARK_0;
	pos base E <anchor 435 0> mark @POS_4_0_MARK_0;
	pos base Eacute <anchor 435 0> mark @POS_4_0_MARK_0;
	pos base Ebreve <anchor 435 0> mark @POS_4_0_MARK_0;
	pos base Ecaron <anchor 435 0> mark @POS_4_0_MARK_0;
	pos base Ecircumflex <anchor 435 0> mark @POS_4_0_MARK_0;
	pos base Edieresis <anchor 435 0> mark @POS_4_0_MARK_0;
	pos base Edotaccent <anchor 435 0> mark @POS_4_0_MARK_0;
	pos base Egrave <anchor 435 0> mark @POS_4_0_MARK_0;
	pos base Emacron <anchor 435 0> mark @POS_4_0_MARK_0;
	pos base Eogonek <anchor 435 0> mark @POS_4_0_MARK_0;
	pos base uni1EBC <anchor 435 0> mark @POS_4_0_MARK_0;
	pos base I <anchor 115 0> mark @POS_4_0_MARK_0;
	pos base IJ <anchor 115 0> mark @POS_4_0_MARK_0;
	pos base Iacute <anchor 115 0> mark @POS_4_0_MARK_0;
	pos base Ibreve <anchor 115 0> mark @POS_4_0_MARK_0;
	pos base Icircumflex <anchor 115 0> mark @POS_4_0_MARK_0;
	pos base Idieresis <anchor 115 0> mark @POS_4_0_MARK_0;
	pos base Idotaccent <anchor 115 0> mark @POS_4_0_MARK_0;
	pos base Igrave <anchor 115 0> mark @POS_4_0_MARK_0;
	pos base Imacron <anchor 115 0> mark @POS_4_0_MARK_0;
	pos base Iogonek <anchor 115 0> mark @POS_4_0_MARK_0;
	pos base Itilde <anchor 115 0> mark @POS_4_0_MARK_0;
	pos base K <anchor 115 0> mark @POS_4_0_MARK_0;
	pos base uni0136 <anchor 115 0> mark @POS_4_0_MARK_0;
	pos base O <anchor 427 10> mark @POS_4_0_MARK_0;
	pos base Oacute <anchor 427 10> mark @POS_4_0_MARK_0;
	pos base Obreve <anchor 427 10> mark @POS_4_0_MARK_0;
	pos base Ocircumflex <anchor 427 10> mark @POS_4_0_MARK_0;
	pos base Odieresis <anchor 427 10> mark @POS_4_0_MARK_0;
	pos base Ograve <anchor 427 10> mark @POS_4_0_MARK_0;
	pos base Ohungarumlaut <anchor 427 10> mark @POS_4_0_MARK_0;
	pos base Omacron <anchor 427 10> mark @POS_4_0_MARK_0;
	pos base Otilde <anchor 427 10> mark @POS_4_0_MARK_0;
	pos base U <anchor 401 10> mark @POS_4_0_MARK_0;
	pos base Uacute <anchor 401 10> mark @POS_4_0_MARK_0;
	pos base Ubreve <anchor 401 10> mark @POS_4_0_MARK_0;
	pos base Ucircumflex <anchor 401 10> mark @POS_4_0_MARK_0;
	pos base Udieresis <anchor 401 10> mark @POS_4_0_MARK_0;
	pos base Ugrave <anchor 401 10> mark @POS_4_0_MARK_0;
	pos base Uhungarumlaut <anchor 401 10> mark @POS_4_0_MARK_0;
	pos base Umacron <anchor 401 10> mark @POS_4_0_MARK_0;
	pos base Uogonek <anchor 401 10> mark @POS_4_0_MARK_0;
	pos base Uring <anchor 401 10> mark @POS_4_0_MARK_0;
	pos base Utilde <anchor 401 10> mark @POS_4_0_MARK_0;
	pos base a <anchor 492 0> mark @POS_4_0_MARK_0;
	pos base aacute <anchor 492 0> mark @POS_4_0_MARK_0;
	pos base abreve <anchor 492 0> mark @POS_4_0_MARK_0;
	pos base uni01CE <anchor 492 0> mark @POS_4_0_MARK_0;
	pos base acircumflex <anchor 492 0> mark @POS_4_0_MARK_0;
	pos base adieresis <anchor 492 0> mark @POS_4_0_MARK_0;
	pos base agrave <anchor 492 0> mark @POS_4_0_MARK_0;
	pos base amacron <anchor 492 0> mark @POS_4_0_MARK_0;
	pos base aogonek <anchor 492 0> mark @POS_4_0_MARK_0;
	pos base aring <anchor 492 0> mark @POS_4_0_MARK_0;
	pos base atilde <anchor 492 0> mark @POS_4_0_MARK_0;
	pos base e <anchor 355 10> mark @POS_4_0_MARK_0;
	pos base eacute <anchor 355 10> mark @POS_4_0_MARK_0;
	pos base ebreve <anchor 355 10> mark @POS_4_0_MARK_0;
	pos base ecaron <anchor 355 10> mark @POS_4_0_MARK_0;
	pos base ecircumflex <anchor 355 10> mark @POS_4_0_MARK_0;
	pos base edieresis <anchor 355 10> mark @POS_4_0_MARK_0;
	pos base edotaccent <anchor 355 10> mark @POS_4_0_MARK_0;
	pos base egrave <anchor 355 10> mark @POS_4_0_MARK_0;
	pos base emacron <anchor 355 10> mark @POS_4_0_MARK_0;
	pos base eogonek <anchor 355 10> mark @POS_4_0_MARK_0;
	pos base uni1EBD <anchor 355 10> mark @POS_4_0_MARK_0;
	pos base dotlessi <anchor 110 0> mark @POS_4_0_MARK_0;
	pos base iacute <anchor 110 0> mark @POS_4_0_MARK_0;
	pos base ibreve <anchor 110 0> mark @POS_4_0_MARK_0;
	pos base icircumflex <anchor 110 0> mark @POS_4_0_MARK_0;
	pos base idieresis <anchor 110 0> mark @POS_4_0_MARK_0;
	pos base i.loclTRK <anchor 110 0> mark @POS_4_0_MARK_0;
	pos base igrave <anchor 110 0> mark @POS_4_0_MARK_0;
	pos base imacron <anchor 110 0> mark @POS_4_0_MARK_0;
	pos base iogonek <anchor 110 0> mark @POS_4_0_MARK_0;
	pos base itilde <anchor 110 0> mark @POS_4_0_MARK_0;
	pos base o <anchor 367 10> mark @POS_4_0_MARK_0;
	pos base oacute <anchor 367 10> mark @POS_4_0_MARK_0;
	pos base obreve <anchor 367 10> mark @POS_4_0_MARK_0;
	pos base ocircumflex <anchor 367 10> mark @POS_4_0_MARK_0;
	pos base odieresis <anchor 367 10> mark @POS_4_0_MARK_0;
	pos base ograve <anchor 367 10> mark @POS_4_0_MARK_0;
	pos base ohungarumlaut <anchor 367 10> mark @POS_4_0_MARK_0;
	pos base omacron <anchor 367 10> mark @POS_4_0_MARK_0;
	pos base otilde <anchor 367 10> mark @POS_4_0_MARK_0;
	pos base u <anchor 460 0> mark @POS_4_0_MARK_0;
	pos base uacute <anchor 460 0> mark @POS_4_0_MARK_0;
	pos base ubreve <anchor 460 0> mark @POS_4_0_MARK_0;
	pos base ucircumflex <anchor 460 0> mark @POS_4_0_MARK_0;
	pos base udieresis <anchor 460 0> mark @POS_4_0_MARK_0;
	pos base ugrave <anchor 460 0> mark @POS_4_0_MARK_0;
	pos base uhungarumlaut <anchor 460 0> mark @POS_4_0_MARK_0;
	pos base umacron <anchor 460 0> mark @POS_4_0_MARK_0;
	pos base uogonek <anchor 460 0> mark @POS_4_0_MARK_0;
	pos base uring <anchor 460 0> mark @POS_4_0_MARK_0;
	pos base utilde <anchor 460 0> mark @POS_4_0_MARK_0;
} POS_4;
lookup POS_5 {
	markClass uni030C.alt <anchor 132 992> @POS_5_0_MARK_0;
	markClass uni030C.alt.case <anchor 85 700> @POS_5_0_MARK_0;
	pos base L <anchor 345 700> mark @POS_5_0_MARK_0;
	pos base Lacute <anchor 345 700> mark @POS_5_0_MARK_0;
	pos base Lcaron <anchor 345 700> mark @POS_5_0_MARK_0;
	pos base uni013B <anchor 345 700> mark @POS_5_0_MARK_0;
	pos base O <anchor 853 700> mark @POS_5_0_MARK_0;
	pos base Oacute <anchor 853 700> mark @POS_5_0_MARK_0;
	pos base Obreve <anchor 853 700> mark @POS_5_0_MARK_0;
	pos base Ocircumflex <anchor 853 700> mark @POS_5_0_MARK_0;
	pos base Odieresis <anchor 853 700> mark @POS_5_0_MARK_0;
	pos base Ograve <anchor 853 700> mark @POS_5_0_MARK_0;
	pos base Ohungarumlaut <anchor 853 700> mark @POS_5_0_MARK_0;
	pos base Omacron <anchor 853 700> mark @POS_5_0_MARK_0;
	pos base Otilde <anchor 853 700> mark @POS_5_0_MARK_0;
	pos base U <anchor 727 700> mark @POS_5_0_MARK_0;
	pos base Uacute <anchor 727 700> mark @POS_5_0_MARK_0;
	pos base Ubreve <anchor 727 700> mark @POS_5_0_MARK_0;
	pos base Ucircumflex <anchor 727 700> mark @POS_5_0_MARK_0;
	pos base Udieresis <anchor 727 700> mark @POS_5_0_MARK_0;
	pos base Ugrave <anchor 727 700> mark @POS_5_0_MARK_0;
	pos base Uhungarumlaut <anchor 727 700> mark @POS_5_0_MARK_0;
	pos base Umacron <anchor 727 700> mark @POS_5_0_MARK_0;
	pos base Uogonek <anchor 727 700> mark @POS_5_0_MARK_0;
	pos base Uring <anchor 727 700> mark @POS_5_0_MARK_0;
	pos base Utilde <anchor 727 700> mark @POS_5_0_MARK_0;
	pos base d <anchor 731 992> mark @POS_5_0_MARK_0;
	pos base dcaron <anchor 731 992> mark @POS_5_0_MARK_0;
	pos base l <anchor 334 992> mark @POS_5_0_MARK_0;
	pos base lacute <anchor 334 992> mark @POS_5_0_MARK_0;
	pos base lcaron <anchor 334 992> mark @POS_5_0_MARK_0;
	pos base uni013C <anchor 334 992> mark @POS_5_0_MARK_0;
	pos base o <anchor 617 496> mark @POS_5_0_MARK_0;
	pos base oacute <anchor 617 496> mark @POS_5_0_MARK_0;
	pos base obreve <anchor 617 496> mark @POS_5_0_MARK_0;
	pos base ocircumflex <anchor 617 496> mark @POS_5_0_MARK_0;
	pos base odieresis <anchor 617 496> mark @POS_5_0_MARK_0;
	pos base ograve <anchor 617 496> mark @POS_5_0_MARK_0;
	pos base ohungarumlaut <anchor 617 496> mark @POS_5_0_MARK_0;
	pos base omacron <anchor 617 496> mark @POS_5_0_MARK_0;
	pos base otilde <anchor 617 496> mark @POS_5_0_MARK_0;
	pos base t <anchor 349 992> mark @POS_5_0_MARK_0;
	pos base tcaron <anchor 349 992> mark @POS_5_0_MARK_0;
	pos base uni0163 <anchor 349 992> mark @POS_5_0_MARK_0;
	pos base uni021B <anchor 349 992> mark @POS_5_0_MARK_0;
	pos base u <anchor 597 496> mark @POS_5_0_MARK_0;
	pos base uacute <anchor 597 496> mark @POS_5_0_MARK_0;
	pos base ubreve <anchor 597 496> mark @POS_5_0_MARK_0;
	pos base ucircumflex <anchor 597 496> mark @POS_5_0_MARK_0;
	pos base udieresis <anchor 597 496> mark @POS_5_0_MARK_0;
	pos base ugrave <anchor 597 496> mark @POS_5_0_MARK_0;
	pos base uhungarumlaut <anchor 597 496> mark @POS_5_0_MARK_0;
	pos base umacron <anchor 597 496> mark @POS_5_0_MARK_0;
	pos base uogonek <anchor 597 496> mark @POS_5_0_MARK_0;
	pos base uring <anchor 597 496> mark @POS_5_0_MARK_0;
	pos base utilde <anchor 597 496> mark @POS_5_0_MARK_0;
} POS_5;
script latn;
language dflt;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language AZE;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language CAT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language CRT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language KAZ;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language MOL;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language NLD;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language ROM;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language TAT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language TRK;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
";
tag = mark;
},
{
code = "script DFLT;
language dflt;
lookup POS_6 {
	lookupflag UseMarkFilteringSet [uni0326 uni0327 uni0327.case];
	markClass uni0326 <anchor 5 0> @POS_6_0_MARK_0;
	markClass uni0327 <anchor 30 0> @POS_6_0_MARK_0;
	markClass uni0327.case <anchor 26 0> @POS_6_0_MARK_0;
	pos mark uni0326 <anchor -37 -238> mark @POS_6_0_MARK_0;
	pos mark uni0327 <anchor -15 -259> mark @POS_6_0_MARK_0;
	pos mark uni0327.case <anchor -19 -259> mark @POS_6_0_MARK_0;
} POS_6;
lookup POS_7 {
	lookupflag UseMarkFilteringSet [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312 uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0308.narrow];
	markClass uni0308 <anchor 192 496> @POS_7_0_MARK_0;
	markClass uni0307 <anchor 103 496> @POS_7_0_MARK_0;
	markClass gravecomb <anchor 148 496> @POS_7_0_MARK_0;
	markClass acutecomb <anchor 149 496> @POS_7_0_MARK_0;
	markClass uni030B <anchor 160 496> @POS_7_0_MARK_0;
	markClass uni0302 <anchor 181 496> @POS_7_0_MARK_0;
	markClass uni030C <anchor 181 496> @POS_7_0_MARK_0;
	markClass uni0306 <anchor 185 496> @POS_7_0_MARK_0;
	markClass uni030A <anchor 151 496> @POS_7_0_MARK_0;
	markClass tildecomb <anchor 195 496> @POS_7_0_MARK_0;
	markClass uni0304 <anchor 225 496> @POS_7_0_MARK_0;
	markClass uni0312 <anchor 95 496> @POS_7_0_MARK_0;
	markClass uni0308.case <anchor 228 700> @POS_7_0_MARK_0;
	markClass uni0307.case <anchor 139 700> @POS_7_0_MARK_0;
	markClass gravecomb.case <anchor 185 700> @POS_7_0_MARK_0;
	markClass acutecomb.case <anchor 185 700> @POS_7_0_MARK_0;
	markClass uni030B.case <anchor 226 700> @POS_7_0_MARK_0;
	markClass uni0302.case <anchor 216 700> @POS_7_0_MARK_0;
	markClass uni030C.case <anchor 218 700> @POS_7_0_MARK_0;
	markClass uni0306.case <anchor 221 700> @POS_7_0_MARK_0;
	markClass uni030A.case <anchor 186 700> @POS_7_0_MARK_0;
	markClass tildecomb.case <anchor 231 700> @POS_7_0_MARK_0;
	markClass uni0304.case <anchor 255 700> @POS_7_0_MARK_0;
	markClass uni0308.narrow <anchor 192 496> @POS_7_0_MARK_0;
	pos mark uni0308 <anchor 231 720> mark @POS_7_0_MARK_0;
	pos mark uni0307 <anchor 142 720> mark @POS_7_0_MARK_0;
	pos mark gravecomb <anchor 193 747> mark @POS_7_0_MARK_0;
	pos mark acutecomb <anchor 194 747> mark @POS_7_0_MARK_0;
	pos mark uni030B <anchor 195 698> mark @POS_7_0_MARK_0;
	pos mark uni0302 <anchor 223 733> mark @POS_7_0_MARK_0;
	pos mark uni030C <anchor 223 733> mark @POS_7_0_MARK_0;
	pos mark uni0306 <anchor 227 732> mark @POS_7_0_MARK_0;
	pos mark uni030A <anchor 198 763> mark @POS_7_0_MARK_0;
	pos mark tildecomb <anchor 232 705> mark @POS_7_0_MARK_0;
	pos mark uni0304 <anchor 254 695> mark @POS_7_0_MARK_0;
	pos mark uni0312 <anchor 146 783> mark @POS_7_0_MARK_0;
	pos mark uni0308.case <anchor 261 889> mark @POS_7_0_MARK_0;
	pos mark uni0307.case <anchor 172 889> mark @POS_7_0_MARK_0;
	pos mark gravecomb.case <anchor 226 931> mark @POS_7_0_MARK_0;
	pos mark acutecomb.case <anchor 226 931> mark @POS_7_0_MARK_0;
	pos mark uni030B.case <anchor 261 902> mark @POS_7_0_MARK_0;
	pos mark uni0302.case <anchor 252 902> mark @POS_7_0_MARK_0;
	pos mark uni030C.case <anchor 253 901> mark @POS_7_0_MARK_0;
	pos mark uni0306.case <anchor 257 901> mark @POS_7_0_MARK_0;
	pos mark uni030A.case <anchor 233 967> mark @POS_7_0_MARK_0;
	pos mark tildecomb.case <anchor 259 859> mark @POS_7_0_MARK_0;
	pos mark uni0304.case <anchor 283 859> mark @POS_7_0_MARK_0;
	pos mark uni0308.narrow <anchor 231 720> mark @POS_7_0_MARK_0;
} POS_7;
script latn;
language dflt;
lookup POS_6;
lookup POS_7;
language AZE;
lookup POS_6;
lookup POS_7;
language CAT;
lookup POS_6;
lookup POS_7;
language CRT;
lookup POS_6;
lookup POS_7;
language KAZ;
lookup POS_6;
lookup POS_7;
language MOL;
lookup POS_6;
lookup POS_7;
language NLD;
lookup POS_6;
lookup POS_7;
language ROM;
lookup POS_6;
lookup POS_7;
language TAT;
lookup POS_6;
lookup POS_7;
language TRK;
lookup POS_6;
lookup POS_7;
";
tag = mkmk;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 992;
},
{
name = typoDescender;
value = -310;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 992;
},
{
name = winDescent;
value = 310;
},
{
name = hheaAscender;
value = 992;
},
{
name = hheaDescender;
value = -310;
},
{
name = strikeoutPosition;
value = 297;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
200
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 1
INSTCTRL[ ]	/* SetInstrExecControl */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
WCVTF[ ]	/* WriteCVTInFUnits */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 6 values pushed */
0 0 42 0 4 0
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
NPUSHB[ ]	/* 10 values pushed */
55 4 47 4 31 8 21 5 4 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
NPUSHB[ ]	/* 10 values pushed */
59 2 51 2 39 6 26 3 4 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 11
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 6 values pushed */
3584 3072 2048 1408 4 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 15
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 6 values pushed */
64 64 64 64 4 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
36 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
40 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 1 value pushed */
2048
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
39 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 3 values pushed */
2176 1 1088
GETINFO[ ]	/* GetInfo */
MUL[ ]	/* Multiply */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
57 2 49 2 33 6 23 3 4 14
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 1 value pushed */
511
SCANCTRL[ ]	/* ScanConversionControl */
PUSHB[ ]	/* 1 value pushed */
4
SCANTYPE[ ]	/* ScanType */
PUSHB[ ]	/* 2 values pushed */
2 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
5 100 6 0
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */
0
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
RCVT[ ]	/* ReadCVT */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
14
LTEQ[ ]	/* LessThenOrEqual */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
6
GTEQ[ ]	/* GreaterThanOrEqual */
AND[ ]	/* LogicalAnd */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
52
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
40
EIF[ ]	/* EndIf */
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
2
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 4 values pushed */
3 20 21 0
WS[ ]	/* WriteStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
19
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
2 20
RS[ ]	/* ReadStore */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
37 3
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
EQ[ ]	/* Equal */
JROT[ ]	/* JumpRelativeOnTrue */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
4
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 3 values pushed */
2 2 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
33
NEG[ ]	/* Negate */
JMPR[ ]	/* Jump */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 3 values pushed */
14 21 1
WS[ ]	/* WriteStore */
JMPR[ ]	/* Jump */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
19 1 19
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 3 values pushed */
22 1 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
4
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
21
RS[ ]	/* ReadStore */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
AND[ ]	/* LogicalAnd */
PUSHB[ ]	/* 3 values pushed */
40 1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
EIF[ ]	/* EndIf */
GT[ ]	/* GreaterThan */
OR[ ]	/* LogicalOr */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
ROLL[ ]	/* RollTopThreeStack */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
80
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
56
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
56
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
48
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
54
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
54
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
30
MPPEM[ ]	/* MeasurePixelPerEm */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 1 value pushed */
4096
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1280
DIV[ ]	/* Divide */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ABS[ ]	/* Absolute */
SUB[ ]	/* Subtract */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
7
RS[ ]	/* ReadStore */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
7
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
6
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 2 values pushed */
7 98
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
5
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
48 5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
ADD[ ]	/* Add */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
SUB[ ]	/* Subtract */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
EIF[ ]	/* EndIf */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 3 values pushed */
0 2 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
7
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
9 14 0
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
11
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
12
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
13
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
36
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
14
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 4 values pushed */
13 12 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
15
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 2
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
100
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
16
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
17
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHW[ ]	/* 1 value pushed */
1024
MUL[ ]	/* Multiply */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
18
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
13
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
19
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
MPPEM[ ]	/* MeasurePixelPerEm */
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
19
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 18
RS[ ]	/* ReadStore */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
18 18
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
17
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
15 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
16 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
0 0
SZP0[ ]	/* SetZonePointer0 */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
0
MIAP[0]	/* MoveIndirectAbsPt */
PUSHB[ ]	/* 3 values pushed */
1 1 1
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 8 values pushed */
24 24 1 0 17 0 19 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
20
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
27
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
28
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
29
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
30
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
31
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
43
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
6
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP1[ ]	/* DeltaExceptionP1 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
44
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
22
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP2[ ]	/* DeltaExceptionP2 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
38
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP3[ ]	/* DeltaExceptionP3 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 6 values pushed */
24 24 1 0 17 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
33
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
34
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
35
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
36
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
37
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
38
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
39
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
40
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
41
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
42
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
46
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
24
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
46
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
48
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
47
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
49
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
50
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
51
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
52
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
SHC[1]	/* ShiftContourByLastPt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
53
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 5 values pushed */
0 0 0 0 0
WCVTP[ ]	/* WriteCVTInPixels */
MIAP[0]	/* MoveIndirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
52 1
SZP2[ ]	/* SetZonePointer2 */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
54
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55
FDEF[ ]	/* FunctionDefinition */
MDAP[0]	/* MoveDirectAbsPt */
SLOOP[ ]	/* SetLoopVariable */
ALIGNRP[ ]	/* AlignRelativePt */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 0
SZPS[ ]	/* SetZonePointerS */
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
56 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
NEG[ ]	/* Negate */
ROLL[ ]	/* RollTopThreeStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
60
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
61
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
62
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
0
EQ[ ]	/* Equal */
IF[ ]	/* If */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
63
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
64
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
65
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
66
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
67
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
68
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
69
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
70
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
10 4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
71
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
72
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
73
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
74
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
75
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 1
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
PUSHB[ ]	/* 1 value pushed */
55
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
76
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
77
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
RCVT[ ]	/* ReadCVT */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
78
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
77
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
79
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
80
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
81
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
82
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
83
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
84
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
85
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
86
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
87
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
88
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
89
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
90
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
91
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
92
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
93
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
94
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
95
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
96
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
97
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
98
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
99
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
100
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
101
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
102
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
103
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
104
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
105
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
106
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
107
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
108
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
109
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
110
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
111
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
112
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
113
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
114
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
115
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
116
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
117
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
118
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
119
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
120
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
121
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
122
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
123
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
124
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
125
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
126
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
127
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
128
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
129
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
130
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
131
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
132
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
133
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
134
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
135
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
136
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
137
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
138
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
139
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
11 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
6
ELSE[ ]	/* Else */
PUSHB[ ]	/* 3 values pushed */
4 2 3
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
8
NEG[ ]	/* Negate */
PUSHB[ ]	/* 1 value pushed */
3
DEPTH[ ]	/* GetDepthStack */
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    24,
    24,
    24,
    24,
    712,
    0,
    \"-220\",
    712,
    0,
    \"-220\",
    87,
    87,
    72,
    72,
    700,
    0,
    700,
    496,
    0,
    \"-220\",
    712,
    \"-12\",
    720,
    508,
    \"-12\",
    \"-220\",
    66,
    66,
    57,
    57,
    353,
    0,
    358,
    \"-5\",
    66,
    66,
    57,
    57,
    700,
    347,
    705,
    342
)";
}
);
id = m01;
metricValues = (
{
pos = 992;
},
{
pos = 700;
},
{
pos = 496;
},
{
},
{
pos = -310;
},
{
pos = 10;
}
);
name = Italic;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,0,l),
(431,0,l),
(555,700,l),
(154,700,l)
);
},
{
closed = 1;
nodes = (
(110,57,l),
(214,643,l),
(475,643,l),
(371,57,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
4 1 1 0 2 3 1 2 103 0 3 0 0 3 87 0 3 3 0 95 0 0 3 0 79 0 0 7 6 5 4 0 3 0 3 17 5 6 23
CALL[ ]	/* CallFunction */";
};
width = 549;
}
);
note = .notdef;
},
{
glyphname = CR;
layers = (
{
layerId = m01;
width = 600;
}
);
note = CR;
unicode = 13;
},
{
glyphname = space;
layers = (
{
layerId = m01;
width = 286;
}
);
note = space;
unicode = 32;
},
{
glyphname = A;
kernLeft = A;
kernRight = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (288,0);
},
{
name = ogonek;
pos = (590,0);
},
{
name = top;
pos = (412,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(76,0,l),
(172,180,l),
(470,180,l),
(503,0,l),
(590,0,l),
(457,700,l),
(368,700,l),
(-14,0,l)
);
},
{
closed = 1;
nodes = (
(394,600,l),
(458,246,l),
(207,246,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
9 1 4 0 1 76 5 1 4 0 2 1 4 2 104 0 0 0 33 77 3 1 1 1 34 1 78 8 8 8 10 8 10 17 17 17 16 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = A;
unicode = 65;
},
{
glyphname = Aacute;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (288,0);
},
{
name = ogonek;
pos = (590,0);
},
{
name = top;
pos = (453,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (227,0);
ref = acutecomb.case;
}
);
width = 664;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Abreve;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (288,0);
},
{
name = ogonek;
pos = (590,0);
},
{
name = top;
pos = (448,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (191,0);
ref = uni0306.case;
}
);
width = 664;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = uni01CD;
layers = (
{
anchors = (
{
name = bottom;
pos = (288,0);
},
{
name = ogonek;
pos = (590,0);
},
{
name = top;
pos = (447,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (194,0);
ref = uni030C.case;
}
);
width = 664;
}
);
note = uni01CD;
unicode = 461;
},
{
glyphname = Acircumflex;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (288,0);
},
{
name = ogonek;
pos = (590,0);
},
{
name = top;
pos = (448,902);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (196,0);
ref = uni0302.case;
}
);
width = 664;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Adieresis;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (288,0);
},
{
name = ogonek;
pos = (590,0);
},
{
name = top;
pos = (445,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (184,0);
ref = uni0308.case;
}
);
width = 664;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Agrave;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (288,0);
},
{
name = ogonek;
pos = (590,0);
},
{
name = top;
pos = (453,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (227,0);
ref = gravecomb.case;
}
);
width = 664;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Amacron;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (288,0);
},
{
name = ogonek;
pos = (590,0);
},
{
name = top;
pos = (440,859);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (157,0);
ref = uni0304.case;
}
);
width = 664;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = Aogonek;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (288,0);
},
{
name = ogonek;
pos = (590,0);
},
{
name = top;
pos = (412,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(76,0,l),
(172,180,l),
(470,180,l),
(501,12,l),
(436,-17,o),
(379,-86,o),
(379,-127,qs),
(379,-164,o),
(437,-203,o),
(482,-203,qs),
(521,-203,o),
(560,-190,q),
(569,-134,l),
(533,-149,o),
(502,-149,qs),
(478,-149,o),
(449,-128,o),
(449,-109,qs),
(449,-63,o),
(527,-28,qs),
(590,0,l),
(457,700,l),
(368,700,l),
(-14,0,l)
);
},
{
closed = 1;
nodes = (
(394,600,l),
(458,246,l),
(207,246,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
25 1 5 0 19 1 4 3 10 1 1 4 3 76 2 1 4 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 5 0 3 4 5 3 104 0 0 0 33 77 0 4 4 34 77 0 1 1 2 97 0 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
6 1 5 0 3 4 5 3 104 0 1 0 2 1 2 101 0 0 0 33 77 0 4 4 34 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
24 24 24 26 24 26 17 22 35 38 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = Aring;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (288,0);
},
{
name = ogonek;
pos = (590,0);
},
{
name = top;
pos = (459,967);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (226,0);
ref = uni030A.case;
}
);
width = 664;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = Atilde;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (288,0);
},
{
name = ogonek;
pos = (590,0);
},
{
name = top;
pos = (440,859);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (181,0);
ref = tildecomb.case;
}
);
width = 664;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = AE;
kernLeft = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (415,0);
},
{
name = top;
pos = (719,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(78,0,l),
(197,159,l),
(465,159,l),
(437,0,l),
(810,0,l),
(822,67,l),
(534,67,l),
(578,320,l),
(837,320,l),
(848,386,l),
(589,386,l),
(633,633,l),
(922,633,l),
(934,700,l),
(509,700,l),
(-14,0,l)
);
},
{
closed = 1;
nodes = (
(549,631,l),
(477,226,l),
(246,226,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
17 1 2 1 1 76 0 2 0 3 8 2 3 103 9 1 8 0 6 4 8 6 103 0 1 1 0 95 0 0 0 33 77 0 4 4 5 95 7 1 5 5 34 5 78 16 16 16 18 16 18 17 17 17 17 17 17 17 16 10 8 30
CALL[ ]	/* CallFunction */";
};
width = 917;
}
);
note = AE;
unicode = 198;
},
{
glyphname = AEacute;
kernLeft = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (415,0);
},
{
name = top;
pos = (760,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = AE;
},
{
alignment = -1;
pos = (534,0);
ref = acutecomb.case;
}
);
width = 917;
}
);
note = AEacute;
unicode = 508;
},
{
glyphname = B;
kernRight = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(295,0,ls),
(374,0,o),
(493,57,o),
(556,160,o),
(556,225,qs),
(556,277,o),
(499,359,o),
(445,377,q),
(505,394,o),
(583,488,o),
(583,548,qs),
(583,616,o),
(489,700,o),
(396,700,qs),
(155,700,l),
(31,0,l)
);
},
{
closed = 1;
nodes = (
(128,70,l),
(175,339,l),
(327,339,ls),
(398,339,o),
(472,279,o),
(472,223,qs),
(472,149,o),
(374,70,o),
(282,70,qs)
);
},
{
closed = 1;
nodes = (
(187,406,l),
(226,630,l),
(374,630,ls),
(438,630,o),
(495,577,o),
(495,531,qs),
(495,472,o),
(409,406,o),
(338,406,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
7 1 2 5 1 76 7 1 5 0 2 3 5 2 103 0 4 4 0 95 0 0 0 33 77 6 1 3 3 1 95 0 1 1 34 1 78 25 25 16 16 25 33 25 32 31 29 16 24 16 23 37 43 32 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = B;
unicode = 66;
},
{
glyphname = C;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (317,0);
},
{
name = top;
pos = (441,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(458,-12,o),
(628,100,o),
(667,203,q),
(572,203,l),
(545,136,o),
(433,62,o),
(351,62,qs),
(255,62,o),
(147,174,o),
(147,275,qs),
(147,373,o),
(223,539,o),
(362,638,o),
(451,638,qs),
(533,638,o),
(621,562,o),
(623,494,q),
(718,494,l),
(715,597,o),
(582,712,o),
(463,712,qs),
(347,712,o),
(163,593,o),
(59,390,o),
(59,268,qs),
(59,195,o),
(116,68,o),
(241,-12,o),
(339,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 39 77 0 3 3 5 97 6 1 5 5 40 5 78 0 0 0 28 0 27 18 37 34 18 38 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 722;
}
);
note = C;
unicode = 67;
},
{
glyphname = Cacute;
kernLeft = C;
kernRight = Cacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (317,0);
},
{
name = top;
pos = (482,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (256,0);
ref = acutecomb.case;
}
);
width = 722;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = Ccaron;
kernLeft = C;
kernRight = Cacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (317,0);
},
{
name = top;
pos = (476,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (223,0);
ref = uni030C.case;
}
);
width = 722;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = Ccedilla;
kernLeft = C;
kernRight = Cacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (272,-259);
},
{
name = top;
pos = (441,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(310,-259,ls),
(369,-259,o),
(449,-194,o),
(449,-140,qs),
(449,-102,o),
(387,-62,o),
(335,-63,q),
(344,-12,l),
(461,-11,o),
(629,102,o),
(667,203,q),
(572,203,l),
(545,136,o),
(433,62,o),
(351,62,qs),
(255,62,o),
(147,174,o),
(147,275,qs),
(147,373,o),
(223,539,o),
(362,638,o),
(451,638,qs),
(533,638,o),
(621,562,o),
(623,494,q),
(718,494,l),
(715,597,o),
(582,712,o),
(463,712,qs),
(347,712,o),
(163,593,o),
(59,390,o),
(59,268,qs),
(59,164,o),
(171,6,o),
(288,-9,q),
(270,-113,l),
(319,-113,ls),
(380,-113,o),
(380,-149,qs),
(380,-177,o),
(340,-206,o),
(303,-206,qs),
(211,-206,l),
(202,-259,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
8 1 7 5 1 76 0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 99 0 4 4 2 97 0 2 2 39 77 0 5 5 7 97 0 7 7 40 7 78 44 42 17 18 18 37 34 18 39 35 32 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 722;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = Cdotaccent;
kernLeft = C;
kernRight = Cacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (317,0);
},
{
name = top;
pos = (474,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (302,0);
ref = uni0307.case;
}
);
width = 722;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = D;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (307,0);
},
{
name = top;
pos = (431,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(154,700,l),
(31,0,l),
(246,0,ls),
(364,0,o),
(559,95,o),
(676,283,o),
(676,417,qs),
(676,555,o),
(525,700,o),
(369,700,qs)
);
},
{
closed = 1;
nodes = (
(127,70,l),
(226,630,l),
(355,630,ls),
(478,630,o),
(589,521,o),
(589,411,qs),
(589,317,o),
(519,163,o),
(369,70,o),
(257,70,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 1 95 4 1 1 1 33 77 5 1 3 3 0 95 0 0 0 34 0 78 10 10 0 0 10 19 10 18 17 15 0 9 0 8 37 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = D;
unicode = 68;
},
{
glyphname = Dcaron;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (307,0);
},
{
name = top;
pos = (466,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = D;
},
{
alignment = -1;
pos = (213,0);
ref = uni030C.case;
}
);
width = 701;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = Dcroat;
kernRight = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,0,l),
(261,0,ls),
(391,0,o),
(489,53,qs),
(586,107,o),
(691,295,o),
(691,417,qs),
(691,555,o),
(540,700,o),
(384,700,qs),
(169,700,l),
(114,387,l),
(27,387,l),
(14,311,l),
(101,311,l)
);
},
{
closed = 1;
nodes = (
(143,70,l),
(185,311,l),
(386,311,l),
(399,387,l),
(198,387,l),
(241,630,l),
(370,630,ls),
(493,630,o),
(604,521,o),
(604,411,qs),
(604,308,o),
(565,231,qs),
(525,153,o),
(376,70,o),
(272,70,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
5 1 0 6 8 2 3 7 0 3 103 0 4 4 1 95 0 1 1 33 77 9 1 7 7 2 95 0 2 2 34 2 78 15 15 0 0 15 29 15 28 27 26 25 24 23 21 0 14 0 14 38 33 17 10 8 25
CALL[ ]	/* CallFunction */";
};
width = 716;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = Eth;
kernRight = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,0,l),
(261,0,ls),
(391,0,o),
(489,53,qs),
(586,107,o),
(691,295,o),
(691,417,qs),
(691,555,o),
(540,700,o),
(384,700,qs),
(169,700,l),
(114,387,l),
(27,387,l),
(14,311,l),
(101,311,l)
);
},
{
closed = 1;
nodes = (
(143,70,l),
(185,311,l),
(386,311,l),
(399,387,l),
(198,387,l),
(241,630,l),
(370,630,ls),
(493,630,o),
(604,521,o),
(604,411,qs),
(604,308,o),
(565,231,qs),
(525,153,o),
(376,70,o),
(272,70,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
5 1 0 6 8 2 3 7 0 3 103 0 4 4 1 95 0 1 1 33 77 9 1 7 7 2 95 0 2 2 34 2 78 15 15 0 0 15 29 15 28 27 26 25 24 23 21 0 14 0 14 38 33 17 10 8 25
CALL[ ]	/* CallFunction */";
};
width = 716;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = E;
kernRight = E;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (435,0);
},
{
name = top;
pos = (351,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(435,0,l),
(447,69,l),
(126,69,l),
(174,336,l),
(451,336,l),
(463,404,l),
(186,404,l),
(226,631,l),
(547,631,l),
(559,700,l),
(154,700,l),
(30,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 5 95 0 5 5 34 5 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 542;
}
);
note = E;
unicode = 69;
},
{
glyphname = Eacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (435,0);
},
{
name = top;
pos = (392,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (166,0);
ref = acutecomb.case;
}
);
width = 542;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ebreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (435,0);
},
{
name = top;
pos = (387,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (130,0);
ref = uni0306.case;
}
);
width = 542;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = Ecaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (435,0);
},
{
name = top;
pos = (386,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (133,0);
ref = uni030C.case;
}
);
width = 542;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = Ecircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (435,0);
},
{
name = top;
pos = (387,902);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (135,0);
ref = uni0302.case;
}
);
width = 542;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (435,0);
},
{
name = top;
pos = (384,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (123,0);
ref = uni0308.case;
}
);
width = 542;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Edotaccent;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (435,0);
},
{
name = top;
pos = (384,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (212,0);
ref = uni0307.case;
}
);
width = 542;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = Egrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (435,0);
},
{
name = top;
pos = (392,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (166,0);
ref = gravecomb.case;
}
);
width = 542;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Emacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (435,0);
},
{
name = top;
pos = (379,859);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (96,0);
ref = uni0304.case;
}
);
width = 542;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = Eogonek;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (435,0);
},
{
name = top;
pos = (351,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(322,0,l),
(269,-27,o),
(224,-90,o),
(224,-127,qs),
(224,-164,o),
(282,-203,o),
(327,-203,qs),
(366,-203,o),
(405,-190,q),
(414,-134,l),
(378,-149,o),
(347,-149,qs),
(323,-149,o),
(294,-128,o),
(294,-109,qs),
(294,-63,o),
(372,-28,qs),
(435,0,l),
(447,69,l),
(126,69,l),
(174,336,l),
(451,336,l),
(463,404,l),
(186,404,l),
(226,631,l),
(547,631,l),
(559,700,l),
(154,700,l),
(30,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
18 1 5 7 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 7 95 0 7 7 34 77 0 5 5 6 97 0 6 6 38 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 2 0 3 4 2 3 103 0 5 0 6 5 6 101 0 1 1 0 95 0 0 0 33 77 0 4 4 7 95 0 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
21 35 38 17 17 17 17 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 542;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = uni018E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(445,0,l),
(569,700,l),
(136,700,l),
(124,631,l),
(473,631,l),
(433,404,l),
(128,404,l),
(116,336,l),
(421,336,l),
(373,69,l),
(24,69,l),
(12,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 1 0 2 1 103 0 3 3 4 95 0 4 4 33 77 0 0 0 5 95 0 5 5 34 5 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni018E;
unicode = (398,477);
},
{
glyphname = uni1EBC;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (435,0);
},
{
name = top;
pos = (379,859);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (120,0);
ref = tildecomb.case;
}
);
width = 542;
}
);
note = uni1EBC;
unicode = 7868;
},
{
glyphname = uni018F;
kernLeft = uni018F;
kernRight = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,-12,o),
(630,107,o),
(732,311,o),
(732,434,qs),
(732,507,o),
(671,633,o),
(545,712,o),
(452,712,qs),
(342,712,o),
(144,594,o),
(91,479,q),
(187,479,l),
(220,552,o),
(358,636,o),
(440,636,qs),
(532,636,o),
(642,522,o),
(642,425,qs),
(642,399,o),
(638,375,q),
(72,375,l),
(53,308,o),
(53,250,qs),
(53,180,o),
(113,60,o),
(236,-12,o),
(325,-12,qs)
);
},
{
closed = 1;
nodes = (
(245,64,o),
(139,162,o),
(139,248,qs),
(139,272,o),
(144,304,q),
(629,304,l),
(615,242,o),
(539,133,o),
(416,64,o),
(336,64,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 2 1 0 1 2 0 128 0 0 0 5 6 0 5 103 0 1 1 3 97 0 3 3 39 77 8 1 6 6 4 97 7 1 4 4 40 4 78 27 27 0 0 27 36 27 35 31 30 0 26 0 25 34 18 36 21 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 756;
}
);
note = uni018F;
unicode = 399;
},
{
glyphname = F;
kernRight = F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(114,0,l),
(172,327,l),
(453,327,l),
(465,395,l),
(184,395,l),
(226,631,l),
(558,631,l),
(570,700,l),
(154,700,l),
(30,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 34 4 78 17 17 17 17 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 530;
}
);
note = F;
unicode = 70;
},
{
glyphname = G;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (337,0);
},
{
name = top;
pos = (461,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(421,-12,o),
(542,51,o),
(594,115,q),
(581,0,l),
(658,0,l),
(724,374,l),
(385,374,l),
(374,308,l),
(626,308,l),
(598,191,o),
(458,63,o),
(349,63,qs),
(256,63,o),
(149,182,o),
(149,284,qs),
(149,370,o),
(214,531,o),
(353,635,o),
(457,635,qs),
(540,635,o),
(633,562,o),
(636,498,q),
(733,498,l),
(728,598,o),
(585,712,o),
(466,712,qs),
(348,712,o),
(163,599,o),
(61,402,o),
(61,279,qs),
(61,205,o),
(119,72,o),
(241,-12,o),
(333,-12,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
30 1 3 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 1 2 5 2 1 5 128 0 5 0 4 3 5 4 103 0 2 2 0 97 0 0 0 39 77 0 3 3 6 97 8 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 1 2 5 2 1 5 128 0 5 0 4 3 5 4 103 0 2 2 0 97 0 0 0 39 77 0 6 6 34 77 0 3 3 7 97 8 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 0 32 17 17 18 37 34 18 38 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = G;
unicode = 71;
},
{
glyphname = Gbreve;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (337,0);
},
{
name = top;
pos = (497,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (240,0);
ref = uni0306.case;
}
);
width = 761;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = uni0122;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (295,-238);
},
{
name = top;
pos = (461,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (332,0);
ref = uni0326;
}
);
width = 761;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = Gdotaccent;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (337,0);
},
{
name = top;
pos = (494,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (322,0);
ref = uni0307.case;
}
);
width = 761;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = H;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(175,336,l),
(538,336,l),
(478,0,l),
(562,0,l),
(686,700,l),
(602,700,l),
(550,405,l),
(187,405,l),
(239,700,l),
(155,700,l),
(31,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 1 0 4 3 1 4 104 2 1 0 0 33 77 5 1 3 3 34 3 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = H;
unicode = 72;
},
{
glyphname = Hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(175,336,l),
(538,336,l),
(478,0,l),
(562,0,l),
(653,513,l),
(703,513,l),
(715,582,l),
(665,582,l),
(686,700,l),
(602,700,l),
(581,582,l),
(218,582,l),
(239,700,l),
(155,700,l),
(134,582,l),
(84,582,l),
(72,513,l),
(122,513,l),
(31,0,l)
);
},
{
closed = 1;
nodes = (
(206,513,l),
(569,513,l),
(550,405,l),
(187,405,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
5 3 2 1 10 6 2 0 11 1 0 104 12 1 11 0 8 7 11 8 103 4 1 2 2 33 77 9 1 7 7 34 7 78 20 20 20 23 20 23 22 21 19 18 17 17 17 17 17 17 17 17 16 13 8 31
CALL[ ]	/* CallFunction */";
};
width = 681;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = I;
layers = (
{
anchors = (
{
name = bottom;
pos = (73,0);
},
{
name = ogonek;
pos = (115,0);
},
{
name = top;
pos = (197,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(238,700,l),
(154,700,l),
(31,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 233;
}
);
note = I;
unicode = 73;
},
{
glyphname = IJ;
layers = (
{
anchors = (
{
name = bottom;
pos = (432,0);
},
{
name = ogonek;
pos = (115,0);
},
{
name = top;
pos = (680,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (233,0);
ref = J;
}
);
width = 719;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = Iacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (73,0);
},
{
name = ogonek;
pos = (115,0);
},
{
name = top;
pos = (238,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (12,0);
ref = acutecomb.case;
}
);
width = 233;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (73,0);
},
{
name = ogonek;
pos = (115,0);
},
{
name = top;
pos = (233,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-24,0);
ref = uni0306.case;
}
);
width = 233;
}
);
note = Ibreve;
unicode = 300;
},
{
glyphname = Icircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (73,0);
},
{
name = ogonek;
pos = (115,0);
},
{
name = top;
pos = (233,902);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-19,0);
ref = uni0302.case;
}
);
width = 233;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (73,0);
},
{
name = ogonek;
pos = (115,0);
},
{
name = top;
pos = (230,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-31,0);
ref = uni0308.case;
}
);
width = 233;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Idotaccent;
layers = (
{
anchors = (
{
name = bottom;
pos = (73,0);
},
{
name = ogonek;
pos = (115,0);
},
{
name = top;
pos = (230,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (58,0);
ref = uni0307.case;
}
);
width = 233;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = Igrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (73,0);
},
{
name = ogonek;
pos = (115,0);
},
{
name = top;
pos = (238,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (12,0);
ref = gravecomb.case;
}
);
width = 233;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Imacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (73,0);
},
{
name = ogonek;
pos = (115,0);
},
{
name = top;
pos = (225,859);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-58,0);
ref = uni0304.case;
}
);
width = 233;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = Iogonek;
layers = (
{
anchors = (
{
name = bottom;
pos = (73,0);
},
{
name = ogonek;
pos = (115,0);
},
{
name = top;
pos = (197,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,-203,o),
(85,-190,q),
(94,-134,l),
(58,-149,o),
(27,-149,qs),
(3,-149,o),
(-26,-128,o),
(-26,-109,qs),
(-26,-63,o),
(52,-28,qs),
(115,0,l),
(238,700,l),
(154,700,l),
(34,15,l),
(-36,-15,o),
(-96,-85,o),
(-96,-127,qs),
(-96,-164,o),
(-38,-203,o),
(7,-203,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
16 1 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 33 77 0 1 1 2 97 3 1 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 1 3 1 2 1 2 101 0 0 0 33 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 19 0 18 38 22 4 8 24
CALL[ ]	/* CallFunction */";
};
width = 233;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = Itilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (73,0);
},
{
name = ogonek;
pos = (115,0);
},
{
name = top;
pos = (225,859);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-34,0);
ref = tildecomb.case;
}
);
width = 233;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = J;
kernLeft = J;
kernRight = J;
layers = (
{
anchors = (
{
name = bottom;
pos = (199,0);
},
{
name = top;
pos = (447,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(264,-12,o),
(384,88,o),
(399,172,qs),
(491,700,l),
(407,700,l),
(315,172,ls),
(307,126,o),
(244,63,o),
(191,63,qs),
(145,63,o),
(101,112,o),
(101,153,qs),
(101,170,o),
(104,186,q),
(19,186,l),
(15,165,o),
(15,141,qs),
(15,68,o),
(101,-12,o),
(178,-12,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 0 2 1 1 0 114 0 2 2 33 77 0 1 1 3 98 4 1 3 3 40 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 2 1 2 0 1 128 0 2 2 33 77 0 1 1 3 98 4 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 19 0 18 19 36 20 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 486;
}
);
note = J;
unicode = 74;
},
{
glyphname = uni004A0301;
layers = (
{
anchors = (
{
name = bottom;
pos = (199,0);
},
{
name = top;
pos = (488,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = J;
},
{
alignment = -1;
pos = (262,0);
ref = acutecomb.case;
}
);
width = 486;
}
);
note = uni004A0301;
},
{
glyphname = K;
kernRight = K;
layers = (
{
anchors = (
{
name = bottom;
pos = (251,0);
},
{
name = ogonek;
pos = (115,0);
},
{
name = top;
pos = (375,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(175,342,l),
(436,0,l),
(541,0,l),
(264,357,l),
(632,700,l),
(523,700,l),
(181,375,l),
(238,700,l),
(154,700,l),
(31,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
8 5 2 3 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = K;
unicode = 75;
},
{
glyphname = uni0136;
kernRight = K;
layers = (
{
anchors = (
{
name = bottom;
pos = (209,-238);
},
{
name = ogonek;
pos = (115,0);
},
{
name = top;
pos = (375,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = K;
},
{
alignment = -1;
pos = (246,0);
ref = uni0326;
}
);
width = 589;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = L;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (219,0);
},
{
name = top;
pos = (254,700);
},
{
name = topright;
pos = (345,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(441,0,l),
(453,67,l),
(127,67,l),
(238,700,l),
(154,700,l),
(31,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 17 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 526;
}
);
note = L;
unicode = 76;
},
{
glyphname = Lacute;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (219,0);
},
{
name = top;
pos = (295,931);
},
{
name = topright;
pos = (345,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (69,0);
ref = acutecomb.case;
}
);
width = 526;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = Lcaron;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (219,0);
},
{
name = top;
pos = (254,700);
},
{
name = topright;
pos = (345,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (260,0);
ref = uni030C.alt.case;
}
);
width = 526;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = uni013B;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (177,-238);
},
{
name = top;
pos = (254,700);
},
{
name = topright;
pos = (345,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (214,0);
ref = uni0326;
}
);
width = 526;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = Ldot;
kernRight = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(441,0,l),
(453,67,l),
(127,67,l),
(238,700,l),
(154,700,l),
(31,0,l)
);
},
{
closed = 1;
nodes = (
(400,292,o),
(433,325,o),
(433,349,qs),
(433,374,o),
(400,406,o),
(376,406,qs),
(351,406,o),
(318,374,o),
(318,349,qs),
(318,325,o),
(351,292,o),
(376,292,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 3 5 1 4 1 3 4 105 0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 6 6 6 17 6 16 37 17 17 16 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 526;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = Lslash;
kernRight = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(467,0,l),
(478,67,l),
(152,67,l),
(201,341,l),
(331,388,l),
(345,467,l),
(215,421,l),
(264,700,l),
(180,700,l),
(125,389,l),
(40,359,l),
(26,280,l),
(111,310,l),
(57,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
7 6 1 3 1 0 1 76 0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 17 21 20 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = M;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(212,549,l),
(367,100,l),
(430,100,l),
(742,550,l),
(646,0,l),
(730,0,l),
(853,700,l),
(754,700,l),
(418,212,l),
(252,700,l),
(154,700,l),
(31,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
10 7 2 3 3 0 1 76 0 3 0 2 0 3 2 128 1 1 0 0 33 77 4 1 2 2 34 2 78 18 18 17 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 848;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
layers = (
{
anchors = (
{
name = bottom;
pos = (301,0);
},
{
name = top;
pos = (425,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(215,567,l),
(488,0,l),
(572,0,l),
(695,700,l),
(611,700,l),
(512,133,l),
(237,700,l),
(154,700,l),
(31,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
7 2 2 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 17 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 690;
}
);
note = N;
unicode = 78;
},
{
glyphname = Nacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (301,0);
},
{
name = top;
pos = (466,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (240,0);
ref = acutecomb.case;
}
);
width = 690;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = Ncaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (301,0);
},
{
name = top;
pos = (460,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (207,0);
ref = uni030C.case;
}
);
width = 690;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = uni0145;
layers = (
{
anchors = (
{
name = bottom;
pos = (259,-238);
},
{
name = top;
pos = (425,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (296,0);
ref = uni0326;
}
);
width = 690;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = Ntilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (301,0);
},
{
name = top;
pos = (453,859);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (194,0);
ref = tildecomb.case;
}
);
width = 690;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Eng;
layers = (
{
anchors = (
{
name = bottom;
pos = (301,0);
},
{
name = top;
pos = (425,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(215,567,l),
(488,0,l),
(474,-80,ls),
(467,-117,o),
(429,-148,o),
(392,-148,qs),
(353,-148,l),
(340,-220,l),
(392,-220,ls),
(462,-220,o),
(544,-153,o),
(557,-82,qs),
(695,700,l),
(611,700,l),
(512,133,l),
(237,700,l),
(154,700,l),
(31,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
16 2 2 4 0 1 76 15 1 4 1 75 1 1 0 0 33 77 0 4 4 34 77 0 3 3 2 97 0 2 2 38 2 78 21 33 35 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = O;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (352,0);
},
{
name = ogonek;
pos = (427,10);
},
{
name = top;
pos = (476,700);
},
{
name = topright;
pos = (853,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(461,-12,o),
(653,101,o),
(768,297,o),
(768,415,qs),
(768,491,o),
(704,627,o),
(572,712,o),
(476,712,qs),
(363,712,o),
(172,598,o),
(59,402,o),
(59,286,qs),
(59,212,o),
(123,75,o),
(255,-12,o),
(351,-12,qs)
);
},
{
closed = 1;
nodes = (
(297,62,o),
(199,120,o),
(146,224,o),
(146,291,qs),
(146,387,o),
(231,545,o),
(377,637,o),
(464,637,qs),
(530,637,o),
(628,580,o),
(681,478,o),
(681,411,qs),
(681,316,o),
(596,155,o),
(450,62,o),
(363,62,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 39 77 5 1 3 3 1 97 4 1 1 1 40 1 78 16 16 0 0 16 31 16 30 24 22 0 15 0 14 38 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = O;
unicode = 79;
},
{
glyphname = Oacute;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (352,0);
},
{
name = ogonek;
pos = (427,10);
},
{
name = top;
pos = (517,931);
},
{
name = topright;
pos = (853,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (291,0);
ref = acutecomb.case;
}
);
width = 790;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Obreve;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (352,0);
},
{
name = ogonek;
pos = (427,10);
},
{
name = top;
pos = (512,901);
},
{
name = topright;
pos = (853,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (255,0);
ref = uni0306.case;
}
);
width = 790;
}
);
note = Obreve;
unicode = 334;
},
{
glyphname = Ocircumflex;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (352,0);
},
{
name = ogonek;
pos = (427,10);
},
{
name = top;
pos = (512,902);
},
{
name = topright;
pos = (853,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (260,0);
ref = uni0302.case;
}
);
width = 790;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Odieresis;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (352,0);
},
{
name = ogonek;
pos = (427,10);
},
{
name = top;
pos = (509,889);
},
{
name = topright;
pos = (853,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (248,0);
ref = uni0308.case;
}
);
width = 790;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = Ograve;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (352,0);
},
{
name = ogonek;
pos = (427,10);
},
{
name = top;
pos = (517,931);
},
{
name = topright;
pos = (853,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (291,0);
ref = gravecomb.case;
}
);
width = 790;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Ohungarumlaut;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (352,0);
},
{
name = ogonek;
pos = (427,10);
},
{
name = top;
pos = (511,902);
},
{
name = topright;
pos = (853,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (250,0);
ref = uni030B.case;
}
);
width = 790;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = Omacron;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (352,0);
},
{
name = ogonek;
pos = (427,10);
},
{
name = top;
pos = (504,859);
},
{
name = topright;
pos = (853,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (221,0);
ref = uni0304.case;
}
);
width = 790;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = Oslash;
kernLeft = Oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(463,-12,o),
(655,103,o),
(767,299,o),
(767,415,qs),
(767,518,o),
(715,594,q),
(827,700,l),
(738,700,l),
(674,640,l),
(635,675,o),
(534,712,o),
(475,712,qs),
(361,712,o),
(169,597,o),
(57,401,o),
(57,286,qs),
(57,236,o),
(84,144,o),
(109,108,q),
(-5,0,l),
(85,0,l),
(150,61,l),
(229,-12,o),
(349,-12,qs)
);
},
{
closed = 1;
nodes = (
(270,62,o),
(211,118,q),
(651,534,l),
(680,481,o),
(680,411,qs),
(680,315,o),
(593,155,o),
(446,62,o),
(361,62,qs)
);
},
{
closed = 1;
nodes = (
(173,168,l),
(144,221,o),
(144,291,qs),
(144,383,o),
(227,542,o),
(373,637,o),
(463,637,qs),
(555,637,o),
(613,582,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
14 1 5 1 41 40 30 29 17 4 6 4 5 1 1 0 4 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
14 1 5 2 41 40 30 29 17 4 6 4 5 1 1 0 4 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 39 77 7 1 4 4 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 33 77 0 5 5 1 97 0 1 1 39 77 0 0 0 34 77 7 1 4 4 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
24 24 0 0 35 33 24 32 24 31 0 23 0 22 19 39 18 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 787;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Otilde;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (352,0);
},
{
name = ogonek;
pos = (427,10);
},
{
name = top;
pos = (504,859);
},
{
name = topright;
pos = (853,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (245,0);
ref = tildecomb.case;
}
);
width = 790;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = OE;
kernLeft = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (514,0);
},
{
name = top;
pos = (638,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(423,-12,o),
(571,58,o),
(627,124,q),
(605,0,l),
(1008,0,l),
(1020,69,l),
(701,69,l),
(745,319,l),
(1034,319,l),
(1046,387,l),
(757,387,l),
(800,631,l),
(1119,631,l),
(1132,700,l),
(729,700,l),
(707,575,l),
(674,640,o),
(545,712,o),
(463,712,qs),
(357,712,o),
(173,600,o),
(62,410,o),
(62,298,qs),
(62,223,o),
(123,81,o),
(249,-12,o),
(342,-12,qs)
);
},
{
closed = 1;
nodes = (
(297,62,o),
(202,124,o),
(150,234,o),
(150,303,qs),
(150,392,o),
(234,546,o),
(374,637,o),
(454,637,qs),
(516,637,o),
(614,586,o),
(671,486,o),
(671,415,qs),
(671,319,o),
(588,157,o),
(444,62,o),
(358,62,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
10 1 3 2 23 1 5 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 1 1 0 0 39 77 11 9 2 5 5 6 97 10 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 0 0 0 39 77 8 1 2 2 1 95 0 1 1 33 77 11 9 2 5 5 6 95 0 6 6 34 77 11 9 2 5 5 7 97 10 1 7 7 40 7 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 0 0 0 39 77 8 1 2 2 1 95 0 1 1 33 77 0 5 5 6 95 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 3 0 4 5 3 4 103 0 8 8 0 97 0 0 0 39 77 0 2 2 1 95 0 1 1 33 77 0 5 5 6 95 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
27 27 0 0 27 42 27 41 35 33 0 26 0 25 17 17 17 17 17 19 38 12 8 29
CALL[ ]	/* CallFunction */";
};
width = 1115;
}
);
note = OE;
unicode = 338;
},
{
glyphname = P;
kernRight = P;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(167,292,l),
(313,292,ls),
(392,292,o),
(519,345,o),
(592,450,o),
(592,525,qs),
(592,606,o),
(480,700,o),
(384,700,qs),
(154,700,l),
(31,0,l)
);
},
{
closed = 1;
nodes = (
(179,363,l),
(226,630,l),
(370,630,ls),
(438,630,o),
(504,570,o),
(504,519,qs),
(504,441,o),
(411,363,o),
(323,363,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 4 0 1 2 4 1 103 0 3 3 0 95 0 0 0 33 77 0 2 2 34 2 78 12 12 12 20 12 19 37 17 37 32 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = P;
unicode = 80;
},
{
glyphname = Thorn;
kernRight = Thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(141,147,l),
(287,147,ls),
(367,147,o),
(493,202,o),
(566,309,o),
(566,383,qs),
(566,460,o),
(462,554,o),
(359,554,qs),
(213,554,l),
(238,700,l),
(154,700,l),
(31,0,l)
);
},
{
closed = 1;
nodes = (
(153,217,l),
(201,484,l),
(345,484,ls),
(415,484,o),
(479,433,o),
(479,382,qs),
(479,304,o),
(384,217,o),
(298,217,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 0 4 5 1 4 104 6 1 5 0 2 3 5 2 103 0 0 0 33 77 0 3 3 34 3 78 14 14 14 22 14 21 37 17 37 33 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = Q;
kernLeft = C;
kernRight = Q;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(413,-12,o),
(528,23,o),
(578,56,q),
(637,-11,l),
(696,41,l),
(640,106,l),
(701,165,o),
(770,325,o),
(770,415,qs),
(770,491,o),
(706,627,o),
(574,712,o),
(478,712,qs),
(365,712,o),
(174,598,o),
(61,402,o),
(61,286,qs),
(61,212,o),
(125,75,o),
(257,-12,o),
(353,-12,qs)
);
},
{
closed = 1;
nodes = (
(148,387,o),
(233,545,o),
(379,637,o),
(466,637,qs),
(532,637,o),
(630,580,o),
(683,478,o),
(683,411,qs),
(683,339,o),
(634,212,o),
(590,164,q),
(503,267,l),
(443,215,l),
(531,113,l),
(455,62,o),
(365,62,qs),
(299,62,o),
(201,120,o),
(148,224,o),
(148,291,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
29 28 27 26 14 5 2 3 17 16 15 3 1 2 2 76 0 3 3 0 97 0 0 0 39 77 0 2 2 1 97 4 1 1 1 40 1 78 0 0 37 35 25 23 0 20 0 19 38 5 8 23
CALL[ ]	/* CallFunction */";
};
width = 795;
}
);
note = Q;
unicode = 81;
},
{
glyphname = R;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (250,0);
},
{
name = top;
pos = (374,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(114,0,l),
(169,310,l),
(285,310,l),
(410,0,l),
(514,0,l),
(371,326,l),
(466,342,o),
(564,448,o),
(564,537,qs),
(564,613,o),
(457,700,o),
(361,700,qs),
(154,700,l),
(30,0,l)
);
},
{
closed = 1;
nodes = (
(181,381,l),
(225,630,l),
(346,630,ls),
(414,630,o),
(478,576,o),
(478,529,qs),
(478,451,o),
(391,381,o),
(302,381,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 1 2 5 1 76 6 1 5 0 2 1 5 2 103 0 4 4 0 95 0 0 0 33 77 3 1 1 1 34 1 78 14 14 14 22 14 21 37 17 17 22 32 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = R;
unicode = 82;
},
{
glyphname = Racute;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (250,0);
},
{
name = top;
pos = (415,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (189,0);
ref = acutecomb.case;
}
);
width = 593;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = Rcaron;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (250,0);
},
{
name = top;
pos = (409,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (156,0);
ref = uni030C.case;
}
);
width = 593;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = uni0156;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (208,-238);
},
{
name = top;
pos = (374,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (245,0);
ref = uni0326;
}
);
width = 593;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = S;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (252,0);
},
{
name = top;
pos = (376,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,-12,o),
(466,44,o),
(532,145,o),
(532,211,qs),
(532,329,o),
(387,384,qs),
(375,389,o),
(351,397,qs),
(306,412,o),
(251,437,o),
(232,455,qs),
(207,477,o),
(207,515,qs),
(207,570,o),
(289,640,o),
(354,640,qs),
(413,640,o),
(477,579,o),
(477,537,qs),
(477,524,o),
(476,518,q),
(563,518,l),
(566,535,o),
(566,549,qs),
(566,596,o),
(517,670,o),
(426,712,o),
(366,712,qs),
(293,712,o),
(180,660,o),
(118,564,o),
(118,502,qs),
(118,448,o),
(184,366,o),
(249,342,qs),
(264,336,o),
(294,326,qs),
(345,309,o),
(404,281,o),
(442,236,o),
(442,201,qs),
(442,136,o),
(357,59,o),
(278,59,qs),
(210,59,o),
(128,128,o),
(128,183,qs),
(128,197,o),
(131,210,q),
(43,210,l),
(39,193,o),
(39,170,qs),
(39,116,o),
(95,34,o),
(200,-12,o),
(269,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 39 77 0 1 1 5 97 6 1 5 5 40 5 78 0 0 0 55 0 54 36 21 46 36 21 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = S;
unicode = 83;
},
{
glyphname = Sacute;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (252,0);
},
{
name = top;
pos = (417,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (191,0);
ref = acutecomb.case;
}
);
width = 591;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = Scaron;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (252,0);
},
{
name = top;
pos = (411,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (158,0);
ref = uni030C.case;
}
);
width = 591;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = Scedilla;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (207,-259);
},
{
name = top;
pos = (376,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(245,-259,ls),
(304,-259,o),
(384,-194,o),
(384,-140,qs),
(384,-102,o),
(322,-62,o),
(270,-63,q),
(279,-12,l),
(354,-10,o),
(469,47,o),
(532,146,o),
(532,211,qs),
(532,329,o),
(387,384,qs),
(375,389,o),
(351,397,qs),
(306,412,o),
(251,437,o),
(232,455,qs),
(207,477,o),
(207,515,qs),
(207,570,o),
(289,640,o),
(354,640,qs),
(413,640,o),
(477,579,o),
(477,537,qs),
(477,524,o),
(476,518,q),
(563,518,l),
(566,535,o),
(566,549,qs),
(566,596,o),
(517,670,o),
(426,712,o),
(366,712,qs),
(293,712,o),
(180,660,o),
(118,564,o),
(118,502,qs),
(118,448,o),
(184,366,o),
(249,342,qs),
(264,336,o),
(294,326,qs),
(345,309,o),
(404,281,o),
(442,236,o),
(442,201,qs),
(442,136,o),
(357,59,o),
(278,59,qs),
(210,59,o),
(128,128,o),
(128,183,qs),
(128,197,o),
(131,210,q),
(43,210,l),
(39,193,o),
(39,170,qs),
(39,98,o),
(138,1,o),
(223,-9,q),
(205,-113,l),
(254,-113,ls),
(315,-113,o),
(315,-149,qs),
(315,-177,o),
(275,-206,o),
(238,-206,qs),
(146,-206,l),
(137,-259,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
8 1 7 3 1 76 0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 99 0 6 6 4 97 0 4 4 39 77 0 3 3 7 97 0 7 7 40 7 78 71 69 17 30 36 21 46 36 22 35 32 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = uni0218;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (210,-238);
},
{
name = top;
pos = (376,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (247,0);
ref = uni0326;
}
);
width = 591;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni1E9E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(458,-10,o),
(555,36,o),
(610,119,o),
(610,172,qs),
(610,223,o),
(558,286,o),
(499,307,qs),
(454,322,o),
(398,352,o),
(398,377,qs),
(398,396,o),
(432,427,o),
(468,448,qs),
(514,478,ls),
(544,500,o),
(577,554,o),
(577,593,qs),
(577,653,o),
(477,732,o),
(387,732,qs),
(277,732,o),
(137,616,o),
(120,520,qs),
(27,0,l),
(111,0,l),
(202,512,ls),
(214,583,o),
(300,661,o),
(374,661,qs),
(429,661,o),
(491,618,o),
(491,581,qs),
(491,554,o),
(463,514,o),
(423,485,o),
(385,463,qs),
(348,441,o),
(311,392,o),
(311,360,qs),
(311,321,o),
(370,271,o),
(438,246,qs),
(483,230,o),
(524,191,o),
(524,163,qs),
(524,115,o),
(459,56,o),
(407,56,qs),
(359,56,o),
(306,108,o),
(306,153,qs),
(306,164,o),
(307,169,q),
(223,169,l),
(216,88,o),
(310,-10,o),
(397,-10,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 1 1 3 97 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 2 1 2 0 1 128 0 4 0 2 0 4 2 105 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 56 0 55 37 35 32 31 28 26 36 18 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 669;
}
);
note = uni1E9E;
unicode = 7838;
},
{
glyphname = T;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (236,0);
},
{
name = top;
pos = (360,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,0,l),
(389,633,l),
(598,633,l),
(610,700,l),
(109,700,l),
(97,633,l),
(305,633,l),
(194,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 1 95 0 1 1 33 77 0 3 3 34 3 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 559;
}
);
note = T;
unicode = 84;
},
{
glyphname = Tcaron;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (236,0);
},
{
name = top;
pos = (395,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (142,0);
ref = uni030C.case;
}
);
width = 559;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = uni0162;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (191,-259);
},
{
name = top;
pos = (360,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,0,l),
(189,-113,l),
(238,-113,ls),
(299,-113,o),
(299,-149,qs),
(299,-177,o),
(259,-206,o),
(222,-206,qs),
(130,-206,l),
(121,-259,l),
(229,-259,ls),
(288,-259,o),
(368,-194,o),
(368,-140,qs),
(368,-102,o),
(306,-62,o),
(254,-63,q),
(265,0,l),
(278,0,l),
(389,633,l),
(598,633,l),
(610,700,l),
(109,700,l),
(97,633,l),
(305,633,l),
(194,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 0 7 6 4 7 105 0 6 0 5 6 5 99 2 1 0 0 1 95 0 1 1 33 77 8 1 3 3 34 3 78 17 35 33 36 17 17 17 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 559;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni021A;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (194,-238);
},
{
name = top;
pos = (360,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (231,0);
ref = uni0326;
}
);
width = 559;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = U;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (414,700);
},
{
name = topright;
pos = (727,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,-12,o),
(474,38,o),
(572,159,o),
(589,258,qs),
(667,700,l),
(583,700,l),
(504,258,ls),
(487,160,o),
(377,64,o),
(295,64,qs),
(226,64,o),
(147,133,o),
(147,203,qs),
(147,228,o),
(153,258,qs),
(232,700,l),
(148,700,l),
(69,258,ls),
(63,222,o),
(63,190,qs),
(63,95,o),
(177,-12,o),
(281,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 0 0 33 77 0 1 1 3 98 4 1 3 3 40 3 78 0 0 0 22 0 21 19 37 21 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 667;
}
);
note = U;
unicode = 85;
},
{
glyphname = Uacute;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (455,931);
},
{
name = topright;
pos = (727,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (229,0);
ref = acutecomb.case;
}
);
width = 667;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ubreve;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (450,901);
},
{
name = topright;
pos = (727,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (193,0);
ref = uni0306.case;
}
);
width = 667;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = Ucircumflex;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (450,902);
},
{
name = topright;
pos = (727,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (198,0);
ref = uni0302.case;
}
);
width = 667;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (447,889);
},
{
name = topright;
pos = (727,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (186,0);
ref = uni0308.case;
}
);
width = 667;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Ugrave;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (455,931);
},
{
name = topright;
pos = (727,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (229,0);
ref = gravecomb.case;
}
);
width = 667;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uhungarumlaut;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (449,902);
},
{
name = topright;
pos = (727,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (188,0);
ref = uni030B.case;
}
);
width = 667;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = Umacron;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (442,859);
},
{
name = topright;
pos = (727,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (159,0);
ref = uni0304.case;
}
);
width = 667;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = Uogonek;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (414,700);
},
{
name = topright;
pos = (727,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(332,-193,o),
(371,-180,q),
(380,-124,l),
(344,-139,o),
(313,-139,qs),
(289,-139,o),
(260,-118,o),
(260,-99,qs),
(260,-53,o),
(338,-18,qs),
(395,7,l),
(467,33,o),
(571,155,o),
(589,258,qs),
(667,700,l),
(583,700,l),
(504,258,ls),
(487,160,o),
(377,64,o),
(295,64,qs),
(226,64,o),
(147,133,o),
(147,203,qs),
(147,228,o),
(153,258,qs),
(232,700,l),
(148,700,l),
(69,258,ls),
(63,222,o),
(63,190,qs),
(63,102,o),
(162,-4,o),
(253,-11,q),
(190,-55,o),
(190,-117,qs),
(190,-154,o),
(248,-193,o),
(293,-193,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
34 4 2 3 1 1 76 0 1 0 3 0 1 3 128 0 3 5 1 4 3 4 102 2 1 0 0 33 0 78 0 0 0 37 0 36 41 19 37 26 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 667;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = Uring;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (461,967);
},
{
name = topright;
pos = (727,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (228,0);
ref = uni030A.case;
}
);
width = 667;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = Utilde;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (442,859);
},
{
name = topright;
pos = (727,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (183,0);
ref = tildecomb.case;
}
);
width = 667;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = V;
kernLeft = V;
kernRight = V;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(241,0,l),
(339,0,l),
(727,700,l),
(636,700,l),
(306,92,l),
(193,700,l),
(102,700,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
1 1 1 0 1 76 3 2 2 0 0 33 77 0 1 1 34 1 78 0 0 0 6 0 6 17 18 4 8 24
CALL[ ]	/* CallFunction */";
};
width = 669;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (450,0);
},
{
name = top;
pos = (566,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(542,574,l),
(604,0,l),
(701,0,l),
(1021,700,l),
(930,700,l),
(672,103,l),
(612,700,l),
(518,700,l),
(241,104,l),
(196,700,l),
(105,700,l),
(173,-1,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 33 77 5 4 2 3 3 34 3 78 0 0 0 12 0 12 17 18 18 17 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 976;
}
);
note = W;
unicode = 87;
},
{
glyphname = Wacute;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (450,0);
},
{
name = top;
pos = (607,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (381,0);
ref = acutecomb.case;
}
);
width = 976;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = Wcircumflex;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (450,0);
},
{
name = top;
pos = (602,902);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (350,0);
ref = uni0302.case;
}
);
width = 976;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = Wdieresis;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (450,0);
},
{
name = top;
pos = (599,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (338,0);
ref = uni0308.case;
}
);
width = 976;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = Wgrave;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (450,0);
},
{
name = top;
pos = (607,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (381,0);
ref = gravecomb.case;
}
);
width = 976;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = X;
kernLeft = X;
kernRight = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(76,0,l),
(299,300,l),
(426,0,l),
(520,0,l),
(362,377,l),
(610,700,l),
(515,700,l),
(330,451,l),
(225,700,l),
(131,700,l),
(268,376,l),
(-20,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (246,0);
},
{
name = top;
pos = (370,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(282,0,l),
(329,266,l),
(633,700,l),
(539,700,l),
(301,346,l),
(189,700,l),
(93,700,l),
(245,266,l),
(198,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
3 1 2 0 1 76 1 1 0 0 33 77 0 2 2 34 2 78 18 18 17 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Yacute;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (246,0);
},
{
name = top;
pos = (411,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (185,0);
ref = acutecomb.case;
}
);
width = 579;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Ycircumflex;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (246,0);
},
{
name = top;
pos = (406,902);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (154,0);
ref = uni0302.case;
}
);
width = 579;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = Ydieresis;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (246,0);
},
{
name = top;
pos = (403,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (142,0);
ref = uni0308.case;
}
);
width = 579;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Ygrave;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (246,0);
},
{
name = top;
pos = (411,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (185,0);
ref = gravecomb.case;
}
);
width = 579;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = uni1EF8;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (246,0);
},
{
name = top;
pos = (398,859);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (139,0);
ref = tildecomb.case;
}
);
width = 579;
}
);
note = uni1EF8;
unicode = 7928;
},
{
glyphname = Z;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (224,0);
},
{
name = top;
pos = (348,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(441,0,l),
(454,73,l),
(104,73,l),
(549,634,l),
(560,700,l),
(123,700,l),
(109,627,l),
(449,627,l),
(6,66,l),
(-6,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 0 0 1 95 0 1 1 33 77 0 2 2 3 95 0 3 3 34 3 78 17 18 17 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 535;
}
);
note = Z;
unicode = 90;
},
{
glyphname = Zacute;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (224,0);
},
{
name = top;
pos = (389,931);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (163,0);
ref = acutecomb.case;
}
);
width = 535;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = Zcaron;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (224,0);
},
{
name = top;
pos = (383,901);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (130,0);
ref = uni030C.case;
}
);
width = 535;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = Zdotaccent;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (224,0);
},
{
name = top;
pos = (381,889);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (209,0);
ref = uni0307.case;
}
);
width = 535;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = uniA78B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,229,l),
(236,700,l),
(145,700,l),
(72,229,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 33 0 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 221;
}
);
note = uniA78B;
unicode = 42891;
},
{
glyphname = a;
kernLeft = a;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (492,0);
},
{
name = top;
pos = (326,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(168,59,o),
(116,95,o),
(116,131,qs),
(116,184,o),
(203,234,o),
(268,234,qs),
(394,234,l),
(386,190,o),
(337,109,o),
(259,59,o),
(211,59,qs)
);
},
{
closed = 1;
nodes = (
(26,57,o),
(116,-12,o),
(186,-12,qs),
(250,-12,o),
(343,45,o),
(370,87,q),
(361,0,l),
(437,0,l),
(491,305,ls),
(495,328,o),
(495,352,qs),
(495,429,o),
(399,508,o),
(317,508,qs),
(232,508,o),
(98,421,o),
(73,341,q),
(160,341,l),
(177,389,o),
(257,437,o),
(306,437,qs),
(355,437,o),
(410,386,o),
(410,339,qs),
(410,322,o),
(406,299,q),
(273,299,ls),
(167,299,o),
(26,208,o),
(26,121,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
34 1 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 2 3 4 2 128 0 2 0 0 1 2 0 103 0 3 3 5 97 0 5 5 42 77 8 1 1 1 6 97 7 1 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 4 3 2 3 4 2 128 0 2 0 0 1 2 0 103 0 3 3 5 97 0 5 5 42 77 0 6 6 34 77 8 1 1 1 7 97 0 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 38 36 33 32 27 25 23 22 20 18 14 12 0 10 0 9 35 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 539;
}
);
note = a;
unicode = 97;
},
{
glyphname = aacute;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (492,0);
},
{
name = top;
pos = (371,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (177,0);
ref = acutecomb;
}
);
width = 539;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = abreve;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (492,0);
},
{
name = top;
pos = (368,732);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (141,0);
ref = uni0306;
}
);
width = 539;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = uni01CE;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (492,0);
},
{
name = top;
pos = (368,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (145,0);
ref = uni030C;
}
);
width = 539;
}
);
note = uni01CE;
unicode = 462;
},
{
glyphname = acircumflex;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (492,0);
},
{
name = top;
pos = (368,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (145,0);
ref = uni0302;
}
);
width = 539;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = adieresis;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (492,0);
},
{
name = top;
pos = (365,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (134,0);
ref = uni0308;
}
);
width = 539;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = agrave;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (492,0);
},
{
name = top;
pos = (371,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (178,0);
ref = gravecomb;
}
);
width = 539;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = amacron;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (492,0);
},
{
name = top;
pos = (355,695);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (101,0);
ref = uni0304;
}
);
width = 539;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = aogonek;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (492,0);
},
{
name = top;
pos = (326,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(168,59,o),
(116,95,o),
(116,131,qs),
(116,184,o),
(203,234,o),
(268,234,qs),
(394,234,l),
(386,190,o),
(337,109,o),
(259,59,o),
(211,59,qs)
);
},
{
closed = 1;
nodes = (
(423,-203,o),
(462,-190,q),
(471,-134,l),
(435,-149,o),
(404,-149,qs),
(380,-149,o),
(351,-128,o),
(351,-109,qs),
(351,-63,o),
(429,-28,qs),
(492,0,l),
(479,43,l),
(442,28,l),
(491,305,ls),
(495,328,o),
(495,352,qs),
(495,429,o),
(399,508,o),
(317,508,qs),
(232,508,o),
(98,421,o),
(73,341,q),
(160,341,l),
(177,389,o),
(257,437,o),
(306,437,qs),
(355,437,o),
(410,386,o),
(410,339,qs),
(410,322,o),
(406,299,q),
(273,299,ls),
(167,299,o),
(26,208,o),
(26,121,qs),
(26,57,o),
(116,-12,o),
(186,-12,qs),
(250,-12,o),
(343,45,o),
(370,87,q),
(361,0,l),
(379,0,l),
(326,-27,o),
(281,-90,o),
(281,-127,qs),
(281,-164,o),
(339,-203,o),
(384,-203,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
18 1 1 0 47 46 2 2 1 56 1 8 2 3 76 48 1 2 1 75
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
18 1 1 0 47 46 2 2 1 56 1 8 3 3 76 48 1 2 1 75
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 6 5 4 5 6 4 128 0 4 0 0 1 4 0 103 0 5 5 7 97 0 7 7 42 77 10 1 1 1 2 97 3 1 2 2 34 77 0 8 8 9 97 11 1 9 9 38 9 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 6 5 4 5 6 4 128 0 4 0 0 1 4 0 103 0 5 5 7 97 0 7 7 42 77 0 2 2 34 77 10 1 1 1 3 97 0 3 3 40 77 0 8 8 9 97 11 1 9 9 38 9 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 6 5 4 5 6 4 128 0 4 0 0 1 4 0 103 0 8 11 1 9 8 9 101 0 5 5 7 97 0 7 7 42 77 0 2 2 34 77 10 1 1 1 3 97 0 3 3 40 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
11 11 0 0 11 59 11 58 55 53 41 39 37 36 34 32 28 26 22 20 17 16 0 10 0 9 35 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 539;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = aring;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (492,0);
},
{
name = top;
pos = (373,763);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (175,0);
ref = uni030A;
}
);
width = 539;
}
);
note = aring;
unicode = 229;
},
{
glyphname = atilde;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (492,0);
},
{
name = top;
pos = (363,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (131,0);
ref = tildecomb;
}
);
width = 539;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = ae;
kernLeft = a;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (419,0);
},
{
name = top;
pos = (507,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(261,-12,o),
(382,56,o),
(418,109,q),
(439,52,o),
(537,-12,o),
(605,-12,qs),
(687,-12,o),
(820,73,o),
(857,148,q),
(774,148,l),
(749,106,o),
(669,59,o),
(618,59,qs),
(561,59,o),
(484,132,o),
(484,199,qs),
(484,214,o),
(487,229,q),
(882,229,l),
(895,283,o),
(895,319,qs),
(895,367,o),
(855,453,o),
(766,508,o),
(699,508,qs),
(638,508,o),
(530,461,o),
(490,418,q),
(474,461,o),
(391,508,o),
(327,508,qs),
(279,508,o),
(179,473,o),
(98,398,o),
(82,341,q),
(168,341,l),
(185,387,o),
(265,437,o),
(315,437,qs),
(364,437,o),
(418,386,o),
(418,339,qs),
(418,319,o),
(414,299,q),
(264,299,ls),
(206,299,o),
(97,262,o),
(26,181,o),
(26,118,qs),
(26,61,o),
(109,-12,o),
(189,-12,qs)
);
},
{
closed = 1;
nodes = (
(166,59,o),
(115,98,o),
(115,131,qs),
(115,180,o),
(194,234,o),
(259,234,qs),
(401,234,l),
(397,209,ls),
(392,176,o),
(340,106,o),
(258,59,o),
(210,59,qs)
);
},
{
closed = 1;
nodes = (
(499,294,l),
(519,362,o),
(622,437,o),
(685,437,qs),
(743,437,o),
(813,372,o),
(813,316,qs),
(813,310,o),
(811,294,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
23 1 2 1 48 1 6 7 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 2 1 0 1 2 0 128 0 7 5 6 5 7 6 128 13 1 0 10 1 5 7 0 5 103 12 1 1 1 3 97 4 1 3 3 42 77 15 11 2 6 6 8 97 14 9 2 8 8 40 8 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 59 values pushed */
0 2 1 0 1 2 0 128 0 7 5 6 5 7 6 128 0 0 0 10 5 0 10 103 0 13 0 5 7 13 5 103 12 1 1 1 3 97 4 1 3 3 42 77 15 11 2 6 6 8 97 14 9 2 8 8 40 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
52 52 0 0 72 71 69 67 52 63 52 62 58 56 0 51 0 50 34 18 36 21 36 35 18 36 37 16 8 31
CALL[ ]	/* CallFunction */";
};
width = 926;
}
);
note = ae;
unicode = 230;
},
{
glyphname = aeacute;
kernLeft = a;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (419,0);
},
{
name = top;
pos = (552,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = ae;
},
{
alignment = -1;
pos = (358,0);
ref = acutecomb;
}
);
width = 926;
}
);
note = aeacute;
unicode = 509;
},
{
glyphname = b;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(371,-12,o),
(502,68,o),
(576,208,o),
(576,295,qs),
(576,357,o),
(526,454,o),
(434,508,o),
(372,508,qs),
(259,508,o),
(183,419,q),
(232,700,l),
(148,700,l),
(25,0,l),
(101,0,l),
(124,84,l),
(142,44,o),
(233,-12,o),
(290,-12,qs)
);
},
{
closed = 1;
nodes = (
(229,61,o),
(152,142,o),
(152,209,qs),
(152,272,o),
(203,376,o),
(293,435,o),
(350,435,qs),
(413,435,o),
(489,350,o),
(489,283,qs),
(489,219,o),
(439,118,o),
(351,61,o),
(294,61,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 2 2 5 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 1 33 77 0 4 4 2 97 0 2 2 42 77 7 1 5 5 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 33 77 0 4 4 2 97 0 2 2 42 77 0 0 0 34 77 7 1 5 5 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
18 18 0 0 18 31 18 30 25 23 0 17 0 16 34 17 19 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 619;
}
);
note = b;
unicode = 98;
},
{
glyphname = c;
kernLeft = c;
kernRight = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = top;
pos = (329,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(332,-12,o),
(477,77,o),
(508,162,q),
(422,162,l),
(404,113,o),
(316,59,o),
(263,59,qs),
(206,59,o),
(130,139,o),
(130,208,qs),
(130,263,o),
(176,368,o),
(266,436,o),
(329,436,qs),
(383,436,o),
(452,383,o),
(452,334,q),
(538,334,l),
(537,414,o),
(431,508,o),
(341,508,qs),
(258,508,o),
(122,427,o),
(43,285,o),
(43,199,qs),
(43,144,o),
(89,47,o),
(183,-12,o),
(250,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 42 77 0 3 3 5 97 6 1 5 5 40 5 78 0 0 0 28 0 27 18 37 34 18 38 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = c;
unicode = 99;
},
{
glyphname = cacute;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = top;
pos = (374,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (180,0);
ref = acutecomb;
}
);
width = 569;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = ccaron;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = top;
pos = (371,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (148,0);
ref = uni030C;
}
);
width = 569;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = ccedilla;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (196,-259);
},
{
name = top;
pos = (329,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(230,-259,ls),
(289,-259,o),
(369,-194,o),
(369,-140,qs),
(369,-102,o),
(307,-62,o),
(255,-63,q),
(264,-12,l),
(342,-8,o),
(478,81,o),
(508,162,q),
(422,162,l),
(404,113,o),
(316,59,o),
(263,59,qs),
(206,59,o),
(130,139,o),
(130,208,qs),
(130,263,o),
(176,368,o),
(266,436,o),
(329,436,qs),
(383,436,o),
(452,383,o),
(452,334,q),
(538,334,l),
(537,414,o),
(431,508,o),
(341,508,qs),
(258,508,o),
(122,427,o),
(43,285,o),
(43,199,qs),
(43,123,o),
(128,5,o),
(208,-9,q),
(190,-113,l),
(239,-113,ls),
(300,-113,o),
(300,-149,qs),
(300,-177,o),
(260,-206,o),
(223,-206,qs),
(131,-206,l),
(122,-259,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
8 1 7 5 1 76 0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 99 0 4 4 2 97 0 2 2 42 77 0 5 5 7 97 0 7 7 40 7 78 44 42 17 18 18 37 34 18 39 35 32 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = cdotaccent;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (241,0);
},
{
name = top;
pos = (368,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (226,0);
ref = uni0307;
}
);
width = 569;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = d;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (266,0);
},
{
name = top;
pos = (441,992);
},
{
name = topright;
pos = (731,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(361,-12,o),
(437,82,q),
(430,0,l),
(507,0,l),
(630,700,l),
(546,700,l),
(496,413,l),
(475,458,o),
(390,508,o),
(326,508,qs),
(256,508,o),
(126,438,o),
(44,302,o),
(44,207,qs),
(44,152,o),
(87,52,o),
(179,-12,o),
(247,-12,qs)
);
},
{
closed = 1;
nodes = (
(207,61,o),
(131,148,o),
(131,215,qs),
(131,269,o),
(176,370,o),
(265,435,o),
(329,435,qs),
(394,435,o),
(468,357,o),
(468,291,qs),
(468,237,o),
(423,131,o),
(334,61,o),
(271,61,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
15 10 2 5 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 1 33 77 0 4 4 0 97 0 0 0 42 77 7 1 5 5 2 97 6 3 2 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 33 77 0 4 4 0 97 0 0 0 42 77 0 2 2 34 77 7 1 5 5 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
18 18 0 0 18 31 18 30 25 23 0 17 0 16 17 19 38 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = d;
unicode = 100;
},
{
glyphname = dcaron;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (266,0);
},
{
name = top;
pos = (441,992);
},
{
name = topright;
pos = (731,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = d;
},
{
alignment = -1;
pos = (599,0);
ref = uni030C.alt;
}
);
width = 620;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = dcroat;
kernLeft = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(361,-12,o),
(437,82,q),
(430,0,l),
(507,0,l),
(607,571,l),
(654,571,l),
(665,634,l),
(618,634,l),
(630,700,l),
(546,700,l),
(535,634,l),
(363,634,l),
(352,571,l),
(524,571,l),
(496,413,l),
(475,458,o),
(390,508,o),
(326,508,qs),
(256,508,o),
(126,438,o),
(44,302,o),
(44,207,qs),
(44,152,o),
(87,52,o),
(179,-12,o),
(247,-12,qs)
);
},
{
closed = 1;
nodes = (
(131,269,o),
(176,370,o),
(265,435,o),
(329,435,qs),
(394,435,o),
(468,357,o),
(468,291,qs),
(468,237,o),
(423,131,o),
(334,61,o),
(271,61,qs),
(207,61,o),
(131,148,o),
(131,215,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
23 10 2 8 9 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
4 1 2 5 1 1 0 2 1 104 0 3 3 33 77 0 9 9 0 97 0 0 0 42 77 0 8 8 6 97 10 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
4 1 2 5 1 1 0 2 1 104 0 3 3 33 77 0 9 9 0 97 0 0 0 42 77 0 6 6 34 77 0 8 8 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 36 34 29 27 0 25 0 24 17 17 17 17 17 19 38 11 8 29
CALL[ ]	/* CallFunction */";
};
width = 619;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = eth;
kernLeft = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(356,-12,o),
(498,78,o),
(582,246,o),
(582,359,qs),
(582,504,o),
(504,619,q),
(601,651,l),
(612,708,l),
(472,662,l),
(450,688,o),
(437,700,q),
(353,700,l),
(378,676,o),
(408,641,q),
(307,608,l),
(296,551,l),
(439,598,l),
(489,521,o),
(506,424,q),
(483,467,o),
(396,507,o),
(341,507,qs),
(261,507,o),
(125,429,o),
(44,294,o),
(44,213,qs),
(44,156,o),
(95,53,o),
(198,-12,o),
(271,-12,qs)
);
},
{
closed = 1;
nodes = (
(213,59,o),
(131,148,o),
(131,220,qs),
(131,278,o),
(187,378,o),
(281,436,o),
(336,436,qs),
(402,436,o),
(487,355,o),
(487,283,qs),
(487,231,o),
(436,127,o),
(341,59,o),
(280,59,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
23 20 15 13 12 5 0 1 10 1 4 3 2 76 21 1 1 74 0 1 1 33 77 0 3 3 0 97 0 0 0 42 77 6 1 4 4 2 97 5 1 2 2 40 2 78 30 30 0 0 30 43 30 42 37 35 0 29 0 28 25 38 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = eth;
unicode = 240;
},
{
glyphname = e;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (240,0);
},
{
name = ogonek;
pos = (355,10);
},
{
name = top;
pos = (328,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(331,-12,o),
(463,77,o),
(495,148,q),
(412,148,l),
(390,107,o),
(310,59,o),
(259,59,qs),
(201,59,o),
(125,131,o),
(125,199,q),
(127,229,l),
(523,229,l),
(536,294,o),
(536,319,qs),
(536,367,o),
(495,453,o),
(406,508,o),
(337,508,qs),
(263,508,o),
(128,435,o),
(43,294,o),
(43,198,qs),
(43,102,o),
(154,-12,o),
(246,-12,qs)
);
},
{
closed = 1;
nodes = (
(140,294,l),
(160,361,o),
(263,437,o),
(326,437,qs),
(384,437,o),
(454,372,o),
(454,316,qs),
(454,310,o),
(452,294,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
0 3 1 2 1 3 2 128 0 6 0 1 3 6 1 103 0 5 5 0 97 0 0 0 42 77 0 2 2 4 97 7 1 4 4 40 4 78 0 0 33 32 30 28 0 24 0 23 18 35 21 37 8 8 26
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = e;
unicode = 101;
},
{
glyphname = eacute;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (240,0);
},
{
name = ogonek;
pos = (355,10);
},
{
name = top;
pos = (373,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (179,0);
ref = acutecomb;
}
);
width = 568;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ebreve;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (240,0);
},
{
name = ogonek;
pos = (355,10);
},
{
name = top;
pos = (370,732);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (143,0);
ref = uni0306;
}
);
width = 568;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = ecaron;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (240,0);
},
{
name = ogonek;
pos = (355,10);
},
{
name = top;
pos = (370,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (147,0);
ref = uni030C;
}
);
width = 568;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = ecircumflex;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (240,0);
},
{
name = ogonek;
pos = (355,10);
},
{
name = top;
pos = (370,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (147,0);
ref = uni0302;
}
);
width = 568;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (240,0);
},
{
name = ogonek;
pos = (355,10);
},
{
name = top;
pos = (367,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (136,0);
ref = uni0308;
}
);
width = 568;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = edotaccent;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (240,0);
},
{
name = ogonek;
pos = (355,10);
},
{
name = top;
pos = (367,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (225,0);
ref = uni0307;
}
);
width = 568;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = egrave;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (240,0);
},
{
name = ogonek;
pos = (355,10);
},
{
name = top;
pos = (373,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (180,0);
ref = gravecomb;
}
);
width = 568;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = emacron;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (240,0);
},
{
name = ogonek;
pos = (355,10);
},
{
name = top;
pos = (357,695);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (103,0);
ref = uni0304;
}
);
width = 568;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = eogonek;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (240,0);
},
{
name = ogonek;
pos = (355,10);
},
{
name = top;
pos = (328,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(140,294,l),
(160,361,o),
(263,437,o),
(326,437,qs),
(384,437,o),
(454,372,o),
(454,316,qs),
(454,310,o),
(452,294,q)
);
},
{
closed = 1;
nodes = (
(286,-193,o),
(325,-180,q),
(334,-124,l),
(298,-139,o),
(267,-139,qs),
(243,-139,o),
(214,-118,o),
(214,-99,qs),
(214,-53,o),
(292,-18,qs),
(347,6,ls),
(397,26,o),
(474,100,o),
(495,148,q),
(412,148,l),
(390,107,o),
(310,59,o),
(259,59,qs),
(201,59,o),
(125,131,o),
(125,199,q),
(127,229,l),
(523,229,l),
(536,294,o),
(536,319,qs),
(536,367,o),
(495,453,o),
(406,508,o),
(337,508,qs),
(263,508,o),
(128,435,o),
(43,294,o),
(43,198,qs),
(43,112,o),
(132,2,o),
(209,-9,q),
(144,-54,o),
(144,-117,qs),
(144,-154,o),
(202,-193,o),
(247,-193,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
46 13 2 6 4 1 76 0 5 3 4 3 5 4 128 0 4 6 3 4 6 126 0 1 0 3 5 1 3 103 0 6 8 1 7 6 7 102 0 0 0 2 97 0 2 2 42 0 78 9 9 9 49 9 48 40 18 35 21 43 18 35 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = uni1EBD;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (240,0);
},
{
name = ogonek;
pos = (355,10);
},
{
name = top;
pos = (365,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (133,0);
ref = tildecomb;
}
);
width = 568;
}
);
note = uni1EBD;
unicode = 7869;
},
{
glyphname = uni0259;
kernLeft = c;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(315,-12,o),
(449,71,o),
(525,213,o),
(525,298,qs),
(525,394,o),
(414,508,o),
(322,508,qs),
(237,508,o),
(105,419,o),
(73,348,q),
(156,348,l),
(178,389,o),
(258,437,o),
(309,437,qs),
(367,437,o),
(443,365,o),
(443,297,qs),
(443,283,o),
(441,267,q),
(45,267,l),
(32,202,o),
(32,177,qs),
(32,126,o),
(76,40,o),
(165,-12,o),
(231,-12,qs)
);
},
{
closed = 1;
nodes = (
(184,59,o),
(114,124,o),
(114,180,qs),
(114,186,o),
(116,202,q),
(428,202,l),
(408,135,o),
(305,59,o),
(242,59,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 2 1 0 1 2 0 128 0 0 0 5 6 0 5 103 0 1 1 3 97 0 3 3 42 77 8 1 6 6 4 97 7 1 4 4 40 4 78 26 26 0 0 26 34 26 33 29 28 0 25 0 24 34 18 36 21 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = uni0259;
unicode = 601;
},
{
glyphname = f;
kernLeft = f;
kernRight = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(136,0,l),
(211,425,l),
(333,425,l),
(346,496,l),
(223,496,l),
(235,560,ls),
(242,597,o),
(280,628,o),
(318,628,qs),
(354,628,l),
(367,700,l),
(318,700,ls),
(247,700,o),
(164,633,o),
(151,562,qs),
(139,496,l),
(65,496,l),
(53,425,l),
(127,425,l),
(52,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 3 3 2 97 0 2 2 33 77 5 1 0 0 1 95 4 1 1 1 36 77 0 6 6 34 6 78 17 17 19 33 35 17 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 334;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (167,-310);
},
{
name = top;
pos = (300,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(302,-232,o),
(442,-130,o),
(442,-41,qs),
(442,22,o),
(351,89,o),
(274,89,qs),
(186,89,ls),
(113,89,o),
(113,133,qs),
(113,151,o),
(139,176,o),
(160,179,q),
(201,156,o),
(257,156,qs),
(315,156,o),
(413,201,o),
(471,289,o),
(471,349,qs),
(471,393,o),
(452,425,q),
(538,425,l),
(550,496,l),
(366,496,l),
(330,508,o),
(288,508,qs),
(227,508,o),
(130,461,o),
(75,372,o),
(75,313,qs),
(75,263,o),
(103,224,q),
(69,206,o),
(25,145,o),
(25,109,qs),
(25,87,o),
(47,48,o),
(67,37,q),
(24,21,o),
(-24,-47,o),
(-24,-88,qs),
(-24,-157,o),
(97,-232,o),
(185,-232,qs)
);
},
{
closed = 1;
nodes = (
(136,-162,o),
(60,-119,o),
(60,-79,qs),
(60,-33,o),
(127,15,o),
(181,15,qs),
(266,15,ls),
(310,15,o),
(357,-24,o),
(357,-58,qs),
(357,-111,o),
(267,-162,o),
(195,-162,qs)
);
},
{
closed = 1;
nodes = (
(211,226,o),
(155,277,o),
(155,320,qs),
(155,371,o),
(224,438,o),
(280,438,qs),
(329,438,o),
(389,383,o),
(389,341,qs),
(389,291,o),
(315,226,o),
(261,226,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
30 11 2 3 9 5 1 6 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
12 1 9 0 3 4 9 3 105 8 1 2 2 0 97 1 1 0 0 42 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
12 1 9 0 3 4 9 3 105 0 8 8 0 97 1 1 0 0 42 77 0 2 2 0 97 1 1 0 0 42 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
12 1 9 0 3 4 9 3 105 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
12 1 9 0 3 4 9 3 105 0 4 0 6 7 4 6 103 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
12 1 9 0 3 4 9 3 105 0 4 0 6 7 4 6 103 11 1 7 10 1 5 7 5 101 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
56 56 43 43 0 0 56 67 56 66 62 60 43 55 43 54 50 47 0 42 0 41 37 34 29 27 22 21 20 19 18 16 13 8 22
CALL[ ]	/* CallFunction */";
};
width = 535;
}
);
note = g;
unicode = 103;
},
{
glyphname = gbreve;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (167,-310);
},
{
name = top;
pos = (342,732);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (115,0);
ref = uni0306;
}
);
width = 535;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = uni0123;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (167,-310);
},
{
name = top;
pos = (351,783);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (205,0);
ref = uni0312;
}
);
width = 535;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = gdotaccent;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (167,-310);
},
{
name = top;
pos = (339,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (197,0);
ref = uni0307;
}
);
width = 535;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = h;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(110,0,l),
(155,257,ls),
(170,341,o),
(270,436,o),
(336,436,qs),
(441,436,o),
(441,331,qs),
(441,311,o),
(436,281,qs),
(387,0,l),
(471,0,l),
(522,290,ls),
(528,323,o),
(528,352,qs),
(528,430,o),
(444,508,o),
(368,508,qs),
(313,508,o),
(214,456,o),
(182,411,q),
(233,700,l),
(149,700,l),
(26,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 1 2 3 1 76 0 0 0 33 77 0 3 3 1 97 0 1 1 42 77 4 1 2 2 34 2 78 19 36 21 35 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = h;
unicode = 104;
},
{
glyphname = hbar;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(110,0,l),
(155,257,ls),
(170,341,o),
(270,436,o),
(336,436,qs),
(441,436,o),
(441,331,qs),
(441,311,o),
(436,281,qs),
(387,0,l),
(471,0,l),
(522,290,ls),
(528,323,o),
(528,352,qs),
(528,430,o),
(444,508,o),
(368,508,qs),
(313,508,o),
(214,456,o),
(182,411,q),
(210,571,l),
(381,571,l),
(392,634,l),
(221,634,l),
(233,700,l),
(149,700,l),
(137,634,l),
(80,634,l),
(69,571,l),
(126,571,l),
(26,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
10 1 6 7 1 76 3 1 1 4 1 0 5 1 0 104 0 2 2 33 77 0 7 7 5 97 0 5 5 42 77 8 1 6 6 34 6 78 19 36 21 35 17 17 17 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = i;
kernLeft = i;
layers = (
{
anchors = (
{
name = bottom;
pos = (77,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(119,0,l),
(206,496,l),
(122,496,l),
(35,0,l)
);
},
{
closed = 1;
nodes = (
(218,606,o),
(252,639,o),
(252,663,qs),
(252,687,o),
(218,720,o),
(194,720,qs),
(169,720,o),
(136,688,o),
(136,663,qs),
(136,638,o),
(169,606,o),
(194,606,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 3 3 2 97 0 2 2 41 77 0 0 0 36 77 0 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
4 1 3 3 2 97 0 2 2 39 77 0 0 0 36 77 0 1 1 34 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 241;
}
);
note = i;
unicode = 105;
},
{
glyphname = dotlessi;
kernLeft = dotlessi;
layers = (
{
anchors = (
{
name = bottom;
pos = (68,0);
},
{
name = ogonek;
pos = (110,0);
},
{
name = top;
pos = (156,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(110,0,l),
(197,496,l),
(113,496,l),
(26,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 36 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 223;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = iacute;
kernLeft = iacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (68,0);
},
{
name = ogonek;
pos = (110,0);
},
{
name = top;
pos = (201,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (7,0);
ref = acutecomb;
}
);
width = 223;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = ibreve;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (68,0);
},
{
name = ogonek;
pos = (110,0);
},
{
name = top;
pos = (198,732);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-29,0);
ref = uni0306;
}
);
width = 223;
}
);
note = ibreve;
unicode = 301;
},
{
glyphname = icircumflex;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (68,0);
},
{
name = ogonek;
pos = (110,0);
},
{
name = top;
pos = (198,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-25,0);
ref = uni0302;
}
);
width = 223;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (68,0);
},
{
name = ogonek;
pos = (110,0);
},
{
name = top;
pos = (195,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-36,0);
ref = uni0308.narrow;
}
);
width = 223;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = i.loclTRK;
layers = (
{
anchors = (
{
name = bottom;
pos = (68,0);
},
{
name = ogonek;
pos = (110,0);
},
{
name = top;
pos = (195,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (53,0);
ref = uni0307;
}
);
width = 223;
}
);
note = i.loclTRK;
},
{
glyphname = igrave;
kernLeft = igrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (68,0);
},
{
name = ogonek;
pos = (110,0);
},
{
name = top;
pos = (201,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (8,0);
ref = gravecomb;
}
);
width = 223;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = imacron;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (68,0);
},
{
name = ogonek;
pos = (110,0);
},
{
name = top;
pos = (185,695);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-69,0);
ref = uni0304;
}
);
width = 223;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = iogonek;
kernLeft = dotlessi;
layers = (
{
anchors = (
{
name = bottom;
pos = (68,0);
},
{
name = ogonek;
pos = (110,0);
},
{
name = top;
pos = (195,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,606,o),
(243,639,o),
(243,664,qs),
(243,688,o),
(209,720,o),
(185,720,qs),
(160,720,o),
(127,688,o),
(127,664,qs),
(127,639,o),
(160,606,o),
(185,606,qs)
);
},
{
closed = 1;
nodes = (
(41,-203,o),
(80,-190,q),
(89,-134,l),
(53,-149,o),
(22,-149,qs),
(-2,-149,o),
(-31,-128,o),
(-31,-109,qs),
(-31,-63,o),
(47,-28,qs),
(110,0,l),
(197,496,l),
(113,496,l),
(29,15,l),
(-41,-15,o),
(-101,-85,o),
(-101,-127,qs),
(-101,-164,o),
(-43,-203,o),
(2,-203,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
28 1 3 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
5 1 1 1 0 97 0 0 0 41 77 0 2 2 36 77 0 3 3 4 97 6 1 4 4 38 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 3 6 1 4 3 4 101 5 1 1 1 0 97 0 0 0 41 77 0 2 2 36 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 6 1 4 3 4 101 5 1 1 1 0 97 0 0 0 39 77 0 2 2 36 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
12 12 0 0 12 31 12 30 27 25 19 18 0 11 0 10 36 7 8 23
CALL[ ]	/* CallFunction */";
};
width = 223;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = itilde;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (68,0);
},
{
name = ogonek;
pos = (110,0);
},
{
name = top;
pos = (193,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-39,0);
ref = tildecomb;
}
);
width = 223;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = ij;
layers = (
{
anchors = (
{
name = bottom;
pos = (77,0);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = i;
},
{
alignment = -1;
pos = (241,0);
ref = j;
}
);
width = 483;
}
);
note = ij;
unicode = 307;
},
{
glyphname = j;
kernLeft = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-65,-220,ls),
(78,-220,o),
(101,-82,qs),
(203,496,l),
(119,496,l),
(17,-80,ls),
(11,-116,o),
(-28,-148,o),
(-65,-148,qs),
(-103,-148,l),
(-116,-220,l)
);
},
{
closed = 1;
nodes = (
(216,606,o),
(249,638,o),
(249,663,qs),
(249,688,o),
(216,720,o),
(192,720,qs),
(167,720,o),
(134,688,o),
(134,663,qs),
(134,638,o),
(167,606,o),
(192,606,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
5 1 4 4 3 97 0 3 3 41 77 0 1 1 36 77 0 0 0 2 97 0 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
5 1 4 4 3 97 0 3 3 39 77 0 1 1 36 77 0 0 0 2 97 0 2 2 38 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
11 11 11 22 11 21 37 34 19 32 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 242;
}
);
note = j;
unicode = 106;
},
{
glyphname = uni0237;
layers = (
{
anchors = (
{
name = bottom;
pos = (23,-310);
},
{
name = top;
pos = (165,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-65,-220,ls),
(78,-220,o),
(101,-82,qs),
(203,496,l),
(119,496,l),
(17,-80,ls),
(11,-116,o),
(-28,-148,o),
(-65,-148,qs),
(-103,-148,l),
(-116,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 1 1 36 77 0 0 0 2 97 0 2 2 38 2 78 34 19 32 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 242;
}
);
note = uni0237;
unicode = 567;
},
{
glyphname = uni006A0301;
layers = (
{
anchors = (
{
name = bottom;
pos = (23,-310);
},
{
name = top;
pos = (210,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni0237;
},
{
alignment = -1;
pos = (16,0);
ref = acutecomb;
}
);
width = 242;
}
);
note = uni006A0301;
},
{
glyphname = k;
kernRight = k;
layers = (
{
anchors = (
{
name = bottom;
pos = (212,0);
},
{
name = top;
pos = (387,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(109,0,l),
(155,261,l),
(351,0,l),
(453,0,l),
(244,273,l),
(511,496,l),
(400,496,l),
(160,287,l),
(233,700,l),
(149,700,l),
(25,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
8 5 2 3 2 1 1 76 0 0 0 33 77 0 1 1 36 77 3 1 2 2 34 2 78 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 512;
}
);
note = k;
unicode = 107;
},
{
glyphname = uni0137;
kernRight = k;
layers = (
{
anchors = (
{
name = bottom;
pos = (170,-238);
},
{
name = top;
pos = (387,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = k;
},
{
alignment = -1;
pos = (207,0);
ref = uni0326;
}
);
width = 512;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = l;
layers = (
{
anchors = (
{
name = bottom;
pos = (68,0);
},
{
name = top;
pos = (190,700);
},
{
name = topright;
pos = (334,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(109,0,l),
(233,700,l),
(149,700,l),
(25,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 223;
}
);
note = l;
unicode = 108;
},
{
glyphname = lacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (68,0);
},
{
name = top;
pos = (231,931);
},
{
name = topright;
pos = (334,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (5,0);
ref = acutecomb.case;
}
);
width = 223;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = lcaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (68,0);
},
{
name = top;
pos = (190,700);
},
{
name = topright;
pos = (334,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (202,0);
ref = uni030C.alt;
}
);
width = 223;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = uni013C;
layers = (
{
anchors = (
{
name = bottom;
pos = (26,-238);
},
{
name = top;
pos = (190,700);
},
{
name = topright;
pos = (334,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (63,0);
ref = uni0326;
}
);
width = 223;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(111,0,l),
(235,700,l),
(151,700,l),
(27,0,l)
);
},
{
closed = 1;
nodes = (
(323,318,o),
(353,347,o),
(353,367,qs),
(353,388,o),
(323,417,o),
(303,417,qs),
(282,417,o),
(253,388,o),
(253,367,qs),
(253,347,o),
(282,318,o),
(303,318,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 4 1 3 1 2 3 105 0 0 0 33 77 0 1 1 34 1 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 342;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = lslash;
kernLeft = lslash;
kernRight = lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(119,0,l),
(188,387,l),
(267,418,l),
(281,496,l),
(202,465,l),
(243,700,l),
(159,700,l),
(112,431,l),
(32,401,l),
(19,322,l),
(98,352,l),
(35,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
7 6 1 3 1 0 1 76 0 0 0 33 77 0 1 1 34 1 78 21 20 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 267;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = m;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(110,0,l),
(155,257,ls),
(165,313,o),
(216,394,o),
(285,436,o),
(322,436,qs),
(368,436,o),
(416,381,o),
(416,328,qs),
(416,304,o),
(412,281,qs),
(363,0,l),
(446,0,l),
(495,275,ls),
(503,322,o),
(552,396,o),
(622,436,o),
(659,436,qs),
(704,436,o),
(753,383,o),
(753,331,qs),
(753,311,o),
(748,281,qs),
(699,0,l),
(783,0,l),
(834,290,ls),
(840,323,o),
(840,351,qs),
(840,414,o),
(765,508,o),
(679,508,qs),
(627,508,o),
(528,454,o),
(496,407,q),
(481,457,o),
(402,508,o),
(346,508,qs),
(297,508,o),
(211,459,o),
(181,415,q),
(188,496,l),
(113,496,l),
(26,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
8 2 2 3 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
6 1 4 4 0 97 2 1 2 0 0 36 77 7 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 0 36 77 6 1 4 4 1 97 2 1 1 1 42 77 7 5 2 3 3 34 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
20 37 20 37 21 36 35 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 885;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = top;
pos = (331,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(110,0,l),
(157,266,ls),
(170,342,o),
(271,436,o),
(336,436,qs),
(441,436,o),
(441,329,qs),
(441,309,o),
(436,281,qs),
(387,0,l),
(471,0,l),
(522,290,ls),
(528,320,o),
(528,348,qs),
(528,425,o),
(443,508,o),
(368,508,qs),
(311,508,o),
(211,454,o),
(179,406,q),
(189,496,l),
(113,496,l),
(26,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 2 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 3 3 0 97 1 1 0 0 36 77 4 1 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 36 77 0 3 3 1 97 0 1 1 42 77 4 1 2 2 34 2 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
19 36 21 35 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = n;
unicode = 110;
},
{
glyphname = nacute;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = top;
pos = (376,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (182,0);
ref = acutecomb;
}
);
width = 573;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = ncaron;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = top;
pos = (373,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (150,0);
ref = uni030C;
}
);
width = 573;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = uni0146;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (201,-238);
},
{
name = top;
pos = (331,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (238,0);
ref = uni0326;
}
);
width = 573;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = ntilde;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = top;
pos = (368,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (136,0);
ref = tildecomb;
}
);
width = 573;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = eng;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = top;
pos = (331,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(110,0,l),
(157,266,ls),
(171,346,o),
(271,436,o),
(336,436,qs),
(441,436,o),
(441,329,qs),
(441,309,o),
(436,281,qs),
(373,-80,ls),
(366,-117,o),
(328,-148,o),
(291,-148,qs),
(252,-148,l),
(239,-220,l),
(291,-220,ls),
(361,-220,o),
(443,-153,o),
(456,-82,qs),
(522,290,ls),
(528,320,o),
(528,348,qs),
(528,425,o),
(443,508,o),
(368,508,qs),
(311,508,o),
(211,454,o),
(179,406,q),
(189,496,l),
(113,496,l),
(26,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 5 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 4 4 0 97 1 1 0 0 36 77 0 5 5 34 77 0 3 3 2 97 0 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 0 0 36 77 0 4 4 1 97 0 1 1 42 77 0 5 5 34 77 0 3 3 2 97 0 2 2 38 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
19 38 33 39 35 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = eng;
unicode = 331;
},
{
glyphname = o;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (253,0);
},
{
name = ogonek;
pos = (367,10);
},
{
name = top;
pos = (341,496);
},
{
name = topright;
pos = (617,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(338,-12,o),
(472,69,o),
(549,210,o),
(549,295,qs),
(549,358,o),
(495,454,o),
(399,508,o),
(337,508,qs),
(256,508,o),
(122,429,o),
(43,290,o),
(43,204,qs),
(43,142,o),
(97,43,o),
(193,-12,o),
(255,-12,qs)
);
},
{
closed = 1;
nodes = (
(206,60,o),
(131,141,o),
(131,207,qs),
(131,272,o),
(182,376,o),
(271,436,o),
(326,436,qs),
(384,436,o),
(463,357,o),
(463,289,qs),
(463,224,o),
(412,120,o),
(322,60,o),
(266,60,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 42 77 5 1 3 3 1 97 4 1 1 1 40 1 78 16 16 0 0 16 29 16 28 23 21 0 15 0 14 38 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = o;
unicode = 111;
},
{
glyphname = oacute;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (253,0);
},
{
name = ogonek;
pos = (367,10);
},
{
name = top;
pos = (386,747);
},
{
name = topright;
pos = (617,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (192,0);
ref = acutecomb;
}
);
width = 593;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = obreve;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (253,0);
},
{
name = ogonek;
pos = (367,10);
},
{
name = top;
pos = (383,732);
},
{
name = topright;
pos = (617,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (156,0);
ref = uni0306;
}
);
width = 593;
}
);
note = obreve;
unicode = 335;
},
{
glyphname = ocircumflex;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (253,0);
},
{
name = ogonek;
pos = (367,10);
},
{
name = top;
pos = (383,733);
},
{
name = topright;
pos = (617,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (160,0);
ref = uni0302;
}
);
width = 593;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = odieresis;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (253,0);
},
{
name = ogonek;
pos = (367,10);
},
{
name = top;
pos = (380,720);
},
{
name = topright;
pos = (617,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (149,0);
ref = uni0308;
}
);
width = 593;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = ograve;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (253,0);
},
{
name = ogonek;
pos = (367,10);
},
{
name = top;
pos = (386,747);
},
{
name = topright;
pos = (617,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (193,0);
ref = gravecomb;
}
);
width = 593;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = ohungarumlaut;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (253,0);
},
{
name = ogonek;
pos = (367,10);
},
{
name = top;
pos = (376,698);
},
{
name = topright;
pos = (617,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (181,0);
ref = uni030B;
}
);
width = 593;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = omacron;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (253,0);
},
{
name = ogonek;
pos = (367,10);
},
{
name = top;
pos = (370,695);
},
{
name = topright;
pos = (617,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (116,0);
ref = uni0304;
}
);
width = 593;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(338,-12,o),
(473,70,o),
(551,211,o),
(551,295,qs),
(551,366,o),
(516,419,q),
(597,496,l),
(518,496,l),
(480,460,l),
(422,508,o),
(338,508,qs),
(257,508,o),
(122,428,o),
(45,289,o),
(45,204,qs),
(45,134,o),
(81,78,q),
(-1,0,l),
(79,0,l),
(117,37,l),
(174,-12,o),
(257,-12,qs)
);
},
{
closed = 1;
nodes = (
(212,58,o),
(175,92,q),
(453,358,l),
(466,329,o),
(466,289,qs),
(466,234,o),
(421,128,o),
(332,58,o),
(268,58,qs)
);
},
{
closed = 1;
nodes = (
(143,138,l),
(130,168,o),
(130,207,qs),
(130,261,o),
(175,368,o),
(265,438,o),
(328,438,qs),
(384,438,o),
(421,404,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
12 1 5 1 39 38 28 27 15 4 6 4 5 1 1 0 4 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
12 1 5 2 39 38 28 27 15 4 6 4 5 1 1 0 4 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 42 77 7 1 4 4 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 36 77 0 5 5 1 97 0 1 1 42 77 0 0 0 34 77 7 1 4 4 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
22 22 0 0 33 31 22 30 22 29 0 21 0 20 18 38 18 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = otilde;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (253,0);
},
{
name = ogonek;
pos = (367,10);
},
{
name = top;
pos = (378,705);
},
{
name = topright;
pos = (617,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (146,0);
ref = tildecomb;
}
);
width = 593;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = oe;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (448,0);
},
{
name = top;
pos = (536,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(323,-12,o),
(440,47,o),
(481,98,q),
(505,46,o),
(599,-12,o),
(663,-12,qs),
(738,-12,o),
(876,70,o),
(914,148,q),
(831,148,l),
(806,106,o),
(726,59,o),
(675,59,qs),
(618,59,o),
(541,131,o),
(541,198,qs),
(541,213,o),
(544,229,q),
(939,229,l),
(952,298,o),
(952,319,qs),
(952,368,o),
(911,454,o),
(822,508,o),
(756,508,qs),
(687,508,o),
(566,448,o),
(526,394,q),
(502,448,o),
(403,508,o),
(337,508,qs),
(256,508,o),
(121,428,o),
(43,289,o),
(43,204,qs),
(43,148,o),
(92,49,o),
(188,-12,o),
(255,-12,qs)
);
},
{
closed = 1;
nodes = (
(200,60,o),
(131,142,o),
(131,207,qs),
(131,261,o),
(176,367,o),
(264,436,o),
(326,436,qs),
(384,436,o),
(463,357,o),
(463,289,qs),
(463,234,o),
(418,128,o),
(329,60,o),
(266,60,qs)
);
},
{
closed = 1;
nodes = (
(556,294,l),
(576,361,o),
(679,437,o),
(742,437,qs),
(800,437,o),
(870,373,o),
(870,317,qs),
(870,310,o),
(868,294,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 80 values pushed */
10 1 10 7 35 1 3 4 2 76 0 4 2 3 2 4 3 128 0 10 0 2 4 10 2 103 9 1 7 7 0 97 1 1 0 0 42 77 12 8 2 3 3 5 97 11 6 2 5 5 40 5 78 39 39 0 0 61 60 58 56 39 52 39 51 46 44 0 38 0 37 34 18 36 21 36 38 13 8 28
CALL[ ]	/* CallFunction */";
};
width = 983;
}
);
note = oe;
unicode = 339;
},
{
glyphname = p;
kernLeft = p;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(70,-220,l),
(125,84,l),
(145,41,o),
(234,-12,o),
(290,-12,qs),
(372,-12,o),
(503,68,o),
(577,208,o),
(577,295,qs),
(577,391,o),
(465,508,o),
(372,508,qs),
(257,508,o),
(183,414,q),
(191,496,l),
(113,496,l),
(-14,-220,l)
);
},
{
closed = 1;
nodes = (
(230,61,o),
(152,142,o),
(152,209,qs),
(152,272,o),
(204,376,o),
(294,435,o),
(351,435,qs),
(414,435,o),
(490,350,o),
(490,283,qs),
(490,219,o),
(440,118,o),
(352,61,o),
(295,61,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
14 2 2 5 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 0 97 1 1 0 0 36 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 0 36 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
17 17 17 30 17 29 38 19 37 34 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = p;
unicode = 112;
},
{
glyphname = thorn;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(70,-220,l),
(125,84,l),
(145,41,o),
(234,-12,o),
(290,-12,qs),
(372,-12,o),
(503,68,o),
(577,208,o),
(577,295,qs),
(577,391,o),
(465,508,o),
(372,508,qs),
(260,508,o),
(184,419,q),
(233,700,l),
(148,700,l),
(-14,-220,l)
);
},
{
closed = 1;
nodes = (
(230,61,o),
(152,142,o),
(152,209,qs),
(152,272,o),
(204,376,o),
(294,435,o),
(351,435,qs),
(414,435,o),
(490,350,o),
(490,283,qs),
(490,219,o),
(440,118,o),
(352,61,o),
(295,61,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
14 2 2 5 4 1 76 0 0 0 33 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78 17 17 17 30 17 29 38 19 37 34 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = q;
kernLeft = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(385,-220,l),
(469,-220,l),
(595,496,l),
(519,496,l),
(496,413,l),
(475,458,o),
(390,508,o),
(326,508,qs),
(256,508,o),
(126,438,o),
(44,302,o),
(44,207,qs),
(44,152,o),
(87,52,o),
(179,-12,o),
(247,-12,qs),
(361,-12,o),
(437,82,q)
);
},
{
closed = 1;
nodes = (
(207,61,o),
(131,148,o),
(131,215,qs),
(131,269,o),
(176,370,o),
(265,435,o),
(329,435,qs),
(394,435,o),
(468,357,o),
(468,291,qs),
(468,237,o),
(423,131,o),
(334,61,o),
(271,61,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
17 12 2 5 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 1 97 2 1 1 1 42 77 6 1 5 5 0 97 0 0 0 40 77 0 3 3 38 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 2 36 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 0 97 0 0 0 40 77 0 3 3 38 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
18 18 18 31 18 30 39 17 19 38 32 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 621;
}
);
note = q;
unicode = 113;
},
{
glyphname = r;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (71,0);
},
{
name = top;
pos = (229,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(110,0,l),
(157,267,ls),
(184,420,o),
(347,420,qs),
(370,420,l),
(385,508,l),
(320,508,o),
(214,455,o),
(181,408,q),
(190,496,l),
(113,496,l),
(26,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 3 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 2 2 0 97 1 1 0 0 36 77 0 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 36 77 0 2 2 1 97 0 1 1 42 77 0 3 3 34 3 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
18 33 19 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 369;
}
);
note = r;
unicode = 114;
},
{
glyphname = racute;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (71,0);
},
{
name = top;
pos = (274,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (80,0);
ref = acutecomb;
}
);
width = 369;
}
);
note = racute;
unicode = 341;
},
{
glyphname = rcaron;
kernLeft = rcaron;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (71,0);
},
{
name = top;
pos = (271,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (48,0);
ref = uni030C;
}
);
width = 369;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = uni0157;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (29,-238);
},
{
name = top;
pos = (229,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (66,0);
ref = uni0326;
}
);
width = 369;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = s;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (216,0);
},
{
name = top;
pos = (304,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(285,-12,o),
(383,31,o),
(437,109,o),
(437,159,qs),
(437,219,o),
(348,277,o),
(279,292,qs),
(225,305,o),
(174,335,o),
(174,363,qs),
(174,394,o),
(234,437,o),
(279,437,qs),
(325,437,o),
(376,393,o),
(374,356,q),
(458,356,l),
(462,427,o),
(368,508,o),
(288,508,qs),
(231,508,o),
(139,467,o),
(87,394,o),
(87,350,qs),
(87,312,o),
(131,259,o),
(169,244,qs),
(206,228,o),
(241,221,qs),
(296,210,o),
(349,179,o),
(349,148,qs),
(349,106,o),
(286,59,o),
(232,59,qs),
(170,59,o),
(113,118,o),
(115,164,q),
(30,164,l),
(23,83,o),
(127,-12,o),
(220,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 42 77 0 1 1 5 97 6 1 5 5 40 5 78 0 0 0 41 0 40 34 18 45 34 18 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 504;
}
);
note = s;
unicode = 115;
},
{
glyphname = sacute;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (216,0);
},
{
name = top;
pos = (349,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (155,0);
ref = acutecomb;
}
);
width = 504;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = scaron;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (216,0);
},
{
name = top;
pos = (346,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (123,0);
ref = uni030C;
}
);
width = 504;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = scedilla;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (171,-259);
},
{
name = top;
pos = (304,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,-259,ls),
(264,-259,o),
(344,-194,o),
(344,-140,qs),
(344,-102,o),
(282,-62,o),
(230,-63,q),
(239,-11,l),
(329,-7,o),
(437,87,o),
(437,159,qs),
(437,219,o),
(348,277,o),
(279,292,qs),
(225,305,o),
(174,335,o),
(174,363,qs),
(174,394,o),
(234,437,o),
(279,437,qs),
(325,437,o),
(376,393,o),
(374,356,q),
(458,356,l),
(462,427,o),
(368,508,o),
(288,508,qs),
(231,508,o),
(139,467,o),
(87,394,o),
(87,350,qs),
(87,312,o),
(131,259,o),
(169,244,qs),
(206,228,o),
(241,221,qs),
(296,210,o),
(349,179,o),
(349,148,qs),
(349,106,o),
(286,59,o),
(232,59,qs),
(170,59,o),
(113,118,o),
(115,164,q),
(30,164,l),
(24,92,o),
(106,-1,o),
(183,-10,q),
(165,-113,l),
(214,-113,ls),
(275,-113,o),
(275,-149,qs),
(275,-177,o),
(235,-206,o),
(198,-206,qs),
(106,-206,l),
(97,-259,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
8 1 8 7 1 76 0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 100 0 6 6 4 97 0 4 4 42 77 0 3 3 7 97 0 7 7 40 7 78 57 55 17 26 34 18 45 34 20 35 32 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 504;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = uni0219;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (174,-238);
},
{
name = top;
pos = (304,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (211,0);
ref = uni0326;
}
);
width = 504;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = germandbls;
kernRight = germandbls;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(458,-10,o),
(555,36,o),
(610,119,o),
(610,172,qs),
(610,223,o),
(558,286,o),
(499,307,qs),
(454,322,o),
(398,352,o),
(398,377,qs),
(398,396,o),
(432,427,o),
(468,448,qs),
(514,478,ls),
(544,500,o),
(577,554,o),
(577,593,qs),
(577,653,o),
(477,732,o),
(387,732,qs),
(277,732,o),
(137,616,o),
(120,520,qs),
(27,0,l),
(111,0,l),
(202,512,ls),
(214,583,o),
(300,661,o),
(374,661,qs),
(429,661,o),
(491,618,o),
(491,581,qs),
(491,554,o),
(463,514,o),
(423,485,o),
(385,463,qs),
(348,441,o),
(311,392,o),
(311,360,qs),
(311,321,o),
(370,270,o),
(438,246,qs),
(484,229,o),
(524,191,o),
(524,163,qs),
(524,115,o),
(459,56,o),
(407,56,qs),
(359,56,o),
(306,108,o),
(306,153,qs),
(306,164,o),
(307,169,q),
(223,169,l),
(216,88,o),
(310,-10,o),
(397,-10,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 1 1 3 97 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 2 1 2 0 1 128 0 4 0 2 0 4 2 105 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 56 0 55 37 35 32 31 28 26 36 18 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 669;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = t;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (160,0);
},
{
name = top;
pos = (229,496);
},
{
name = topright;
pos = (349,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,0,l),
(296,72,l),
(231,72,ls),
(193,72,o),
(161,96,o),
(161,126,qs),
(163,154,l),
(212,425,l),
(358,425,l),
(371,496,l),
(224,496,l),
(246,615,l),
(161,615,l),
(140,496,l),
(63,496,l),
(50,425,l),
(127,425,l),
(79,154,ls),
(75,131,o),
(75,108,qs),
(75,51,o),
(140,0,o),
(205,0,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
16 1 5 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 1 1 2 112 4 1 0 0 1 95 3 1 1 1 36 77 0 5 5 6 95 7 1 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 1 2 133 4 1 0 0 1 95 3 1 1 1 36 77 0 5 5 6 95 7 1 6 6 34 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 0 22 0 21 36 17 17 17 17 21 8 8 28
CALL[ ]	/* CallFunction */";
};
width = 370;
}
);
note = t;
unicode = 116;
},
{
glyphname = tcaron;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (160,0);
},
{
name = top;
pos = (229,496);
},
{
name = topright;
pos = (349,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (217,0);
ref = uni030C.alt;
}
);
width = 370;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = uni0163;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (115,-259);
},
{
name = top;
pos = (229,496);
},
{
name = topright;
pos = (349,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,0,l),
(296,72,l),
(231,72,ls),
(193,72,o),
(161,96,o),
(161,126,qs),
(163,154,l),
(212,425,l),
(358,425,l),
(371,496,l),
(224,496,l),
(246,615,l),
(161,615,l),
(140,496,l),
(63,496,l),
(50,425,l),
(127,425,l),
(79,154,ls),
(75,131,o),
(75,108,qs),
(75,35,o),
(131,12,q),
(109,-113,l),
(158,-113,ls),
(219,-113,o),
(219,-149,qs),
(219,-177,o),
(179,-206,o),
(142,-206,qs),
(50,-206,l),
(41,-259,l),
(149,-259,ls),
(208,-259,o),
(288,-194,o),
(288,-140,qs),
(288,-102,o),
(226,-62,o),
(174,-63,q),
(185,1,l),
(205,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
33 1 9 4 17 1 10 9 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 6 5 5 6 112 0 0 0 3 2 0 3 105 0 2 0 1 2 1 99 8 1 4 4 5 95 7 1 5 5 36 77 0 9 9 10 95 11 1 10 10 34 10 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 6 5 6 133 0 0 0 3 2 0 3 105 0 2 0 1 2 1 99 8 1 4 4 5 95 7 1 5 5 36 77 0 9 9 10 95 11 1 10 10 34 10 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 39 0 38 37 35 17 17 17 17 22 35 33 36 17 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 370;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = uni021B;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (118,-238);
},
{
name = top;
pos = (229,496);
},
{
name = topright;
pos = (349,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (155,0);
ref = uni0326;
}
);
width = 370;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = u;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (460,0);
},
{
name = top;
pos = (331,496);
},
{
name = topright;
pos = (597,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(262,-12,o),
(362,42,o),
(394,90,q),
(384,0,l),
(460,0,l),
(547,496,l),
(463,496,l),
(416,230,ls),
(402,150,o),
(302,60,o),
(237,60,qs),
(132,60,o),
(132,167,qs),
(132,187,o),
(137,215,qs),
(186,496,l),
(102,496,l),
(51,206,ls),
(45,176,o),
(45,148,qs),
(45,71,o),
(130,-12,o),
(205,-12,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
19 1 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
2 1 0 0 36 77 0 1 1 3 98 5 4 2 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 36 77 0 3 3 34 77 0 1 1 4 98 5 1 4 4 40 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 22 0 21 17 19 36 21 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = u;
unicode = 117;
},
{
glyphname = uacute;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (460,0);
},
{
name = top;
pos = (376,747);
},
{
name = topright;
pos = (597,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (182,0);
ref = acutecomb;
}
);
width = 573;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ubreve;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (460,0);
},
{
name = top;
pos = (373,732);
},
{
name = topright;
pos = (597,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (146,0);
ref = uni0306;
}
);
width = 573;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = ucircumflex;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (460,0);
},
{
name = top;
pos = (373,733);
},
{
name = topright;
pos = (597,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (150,0);
ref = uni0302;
}
);
width = 573;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (460,0);
},
{
name = top;
pos = (370,720);
},
{
name = topright;
pos = (597,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (139,0);
ref = uni0308;
}
);
width = 573;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = ugrave;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (460,0);
},
{
name = top;
pos = (376,747);
},
{
name = topright;
pos = (597,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (183,0);
ref = gravecomb;
}
);
width = 573;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uhungarumlaut;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (460,0);
},
{
name = top;
pos = (366,698);
},
{
name = topright;
pos = (597,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (171,0);
ref = uni030B;
}
);
width = 573;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = umacron;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (460,0);
},
{
name = top;
pos = (360,695);
},
{
name = topright;
pos = (597,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (106,0);
ref = uni0304;
}
);
width = 573;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = uogonek;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (460,0);
},
{
name = top;
pos = (331,496);
},
{
name = topright;
pos = (597,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(262,-12,o),
(362,42,o),
(394,90,q),
(386,18,l),
(312,-12,o),
(249,-84,o),
(249,-127,qs),
(249,-164,o),
(307,-203,o),
(352,-203,qs),
(391,-203,o),
(430,-190,q),
(439,-134,l),
(403,-149,o),
(372,-149,qs),
(348,-149,o),
(319,-128,o),
(319,-109,qs),
(319,-63,o),
(397,-28,qs),
(460,0,l),
(547,496,l),
(463,496,l),
(416,230,ls),
(402,150,o),
(302,60,o),
(237,60,qs),
(132,60,o),
(132,167,qs),
(132,187,o),
(137,215,qs),
(186,496,l),
(102,496,l),
(51,206,ls),
(45,176,o),
(45,148,qs),
(45,71,o),
(130,-12,o),
(205,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
35 1 1 0 25 1 3 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
2 1 0 0 36 77 0 1 1 5 98 6 1 5 5 40 77 0 3 3 4 97 0 4 4 38 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 0 4 3 4 101 2 1 0 0 36 77 0 1 1 5 98 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 38 0 37 35 38 19 36 21 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = uring;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (460,0);
},
{
name = top;
pos = (378,763);
},
{
name = topright;
pos = (597,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (180,0);
ref = uni030A;
}
);
width = 573;
}
);
note = uring;
unicode = 367;
},
{
glyphname = utilde;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (460,0);
},
{
name = top;
pos = (368,705);
},
{
name = topright;
pos = (597,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (136,0);
ref = tildecomb;
}
);
width = 573;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = v;
kernLeft = v;
kernRight = v;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,0,l),
(554,496,l),
(465,496,l),
(235,80,l),
(150,496,l),
(63,496,l),
(171,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 2 0 1 76 1 1 0 0 36 77 0 2 2 34 2 78 17 18 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 530;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (329,0);
},
{
name = top;
pos = (417,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(207,0,l),
(401,409,l),
(451,0,l),
(537,0,l),
(769,496,l),
(685,496,l),
(511,107,l),
(464,496,l),
(369,496,l),
(184,107,l),
(148,496,l),
(63,496,l),
(122,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
10 5 2 3 3 0 1 76 2 1 2 0 0 36 77 4 1 3 3 34 3 78 18 17 18 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = w;
unicode = 119;
},
{
glyphname = wacute;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (329,0);
},
{
name = top;
pos = (462,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (268,0);
ref = acutecomb;
}
);
width = 745;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = wcircumflex;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (329,0);
},
{
name = top;
pos = (459,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (236,0);
ref = uni0302;
}
);
width = 745;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = wdieresis;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (329,0);
},
{
name = top;
pos = (456,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (225,0);
ref = uni0308;
}
);
width = 745;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = wgrave;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (329,0);
},
{
name = top;
pos = (462,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (269,0);
ref = gravecomb;
}
);
width = 745;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = x;
kernLeft = x;
kernRight = x;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(242,205,l),
(346,0,l),
(432,0,l),
(306,245,l),
(523,496,l),
(433,496,l),
(258,291,l),
(154,496,l),
(67,496,l),
(194,251,l),
(-24,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 36 77 3 1 2 2 34 2 78 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 499;
}
);
note = x;
unicode = 120;
},
{
glyphname = y;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = top;
pos = (322,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,-220,l),
(580,496,l),
(492,496,l),
(251,110,l),
(152,496,l),
(63,496,l),
(192,19,l),
(41,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
3 1 2 0 1 76 1 1 0 0 36 77 0 2 2 38 2 78 17 18 17 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = y;
unicode = 121;
},
{
glyphname = yacute;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = top;
pos = (367,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (173,0);
ref = acutecomb;
}
);
width = 555;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = ycircumflex;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = top;
pos = (364,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (141,0);
ref = uni0302;
}
);
width = 555;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = ydieresis;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = top;
pos = (361,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (130,0);
ref = uni0308;
}
);
width = 555;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = ygrave;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = top;
pos = (367,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (174,0);
ref = gravecomb;
}
);
width = 555;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = uni1EF9;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = top;
pos = (359,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (127,0);
ref = tildecomb;
}
);
width = 555;
}
);
note = uni1EF9;
unicode = 7929;
},
{
glyphname = z;
kernLeft = z;
kernRight = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (193,0);
},
{
name = top;
pos = (281,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(371,0,l),
(384,70,l),
(104,70,l),
(453,427,l),
(466,496,l),
(100,496,l),
(87,426,l),
(357,426,l),
(9,69,l),
(-4,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 0 0 1 95 0 1 1 36 77 0 2 2 3 95 0 3 3 34 3 78 17 18 17 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 464;
}
);
note = z;
unicode = 122;
},
{
glyphname = zacute;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (193,0);
},
{
name = top;
pos = (326,747);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (132,0);
ref = acutecomb;
}
);
width = 464;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = zcaron;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (193,0);
},
{
name = top;
pos = (323,733);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (100,0);
ref = uni030C;
}
);
width = 464;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = zdotaccent;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (193,0);
},
{
name = top;
pos = (320,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (178,0);
ref = uni0307;
}
);
width = 464;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = uniA78C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,339,l),
(236,700,l),
(145,700,l),
(96,339,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 221;
}
);
note = uniA78C;
unicode = 42892;
},
{
glyphname = fi;
layers = (
{
anchors = (
{
name = caret_1;
pos = (288,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(136,0,l),
(211,425,l),
(333,425,l),
(346,496,l),
(223,496,l),
(235,560,ls),
(242,597,o),
(280,628,o),
(318,628,qs),
(354,628,l),
(367,700,l),
(318,700,ls),
(247,700,o),
(164,633,o),
(151,562,qs),
(139,496,l),
(65,496,l),
(53,425,l),
(127,425,l),
(52,0,l)
);
},
{
closed = 1;
nodes = (
(453,0,l),
(540,496,l),
(456,496,l),
(369,0,l)
);
},
{
closed = 1;
nodes = (
(552,606,o),
(586,639,o),
(586,663,qs),
(586,687,o),
(552,720,o),
(528,720,qs),
(503,720,o),
(470,688,o),
(470,663,qs),
(470,638,o),
(503,606,o),
(528,606,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 3 2 97 0 2 2 33 77 11 1 10 10 9 97 0 9 9 41 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 3 3 2 97 0 2 2 33 77 11 1 10 10 9 97 0 9 9 39 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
24 24 24 35 24 34 30 28 17 17 17 17 19 33 35 17 16 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
note = fi;
unicode = 64257;
},
{
glyphname = fl;
layers = (
{
anchors = (
{
name = caret_1;
pos = (279,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(136,0,l),
(211,425,l),
(333,425,l),
(346,496,l),
(223,496,l),
(235,560,ls),
(242,597,o),
(280,628,o),
(318,628,qs),
(354,628,l),
(367,700,l),
(318,700,ls),
(247,700,o),
(164,633,o),
(151,562,qs),
(139,496,l),
(65,496,l),
(53,425,l),
(127,425,l),
(52,0,l)
);
},
{
closed = 1;
nodes = (
(443,0,l),
(567,700,l),
(483,700,l),
(359,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 2 97 7 1 2 2 33 77 5 1 0 0 1 95 4 1 1 1 36 77 8 1 6 6 34 6 78 17 17 17 17 19 33 35 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 557;
}
);
note = fl;
unicode = 64258;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(245,346,o),
(312,389,o),
(331,421,q),
(337,355,o),
(412,355,q),
(421,406,l),
(403,406,o),
(389,421,o),
(389,436,qs),
(389,446,o),
(392,462,qs),
(411,568,ls),
(414,588,o),
(414,601,qs),
(414,655,o),
(347,710,o),
(289,710,qs),
(230,710,o),
(136,649,o),
(119,593,q),
(179,593,l),
(191,626,o),
(247,660,o),
(282,660,qs),
(316,660,o),
(354,625,o),
(354,592,qs),
(354,576,o),
(352,564,q),
(259,564,ls),
(185,564,o),
(86,500,o),
(86,439,qs),
(86,395,o),
(149,346,o),
(198,346,qs)
);
},
{
closed = 1;
nodes = (
(185,396,o),
(149,421,o),
(149,446,qs),
(149,483,o),
(209,518,o),
(255,518,qs),
(343,518,l),
(335,469,o),
(265,396,o),
(215,396,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
32 1 4 7 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 10 8 2 4 4 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 9 6 2 5 5 58 77 10 1 8 8 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 10 8 2 4 4 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 9 6 2 5 5 58 77 10 1 8 8 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 10 8 2 4 4 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 9 6 2 5 5 58 77 10 1 8 8 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 0 5 5 58 77 10 1 8 8 6 97 9 1 6 6 58 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
36 36 0 0 36 45 36 44 40 38 0 35 0 34 17 25 34 18 36 36 11 10 28
CALL[ ]	/* CallFunction */";
};
width = 438;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(284,348,o),
(378,405,o),
(432,503,o),
(432,563,qs),
(432,630,o),
(349,712,o),
(283,712,qs),
(227,712,o),
(133,656,o),
(78,559,o),
(78,499,qs),
(78,433,o),
(161,348,o),
(226,348,qs)
);
},
{
closed = 1;
nodes = (
(192,398,o),
(139,455,o),
(139,501,qs),
(139,546,o),
(175,620,o),
(238,662,o),
(276,662,qs),
(317,662,o),
(372,606,o),
(372,559,qs),
(372,514,o),
(336,440,o),
(273,398,o),
(234,398,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 59 77 5 1 3 3 1 97 4 1 1 1 58 1 78 14 14 0 0 14 27 14 26 21 19 0 13 0 12 37 6 10 23
CALL[ ]	/* CallFunction */";
};
width = 410;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = uni042F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-27,0,l),
(77,0,l),
(312,310,l),
(428,310,l),
(373,0,l),
(457,0,l),
(581,700,l),
(374,700,ls),
(248,700,o),
(101,584,o),
(101,475,qs),
(101,414,o),
(170,337,o),
(232,326,q)
);
},
{
closed = 1;
nodes = (
(251,381,o),
(188,435,o),
(188,483,qs),
(188,560,o),
(272,630,o),
(363,630,qs),
(484,630,l),
(440,381,l),
(319,381,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
13 1 2 5 1 76 3 1 1 2 1 134 0 0 0 4 5 0 4 103 6 1 5 2 2 5 87 6 1 5 5 2 95 0 2 5 2 79 14 14 14 22 14 21 35 17 17 17 36 7 6 27
CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
note = uni042F;
unicode = (1071,1103);
},
{
glyphname = uni0394;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-32,0,l),
(603,0,l),
(615,65,l),
(444,700,l),
(374,700,l),
(-20,65,l)
);
},
{
closed = 1;
nodes = (
(65,65,l),
(392,604,l),
(530,65,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 23 77 0 2 2 1 95 0 1 1 24 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 0 2 0 133 0 2 2 1 95 0 1 1 24 1 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
19 18 16 3 7 25
CALL[ ]	/* CallFunction */";
};
width = 695;
}
);
note = uni0394;
unicode = 916;
},
{
glyphname = Pi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(165,0,l),
(242,430,l),
(469,430,l),
(393,0,l),
(477,0,l),
(553,430,l),
(632,430,l),
(644,496,l),
(90,496,l),
(78,430,l),
(158,430,l),
(81,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 1 4 2 2 0 3 1 0 103 5 1 3 3 24 3 78 17 17 17 17 17 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 646;
}
);
note = Pi;
unicode = 928;
},
{
glyphname = uni03A9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(298,0,l),
(310,69,l),
(238,89,o),
(150,216,o),
(150,307,qs),
(150,398,o),
(234,548,o),
(382,636,o),
(473,636,qs),
(530,636,o),
(631,589,o),
(696,489,o),
(696,412,qs),
(696,345,o),
(640,202,o),
(523,89,o),
(437,69,q),
(424,0,l),
(699,0,l),
(712,66,l),
(568,66,l),
(628,96,o),
(725,202,o),
(782,345,o),
(782,425,qs),
(782,500,o),
(716,632,o),
(582,712,o),
(486,712,qs),
(374,712,o),
(181,606,o),
(65,420,o),
(65,306,qs),
(65,244,o),
(121,105,o),
(179,66,q),
(34,66,l),
(22,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
35 1 0 4 1 76 0 4 4 1 97 0 1 1 23 77 2 1 0 0 3 95 5 1 3 3 24 3 78 23 40 17 23 38 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 805;
}
);
note = uni03A9;
unicode = 937;
},
{
glyphname = uni03BC;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(90,-220,l),
(132,20,l),
(169,-12,o),
(235,-12,qs),
(291,-12,o),
(391,42,o),
(424,88,q),
(414,0,l),
(490,0,l),
(577,496,l),
(493,496,l),
(448,239,ls),
(433,155,o),
(333,60,o),
(267,60,qs),
(162,60,o),
(162,164,qs),
(162,183,o),
(167,215,qs),
(216,496,l),
(132,496,l),
(6,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
14 1 1 0 19 1 3 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
2 1 0 1 0 133 0 3 3 24 77 0 1 1 4 97 0 4 4 24 77 0 5 5 25 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
2 1 0 1 0 133 0 1 0 4 5 1 4 105 0 3 3 24 77 0 5 5 25 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 35 17 19 36 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = uni03BC;
unicode = 956;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(378,-12,o),
(530,147,o),
(594,369,o),
(594,472,qs),
(594,585,o),
(492,712,o),
(383,712,qs),
(263,712,o),
(110,556,o),
(44,335,o),
(44,231,qs),
(44,117,o),
(146,-12,o),
(255,-12,qs)
);
},
{
closed = 1;
nodes = (
(198,63,o),
(130,155,o),
(130,242,qs),
(130,321,o),
(177,504,o),
(285,637,o),
(370,637,qs),
(439,637,o),
(507,545,o),
(507,460,qs),
(507,382,o),
(457,197,o),
(350,63,o),
(268,63,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 39 77 5 1 3 3 1 97 4 1 1 1 40 1 78 14 14 0 0 14 27 14 26 21 19 0 13 0 12 37 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(519,0,l),
(531,69,l),
(353,69,l),
(465,700,l),
(421,700,l),
(155,606,l),
(142,532,l),
(367,605,l),
(272,69,l),
(57,69,l),
(45,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
3 2 2 0 1 1 76 0 1 1 33 77 2 1 0 0 3 96 0 3 3 34 3 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(491,0,l),
(504,70,l),
(141,70,l),
(382,278,ls),
(444,331,o),
(515,401,o),
(562,489,o),
(562,540,qs),
(562,619,o),
(465,712,o),
(381,712,qs),
(315,712,o),
(205,657,o),
(132,558,o),
(121,492,q),
(202,492,l),
(213,557,o),
(303,640,o),
(367,640,qs),
(421,640,o),
(477,578,o),
(477,530,qs),
(477,479,o),
(398,384,o),
(325,321,qs),
(305,303,l),
(42,73,l),
(29,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 39 77 0 3 3 4 95 0 4 4 34 4 78 17 23 35 18 39 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(346,-12,o),
(475,62,o),
(542,182,o),
(542,249,qs),
(542,303,o),
(490,381,o),
(405,420,o),
(356,420,qs),
(341,420,o),
(333,419,q),
(589,634,l),
(601,700,l),
(165,700,l),
(153,631,l),
(484,631,l),
(202,397,l),
(245,336,l),
(284,357,o),
(323,357,qs),
(387,357,o),
(460,298,o),
(460,243,qs),
(460,198,o),
(416,114,o),
(330,60,o),
(270,60,qs),
(203,60,o),
(127,129,o),
(127,184,qs),
(127,190,l),
(44,190,l),
(44,176,ls),
(44,88,o),
(157,-12,o),
(257,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
18 1 2 5 17 1 0 2 2 76 0 0 2 1 2 0 1 128 0 5 0 2 0 5 2 105 0 3 3 4 95 0 4 4 33 77 0 1 1 6 97 7 1 6 6 40 6 78 0 0 0 34 0 33 35 17 19 37 35 19 8 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(425,0,l),
(452,150,l),
(554,150,l),
(567,224,l),
(465,224,l),
(500,423,l),
(421,423,l),
(386,224,l),
(129,224,l),
(450,700,l),
(365,700,l),
(36,215,l),
(25,150,l),
(369,150,l),
(342,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 33 77 0 6 6 34 6 78 17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(343,-12,o),
(475,63,o),
(552,197,o),
(552,280,qs),
(552,339,o),
(501,430,o),
(411,481,o),
(354,481,qs),
(255,481,o),
(184,414,q),
(262,627,l),
(565,627,l),
(578,700,l),
(211,700,l),
(83,316,l),
(163,316,l),
(186,355,o),
(275,410,o),
(336,410,qs),
(397,410,o),
(470,329,o),
(470,266,qs),
(470,215,o),
(424,120,o),
(335,60,o),
(274,60,qs),
(214,60,o),
(131,128,o),
(130,189,q),
(47,189,l),
(47,184,ls),
(47,131,o),
(96,42,o),
(194,-12,o),
(264,-12,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
24 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 5 5 4 95 0 4 4 33 77 0 2 2 6 97 0 6 6 36 77 0 1 1 7 97 8 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 33 77 0 1 1 7 97 8 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 34 0 33 34 17 17 18 37 34 35 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(351,-12,o),
(470,56,o),
(542,178,o),
(542,253,qs),
(542,305,o),
(499,394,o),
(414,448,o),
(354,448,qs),
(231,448,o),
(154,336,q),
(182,475,o),
(299,639,o),
(386,639,qs),
(439,639,o),
(494,575,o),
(494,520,q),
(569,520,l),
(572,570,o),
(538,657,o),
(459,712,o),
(397,712,qs),
(316,712,o),
(166,599,o),
(71,380,o),
(71,230,qs),
(71,128,o),
(166,-12,o),
(282,-12,qs)
);
},
{
closed = 1;
nodes = (
(230,62,o),
(158,136,o),
(158,198,qs),
(158,247,o),
(203,328,o),
(282,375,o),
(331,375,qs),
(390,375,o),
(460,299,o),
(460,240,qs),
(460,193,o),
(418,111,o),
(341,62,o),
(290,62,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
17 1 6 5 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 39 77 8 1 6 6 4 97 7 1 4 4 40 4 78 28 28 0 0 28 41 28 40 35 33 0 27 0 26 35 34 19 37 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(204,0,l),
(611,637,l),
(622,700,l),
(130,700,l),
(117,628,l),
(521,628,l),
(113,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 95 0 1 1 33 77 0 2 2 34 2 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(340,-12,o),
(463,51,o),
(530,157,o),
(530,221,qs),
(530,275,o),
(477,357,o),
(422,373,q),
(480,394,o),
(569,480,o),
(569,550,qs),
(569,624,o),
(468,712,o),
(379,712,qs),
(306,712,o),
(192,657,o),
(128,562,o),
(128,504,qs),
(128,460,o),
(180,389,o),
(225,373,q),
(153,354,o),
(50,246,o),
(50,166,qs),
(50,104,o),
(114,24,o),
(211,-12,o),
(261,-12,qs)
);
},
{
closed = 1;
nodes = (
(209,62,o),
(135,122,o),
(135,176,qs),
(135,230,o),
(190,301,o),
(272,333,o),
(314,333,qs),
(373,333,o),
(447,276,o),
(447,218,qs),
(447,170,o),
(399,99,o),
(319,62,o),
(272,62,qs)
);
},
{
closed = 1;
nodes = (
(282,403,o),
(213,453,o),
(213,505,qs),
(213,566,o),
(301,640,o),
(367,640,qs),
(483,640,o),
(483,540,qs),
(483,496,o),
(440,434,o),
(372,403,o),
(334,403,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
19 6 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 39 77 7 1 3 3 1 97 6 1 1 1 40 1 78 41 41 27 27 0 0 41 52 41 51 47 45 27 40 27 39 34 32 0 26 0 25 44 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(320,-12,o),
(470,101,o),
(565,320,o),
(565,470,qs),
(565,572,o),
(470,712,o),
(354,712,qs),
(285,712,o),
(166,644,o),
(94,522,o),
(94,447,qs),
(94,395,o),
(137,306,o),
(222,252,o),
(282,252,qs),
(405,252,o),
(482,364,q),
(454,225,o),
(337,61,o),
(250,61,qs),
(197,61,o),
(142,125,o),
(142,180,q),
(67,180,l),
(64,130,o),
(98,43,o),
(177,-12,o),
(239,-12,qs)
);
},
{
closed = 1;
nodes = (
(246,325,o),
(176,401,o),
(176,460,qs),
(176,507,o),
(218,589,o),
(295,638,o),
(346,638,qs),
(406,638,o),
(478,564,o),
(478,502,qs),
(478,453,o),
(433,372,o),
(354,325,o),
(305,325,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
10 1 6 5 1 76 0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 39 77 0 1 1 4 97 7 1 4 4 40 4 78 28 28 0 0 28 41 28 40 35 33 0 27 0 26 38 35 34 19 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = nine;
unicode = 57;
},
{
glyphname = uni24EA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(331,46,o),
(192,128,o),
(110,267,o),
(110,350,qs),
(110,433,o),
(192,572,o),
(331,654,o),
(413,654,qs),
(496,654,o),
(635,572,o),
(717,433,o),
(717,350,qs),
(717,267,o),
(635,128,o),
(496,46,o),
(413,46,qs)
);
},
{
closed = 1;
nodes = (
(484,165,o),
(516,215,qs),
(548,265,o),
(548,350,qs),
(548,435,o),
(516,485,qs),
(484,535,o),
(414,535,qs),
(344,535,o),
(312,484,qs),
(279,435,o),
(279,350,qs),
(279,266,o),
(312,216,qs),
(344,165,o),
(414,165,qs)
);
},
{
closed = 1;
nodes = (
(380,223,o),
(362,256,qs),
(345,292,o),
(345,350,qs),
(345,408,o),
(362,444,qs),
(380,477,o),
(414,477,qs),
(449,477,o),
(465,444,qs),
(482,408,o),
(482,350,qs),
(482,292,o),
(465,256,qs),
(449,223,o),
(414,223,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
0 4 0 6 7 4 6 105 11 1 7 10 1 5 3 7 5 105 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 48 48 32 32 16 16 0 0 48 63 48 62 56 54 32 47 32 46 40 38 16 31 16 30 24 22 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni24EA;
unicode = 9450;
},
{
glyphname = uni2780;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(331,46,o),
(192,128,o),
(110,267,o),
(110,350,qs),
(110,433,o),
(192,572,o),
(331,654,o),
(413,654,qs),
(496,654,o),
(635,572,o),
(717,433,o),
(717,350,qs),
(717,267,o),
(635,128,o),
(496,46,o),
(413,46,qs)
);
},
{
closed = 1;
nodes = (
(539,176,l),
(539,231,l),
(458,231,l),
(458,533,l),
(423,533,l),
(303,489,l),
(303,439,l),
(396,460,l),
(396,231,l),
(300,231,l),
(300,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
36 35 34 3 4 5 1 76 0 5 2 4 2 5 4 128 6 1 4 0 7 3 4 7 104 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 16 16 0 0 42 41 40 39 38 37 33 32 16 31 16 30 24 22 0 15 0 14 38 10 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2780;
unicode = 10112;
},
{
glyphname = uni2781;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(677,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(677,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(330,46,o),
(190,128,o),
(109,268,o),
(109,350,qs),
(109,432,o),
(190,572,o),
(330,654,o),
(413,654,qs),
(495,654,o),
(634,572,o),
(716,433,o),
(716,350,qs),
(716,267,o),
(634,128,o),
(495,46,o),
(413,46,qs)
);
},
{
closed = 1;
nodes = (
(538,176,l),
(538,231,l),
(379,231,l),
(455,309,ls),
(489,341,o),
(530,399,o),
(530,432,qs),
(530,478,o),
(471,540,o),
(414,540,qs),
(359,540,o),
(293,477,o),
(292,421,q),
(356,421,l),
(356,449,o),
(385,484,o),
(413,484,qs),
(437,484,o),
(466,455,o),
(466,431,qs),
(466,416,o),
(445,382,o),
(414,349,o),
(401,336,qs),
(292,223,l),
(292,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 81 values pushed */
32 1 8 7 1 76 0 5 4 7 4 5 7 128 0 6 0 4 5 6 4 105 0 7 0 8 3 7 8 103 0 2 2 0 97 0 0 0 39 77 10 1 3 3 1 97 9 1 1 1 40 1 78 16 16 0 0 57 56 55 54 48 46 44 43 41 39 16 31 16 30 24 22 0 15 0 14 38 11 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2781;
unicode = 10113;
},
{
glyphname = uni2782;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(330,46,o),
(191,128,o),
(109,267,o),
(109,350,qs),
(109,433,o),
(191,572,o),
(330,654,o),
(413,654,qs),
(495,654,o),
(634,572,o),
(716,433,o),
(716,350,qs),
(716,267,o),
(634,128,o),
(495,46,o),
(413,46,qs)
);
},
{
closed = 1;
nodes = (
(474,158,o),
(542,227,o),
(542,277,qs),
(542,320,o),
(490,382,o),
(439,386,q),
(530,468,l),
(530,522,l),
(296,522,l),
(296,467,l),
(449,467,l),
(341,368,l),
(377,326,l),
(396,337,o),
(415,337,qs),
(442,337,o),
(479,306,o),
(479,277,qs),
(479,249,o),
(446,214,o),
(414,214,qs),
(386,214,o),
(349,248,o),
(349,275,q),
(285,275,l),
(287,218,o),
(358,158,o),
(414,158,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
52 1 7 8 53 47 2 6 7 46 1 4 6 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 6 7 4 7 6 114 0 4 5 7 4 5 126 0 8 0 7 6 8 7 103 0 5 12 1 9 3 5 9 105 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 98 10 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 6 7 4 7 6 4 128 0 4 5 7 4 5 126 0 8 0 7 6 8 7 103 0 5 12 1 9 3 5 9 105 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 98 10 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
32 32 16 16 0 0 32 59 32 58 51 50 49 48 45 43 39 37 35 34 16 31 16 30 24 22 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2782;
unicode = 10114;
},
{
glyphname = uni2783;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(494,176,l),
(494,242,l),
(536,242,l),
(536,299,l),
(494,299,l),
(494,392,l),
(433,392,l),
(433,299,l),
(334,299,l),
(450,533,l),
(386,533,l),
(265,294,l),
(265,242,l),
(429,242,l),
(429,176,l)
);
},
{
closed = 1;
nodes = (
(330,46,o),
(191,128,o),
(109,267,o),
(109,350,qs),
(109,433,o),
(191,572,o),
(330,654,o),
(413,654,qs),
(495,654,o),
(634,572,o),
(716,433,o),
(716,350,qs),
(716,267,o),
(634,128,o),
(495,46,o),
(413,46,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
18 1 2 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 3 9 5 9 3 5 128 0 5 4 4 5 112 0 8 2 10 2 8 114 6 1 4 7 1 2 8 4 2 104 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 3 9 5 9 3 5 128 0 5 4 9 5 4 126 0 8 2 10 2 8 114 6 1 4 7 1 2 8 4 2 104 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 3 9 5 9 3 5 128 0 5 4 9 5 4 126 0 8 2 10 2 8 10 128 6 1 4 7 1 2 8 4 2 104 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
31 31 0 0 31 46 31 45 39 37 30 29 28 27 26 25 24 23 22 21 20 19 17 16 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2783;
unicode = 10115;
},
{
glyphname = uni2784;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(330,46,o),
(191,128,o),
(109,267,o),
(109,350,qs),
(109,433,o),
(191,572,o),
(330,654,o),
(413,654,qs),
(496,654,o),
(635,572,o),
(717,433,o),
(717,350,qs),
(717,267,o),
(635,128,o),
(496,46,o),
(413,46,qs)
);
},
{
closed = 1;
nodes = (
(473,160,o),
(544,232,o),
(544,290,qs),
(544,343,o),
(483,413,o),
(428,413,qs),
(407,413,o),
(367,398,o),
(354,384,q),
(371,467,l),
(520,467,l),
(520,524,l),
(321,524,l),
(291,320,l),
(354,320,l),
(362,338,o),
(397,359,o),
(418,359,qs),
(447,359,o),
(481,320,o),
(481,289,qs),
(481,259,o),
(445,216,o),
(417,216,qs),
(391,216,o),
(355,243,o),
(350,267,q),
(286,267,l),
(288,220,o),
(362,160,o),
(417,160,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
53 1 6 10 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
0 7 6 4 9 7 114 0 4 5 6 4 5 126 0 8 0 9 10 8 9 103 0 10 0 6 7 10 6 105 0 5 14 1 11 3 5 11 105 0 2 2 0 97 0 0 0 39 77 13 1 3 3 1 98 12 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 63 values pushed */
0 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 8 0 9 10 8 9 103 0 10 0 6 7 10 6 105 0 5 14 1 11 3 5 11 105 0 2 2 0 97 0 0 0 39 77 13 1 3 3 1 98 12 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 38 values pushed */
32 32 16 16 0 0 32 62 32 61 57 55 52 51 50 49 48 47 45 43 39 37 35 34 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2784;
unicode = 10116;
},
{
glyphname = uni2785;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(331,46,o),
(192,128,o),
(110,267,o),
(110,350,qs),
(110,433,o),
(192,572,o),
(331,654,o),
(413,654,qs),
(496,654,o),
(635,572,o),
(717,433,o),
(717,350,qs),
(717,267,o),
(635,128,o),
(496,46,o),
(413,46,qs)
);
},
{
closed = 1;
nodes = (
(389,221,o),
(354,258,o),
(354,285,qs),
(354,311,o),
(390,347,o),
(415,347,qs),
(442,347,o),
(476,311,o),
(476,284,qs),
(476,256,o),
(440,221,o),
(416,221,qs)
);
},
{
closed = 1;
nodes = (
(472,165,o),
(538,237,o),
(538,286,qs),
(538,335,o),
(477,402,o),
(430,402,qs),
(403,402,o),
(357,375,o),
(346,354,q),
(346,406,o),
(378,481,o),
(417,481,qs),
(462,481,o),
(471,432,q),
(531,432,l),
(529,473,o),
(468,535,o),
(417,535,qs),
(348,535,o),
(282,420,o),
(282,338,qs),
(282,265,o),
(348,165,o),
(419,165,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 103 values pushed */
58 1 4 9 1 76 0 7 8 9 8 7 9 128 0 6 0 8 7 6 8 105 0 9 0 4 5 9 4 105 13 1 5 14 1 10 3 5 10 105 0 2 2 0 97 0 0 0 39 77 12 1 3 3 1 97 11 1 1 1 40 1 78 44 44 32 32 16 16 0 0 44 67 44 66 62 60 56 54 53 52 50 48 32 43 32 42 38 36 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2785;
unicode = 10117;
},
{
glyphname = uni2786;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(404,167,l),
(547,478,l),
(547,524,l),
(285,524,l),
(285,469,l),
(478,469,l),
(336,167,l)
);
},
{
closed = 1;
nodes = (
(331,46,o),
(192,128,o),
(110,267,o),
(110,350,qs),
(110,433,o),
(192,572,o),
(331,654,o),
(413,654,qs),
(496,654,o),
(635,572,o),
(717,433,o),
(717,350,qs),
(717,267,o),
(635,128,o),
(496,46,o),
(413,46,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
20 1 2 3 1 76 0 4 2 6 2 4 6 128 0 3 0 2 4 3 2 103 0 5 5 0 97 0 0 0 39 77 8 1 6 6 1 97 7 1 1 1 40 1 78 23 23 0 0 23 38 23 37 31 29 22 21 19 18 17 16 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2786;
unicode = 10118;
},
{
glyphname = uni2787;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(149,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(149,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(384,220,o),
(353,249,o),
(353,276,qs),
(353,306,o),
(387,334,o),
(414,334,qs),
(441,334,o),
(474,305,o),
(474,276,qs),
(474,249,o),
(441,220,o),
(414,220,qs)
);
},
{
closed = 1;
nodes = (
(331,46,o),
(192,128,o),
(110,268,o),
(110,350,qs),
(110,432,o),
(192,572,o),
(331,654,o),
(413,654,qs),
(496,654,o),
(636,572,o),
(717,432,o),
(717,350,qs),
(717,268,o),
(636,128,o),
(496,46,o),
(413,46,qs)
);
},
{
closed = 1;
nodes = (
(465,165,o),
(538,221,o),
(538,271,qs),
(538,303,o),
(507,353,o),
(479,363,q),
(505,375,o),
(530,417,o),
(530,439,qs),
(530,482,o),
(464,535,o),
(413,535,qs),
(361,535,o),
(297,483,o),
(297,439,qs),
(297,387,o),
(348,363,q),
(320,354,o),
(288,302,o),
(288,271,qs),
(288,222,o),
(362,165,o),
(413,165,qs)
);
},
{
closed = 1;
nodes = (
(389,383,o),
(362,410,o),
(362,432,qs),
(362,482,o),
(413,482,qs),
(437,482,o),
(465,456,o),
(465,432,qs),
(465,411,o),
(440,383,o),
(413,383,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 99 values pushed */
60 49 2 2 9 1 76 0 6 0 8 9 6 8 105 14 1 9 0 2 3 9 2 105 11 1 3 13 1 7 5 3 7 105 0 4 4 0 97 0 0 0 39 77 12 1 5 5 1 97 10 1 1 1 40 1 78 67 67 44 44 28 28 16 16 0 0 67 77 67 76 73 71 44 66 44 65 55 53 28 43 28 42 36 34 16 27 16 26 22 20 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2787;
unicode = 10119;
},
{
glyphname = uni2788;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(330,46,o),
(191,128,o),
(109,267,o),
(109,350,qs),
(109,433,o),
(191,572,o),
(330,654,o),
(413,654,qs),
(495,654,o),
(634,572,o),
(716,433,o),
(716,350,qs),
(716,267,o),
(634,128,o),
(495,46,o),
(413,46,qs)
);
},
{
closed = 1;
nodes = (
(478,165,o),
(545,279,o),
(545,362,qs),
(545,432,o),
(480,535,o),
(407,535,qs),
(355,535,o),
(288,463,o),
(288,414,qs),
(288,364,o),
(351,298,o),
(396,298,qs),
(425,298,o),
(469,326,o),
(481,346,q),
(480,294,o),
(448,219,o),
(410,219,qs),
(365,219,o),
(355,268,q),
(295,268,l),
(300,222,o),
(360,165,o),
(409,165,qs)
);
},
{
closed = 1;
nodes = (
(384,353,o),
(351,388,o),
(351,416,qs),
(351,443,o),
(384,479,o),
(411,479,qs),
(438,479,o),
(472,443,o),
(472,415,qs),
(472,389,o),
(438,353,o),
(412,353,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 103 values pushed */
40 1 6 10 1 76 0 4 6 5 6 4 5 128 0 7 0 9 10 7 9 105 14 1 10 0 6 4 10 6 105 0 5 13 1 8 3 5 8 105 0 2 2 0 97 0 0 0 39 77 12 1 3 3 1 98 11 1 1 1 40 1 78 56 56 32 32 16 16 0 0 56 67 56 66 62 60 32 55 32 54 50 48 44 42 38 36 35 34 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2788;
unicode = 10120;
},
{
glyphname = uni278A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(299,231,l),
(395,231,l),
(395,460,l),
(302,439,l),
(302,489,l),
(423,533,l),
(457,533,l),
(457,231,l),
(539,231,l),
(539,176,l),
(299,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
23 22 21 3 2 3 1 76 4 1 2 3 5 3 2 5 128 0 3 3 0 97 0 0 0 39 77 7 1 5 5 1 97 6 1 1 1 40 1 78 16 16 0 0 16 26 16 26 25 24 20 19 18 17 0 15 0 14 38 8 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni278A;
unicode = 10122;
},
{
glyphname = uni278B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(292,223,l),
(401,336,ls),
(414,349,o),
(445,382,o),
(466,416,o),
(466,431,qs),
(466,455,o),
(437,484,o),
(413,484,qs),
(385,484,o),
(356,449,o),
(356,421,q),
(292,421,l),
(293,477,o),
(359,540,o),
(414,540,qs),
(471,540,o),
(530,478,o),
(530,432,qs),
(530,399,o),
(489,341,o),
(455,309,qs),
(379,231,l),
(538,231,l),
(538,176,l),
(292,176,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
40 1 6 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 5 2 5 4 2 128 0 3 3 0 97 0 0 0 39 77 0 2 2 5 97 0 5 5 36 77 8 1 6 6 1 98 7 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 5 2 5 4 2 128 0 5 0 2 6 5 2 103 0 3 3 0 97 0 0 0 39 77 8 1 6 6 1 98 7 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
16 16 0 0 16 41 16 41 33 31 29 28 26 24 18 17 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni278B;
unicode = 10123;
},
{
glyphname = uni278C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(358,158,o),
(287,218,o),
(285,275,q),
(349,275,l),
(349,248,o),
(386,214,o),
(414,214,qs),
(446,214,o),
(479,249,o),
(479,277,qs),
(479,306,o),
(442,337,o),
(415,337,qs),
(396,337,o),
(377,326,q),
(341,368,l),
(449,467,l),
(296,467,l),
(296,522,l),
(530,522,l),
(530,468,l),
(439,386,l),
(490,382,o),
(542,320,o),
(542,277,qs),
(542,227,o),
(474,158,o),
(414,158,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 80 values pushed */
22 1 3 2 27 21 2 4 3 28 1 6 4 3 76 0 3 0 6 5 3 6 103 0 4 0 5 7 4 5 105 0 2 2 0 97 0 0 0 39 77 9 1 7 7 1 97 8 1 1 1 40 1 78 16 16 0 0 16 43 16 42 40 39 37 35 31 29 26 25 24 23 0 15 0 14 38 10 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni278C;
unicode = 10124;
},
{
glyphname = uni278D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(429,242,l),
(266,242,l),
(266,294,l),
(386,533,l),
(450,533,l),
(335,299,l),
(434,299,l),
(434,392,l),
(495,392,l),
(495,299,l),
(536,299,l),
(536,242,l),
(495,242,l),
(495,176,l),
(429,176,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
27 1 2 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 4 6 3 6 4 114 5 1 3 2 6 3 2 126 7 1 2 8 8 2 112 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 4 6 3 6 4 3 128 5 1 3 2 6 3 2 126 7 1 2 8 8 2 112 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 4 6 3 6 4 3 128 5 1 3 2 6 3 2 126 7 1 2 8 6 2 8 126 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
16 16 0 0 16 30 16 30 29 28 26 25 24 23 22 21 20 19 18 17 0 15 0 14 38 11 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni278D;
unicode = 10125;
},
{
glyphname = uni278E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(149,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(149,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(362,160,o),
(288,220,o),
(286,267,q),
(350,267,l),
(355,243,o),
(391,216,o),
(417,216,qs),
(445,216,o),
(481,259,o),
(481,289,qs),
(481,320,o),
(447,359,o),
(418,359,qs),
(397,359,o),
(362,338,o),
(354,320,q),
(291,320,l),
(321,524,l),
(520,524,l),
(520,467,l),
(371,467,l),
(354,384,l),
(367,398,o),
(407,413,o),
(428,413,qs),
(483,413,o),
(544,343,o),
(544,290,qs),
(544,232,o),
(473,160,o),
(417,160,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
24 1 6 2 1 76 0 3 0 2 6 3 2 105 0 5 0 8 7 5 8 103 0 6 0 7 9 6 7 105 0 4 4 0 97 0 0 0 39 77 11 1 9 9 1 97 10 1 1 1 40 1 78 16 16 0 0 16 46 16 45 43 42 40 38 34 32 30 29 28 27 26 25 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni278E;
unicode = 10126;
},
{
glyphname = uni278F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(440,221,o),
(476,256,o),
(476,284,qs),
(476,311,o),
(442,347,o),
(415,347,qs),
(390,347,o),
(354,311,o),
(354,285,qs),
(354,258,o),
(389,221,o),
(416,221,qs)
);
},
{
closed = 1;
nodes = (
(348,165,o),
(282,265,o),
(282,338,qs),
(282,420,o),
(348,535,o),
(417,535,qs),
(468,535,o),
(529,473,o),
(531,432,q),
(471,432,l),
(462,481,o),
(417,481,qs),
(378,481,o),
(346,406,o),
(346,354,q),
(357,375,o),
(403,402,o),
(430,402,qs),
(477,402,o),
(538,335,o),
(538,286,qs),
(538,237,o),
(472,165,o),
(419,165,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
36 1 2 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 6 5 4 5 6 114 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 0 4 4 5 97 0 5 5 36 77 11 1 8 8 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 6 5 4 5 6 4 128 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 0 4 4 5 97 0 5 5 36 77 11 1 8 8 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 6 5 4 5 6 4 128 0 5 0 4 2 5 4 105 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 11 1 8 8 1 97 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
28 28 16 16 0 0 28 51 28 50 46 44 42 41 40 38 34 32 16 27 16 26 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni278F;
unicode = 10127;
},
{
glyphname = uni2790;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(477,469,l),
(285,469,l),
(285,524,l),
(546,524,l),
(546,478,l),
(403,167,l),
(335,167,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
17 1 3 2 1 76 0 3 2 4 2 3 4 128 0 2 2 0 97 0 0 0 39 77 6 1 4 4 1 98 5 1 1 1 40 1 78 16 16 0 0 16 22 16 22 21 20 19 18 0 15 0 14 38 7 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2790;
unicode = 10128;
},
{
glyphname = uni2791;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(362,165,o),
(288,222,o),
(288,271,qs),
(288,302,o),
(320,354,o),
(348,363,q),
(297,387,o),
(297,439,qs),
(297,483,o),
(361,535,o),
(413,535,qs),
(464,535,o),
(530,482,o),
(530,439,qs),
(530,417,o),
(505,375,o),
(479,363,q),
(507,353,o),
(538,303,o),
(538,271,qs),
(538,221,o),
(465,165,o),
(413,165,qs)
);
},
{
closed = 1;
nodes = (
(441,220,o),
(474,249,o),
(474,276,qs),
(474,305,o),
(441,334,o),
(414,334,qs),
(387,334,o),
(353,306,o),
(353,276,qs),
(353,249,o),
(384,220,o),
(414,220,qs)
);
},
{
closed = 1;
nodes = (
(440,383,o),
(465,411,o),
(465,432,qs),
(465,456,o),
(437,482,o),
(413,482,qs),
(362,482,o),
(362,432,qs),
(362,410,o),
(389,383,o),
(413,383,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
32 21 2 4 7 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 4 10 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 11 1 7 7 6 97 0 6 6 36 77 9 1 3 3 1 97 8 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 6 11 1 7 4 6 7 105 0 4 10 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
51 51 39 39 16 16 0 0 51 61 51 60 56 54 39 50 39 49 45 43 16 38 16 37 28 26 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2791;
unicode = 10129;
},
{
glyphname = uni2792;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(360,165,o),
(300,222,o),
(295,268,q),
(355,268,l),
(365,219,o),
(410,219,qs),
(448,219,o),
(480,294,o),
(481,346,q),
(469,326,o),
(425,298,o),
(396,298,qs),
(351,298,o),
(288,364,o),
(288,414,qs),
(288,463,o),
(355,535,o),
(407,535,qs),
(480,535,o),
(545,432,o),
(545,362,qs),
(545,279,o),
(478,165,o),
(409,165,qs)
);
},
{
closed = 1;
nodes = (
(438,353,o),
(472,389,o),
(472,415,qs),
(472,443,o),
(438,479,o),
(411,479,qs),
(384,479,o),
(351,443,o),
(351,416,qs),
(351,388,o),
(384,353,o),
(412,353,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
30 1 3 8 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 5 3 4 4 5 114 0 3 0 4 6 3 4 105 0 2 2 0 97 0 0 0 39 77 11 1 8 8 7 97 0 7 7 36 77 10 1 6 6 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 5 3 4 3 5 4 128 0 3 0 4 6 3 4 105 0 2 2 0 97 0 0 0 39 77 11 1 8 8 7 97 0 7 7 36 77 10 1 6 6 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 5 3 4 3 5 4 128 0 7 11 1 8 3 7 8 105 0 3 0 4 6 3 4 105 0 2 2 0 97 0 0 0 39 77 10 1 6 6 1 97 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
40 40 16 16 0 0 40 51 40 50 46 44 16 39 16 38 36 35 34 32 28 26 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2792;
unicode = 10130;
},
{
glyphname = uni24EA.solid;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(344,165,o),
(311,216,qs),
(278,266,o),
(278,350,qs),
(278,435,o),
(311,484,qs),
(344,535,o),
(413,535,qs),
(483,535,o),
(515,485,qs),
(548,436,o),
(548,350,qs),
(548,265,o),
(515,215,qs),
(483,165,o),
(413,165,qs)
);
},
{
closed = 1;
nodes = (
(448,223,o),
(464,256,qs),
(481,289,o),
(481,350,qs),
(481,411,o),
(464,444,qs),
(448,477,o),
(413,477,qs),
(379,477,o),
(362,444,qs),
(345,411,o),
(345,350,qs),
(345,289,o),
(362,256,qs),
(379,223,o),
(413,223,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 2 0 97 0 0 0 39 77 8 1 5 5 4 97 0 4 4 36 77 7 1 3 3 1 97 6 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 4 8 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 7 1 3 3 1 97 6 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
32 32 16 16 0 0 32 47 32 46 40 38 16 31 16 30 24 22 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni24EA.solid;
},
{
glyphname = zero.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,-5,o),
(256,76,o),
(288,188,o),
(288,238,qs),
(288,295,o),
(237,358,o),
(182,358,qs),
(121,358,o),
(44,278,o),
(12,167,o),
(12,117,qs),
(12,60,o),
(63,-5,o),
(118,-5,qs)
);
},
{
closed = 1;
nodes = (
(78,52,o),
(78,125,qs),
(78,156,o),
(96,238,o),
(138,301,o),
(172,301,qs),
(197,301,o),
(222,264,o),
(222,229,qs),
(222,197,o),
(204,115,o),
(162,52,o),
(128,52,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 0 0 2 3 0 2 105 5 1 3 3 1 97 4 1 1 1 34 1 78 14 14 0 0 14 26 14 25 21 19 0 13 0 12 37 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 325;
}
);
note = zero.dnom;
},
{
glyphname = one.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,0,l),
(247,55,l),
(164,55,l),
(217,353,l),
(183,353,l),
(56,309,l),
(47,260,l),
(143,281,l),
(103,55,l),
(8,55,l),
(-2,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
3 2 2 0 1 1 76 0 1 0 1 133 2 1 0 0 3 96 0 3 3 34 3 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = one.dnom;
},
{
glyphname = two.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,0,l),
(242,55,l),
(85,55,l),
(165,123,ls),
(207,159,o),
(241,192,o),
(271,241,o),
(271,270,qs),
(271,308,o),
(221,358,o),
(173,358,qs),
(120,358,o),
(45,297,o),
(33,242,q),
(96,242,l),
(101,268,o),
(136,304,o),
(162,304,qs),
(184,304,o),
(207,280,o),
(207,262,qs),
(207,237,o),
(163,189,o),
(112,145,qs),
(-2,47,l),
(-10,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
0 1 0 3 0 1 3 128 0 2 0 0 1 2 0 105 0 3 3 4 95 0 4 4 34 4 78 17 23 34 18 38 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = two.dnom;
},
{
glyphname = three.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,-5,o),
(230,36,o),
(264,100,o),
(264,134,qs),
(264,169,o),
(222,215,o),
(181,219,q),
(284,300,l),
(294,353,l),
(64,353,l),
(54,298,l),
(205,298,l),
(80,202,l),
(108,160,l),
(130,170,o),
(147,170,qs),
(172,170,o),
(201,147,o),
(201,125,qs),
(201,94,o),
(161,50,o),
(126,50,qs),
(100,50,o),
(72,76,o),
(72,97,qs),
(72,105,o),
(73,110,q),
(10,110,l),
(8,94,o),
(8,87,qs),
(8,43,o),
(65,-5,o),
(116,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
25 19 2 2 3 18 1 0 2 7 2 2 1 0 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 2 3 0 3 2 114 0 0 1 1 0 112 0 4 0 3 2 4 3 103 0 1 1 5 98 6 1 5 5 34 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 3 0 3 2 0 128 0 0 1 1 0 112 0 4 0 3 2 4 3 103 0 1 1 5 98 6 1 5 5 34 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 4 0 3 2 4 3 103 0 1 1 5 98 6 1 5 5 34 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 32 0 31 17 19 36 36 20 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = three.dnom;
},
{
glyphname = four.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,0,l),
(215,66,l),
(256,66,l),
(266,122,l),
(225,122,l),
(241,213,l),
(181,213,l),
(165,122,l),
(68,122,l),
(223,353,l),
(159,353,l),
(-2,117,l),
(-11,66,l),
(151,66,l),
(139,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 3 1 133 0 3 2 2 3 112 4 1 2 5 1 0 6 2 0 104 0 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 3 1 133 0 3 2 3 133 4 1 2 5 1 0 6 2 0 104 0 6 6 34 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = four.dnom;
},
{
glyphname = five.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,-5,o),
(222,36,o),
(262,106,o),
(262,147,qs),
(262,189,o),
(213,243,o),
(167,243,qs),
(144,243,o),
(103,228,o),
(89,215,q),
(120,297,l),
(267,297,l),
(277,353,l),
(82,353,l),
(16,152,l),
(78,152,l),
(88,169,o),
(125,191,o),
(147,191,qs),
(171,191,o),
(199,162,o),
(199,137,qs),
(199,103,o),
(155,50,o),
(121,50,qs),
(96,50,o),
(66,78,o),
(65,100,q),
(2,100,l),
(-4,57,o),
(53,-5,o),
(111,-5,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 0 2 3 0 128 0 0 1 1 0 112 0 4 0 5 6 4 5 103 0 6 0 2 3 6 2 105 0 1 1 7 98 8 1 7 7 34 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 4 0 5 6 4 5 103 0 6 0 2 3 6 2 105 0 1 1 7 98 8 1 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 31 0 30 35 17 17 18 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = five.dnom;
},
{
glyphname = six.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,-5,o),
(224,36,o),
(261,102,o),
(261,136,qs),
(261,175,o),
(214,228,o),
(173,228,qs),
(147,228,o),
(97,201,o),
(82,180,q),
(94,242,o),
(141,305,o),
(173,305,qs),
(217,305,o),
(219,257,q),
(278,257,l),
(280,302,o),
(229,358,o),
(183,358,qs),
(129,358,o),
(51,283,o),
(12,171,o),
(12,117,qs),
(12,61,o),
(65,-5,o),
(121,-5,qs)
);
},
{
closed = 1;
nodes = (
(105,50,o),
(77,78,o),
(77,100,qs),
(77,129,o),
(120,173,o),
(148,173,qs),
(171,173,o),
(198,147,o),
(198,125,qs),
(198,95,o),
(158,50,o),
(127,50,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 5 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 3 2 1 114 0 0 0 2 1 0 2 105 0 3 0 5 6 3 5 105 8 1 6 6 4 97 7 1 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 1 2 3 2 1 3 128 0 0 0 2 1 0 2 105 0 3 0 5 6 3 5 105 8 1 6 6 4 97 7 1 4 4 34 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
26 26 0 0 26 37 26 36 32 30 0 25 0 24 36 33 18 37 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
note = six.dnom;
},
{
glyphname = seven.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(103,0,l),
(298,307,l),
(307,353,l),
(49,353,l),
(39,298,l),
(229,298,l),
(36,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 1 0 0 2 1 0 103 0 2 2 34 2 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = seven.dnom;
},
{
glyphname = eight.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,-5,o),
(253,65,o),
(253,115,qs),
(253,169,o),
(205,189,q),
(271,220,o),
(271,276,qs),
(271,313,o),
(219,358,o),
(173,358,qs),
(116,358,o),
(39,300,o),
(39,252,qs),
(39,231,o),
(61,199,o),
(81,189,q),
(46,177,o),
(3,121,o),
(3,86,qs),
(3,44,o),
(60,-5,o),
(112,-5,qs)
);
},
{
closed = 1;
nodes = (
(95,48,o),
(65,74,o),
(65,96,qs),
(65,128,o),
(111,160,o),
(138,160,qs),
(162,160,o),
(191,136,o),
(191,113,qs),
(191,82,o),
(146,48,o),
(120,48,qs)
);
},
{
closed = 1;
nodes = (
(127,208,o),
(101,230,o),
(101,250,qs),
(101,274,o),
(137,305,o),
(163,305,qs),
(184,305,o),
(208,283,o),
(208,264,qs),
(208,240,o),
(172,208,o),
(148,208,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
16 5 2 2 5 1 76 0 0 0 4 5 0 4 105 8 1 5 0 2 3 5 2 105 7 1 3 3 1 97 6 1 1 1 34 1 78 34 34 22 22 0 0 34 45 34 44 40 38 22 33 22 32 28 26 0 21 0 20 42 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 308;
}
);
note = eight.dnom;
},
{
glyphname = nine.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,-5,o),
(236,72,o),
(276,185,o),
(276,237,qs),
(276,292,o),
(222,358,o),
(166,358,qs),
(128,358,o),
(64,317,o),
(26,252,o),
(26,218,qs),
(26,179,o),
(73,125,o),
(114,125,qs),
(141,125,o),
(191,152,o),
(206,173,q),
(194,111,o),
(147,48,o),
(115,48,qs),
(71,48,o),
(69,96,q),
(10,96,l),
(8,51,o),
(58,-5,o),
(104,-5,qs)
);
},
{
closed = 1;
nodes = (
(117,180,o),
(90,206,o),
(90,228,qs),
(90,258,o),
(130,303,o),
(161,303,qs),
(184,303,o),
(211,276,o),
(211,253,qs),
(211,224,o),
(168,180,o),
(140,180,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 0 2 1 1 0 114 0 3 0 5 6 3 5 105 8 1 6 0 2 0 6 2 105 0 1 1 4 98 7 1 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 0 2 1 2 0 1 128 0 3 0 5 6 3 5 105 8 1 6 0 2 0 6 2 105 0 1 1 4 98 7 1 4 4 34 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
26 26 0 0 26 37 26 36 32 30 0 25 0 24 37 36 33 18 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = nine.dnom;
},
{
glyphname = zero.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(241,342,o),
(317,423,o),
(349,535,o),
(349,585,qs),
(349,642,o),
(298,705,o),
(243,705,qs),
(182,705,o),
(105,625,o),
(73,514,o),
(73,464,qs),
(73,407,o),
(124,342,o),
(179,342,qs)
);
},
{
closed = 1;
nodes = (
(139,399,o),
(139,472,qs),
(139,503,o),
(157,586,o),
(199,648,o),
(233,648,qs),
(283,648,o),
(283,575,qs),
(283,543,o),
(265,461,o),
(222,399,o),
(189,399,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 3 4 1 1 3 1 101 0 2 2 0 97 0 0 0 33 2 78 14 14 0 0 14 25 14 24 20 18 0 13 0 12 37 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 325;
}
);
note = zero.numr;
},
{
glyphname = one.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(298,347,l),
(308,402,l),
(225,402,l),
(278,700,l),
(244,700,l),
(117,656,l),
(108,607,l),
(204,628,l),
(164,402,l),
(69,402,l),
(59,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
3 2 2 0 1 1 76 2 1 0 0 3 0 3 100 0 1 1 33 1 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = one.numr;
},
{
glyphname = two.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(293,347,l),
(303,402,l),
(146,402,l),
(226,470,ls),
(268,506,o),
(302,539,o),
(332,588,o),
(332,617,qs),
(332,655,o),
(282,705,o),
(234,705,qs),
(181,705,o),
(106,644,o),
(94,589,q),
(157,589,l),
(162,615,o),
(197,651,o),
(223,651,qs),
(245,651,o),
(268,627,o),
(268,609,qs),
(268,584,o),
(224,536,o),
(173,492,qs),
(59,394,l),
(51,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 0 3 0 1 3 128 0 3 0 4 3 4 99 0 0 0 2 97 0 2 2 33 0 78 17 23 34 18 38 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = two.numr;
},
{
glyphname = three.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(224,342,o),
(291,383,o),
(325,447,o),
(325,481,qs),
(325,516,o),
(283,562,o),
(242,566,q),
(345,647,l),
(355,700,l),
(125,700,l),
(115,645,l),
(266,645,l),
(141,549,l),
(169,507,l),
(191,517,o),
(208,517,qs),
(233,517,o),
(262,494,o),
(262,472,qs),
(262,441,o),
(222,397,o),
(187,397,qs),
(161,397,o),
(133,423,o),
(133,444,qs),
(133,452,o),
(134,457,q),
(71,457,l),
(69,441,o),
(69,434,qs),
(69,390,o),
(126,342,o),
(177,342,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
25 19 2 2 3 18 1 0 2 7 2 2 1 0 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 2 3 0 3 2 114 0 0 1 1 0 112 0 1 6 1 5 1 5 102 0 3 3 4 95 0 4 4 33 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 2 3 0 3 2 0 128 0 0 1 1 0 112 0 1 6 1 5 1 5 102 0 3 3 4 95 0 4 4 33 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 1 6 1 5 1 5 102 0 3 3 4 95 0 4 4 33 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 32 0 31 17 19 36 36 20 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = three.numr;
},
{
glyphname = four.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(264,347,l),
(276,413,l),
(317,413,l),
(327,469,l),
(286,469,l),
(302,560,l),
(242,560,l),
(226,469,l),
(129,469,l),
(284,700,l),
(220,700,l),
(59,464,l),
(50,413,l),
(212,413,l),
(200,347,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 2 3 114 0 6 0 0 6 113 4 1 2 5 1 0 6 2 0 104 0 1 1 33 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 3 1 2 1 3 2 128 0 6 0 0 6 113 4 1 2 5 1 0 6 2 0 104 0 1 1 33 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 0 6 0 6 134 4 1 2 5 1 0 6 2 0 104 0 1 1 33 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = four.numr;
},
{
glyphname = five.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(215,342,o),
(283,384,o),
(323,453,o),
(323,494,qs),
(323,536,o),
(274,590,o),
(228,590,qs),
(205,590,o),
(164,575,o),
(150,562,q),
(181,644,l),
(328,644,l),
(338,700,l),
(143,700,l),
(77,499,l),
(139,499,l),
(149,516,o),
(186,538,o),
(208,538,qs),
(232,538,o),
(260,509,o),
(260,484,qs),
(260,450,o),
(216,397,o),
(182,397,qs),
(157,397,o),
(127,425,o),
(126,447,q),
(63,447,l),
(58,404,o),
(115,342,o),
(173,342,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 2 0 2 3 0 128 0 0 1 1 0 112 0 6 0 2 3 6 2 105 0 1 8 1 7 1 7 102 0 5 5 4 95 0 4 4 33 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 1 8 1 7 1 7 102 0 5 5 4 95 0 4 4 33 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 31 0 30 35 17 17 18 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = five.numr;
},
{
glyphname = six.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,342,o),
(284,383,o),
(322,448,o),
(322,482,qs),
(322,521,o),
(275,575,o),
(234,575,qs),
(207,575,o),
(157,548,o),
(142,527,q),
(154,589,o),
(201,652,o),
(233,652,qs),
(277,652,o),
(279,604,q),
(338,604,l),
(340,649,o),
(290,705,o),
(244,705,qs),
(190,705,o),
(112,628,o),
(72,515,o),
(72,463,qs),
(72,408,o),
(126,342,o),
(182,342,qs)
);
},
{
closed = 1;
nodes = (
(165,397,o),
(137,425,o),
(137,447,qs),
(137,476,o),
(180,520,o),
(208,520,qs),
(231,520,o),
(258,494,o),
(258,472,qs),
(258,442,o),
(218,397,o),
(187,397,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 5 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 1 2 3 2 1 114 0 3 0 5 6 3 5 105 8 1 6 7 1 4 6 4 101 0 2 2 0 97 0 0 0 33 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 8 1 6 7 1 4 6 4 101 0 2 2 0 97 0 0 0 33 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
26 26 0 0 26 37 26 36 32 30 0 25 0 24 36 33 18 37 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
note = six.numr;
},
{
glyphname = seven.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(164,347,l),
(360,654,l),
(368,700,l),
(110,700,l),
(100,645,l),
(290,645,l),
(97,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 2 0 2 134 0 0 0 1 95 0 1 1 33 0 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = seven.numr;
},
{
glyphname = eight.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(236,342,o),
(314,412,o),
(314,462,qs),
(314,516,o),
(266,536,q),
(332,567,o),
(332,623,qs),
(332,660,o),
(280,705,o),
(234,705,qs),
(177,705,o),
(100,647,o),
(100,599,qs),
(100,578,o),
(122,546,o),
(142,536,q),
(107,524,o),
(64,468,o),
(64,433,qs),
(64,391,o),
(121,342,o),
(173,342,qs)
);
},
{
closed = 1;
nodes = (
(156,395,o),
(126,421,o),
(126,443,qs),
(126,475,o),
(172,507,o),
(199,507,qs),
(223,507,o),
(252,483,o),
(252,460,qs),
(252,429,o),
(207,395,o),
(181,395,qs)
);
},
{
closed = 1;
nodes = (
(188,555,o),
(162,577,o),
(162,597,qs),
(162,621,o),
(198,652,o),
(224,652,qs),
(245,652,o),
(269,630,o),
(269,611,qs),
(269,587,o),
(233,555,o),
(209,555,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
16 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 7 1 3 6 1 1 3 1 101 0 4 4 0 97 0 0 0 33 4 78 34 34 22 22 0 0 34 45 34 44 40 38 22 33 22 32 28 26 0 21 0 20 42 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 308;
}
);
note = eight.numr;
},
{
glyphname = nine.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,342,o),
(298,417,o),
(337,529,o),
(337,583,qs),
(337,639,o),
(284,705,o),
(228,705,qs),
(190,705,o),
(125,664,o),
(88,598,o),
(88,563,qs),
(88,524,o),
(135,472,o),
(175,472,qs),
(202,472,o),
(252,499,o),
(267,520,q),
(255,458,o),
(208,395,o),
(176,395,qs),
(132,395,o),
(130,443,q),
(71,443,l),
(69,398,o),
(120,342,o),
(166,342,qs)
);
},
{
closed = 1;
nodes = (
(178,527,o),
(151,553,o),
(151,575,qs),
(151,605,o),
(191,650,o),
(222,650,qs),
(245,650,o),
(272,623,o),
(272,600,qs),
(272,571,o),
(229,527,o),
(201,527,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 0 2 1 1 0 114 0 1 7 1 4 1 4 102 0 5 5 3 97 0 3 3 33 77 0 2 2 6 97 8 1 6 6 42 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 1 7 1 4 1 4 102 0 5 5 3 97 0 3 3 33 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
26 26 0 0 26 37 26 36 32 30 0 25 0 24 37 36 33 18 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
note = nine.numr;
},
{
glyphname = fraction;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(19,0,l),
(663,700,l),
(592,700,l),
(-51,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = fraction;
unicode = 8260;
},
{
glyphname = onehalf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,0,l),
(768,700,l),
(697,700,l),
(54,0,l)
);
},
{
closed = 1;
nodes = (
(296,347,l),
(306,402,l),
(223,402,l),
(276,700,l),
(242,700,l),
(115,657,l),
(106,607,l),
(202,628,l),
(162,402,l),
(67,402,l),
(57,347,l)
);
},
{
closed = 1;
nodes = (
(676,0,l),
(686,55,l),
(529,55,l),
(609,123,ls),
(651,159,o),
(685,192,o),
(715,241,o),
(715,270,qs),
(715,308,o),
(665,358,o),
(617,358,qs),
(564,358,o),
(489,297,o),
(477,242,q),
(540,242,l),
(545,268,o),
(580,304,o),
(606,304,qs),
(628,304,o),
(651,280,o),
(651,262,qs),
(651,237,o),
(607,189,o),
(556,145,qs),
(442,47,l),
(434,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 71 values pushed */
7 6 2 2 0 1 76 3 1 0 2 0 133 0 7 6 9 6 7 9 128 4 1 2 0 5 6 2 5 104 0 8 0 6 7 8 6 105 0 9 1 1 9 87 0 9 9 1 95 10 1 1 9 1 79 40 39 38 37 34 18 39 17 17 20 17 17 16 11 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 765;
}
);
note = onehalf;
unicode = 189;
},
{
glyphname = onequarter;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,0,l),
(768,700,l),
(697,700,l),
(54,0,l)
);
},
{
closed = 1;
nodes = (
(296,347,l),
(306,402,l),
(223,402,l),
(276,700,l),
(242,700,l),
(115,657,l),
(106,607,l),
(202,628,l),
(162,402,l),
(67,402,l),
(57,347,l)
);
},
{
closed = 1;
nodes = (
(634,0,l),
(646,66,l),
(687,66,l),
(697,122,l),
(656,122,l),
(672,213,l),
(612,213,l),
(596,122,l),
(499,122,l),
(654,353,l),
(590,353,l),
(429,117,l),
(420,66,l),
(582,66,l),
(570,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 7 values pushed */
7 6 2 2 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
3 1 0 2 0 133 0 7 2 5 2 7 5 128 0 9 5 8 8 9 114 12 1 1 6 6 1 113 4 1 2 0 5 9 2 5 104 10 1 8 6 6 8 87 10 1 8 8 6 96 11 1 6 8 6 80
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
3 1 0 2 0 133 0 7 2 5 2 7 5 128 0 9 5 8 5 9 8 128 12 1 1 6 6 1 113 4 1 2 0 5 9 2 5 104 10 1 8 6 6 8 87 10 1 8 8 6 96 11 1 6 8 6 80
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
3 1 0 2 0 133 0 7 2 5 2 7 5 128 0 9 5 8 5 9 8 128 12 1 1 6 1 134 4 1 2 0 5 9 2 5 104 10 1 8 6 6 8 87 10 1 8 8 6 96 11 1 6 8 6 80
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
29 28 27 26 25 24 23 22 17 18 17 17 17 20 17 17 16 13 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 759;
}
);
note = onequarter;
unicode = 188;
},
{
glyphname = threequarters;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,0,l),
(767,700,l),
(696,700,l),
(53,0,l)
);
},
{
closed = 1;
nodes = (
(633,0,l),
(645,66,l),
(686,66,l),
(696,122,l),
(655,122,l),
(671,213,l),
(611,213,l),
(595,122,l),
(498,122,l),
(653,353,l),
(589,353,l),
(428,117,l),
(419,66,l),
(581,66,l),
(569,0,l)
);
},
{
closed = 1;
nodes = (
(230,342,o),
(297,383,o),
(331,447,o),
(331,481,qs),
(331,516,o),
(289,562,o),
(248,566,q),
(351,647,l),
(361,700,l),
(131,700,l),
(121,645,l),
(272,645,l),
(147,549,l),
(175,507,l),
(197,517,o),
(214,517,qs),
(239,517,o),
(268,494,o),
(268,472,qs),
(268,441,o),
(228,397,o),
(193,397,qs),
(167,397,o),
(139,423,o),
(139,444,qs),
(139,452,o),
(140,457,q),
(77,457,l),
(75,441,o),
(75,434,qs),
(75,390,o),
(132,342,o),
(183,342,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 16 values pushed */
44 38 2 11 12 37 1 9 11 26 21 2 10 9 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
0 11 12 9 12 11 114 0 9 10 10 9 112 0 3 10 14 10 3 14 128 0 5 14 4 4 5 114 8 1 1 2 2 1 113 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 106 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
0 11 12 9 12 11 9 128 0 9 10 10 9 112 0 3 10 14 10 3 14 128 0 5 14 4 4 5 114 8 1 1 2 2 1 113 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 106 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 74 values pushed */
0 11 12 9 12 11 9 128 0 9 10 10 9 112 0 3 10 14 10 3 14 128 0 5 14 4 14 5 4 128 8 1 1 2 2 1 113 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 106 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
0 11 12 9 12 11 9 128 0 9 10 10 9 112 0 3 10 14 10 3 14 128 0 5 14 4 14 5 4 128 8 1 1 2 1 134 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 106 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 74 values pushed */
0 11 12 9 12 11 9 128 0 9 10 12 9 10 126 0 3 10 14 10 3 14 128 0 5 14 4 14 5 4 128 8 1 1 2 1 134 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 106 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
19 19 19 51 19 50 42 41 40 39 36 34 30 28 24 23 17 17 17 17 17 18 17 17 16 16 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 758;
}
);
note = threequarters;
unicode = 190;
},
{
glyphname = oneeighth;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,0,l),
(768,700,l),
(697,700,l),
(54,0,l)
);
},
{
closed = 1;
nodes = (
(296,347,l),
(306,402,l),
(223,402,l),
(276,700,l),
(242,700,l),
(115,657,l),
(106,607,l),
(202,628,l),
(162,402,l),
(67,402,l),
(57,347,l)
);
},
{
closed = 1;
nodes = (
(536,48,o),
(506,74,o),
(506,96,qs),
(506,128,o),
(552,160,o),
(579,160,qs),
(603,160,o),
(632,136,o),
(632,113,qs),
(632,82,o),
(587,48,o),
(561,48,qs)
);
},
{
closed = 1;
nodes = (
(616,-5,o),
(694,65,o),
(694,115,qs),
(694,169,o),
(646,189,q),
(712,220,o),
(712,276,qs),
(712,313,o),
(660,358,o),
(614,358,qs),
(557,358,o),
(480,300,o),
(480,252,qs),
(480,231,o),
(502,199,o),
(522,189,q),
(487,177,o),
(444,121,o),
(444,86,qs),
(444,44,o),
(501,-5,o),
(553,-5,qs)
);
},
{
closed = 1;
nodes = (
(568,208,o),
(542,230,o),
(542,250,qs),
(542,274,o),
(578,305,o),
(604,305,qs),
(625,305,o),
(649,283,o),
(649,264,qs),
(649,240,o),
(613,208,o),
(589,208,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
7 6 2 2 0 43 32 2 6 11 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
4 1 2 0 5 10 2 5 104 0 8 0 10 11 8 10 105 14 1 11 0 6 7 11 6 105 3 1 0 0 33 77 12 1 7 7 1 97 13 9 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
4 1 2 0 5 10 2 5 104 0 8 0 10 11 8 10 105 14 1 11 0 6 7 11 6 105 3 1 0 0 33 77 0 1 1 34 77 12 1 7 7 9 97 13 1 9 9 34 9 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
49 49 27 27 15 15 49 60 49 59 55 53 27 48 27 47 39 37 15 26 15 25 37 17 17 20 17 17 16 15 8 29
CALL[ ]	/* CallFunction */";
};
width = 762;
}
);
note = oneeighth;
unicode = 8539;
},
{
glyphname = threeeighths;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,0,l),
(768,700,l),
(697,700,l),
(54,0,l)
);
},
{
closed = 1;
nodes = (
(230,342,o),
(297,383,o),
(331,447,o),
(331,481,qs),
(331,516,o),
(289,562,o),
(248,566,q),
(351,647,l),
(361,700,l),
(131,700,l),
(121,645,l),
(272,645,l),
(147,549,l),
(175,507,l),
(197,517,o),
(214,517,qs),
(239,517,o),
(268,494,o),
(268,472,qs),
(268,441,o),
(228,397,o),
(193,397,qs),
(167,397,o),
(139,423,o),
(139,444,qs),
(139,452,o),
(140,457,q),
(77,457,l),
(75,441,o),
(75,434,qs),
(75,390,o),
(132,342,o),
(183,342,qs)
);
},
{
closed = 1;
nodes = (
(616,-5,o),
(694,65,o),
(694,115,qs),
(694,169,o),
(646,189,q),
(712,220,o),
(712,276,qs),
(712,313,o),
(660,358,o),
(614,358,qs),
(557,358,o),
(480,300,o),
(480,252,qs),
(480,231,o),
(502,199,o),
(522,189,q),
(487,177,o),
(444,121,o),
(444,86,qs),
(444,44,o),
(501,-5,o),
(553,-5,qs)
);
},
{
closed = 1;
nodes = (
(536,48,o),
(506,74,o),
(506,96,qs),
(506,128,o),
(552,160,o),
(579,160,qs),
(603,160,o),
(632,136,o),
(632,113,qs),
(632,82,o),
(587,48,o),
(561,48,qs)
);
},
{
closed = 1;
nodes = (
(568,208,o),
(542,230,o),
(542,250,qs),
(542,274,o),
(578,305,o),
(604,305,qs),
(625,305,o),
(649,283,o),
(649,264,qs),
(649,240,o),
(613,208,o),
(589,208,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
29 23 2 4 5 22 1 2 4 11 6 2 3 2 53 42 2 10 13 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 4 5 2 5 4 114 0 2 3 3 2 112 0 3 14 1 7 12 3 7 106 0 8 0 12 13 8 12 105 17 1 13 0 10 11 13 10 105 0 5 5 0 95 6 1 0 0 33 77 16 1 11 11 1 97 15 9 2 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
0 4 5 2 5 4 2 128 0 2 3 3 2 112 0 3 14 1 7 12 3 7 106 0 8 0 12 13 8 12 105 17 1 13 0 10 11 13 10 105 0 5 5 0 95 6 1 0 0 33 77 16 1 11 11 1 97 15 9 2 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
0 4 5 2 5 4 2 128 0 2 3 5 2 3 126 0 3 14 1 7 12 3 7 106 0 8 0 12 13 8 12 105 17 1 13 0 10 11 13 10 105 0 5 5 0 95 6 1 0 0 33 77 16 1 11 11 1 97 15 9 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 70 values pushed */
0 4 5 2 5 4 2 128 0 2 3 5 2 3 126 0 3 14 1 7 12 3 7 106 0 8 0 12 13 8 12 105 17 1 13 0 10 11 13 10 105 0 5 5 0 95 6 1 0 0 33 77 0 1 1 34 77 16 1 11 11 9 97 15 1 9 9 34 9 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 40 values pushed */
71 71 59 59 37 37 4 4 71 82 71 81 77 75 59 70 59 69 65 63 37 58 37 57 49 47 4 36 4 35 17 19 36 36 21 17 16 18 8 29
CALL[ ]	/* CallFunction */";
};
width = 762;
}
);
note = threeeighths;
unicode = 8540;
},
{
glyphname = fiveeighths;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,0,l),
(772,700,l),
(701,700,l),
(58,0,l)
);
},
{
closed = 1;
nodes = (
(231,342,o),
(299,384,o),
(339,453,o),
(339,494,qs),
(339,536,o),
(290,590,o),
(244,590,qs),
(221,590,o),
(180,575,o),
(166,562,q),
(197,644,l),
(344,644,l),
(354,700,l),
(159,700,l),
(93,499,l),
(155,499,l),
(165,516,o),
(202,538,o),
(224,538,qs),
(248,538,o),
(276,509,o),
(276,484,qs),
(276,450,o),
(232,397,o),
(198,397,qs),
(173,397,o),
(143,425,o),
(142,447,q),
(79,447,l),
(74,404,o),
(131,342,o),
(189,342,qs)
);
},
{
closed = 1;
nodes = (
(620,-5,o),
(698,65,o),
(698,115,qs),
(698,169,o),
(650,189,q),
(716,220,o),
(716,276,qs),
(716,313,o),
(664,358,o),
(618,358,qs),
(561,358,o),
(484,300,o),
(484,252,qs),
(484,231,o),
(506,199,o),
(526,189,q),
(491,177,o),
(448,121,o),
(448,86,qs),
(448,44,o),
(505,-5,o),
(557,-5,qs)
);
},
{
closed = 1;
nodes = (
(540,48,o),
(510,74,o),
(510,96,qs),
(510,128,o),
(556,160,o),
(583,160,qs),
(607,160,o),
(636,136,o),
(636,113,qs),
(636,82,o),
(591,48,o),
(565,48,qs)
);
},
{
closed = 1;
nodes = (
(572,208,o),
(546,230,o),
(546,250,qs),
(546,274,o),
(582,305,o),
(608,305,qs),
(629,305,o),
(653,283,o),
(653,264,qs),
(653,240,o),
(617,208,o),
(593,208,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
25 1 4 8 52 41 2 12 15 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
0 5 4 2 4 5 2 128 0 2 3 3 2 112 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 106 0 10 0 14 15 10 14 105 19 1 15 0 12 13 15 12 105 0 7 7 0 95 6 1 0 0 33 77 18 1 13 13 1 97 17 11 2 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 74 values pushed */
0 5 4 2 4 5 2 128 0 2 3 4 2 3 126 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 106 0 10 0 14 15 10 14 105 19 1 15 0 12 13 15 12 105 0 7 7 0 95 6 1 0 0 33 77 18 1 13 13 1 97 17 11 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 78 values pushed */
0 5 4 2 4 5 2 128 0 2 3 4 2 3 126 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 106 0 10 0 14 15 10 14 105 19 1 15 0 12 13 15 12 105 0 7 7 0 95 6 1 0 0 33 77 0 1 1 34 77 18 1 13 13 11 97 17 1 11 11 34 11 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 42 values pushed */
70 70 58 58 36 36 4 4 70 81 70 80 76 74 58 69 58 68 64 62 36 57 36 56 48 46 4 35 4 34 35 17 17 18 36 34 19 17 16 20 8 31
CALL[ ]	/* CallFunction */";
};
width = 766;
}
);
note = fiveeighths;
unicode = 8541;
},
{
glyphname = seveneighths;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(94,0,l),
(738,700,l),
(667,700,l),
(24,0,l)
);
},
{
closed = 1;
nodes = (
(193,347,l),
(389,654,l),
(397,700,l),
(139,700,l),
(129,645,l),
(319,645,l),
(126,347,l)
);
},
{
closed = 1;
nodes = (
(596,-5,o),
(674,65,o),
(674,115,qs),
(674,169,o),
(626,189,q),
(692,220,o),
(692,276,qs),
(692,313,o),
(640,358,o),
(594,358,qs),
(537,358,o),
(460,300,o),
(460,252,qs),
(460,231,o),
(482,199,o),
(502,189,q),
(467,177,o),
(424,121,o),
(424,86,qs),
(424,44,o),
(481,-5,o),
(533,-5,qs)
);
},
{
closed = 1;
nodes = (
(516,48,o),
(486,74,o),
(486,96,qs),
(486,128,o),
(532,160,o),
(559,160,qs),
(583,160,o),
(612,136,o),
(612,113,qs),
(612,82,o),
(567,48,o),
(541,48,qs)
);
},
{
closed = 1;
nodes = (
(548,208,o),
(522,230,o),
(522,250,qs),
(522,274,o),
(558,305,o),
(584,305,qs),
(605,305,o),
(629,283,o),
(629,264,qs),
(629,240,o),
(593,208,o),
(569,208,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
27 16 2 7 10 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 4 5 9 5 4 9 128 0 5 0 9 10 5 9 105 13 1 10 0 7 8 10 7 105 0 2 2 0 95 3 1 0 0 33 77 12 1 8 8 1 97 11 6 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 4 5 9 5 4 9 128 0 5 0 9 10 5 9 105 13 1 10 0 7 8 10 7 105 0 2 2 0 95 3 1 0 0 33 77 0 1 1 34 77 12 1 8 8 6 97 11 1 6 6 34 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
45 45 33 33 11 11 45 56 45 55 51 49 33 44 33 43 39 37 11 32 11 31 43 18 17 17 17 16 14 8 28
CALL[ ]	/* CallFunction */";
};
width = 742;
}
);
note = seveneighths;
unicode = 8542;
},
{
glyphname = uni2080;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,-5,o),
(256,76,o),
(288,188,o),
(288,238,qs),
(288,295,o),
(237,358,o),
(182,358,qs),
(121,358,o),
(44,278,o),
(12,167,o),
(12,117,qs),
(12,60,o),
(63,-5,o),
(118,-5,qs)
);
},
{
closed = 1;
nodes = (
(78,52,o),
(78,125,qs),
(78,156,o),
(96,238,o),
(138,301,o),
(172,301,qs),
(197,301,o),
(222,264,o),
(222,229,qs),
(222,197,o),
(204,115,o),
(162,52,o),
(128,52,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 51 77 5 1 3 3 1 97 4 1 1 1 52 1 78 14 14 0 0 14 26 14 25 21 19 0 13 0 12 37 6 9 23
CALL[ ]	/* CallFunction */";
};
width = 325;
}
);
note = uni2080;
unicode = 8320;
},
{
glyphname = uni2081;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,0,l),
(247,55,l),
(164,55,l),
(217,353,l),
(183,353,l),
(56,309,l),
(47,260,l),
(143,281,l),
(103,55,l),
(8,55,l),
(-2,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
3 2 2 0 1 1 76 0 1 1 49 77 2 1 0 0 3 96 0 3 3 50 3 78 17 17 20 16 4 9 26
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = uni2081;
unicode = 8321;
},
{
glyphname = uni2082;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,0,l),
(242,55,l),
(85,55,l),
(165,123,ls),
(207,159,o),
(241,192,o),
(271,241,o),
(271,270,qs),
(271,308,o),
(221,358,o),
(173,358,qs),
(120,358,o),
(45,297,o),
(33,242,q),
(96,242,l),
(101,268,o),
(136,304,o),
(162,304,qs),
(184,304,o),
(207,280,o),
(207,262,qs),
(207,237,o),
(163,189,o),
(112,145,qs),
(-2,47,l),
(-10,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 51 77 0 3 3 4 95 0 4 4 50 4 78 17 23 34 18 38 5 9 27
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = uni2082;
unicode = 8322;
},
{
glyphname = uni2083;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,-5,o),
(230,36,o),
(264,100,o),
(264,134,qs),
(264,169,o),
(222,215,o),
(181,219,q),
(284,300,l),
(294,353,l),
(64,353,l),
(54,298,l),
(205,298,l),
(80,202,l),
(108,160,l),
(130,170,o),
(147,170,qs),
(172,170,o),
(201,147,o),
(201,125,qs),
(201,94,o),
(161,50,o),
(126,50,qs),
(100,50,o),
(72,76,o),
(72,97,qs),
(72,105,o),
(73,110,q),
(10,110,l),
(8,94,o),
(8,87,qs),
(8,43,o),
(65,-5,o),
(116,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
25 19 2 2 3 18 1 0 2 7 2 2 1 0 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 3 0 3 2 114 0 0 1 1 0 112 0 3 3 4 95 0 4 4 49 77 0 1 1 5 98 6 1 5 5 52 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 3 0 3 2 0 128 0 0 1 1 0 112 0 3 3 4 95 0 4 4 49 77 0 1 1 5 98 6 1 5 5 52 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 49 77 0 1 1 5 98 6 1 5 5 52 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 32 0 31 17 19 36 36 20 7 9 27
CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = uni2083;
unicode = 8323;
},
{
glyphname = uni2084;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,0,l),
(215,66,l),
(256,66,l),
(266,122,l),
(225,122,l),
(241,213,l),
(181,213,l),
(165,122,l),
(68,122,l),
(223,353,l),
(159,353,l),
(-2,117,l),
(-11,66,l),
(151,66,l),
(139,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 1 2 2 3 114 4 1 2 5 1 0 6 2 0 104 0 1 1 49 77 0 6 6 50 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 49 77 0 6 6 50 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 9 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = uni2084;
unicode = 8324;
},
{
glyphname = uni2085;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,-5,o),
(222,36,o),
(262,106,o),
(262,147,qs),
(262,189,o),
(213,243,o),
(167,243,qs),
(144,243,o),
(103,228,o),
(89,215,q),
(120,297,l),
(267,297,l),
(277,353,l),
(82,353,l),
(16,152,l),
(78,152,l),
(88,169,o),
(125,191,o),
(147,191,qs),
(171,191,o),
(199,162,o),
(199,137,qs),
(199,103,o),
(155,50,o),
(121,50,qs),
(96,50,o),
(66,78,o),
(65,100,q),
(2,100,l),
(-4,57,o),
(53,-5,o),
(111,-5,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 3 2 0 2 3 0 128 0 0 1 1 0 112 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 49 77 0 1 1 7 98 8 1 7 7 52 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 49 77 0 1 1 7 98 8 1 7 7 52 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 31 0 30 35 17 17 18 36 34 18 9 9 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2085;
unicode = 8325;
},
{
glyphname = uni2086;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,-5,o),
(224,36,o),
(261,102,o),
(261,136,qs),
(261,175,o),
(214,228,o),
(173,228,qs),
(147,228,o),
(97,201,o),
(82,180,q),
(94,242,o),
(141,305,o),
(173,305,qs),
(217,305,o),
(219,257,q),
(278,257,l),
(280,302,o),
(229,358,o),
(183,358,qs),
(129,358,o),
(51,283,o),
(12,171,o),
(12,117,qs),
(12,61,o),
(65,-5,o),
(121,-5,qs)
);
},
{
closed = 1;
nodes = (
(105,50,o),
(77,78,o),
(77,100,qs),
(77,129,o),
(120,173,o),
(148,173,qs),
(171,173,o),
(198,147,o),
(198,125,qs),
(198,95,o),
(158,50,o),
(127,50,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 5 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 1 2 3 2 1 114 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 51 77 8 1 6 6 4 97 7 1 4 4 52 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 51 77 8 1 6 6 4 97 7 1 4 4 52 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
26 26 0 0 26 37 26 36 32 30 0 25 0 24 36 33 18 37 9 9 26
CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
note = uni2086;
unicode = 8326;
},
{
glyphname = uni2087;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(103,0,l),
(298,307,l),
(307,353,l),
(49,353,l),
(39,298,l),
(229,298,l),
(36,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 95 0 1 1 49 77 0 2 2 50 2 78 18 17 16 3 9 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = uni2087;
unicode = 8327;
},
{
glyphname = uni2088;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,-5,o),
(253,65,o),
(253,115,qs),
(253,169,o),
(205,189,q),
(271,220,o),
(271,276,qs),
(271,313,o),
(219,358,o),
(173,358,qs),
(116,358,o),
(39,300,o),
(39,252,qs),
(39,231,o),
(61,199,o),
(81,189,q),
(46,177,o),
(3,121,o),
(3,86,qs),
(3,44,o),
(60,-5,o),
(112,-5,qs)
);
},
{
closed = 1;
nodes = (
(95,48,o),
(65,74,o),
(65,96,qs),
(65,128,o),
(111,160,o),
(138,160,qs),
(162,160,o),
(191,136,o),
(191,113,qs),
(191,82,o),
(146,48,o),
(120,48,qs)
);
},
{
closed = 1;
nodes = (
(127,208,o),
(101,230,o),
(101,250,qs),
(101,274,o),
(137,305,o),
(163,305,qs),
(184,305,o),
(208,283,o),
(208,264,qs),
(208,240,o),
(172,208,o),
(148,208,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
16 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 51 77 7 1 3 3 1 97 6 1 1 1 52 1 78 34 34 22 22 0 0 34 45 34 44 40 38 22 33 22 32 28 26 0 21 0 20 42 9 9 23
CALL[ ]	/* CallFunction */";
};
width = 308;
}
);
note = uni2088;
unicode = 8328;
},
{
glyphname = uni2089;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,-5,o),
(236,72,o),
(276,185,o),
(276,237,qs),
(276,292,o),
(222,358,o),
(166,358,qs),
(128,358,o),
(64,317,o),
(26,252,o),
(26,218,qs),
(26,179,o),
(73,125,o),
(114,125,qs),
(141,125,o),
(191,152,o),
(206,173,q),
(194,111,o),
(147,48,o),
(115,48,qs),
(71,48,o),
(69,96,q),
(10,96,l),
(8,51,o),
(58,-5,o),
(104,-5,qs)
);
},
{
closed = 1;
nodes = (
(117,180,o),
(90,206,o),
(90,228,qs),
(90,258,o),
(130,303,o),
(161,303,qs),
(184,303,o),
(211,276,o),
(211,253,qs),
(211,224,o),
(168,180,o),
(140,180,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 0 2 1 1 0 114 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 51 77 0 1 1 4 98 7 1 4 4 52 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 51 77 0 1 1 4 98 7 1 4 4 52 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
26 26 0 0 26 37 26 36 32 30 0 25 0 24 37 36 33 18 9 9 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2089;
unicode = 8329;
},
{
glyphname = uni2070;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(241,342,o),
(317,423,o),
(349,535,o),
(349,585,qs),
(349,642,o),
(298,705,o),
(243,705,qs),
(182,705,o),
(105,625,o),
(73,514,o),
(73,464,qs),
(73,407,o),
(124,342,o),
(179,342,qs)
);
},
{
closed = 1;
nodes = (
(139,399,o),
(139,472,qs),
(139,503,o),
(157,586,o),
(199,648,o),
(233,648,qs),
(283,648,o),
(283,575,qs),
(283,543,o),
(265,461,o),
(222,399,o),
(189,399,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 59 77 5 1 3 3 1 97 4 1 1 1 60 1 78 14 14 0 0 14 25 14 24 20 18 0 13 0 12 37 6 10 23
CALL[ ]	/* CallFunction */";
};
width = 325;
}
);
note = uni2070;
unicode = 8304;
},
{
glyphname = uni00B9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(298,347,l),
(308,402,l),
(225,402,l),
(278,700,l),
(244,700,l),
(117,656,l),
(108,607,l),
(204,628,l),
(164,402,l),
(69,402,l),
(59,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
3 2 2 0 1 1 76 0 1 1 57 77 2 1 0 0 3 96 0 3 3 58 3 78 17 17 20 16 4 10 26
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = uni00B9;
unicode = 185;
},
{
glyphname = uni00B2;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(293,347,l),
(303,402,l),
(146,402,l),
(226,470,ls),
(268,506,o),
(302,539,o),
(332,588,o),
(332,617,qs),
(332,655,o),
(282,705,o),
(234,705,qs),
(181,705,o),
(106,644,o),
(94,589,q),
(157,589,l),
(162,615,o),
(197,651,o),
(223,651,qs),
(245,651,o),
(268,627,o),
(268,609,qs),
(268,584,o),
(224,536,o),
(173,492,qs),
(59,394,l),
(51,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 59 77 0 3 3 4 95 0 4 4 58 4 78 17 23 34 18 38 5 10 27
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = uni00B2;
unicode = 178;
},
{
glyphname = uni00B3;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(224,342,o),
(291,383,o),
(325,447,o),
(325,481,qs),
(325,516,o),
(283,562,o),
(242,566,q),
(345,647,l),
(355,700,l),
(125,700,l),
(115,645,l),
(266,645,l),
(141,549,l),
(169,507,l),
(191,517,o),
(208,517,qs),
(233,517,o),
(262,494,o),
(262,472,qs),
(262,441,o),
(222,397,o),
(187,397,qs),
(161,397,o),
(133,423,o),
(133,444,qs),
(133,452,o),
(134,457,q),
(71,457,l),
(69,441,o),
(69,434,qs),
(69,390,o),
(126,342,o),
(177,342,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
25 19 2 2 3 18 1 0 2 7 2 2 1 0 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 3 0 3 2 114 0 0 1 1 0 112 0 3 3 4 95 0 4 4 57 77 0 1 1 5 98 6 1 5 5 60 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 3 0 3 2 0 128 0 0 1 1 0 112 0 3 3 4 95 0 4 4 57 77 0 1 1 5 98 6 1 5 5 60 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 57 77 0 1 1 5 98 6 1 5 5 60 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 32 0 31 17 19 36 36 20 7 10 27
CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = uni00B3;
unicode = 179;
},
{
glyphname = uni2074;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(264,347,l),
(276,413,l),
(317,413,l),
(327,469,l),
(286,469,l),
(302,560,l),
(242,560,l),
(226,469,l),
(129,469,l),
(284,700,l),
(220,700,l),
(59,464,l),
(50,413,l),
(212,413,l),
(200,347,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 1 2 2 3 114 4 1 2 5 1 0 6 2 0 104 0 1 1 57 77 0 6 6 58 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 57 77 0 6 6 58 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 10 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = uni2074;
unicode = 8308;
},
{
glyphname = uni2075;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(215,342,o),
(283,384,o),
(323,453,o),
(323,494,qs),
(323,536,o),
(274,590,o),
(228,590,qs),
(205,590,o),
(164,575,o),
(150,562,q),
(181,644,l),
(328,644,l),
(338,700,l),
(143,700,l),
(77,499,l),
(139,499,l),
(149,516,o),
(186,538,o),
(208,538,qs),
(232,538,o),
(260,509,o),
(260,484,qs),
(260,450,o),
(216,397,o),
(182,397,qs),
(157,397,o),
(127,425,o),
(126,447,q),
(63,447,l),
(58,404,o),
(115,342,o),
(173,342,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 3 2 0 2 3 0 128 0 0 1 1 0 112 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 57 77 0 1 1 7 98 8 1 7 7 60 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 57 77 0 1 1 7 98 8 1 7 7 60 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 31 0 30 35 17 17 18 36 34 18 9 10 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2075;
unicode = 8309;
},
{
glyphname = uni2076;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,342,o),
(284,383,o),
(322,448,o),
(322,482,qs),
(322,521,o),
(275,575,o),
(234,575,qs),
(207,575,o),
(157,548,o),
(142,527,q),
(154,589,o),
(201,652,o),
(233,652,qs),
(277,652,o),
(279,604,q),
(338,604,l),
(340,649,o),
(290,705,o),
(244,705,qs),
(190,705,o),
(112,628,o),
(72,515,o),
(72,463,qs),
(72,408,o),
(126,342,o),
(182,342,qs)
);
},
{
closed = 1;
nodes = (
(165,397,o),
(137,425,o),
(137,447,qs),
(137,476,o),
(180,520,o),
(208,520,qs),
(231,520,o),
(258,494,o),
(258,472,qs),
(258,442,o),
(218,397,o),
(187,397,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 5 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 1 2 3 2 1 114 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 59 77 8 1 6 6 4 97 7 1 4 4 60 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 59 77 8 1 6 6 4 97 7 1 4 4 60 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
26 26 0 0 26 37 26 36 32 30 0 25 0 24 36 33 18 37 9 10 26
CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
note = uni2076;
unicode = 8310;
},
{
glyphname = uni2077;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(164,347,l),
(360,654,l),
(368,700,l),
(110,700,l),
(100,645,l),
(290,645,l),
(97,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 95 0 1 1 57 77 0 2 2 58 2 78 18 17 16 3 10 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = uni2077;
unicode = 8311;
},
{
glyphname = uni2078;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(236,342,o),
(314,412,o),
(314,462,qs),
(314,516,o),
(266,536,q),
(332,567,o),
(332,623,qs),
(332,660,o),
(280,705,o),
(234,705,qs),
(177,705,o),
(100,647,o),
(100,599,qs),
(100,578,o),
(122,546,o),
(142,536,q),
(107,524,o),
(64,468,o),
(64,433,qs),
(64,391,o),
(121,342,o),
(173,342,qs)
);
},
{
closed = 1;
nodes = (
(156,395,o),
(126,421,o),
(126,443,qs),
(126,475,o),
(172,507,o),
(199,507,qs),
(223,507,o),
(252,483,o),
(252,460,qs),
(252,429,o),
(207,395,o),
(181,395,qs)
);
},
{
closed = 1;
nodes = (
(188,555,o),
(162,577,o),
(162,597,qs),
(162,621,o),
(198,652,o),
(224,652,qs),
(245,652,o),
(269,630,o),
(269,611,qs),
(269,587,o),
(233,555,o),
(209,555,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
16 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 59 77 7 1 3 3 1 97 6 1 1 1 60 1 78 34 34 22 22 0 0 34 45 34 44 40 38 22 33 22 32 28 26 0 21 0 20 42 9 10 23
CALL[ ]	/* CallFunction */";
};
width = 308;
}
);
note = uni2078;
unicode = 8312;
},
{
glyphname = uni2079;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,342,o),
(298,417,o),
(337,529,o),
(337,583,qs),
(337,639,o),
(284,705,o),
(228,705,qs),
(190,705,o),
(125,664,o),
(88,598,o),
(88,563,qs),
(88,524,o),
(135,472,o),
(175,472,qs),
(202,472,o),
(252,499,o),
(267,520,q),
(255,458,o),
(208,395,o),
(176,395,qs),
(132,395,o),
(130,443,q),
(71,443,l),
(69,398,o),
(120,342,o),
(166,342,qs)
);
},
{
closed = 1;
nodes = (
(178,527,o),
(151,553,o),
(151,575,qs),
(151,605,o),
(191,650,o),
(222,650,qs),
(245,650,o),
(272,623,o),
(272,600,qs),
(272,571,o),
(229,527,o),
(201,527,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 0 2 1 1 0 114 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 59 77 0 1 1 4 98 7 1 4 4 60 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 59 77 0 1 1 4 98 7 1 4 4 60 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
26 26 0 0 26 37 26 36 32 30 0 25 0 24 37 36 33 18 9 10 26
CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
note = uni2079;
unicode = 8313;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 286;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = period;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(89,-5,o),
(121,28,o),
(121,52,qs),
(121,76,o),
(89,109,o),
(64,109,qs),
(39,109,o),
(6,76,o),
(6,52,qs),
(6,28,o),
(39,-5,o),
(64,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 97 2 1 1 1 34 1 78 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 196;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
kernLeft = comma;
kernRight = comma;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-6,-119,l),
(120,102,l),
(33,102,l),
(-64,-119,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 178;
}
);
note = comma;
unicode = 44;
},
{
glyphname = colon;
kernLeft = colon;
kernRight = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,394,o),
(191,427,o),
(191,451,qs),
(191,475,o),
(159,508,o),
(134,508,qs),
(109,508,o),
(76,475,o),
(76,451,qs),
(76,427,o),
(109,394,o),
(134,394,qs)
);
},
{
closed = 1;
nodes = (
(89,-5,o),
(121,28,o),
(121,52,qs),
(121,76,o),
(89,109,o),
(64,109,qs),
(39,109,o),
(6,76,o),
(6,52,qs),
(6,28,o),
(39,-5,o),
(64,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
4 1 1 1 0 97 0 0 0 42 77 0 2 2 3 97 5 1 3 3 34 3 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 199;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
kernLeft = semicolon;
kernRight = semicolon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(12,-119,l),
(138,102,l),
(51,102,l),
(-46,-119,l)
);
},
{
closed = 1;
nodes = (
(185,393,o),
(217,426,o),
(217,450,qs),
(217,474,o),
(185,507,o),
(160,507,qs),
(135,507,o),
(102,474,o),
(102,450,qs),
(102,426,o),
(135,393,o),
(160,393,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 0 3 1 3 0 1 128 0 1 1 132 4 1 3 3 2 97 0 2 2 42 3 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 225;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = ellipsis;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(457,-5,o),
(489,28,o),
(489,52,qs),
(489,76,o),
(457,109,o),
(432,109,qs),
(407,109,o),
(374,76,o),
(374,52,qs),
(374,28,o),
(407,-5,o),
(432,-5,qs)
);
},
{
closed = 1;
nodes = (
(89,-5,o),
(121,28,o),
(121,52,qs),
(121,76,o),
(89,109,o),
(64,109,qs),
(39,109,o),
(6,76,o),
(6,52,qs),
(6,28,o),
(39,-5,o),
(64,-5,qs)
);
},
{
closed = 1;
nodes = (
(273,-5,o),
(305,28,o),
(305,52,qs),
(305,76,o),
(273,109,o),
(248,109,qs),
(223,109,o),
(190,76,o),
(190,52,qs),
(190,28,o),
(223,-5,o),
(248,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
4 2 2 0 0 1 97 8 5 7 3 6 5 1 1 34 1 78 24 24 12 12 0 0 24 35 24 34 30 28 12 23 12 22 18 16 0 11 0 10 36 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 565;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(142,194,l),
(242,700,l),
(151,700,l),
(71,194,l)
);
},
{
closed = 1;
nodes = (
(115,-5,o),
(148,28,o),
(148,52,qs),
(148,76,o),
(115,109,o),
(91,109,qs),
(66,109,o),
(33,76,o),
(33,52,qs),
(33,28,o),
(66,-5,o),
(91,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 1 0 2 0 1 2 128 0 0 0 33 77 0 2 2 3 97 4 1 3 3 34 3 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 250;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = exclamdown;
kernLeft = exclamdown;
kernRight = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(110,-143,l),
(190,363,l),
(119,363,l),
(19,-143,l)
);
},
{
closed = 1;
nodes = (
(195,448,o),
(228,481,o),
(228,505,qs),
(228,529,o),
(195,562,o),
(170,562,qs),
(146,562,o),
(113,529,o),
(113,505,qs),
(113,481,o),
(146,448,o),
(170,448,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 0 3 1 3 0 1 128 0 1 1 132 0 2 3 3 2 89 0 2 2 3 97 4 1 3 2 3 81 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 250;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = question;
kernLeft = question;
kernRight = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,196,l),
(231,299,l),
(316,299,o),
(379,327,qs),
(445,354,o),
(516,462,o),
(516,538,qs),
(516,618,o),
(413,712,o),
(327,712,qs),
(260,712,o),
(209,687,qs),
(154,662,o),
(84,571,o),
(74,512,q),
(153,512,l),
(164,571,o),
(251,641,o),
(315,641,qs),
(370,641,o),
(434,580,o),
(434,530,qs),
(434,464,o),
(403,427,qs),
(345,357,o),
(191,357,qs),
(162,357,l),
(137,196,l)
);
},
{
closed = 1;
nodes = (
(178,-5,o),
(210,28,o),
(210,52,qs),
(210,76,o),
(178,109,o),
(153,109,qs),
(128,109,o),
(95,76,o),
(95,52,qs),
(95,28,o),
(128,-5,o),
(153,-5,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 2 1 0 1 2 0 128 0 5 4 6 4 5 114 0 0 0 4 5 0 4 105 0 1 1 3 97 0 3 3 39 77 0 6 6 7 97 8 1 7 7 34 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 2 1 0 1 2 0 128 0 5 4 6 4 5 6 128 0 0 0 4 5 0 4 105 0 1 1 3 97 0 3 3 39 77 0 6 6 7 97 8 1 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
28 28 28 39 28 38 37 17 22 36 18 37 32 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = question;
unicode = 63;
},
{
glyphname = questiondown;
kernLeft = questiondown;
kernRight = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(256,-164,o),
(364,-119,o),
(440,-28,o),
(451,36,q),
(372,36,l),
(361,-23,o),
(274,-93,o),
(210,-93,qs),
(155,-93,o),
(91,-32,o),
(91,18,qs),
(91,105,o),
(210,191,o),
(334,191,qs),
(363,191,l),
(388,352,l),
(316,352,l),
(294,249,l),
(222,249,o),
(93,203,o),
(9,96,o),
(9,10,qs),
(9,-70,o),
(112,-164,o),
(198,-164,qs)
);
},
{
closed = 1;
nodes = (
(397,439,o),
(430,472,o),
(430,496,qs),
(430,520,o),
(397,553,o),
(372,553,qs),
(347,553,o),
(315,520,o),
(315,496,qs),
(315,472,o),
(347,439,o),
(372,439,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 1 7 0 0 1 114 0 4 2 3 2 4 3 128 0 6 9 1 7 1 6 7 105 0 0 0 2 4 0 2 106 0 3 5 5 3 89 0 3 3 5 97 8 1 5 3 5 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 1 7 0 7 1 0 128 0 4 2 3 2 4 3 128 0 6 9 1 7 1 6 7 105 0 0 0 2 4 0 2 106 0 3 5 5 3 89 0 3 3 5 97 8 1 5 3 5 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
25 25 0 0 25 36 25 35 31 29 0 24 0 23 18 36 33 17 21 10 8 27
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(140,285,o),
(172,318,o),
(172,342,qs),
(172,367,o),
(140,399,o),
(115,399,qs),
(90,399,o),
(57,367,o),
(57,342,qs),
(57,318,o),
(90,285,o),
(115,285,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 196;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(239,213,o),
(309,283,o),
(309,333,qs),
(309,384,o),
(239,454,o),
(188,454,qs),
(138,454,o),
(68,383,o),
(68,333,qs),
(68,284,o),
(139,213,o),
(188,213,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 347;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = asterisk;
kernLeft = asterisk;
kernRight = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(280,356,l),
(304,493,l),
(412,425,l),
(450,476,l),
(343,545,l),
(474,613,l),
(454,664,l),
(322,596,l),
(346,733,l),
(287,733,l),
(263,596,l),
(157,664,l),
(118,613,l),
(224,545,l),
(94,476,l),
(115,425,l),
(245,493,l),
(221,356,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
15 14 13 12 11 10 9 6 5 4 3 2 1 13 1 0 1 76 0 0 1 0 133 0 1 1 118 24 23 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 474;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,0,l),
(257,197,l),
(471,197,l),
(394,0,l),
(474,0,l),
(551,197,l),
(713,197,l),
(727,272,l),
(580,272,l),
(644,435,l),
(799,435,l),
(811,509,l),
(673,509,l),
(750,706,l),
(670,706,l),
(593,509,l),
(379,509,l),
(455,706,l),
(376,706,l),
(299,509,l),
(133,509,l),
(120,435,l),
(270,435,l),
(206,272,l),
(49,272,l),
(36,197,l),
(177,197,l),
(100,0,l)
);
},
{
closed = 1;
nodes = (
(350,435,l),
(564,435,l),
(500,272,l),
(286,272,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
16 15 9 3 1 12 10 2 0 11 1 0 103 6 1 4 4 33 77 14 8 2 2 2 3 95 7 5 2 3 3 36 77 13 1 11 11 34 11 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
7 5 2 3 14 8 2 2 1 3 2 104 16 15 9 3 1 12 10 2 0 11 1 0 103 6 1 4 4 33 77 13 1 11 11 34 11 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
28 28 28 31 28 31 30 29 27 26 25 24 23 22 21 20 19 18 17 17 17 17 17 17 17 17 16 17 8 31
CALL[ ]	/* CallFunction */";
};
width = 814;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = slash;
kernLeft = slash;
kernRight = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,-95,l),
(453,764,l),
(370,764,l),
(-32,-95,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 391;
}
);
note = slash;
unicode = 47;
},
{
glyphname = backslash;
kernLeft = backslash;
kernRight = backslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(301,-95,l),
(202,764,l),
(119,764,l),
(219,-95,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 391;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = periodcentered.loclCAT;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(106,285,o),
(138,318,o),
(138,342,qs),
(138,367,o),
(106,399,o),
(81,399,qs),
(56,399,o),
(23,367,o),
(23,342,qs),
(23,318,o),
(56,285,o),
(81,285,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 127;
}
);
note = periodcentered.loclCAT;
},
{
glyphname = periodcentered.loclCAT.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-109,293,o),
(-76,326,o),
(-76,350,qs),
(-76,375,o),
(-109,407,o),
(-133,407,qs),
(-158,407,o),
(-191,375,o),
(-191,350,qs),
(-191,326,o),
(-158,293,o),
(-133,293,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = periodcentered.loclCAT.case;
},
{
glyphname = hyphen;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(457,255,l),
(469,326,l),
(73,326,l),
(61,255,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 514;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = endash;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(584,255,l),
(597,326,l),
(73,326,l),
(61,255,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 642;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(789,255,l),
(801,326,l),
(73,326,l),
(61,255,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 847;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = underscore;
kernLeft = underscore;
kernRight = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(519,-115,l),
(532,-36,l),
(8,-36,l),
(-5,-115,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 641;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = parenleft;
kernRight = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(265,-145,l),
(267,-137,l),
(205,-63,o),
(136,123,o),
(136,226,qs),
(136,327,o),
(171,432,qs),
(207,536,o),
(340,726,o),
(432,803,q),
(433,811,l),
(347,811,l),
(257,736,o),
(192,642,qs),
(124,544,o),
(51,325,o),
(51,215,qs),
(51,106,o),
(120,-78,o),
(178,-145,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 26 23 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
kernLeft = parenright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-30,-145,l),
(56,-145,l),
(146,-70,o),
(212,25,qs),
(279,122,o),
(351,341,o),
(351,451,qs),
(351,560,o),
(282,744,o),
(224,811,q),
(138,811,l),
(136,803,l),
(198,729,o),
(267,543,o),
(267,440,qs),
(267,339,o),
(232,234,qs),
(196,130,o),
(63,-60,o),
(-29,-137,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 24 24 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(302,-152,l),
(315,-80,l),
(277,-80,ls),
(240,-80,o),
(205,-51,o),
(205,-19,qs),
(205,1,o),
(218,49,o),
(232,88,qs),
(247,133,o),
(263,193,o),
(263,220,qs),
(263,306,o),
(175,329,q),
(175,331,l),
(259,349,o),
(317,467,o),
(317,564,qs),
(317,622,o),
(328,693,o),
(374,739,o),
(422,739,qs),
(460,739,l),
(472,811,l),
(419,811,ls),
(321,811,o),
(235,687,o),
(235,593,qs),
(235,551,ls),
(235,498,o),
(219,428,o),
(164,375,o),
(107,364,q),
(95,296,l),
(181,278,o),
(181,207,qs),
(181,176,o),
(165,120,o),
(150,83,qs),
(135,46,o),
(120,-9,o),
(120,-39,qs),
(120,-94,o),
(189,-152,o),
(249,-152,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
29 10 2 2 1 1 76 0 0 0 1 2 0 1 105 0 2 3 3 2 89 0 2 2 3 97 4 1 3 2 3 81 0 0 0 44 0 43 42 40 23 21 20 18 5 8 22
CALL[ ]	/* CallFunction */";
};
width = 424;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = braceright;
kernLeft = braceright;
kernRight = braceright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(35,-152,ls),
(120,-152,o),
(217,-42,o),
(217,62,qs),
(217,133,o),
(232,220,o),
(288,284,o),
(347,295,q),
(359,363,l),
(272,383,o),
(272,452,qs),
(272,479,o),
(286,530,o),
(301,567,qs),
(317,606,o),
(333,665,o),
(333,698,qs),
(333,753,o),
(265,811,o),
(204,811,qs),
(151,811,l),
(139,739,l),
(177,739,ls),
(249,739,o),
(249,678,qs),
(249,656,o),
(237,615,o),
(223,577,qs),
(207,536,o),
(190,474,o),
(190,439,qs),
(190,352,o),
(280,331,q),
(280,329,l),
(205,312,o),
(137,206,o),
(137,118,qs),
(137,31,o),
(95,-80,o),
(33,-80,qs),
(-5,-80,l),
(-18,-152,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
32 7 2 0 1 1 76 0 2 0 1 0 2 1 105 0 0 3 3 0 89 0 0 0 3 97 0 3 0 3 81 41 39 33 47 32 4 8 25
CALL[ ]	/* CallFunction */";
};
width = 425;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(178,-151,l),
(190,-81,l),
(95,-81,l),
(240,742,l),
(335,742,l),
(348,811,l),
(174,811,l),
(4,-151,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 308;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,-151,l),
(333,811,l),
(159,811,l),
(147,741,l),
(242,741,l),
(97,-82,l),
(2,-82,l),
(-11,-151,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 2 0 1 0 2 1 103 0 0 3 3 0 87 0 0 0 3 95 0 3 0 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 308;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-5,-122,l),
(126,102,l),
(32,102,l),
(-65,-122,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 184;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(165,-122,l),
(295,102,l),
(201,102,l),
(105,-122,l)
);
},
{
closed = 1;
nodes = (
(-5,-122,l),
(126,102,l),
(32,102,l),
(-65,-122,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 353;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(319,477,l),
(415,700,l),
(355,700,l),
(224,477,l)
);
},
{
closed = 1;
nodes = (
(159,477,l),
(256,700,l),
(196,700,l),
(65,477,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quotedblright;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(296,476,l),
(427,699,l),
(333,699,l),
(236,476,l)
);
},
{
closed = 1;
nodes = (
(137,476,l),
(268,699,l),
(174,699,l),
(77,476,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 371;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,477,l),
(256,700,l),
(196,700,l),
(65,477,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 33 0 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 213;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = quoteright;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,477,l),
(268,700,l),
(174,700,l),
(78,477,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 33 0 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 213;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = guillemotleft;
kernLeft = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(114,120,l),
(198,120,l),
(128,295,l),
(259,470,l),
(176,470,l),
(48,295,l)
);
},
{
closed = 1;
nodes = (
(292,120,l),
(375,120,l),
(306,295,l),
(437,470,l),
(354,470,l),
(226,295,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
11 8 5 2 4 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,120,l),
(114,120,l),
(242,295,l),
(176,470,l),
(93,470,l),
(162,295,l)
);
},
{
closed = 1;
nodes = (
(209,120,l),
(292,120,l),
(420,295,l),
(354,470,l),
(271,470,l),
(340,295,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
11 8 5 2 4 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 452;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = guilsinglleft;
kernLeft = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,120,l),
(128,295,l),
(259,470,l),
(176,470,l),
(48,295,l),
(114,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 275;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(114,120,l),
(242,295,l),
(176,470,l),
(93,470,l),
(162,295,l),
(31,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 274;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = quotedbl;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(296,476,l),
(427,699,l),
(333,699,l),
(236,476,l)
);
},
{
closed = 1;
nodes = (
(137,476,l),
(268,699,l),
(174,699,l),
(77,476,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 371;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,477,l),
(268,700,l),
(174,700,l),
(78,477,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 33 0 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 213;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = florin;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-102,-191,ls),
(-32,-191,o),
(53,-126,o),
(74,-54,qs),
(224,478,l),
(345,478,l),
(364,548,l),
(243,548,l),
(257,596,ls),
(271,649,o),
(338,695,o),
(398,695,q),
(417,766,l),
(318,766,o),
(199,684,o),
(173,596,qs),
(159,548,l),
(86,548,l),
(67,478,l),
(140,478,l),
(-11,-54,ls),
(-22,-92,o),
(-56,-121,o),
(-86,-121,qs),
(-108,-121,l),
(-128,-191,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 3 0 4 2 3 4 105 5 1 2 6 1 1 0 2 1 103 0 0 7 7 0 89 0 0 0 7 97 0 7 0 7 81 35 17 19 17 19 17 19 32 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 333;
}
);
note = florin;
unicode = 402;
},
{
glyphname = at;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(491,-212,o),
(603,-191,o),
(648,-173,q),
(638,-113,l),
(552,-150,o),
(450,-150,qs),
(357,-150,o),
(211,-77,o),
(129,57,o),
(129,147,qs),
(129,263,o),
(251,469,o),
(461,593,o),
(585,593,qs),
(681,593,o),
(825,526,o),
(903,401,o),
(903,316,qs),
(903,267,o),
(874,153,o),
(810,73,o),
(761,73,qs),
(734,73,o),
(705,103,o),
(705,129,qs),
(706,138,o),
(707,147,qs),
(756,425,l),
(676,425,l),
(666,370,l),
(625,435,o),
(533,435,qs),
(460,435,o),
(344,361,o),
(280,240,o),
(280,172,qs),
(280,94,o),
(374,0,o),
(455,0,qs),
(508,0,o),
(590,44,o),
(626,80,q),
(635,42,o),
(691,2,o),
(734,2,qs),
(812,2,o),
(920,103,o),
(972,252,o),
(972,324,qs),
(972,424,o),
(875,574,o),
(704,654,o),
(595,654,qs),
(446,654,o),
(200,510,o),
(59,270,o),
(59,133,qs),
(59,29,o),
(153,-127,o),
(325,-212,o),
(439,-212,qs)
);
},
{
closed = 1;
nodes = (
(427,72,o),
(363,134,o),
(363,187,qs),
(363,232,o),
(405,313,o),
(482,364,o),
(531,364,qs),
(586,364,o),
(648,302,o),
(648,250,qs),
(648,204,o),
(606,122,o),
(530,72,o),
(480,72,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
30 1 9 3 35 18 2 5 9 56 1 7 1 57 1 8 7 4 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
30 1 9 4 35 18 2 5 9 56 1 7 1 57 1 8 7 4 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 0 0 6 3 0 6 105 4 1 3 0 9 5 3 9 105 12 10 2 5 5 1 98 2 1 1 1 34 77 0 7 7 8 97 11 1 8 8 38 8 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 4 3 9 3 4 9 128 0 0 0 6 3 0 6 105 0 3 0 9 5 3 9 105 12 10 2 5 5 1 98 2 1 1 1 34 77 0 7 7 8 97 11 1 8 8 38 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
61 61 0 0 61 74 61 73 68 66 0 60 0 59 38 38 37 18 37 36 38 38 13 8 30
CALL[ ]	/* CallFunction */";
};
width = 1034;
}
);
note = at;
unicode = 64;
},
{
glyphname = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(269,-12,o),
(374,40,o),
(423,87,q),
(429,95,l),
(509,-1,l),
(613,-1,l),
(483,154,l),
(670,404,l),
(583,404,l),
(439,207,l),
(319,350,ls),
(269,410,o),
(226,477,o),
(226,514,qs),
(226,539,o),
(252,597,o),
(312,640,o),
(358,640,qs),
(404,640,o),
(456,595,o),
(456,552,qs),
(456,539,o),
(453,522,q),
(535,522,l),
(540,547,o),
(540,564,qs),
(540,633,o),
(450,712,o),
(372,712,qs),
(296,712,o),
(193,644,o),
(144,547,o),
(144,503,qs),
(144,449,o),
(181,394,qs),
(186,387,l),
(179,382,ls),
(100,333,o),
(25,211,o),
(25,152,qs),
(25,80,o),
(119,-12,o),
(206,-12,qs)
);
},
{
closed = 1;
nodes = (
(169,61,o),
(108,122,o),
(108,168,qs),
(108,217,o),
(170,300,o),
(220,329,qs),
(228,333,l),
(387,145,l),
(380,138,ls),
(344,100,o),
(268,61,o),
(223,61,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
47 46 38 35 32 6 6 6 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 1 2 3 2 1 3 128 0 2 2 0 97 0 0 0 39 77 0 3 3 4 97 7 5 2 4 4 34 77 8 1 6 6 4 97 7 5 2 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 1 2 3 2 1 3 128 0 2 2 0 97 0 0 0 39 77 0 3 3 4 95 0 4 4 34 77 8 1 6 6 5 97 7 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
43 43 0 0 43 54 43 53 0 42 0 41 18 24 36 20 44 9 8 27
CALL[ ]	/* CallFunction */";
};
width = 673;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(299,-100,l),
(428,634,l),
(511,634,l),
(381,-100,l),
(455,-100,l),
(596,700,l),
(356,700,ls),
(244,700,o),
(80,595,o),
(80,476,qs),
(80,435,o),
(118,353,o),
(210,295,o),
(285,295,qs),
(295,295,l),
(225,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 0 3 2 3 0 2 128 4 1 2 2 132 0 3 3 1 95 0 1 1 33 3 78 17 17 17 37 32 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,-232,o),
(401,-173,o),
(468,-71,o),
(468,-8,qs),
(468,24,o),
(454,52,q),
(499,88,o),
(538,182,o),
(538,227,qs),
(538,290,o),
(459,363,o),
(395,385,qs),
(339,404,o),
(259,435,o),
(243,448,qs),
(215,470,o),
(215,505,qs),
(215,564,o),
(302,640,o),
(364,640,qs),
(421,640,o),
(484,583,o),
(484,537,qs),
(484,530,o),
(482,518,q),
(570,518,l),
(573,535,o),
(573,551,qs),
(573,623,o),
(472,712,o),
(382,712,qs),
(304,712,o),
(187,648,o),
(124,545,o),
(124,488,qs),
(124,454,o),
(138,428,q),
(90,387,o),
(55,294,o),
(55,252,qs),
(55,189,o),
(134,117,o),
(198,95,qs),
(218,88,ls),
(321,54,o),
(346,35,qs),
(363,23,o),
(378,-6,o),
(378,-25,qs),
(378,-84,o),
(291,-160,o),
(229,-160,qs),
(172,-160,o),
(109,-103,o),
(109,-57,qs),
(109,-50,o),
(111,-38,q),
(23,-38,l),
(20,-55,o),
(20,-71,qs),
(20,-143,o),
(121,-232,o),
(211,-232,qs)
);
},
{
closed = 1;
nodes = (
(366,128,o),
(332,138,qs),
(288,154,ls),
(235,172,o),
(180,199,o),
(145,241,o),
(145,274,qs),
(145,339,o),
(190,376,q),
(220,357,o),
(261,342,qs),
(301,328,ls),
(354,310,o),
(412,283,o),
(448,240,o),
(448,206,qs),
(448,142,o),
(403,104,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
80 71 56 25 4 0 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 39 77 0 1 1 5 97 6 1 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 1 6 1 5 1 5 101 0 4 4 2 97 0 2 2 39 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 62 0 61 43 41 37 36 32 30 36 20 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = section;
unicode = 167;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(463,-4,o),
(653,108,o),
(762,300,o),
(762,415,qs),
(762,491,o),
(699,622,o),
(568,704,o),
(471,704,qs),
(355,704,o),
(165,593,o),
(55,402,o),
(55,287,qs),
(55,213,o),
(117,80,o),
(249,-4,o),
(347,-4,qs)
);
},
{
closed = 1;
nodes = (
(283,32,o),
(166,89,o),
(95,205,o),
(95,290,qs),
(95,395,o),
(190,569,o),
(359,669,o),
(465,669,qs),
(536,669,o),
(653,613,o),
(722,497,o),
(722,412,qs),
(722,308,o),
(629,134,o),
(461,32,o),
(353,32,qs)
);
},
{
closed = 1;
nodes = (
(442,119,o),
(568,201,o),
(599,270,q),
(523,270,l),
(501,226,o),
(426,179,o),
(378,179,qs),
(325,179,o),
(262,245,o),
(262,306,qs),
(262,355,o),
(301,455,o),
(381,522,o),
(439,522,qs),
(485,522,o),
(545,474,o),
(551,430,q),
(627,430,l),
(622,503,o),
(526,583,o),
(450,583,qs),
(376,583,o),
(256,506,o),
(187,376,o),
(187,300,qs),
(187,216,o),
(288,119,o),
(367,119,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 93 values pushed */
0 5 6 8 6 5 8 128 0 8 7 6 8 7 126 0 0 0 2 4 0 2 105 0 4 0 6 5 4 6 105 0 7 12 1 9 3 7 9 105 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81 32 32 16 16 0 0 32 59 32 58 56 55 53 51 46 44 42 41 39 37 16 31 16 30 24 22 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 794;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(282,425,o),
(348,463,o),
(386,529,o),
(386,568,qs),
(386,607,o),
(348,673,o),
(282,712,o),
(243,712,qs),
(204,712,o),
(138,673,o),
(99,607,o),
(99,568,qs),
(99,529,o),
(138,463,o),
(204,425,o),
(243,425,qs)
);
},
{
closed = 1;
nodes = (
(194,448,o),
(123,519,o),
(123,568,qs),
(123,618,o),
(194,688,o),
(243,688,qs),
(293,688,o),
(363,618,o),
(363,568,qs),
(363,519,o),
(293,448,o),
(243,448,qs)
);
},
{
closed = 1;
nodes = (
(222,496,l),
(222,561,l),
(240,561,l),
(275,496,l),
(308,496,l),
(267,568,l),
(296,578,o),
(296,607,qs),
(296,625,o),
(274,651,o),
(248,651,qs),
(194,651,l),
(194,496,l)
);
},
{
closed = 1;
nodes = (
(222,585,l),
(222,628,l),
(244,628,ls),
(256,628,o),
(269,617,o),
(269,607,qs),
(269,596,o),
(254,585,o),
(241,585,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 6 values pushed */
34 1 6 9 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
7 1 5 6 3 8 5 114 0 0 0 2 4 0 2 105 0 4 0 8 9 4 8 105 12 1 9 0 6 5 9 6 103 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
7 1 5 6 3 6 5 3 128 0 0 0 2 4 0 2 105 0 4 0 8 9 4 8 105 12 1 9 0 6 5 9 6 103 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
41 41 16 16 0 0 41 49 41 48 47 45 40 39 38 37 36 35 30 28 16 27 16 26 22 20 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 372;
}
);
note = registered;
unicode = 174;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(408,350,l),
(454,610,l),
(508,396,l),
(556,396,l),
(686,606,l),
(642,350,l),
(704,350,l),
(766,700,l),
(686,700,l),
(548,475,l),
(495,700,l),
(410,700,l),
(348,350,l)
);
},
{
closed = 1;
nodes = (
(205,350,l),
(257,647,l),
(347,647,l),
(356,700,l),
(111,700,l),
(102,647,l),
(192,647,l),
(138,350,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
10 7 2 3 3 5 1 76 0 3 5 2 5 3 2 128 8 4 2 2 2 132 6 1 2 0 5 5 0 87 6 1 2 0 0 5 95 7 1 5 0 5 79 17 17 17 17 18 18 17 18 16 9 6 31
CALL[ ]	/* CallFunction */";
};
width = 736;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(287,444,o),
(364,519,o),
(364,577,qs),
(364,638,o),
(288,712,o),
(232,712,qs),
(176,712,o),
(100,636,o),
(100,577,qs),
(100,518,o),
(176,444,o),
(231,444,qs)
);
},
{
closed = 1;
nodes = (
(205,506,o),
(165,544,o),
(165,578,qs),
(165,612,o),
(206,650,o),
(232,650,qs),
(259,650,o),
(298,612,o),
(298,578,qs),
(298,544,o),
(258,506,o),
(231,506,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 348;
}
);
note = degree;
unicode = 176;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(97,-100,l),
(242,720,l),
(158,720,l),
(13,-100,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 0 1 134 0 0 0 33 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 9 values pushed */
0 0 1 0 133 0 1 1 118
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 233;
}
);
note = bar;
unicode = 124;
},
{
glyphname = brokenbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,387,l),
(242,720,l),
(158,720,l),
(99,387,l)
);
},
{
closed = 1;
nodes = (
(97,-100,l),
(156,233,l),
(72,233,l),
(13,-100,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 2 0 3 2 3 99 0 1 1 0 95 0 0 0 33 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 233;
}
);
note = brokenbar;
unicode = 166;
},
{
glyphname = dagger;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,-259,l),
(335,488,l),
(525,481,l),
(537,548,l),
(345,540,l),
(395,780,l),
(312,780,l),
(278,540,l),
(89,548,l),
(77,481,l),
(269,488,l),
(128,-259,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 1 2 133 0 5 0 5 134 3 1 1 0 0 1 87 3 1 1 1 0 96 4 1 0 1 0 80 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 531;
}
);
note = dagger;
unicode = 8224;
},
{
glyphname = uni2113;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(97,-100,l),
(243,720,l),
(159,720,l),
(13,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 234;
}
);
note = uni2113;
unicode = 8467;
},
{
glyphname = daggerdbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(211,-259,l),
(246,-19,l),
(436,-26,l),
(448,41,l),
(255,33,l),
(336,488,l),
(525,481,l),
(537,548,l),
(345,540,l),
(395,780,l),
(312,780,l),
(278,540,l),
(89,548,l),
(77,481,l),
(269,488,l),
(188,33,l),
(0,41,l),
(-13,-26,l),
(180,-19,l),
(128,-259,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 1 0 95 8 1 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 18 17 17 17 17 17 17 17 17 16 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 532;
}
);
note = daggerdbl;
unicode = 8225;
},
{
glyphname = estimated;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(503,-7,o),
(660,137,q),
(628,179,l),
(551,113,o),
(422,50,o),
(349,50,qs),
(279,50,o),
(186,98,o),
(153,148,q),
(184,314,l),
(720,314,l),
(731,375,ls),
(736,410,o),
(736,435,qs),
(736,503,o),
(678,623,o),
(551,699,o),
(454,699,qs),
(316,699,o),
(134,550,o),
(49,343,o),
(49,256,qs),
(49,183,o),
(111,64,o),
(242,-7,o),
(339,-7,qs)
);
},
{
closed = 1;
nodes = (
(223,542,l),
(310,642,o),
(444,642,qs),
(507,642,o),
(598,596,o),
(622,553,q),
(591,376,l),
(194,376,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
27 1 5 4 23 22 16 3 2 1 2 76 0 0 0 4 5 0 4 105 7 1 5 0 1 2 5 1 103 0 2 3 3 2 89 0 2 2 3 97 6 1 3 2 3 81 26 26 0 0 26 33 26 33 31 29 0 25 0 24 35 22 38 8 6 25
CALL[ ]	/* CallFunction */";
};
width = 762;
}
);
note = estimated;
unicode = 8494;
},
{
glyphname = at.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,-84,o),
(626,-63,o),
(671,-45,q),
(661,15,l),
(575,-22,o),
(473,-22,qs),
(380,-22,o),
(234,51,o),
(152,185,o),
(152,275,qs),
(152,391,o),
(274,597,o),
(484,721,o),
(608,721,qs),
(704,721,o),
(848,654,o),
(926,529,o),
(926,444,qs),
(926,395,o),
(897,281,o),
(833,201,o),
(784,201,qs),
(757,201,o),
(728,231,o),
(728,257,qs),
(729,266,o),
(730,275,qs),
(779,553,l),
(699,553,l),
(689,498,l),
(648,563,o),
(556,563,qs),
(483,563,o),
(367,489,o),
(303,368,o),
(303,300,qs),
(303,222,o),
(397,128,o),
(478,128,qs),
(531,128,o),
(613,172,o),
(649,208,q),
(658,170,o),
(714,130,o),
(757,130,qs),
(835,130,o),
(943,231,o),
(995,380,o),
(995,452,qs),
(995,552,o),
(898,702,o),
(727,782,o),
(618,782,qs),
(469,782,o),
(223,638,o),
(82,398,o),
(82,261,qs),
(82,157,o),
(176,1,o),
(348,-84,o),
(462,-84,qs)
);
},
{
closed = 1;
nodes = (
(450,200,o),
(386,262,o),
(386,315,qs),
(386,360,o),
(428,441,o),
(505,492,o),
(554,492,qs),
(609,492,o),
(671,430,o),
(671,378,qs),
(671,332,o),
(629,250,o),
(553,200,o),
(503,200,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
30 1 9 3 35 18 2 5 9 56 1 7 1 57 1 8 7 4 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
30 1 9 4 35 18 2 5 9 56 1 7 1 57 1 8 7 4 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 6 3 0 6 105 4 1 3 0 9 5 3 9 105 12 10 2 5 2 1 1 7 5 1 106 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 4 3 9 3 4 9 128 0 0 0 6 3 0 6 105 0 3 0 9 5 3 9 105 12 10 2 5 2 1 1 7 5 1 106 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
61 61 0 0 61 74 61 73 68 66 0 60 0 59 38 38 37 18 37 36 38 38 13 8 30
CALL[ ]	/* CallFunction */";
};
width = 1034;
}
);
note = at.case;
},
{
glyphname = registered.case;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (36,204);
ref = registered;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 4
PUSHB[ ]	/* 1 value pushed */
204
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = registered.case;
},
{
glyphname = uni20BF;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(133,0,l),
(118,-86,l),
(187,-86,l),
(202,0,l),
(262,0,l),
(247,-86,l),
(316,-86,l),
(331,2,l),
(436,12,o),
(556,133,o),
(556,225,qs),
(556,277,o),
(499,359,o),
(445,377,q),
(505,394,o),
(583,488,o),
(583,548,qs),
(583,604,o),
(518,683,o),
(454,695,q),
(470,791,l),
(401,791,l),
(385,700,l),
(325,700,l),
(341,791,l),
(272,791,l),
(256,700,l),
(155,700,l),
(31,0,l)
);
},
{
closed = 1;
nodes = (
(128,70,l),
(175,339,l),
(327,339,ls),
(398,339,o),
(472,279,o),
(472,223,qs),
(472,149,o),
(374,70,o),
(282,70,qs)
);
},
{
closed = 1;
nodes = (
(187,406,l),
(226,630,l),
(374,630,ls),
(438,630,o),
(495,577,o),
(495,531,qs),
(495,472,o),
(409,406,o),
(338,406,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
8 1 10 0 14 1 8 11 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
3 1 1 0 0 1 112 6 1 4 5 5 4 113 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
3 1 1 0 1 133 6 1 4 5 5 4 113 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
3 1 1 0 1 133 6 1 4 5 4 134 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
38 38 29 29 38 46 38 45 44 42 29 37 29 36 37 17 17 17 30 17 17 17 16 14 8 31
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = uni20BF;
unicode = 8383;
},
{
glyphname = cent;
layers = (
{
anchors = (
{
name = bottom;
pos = (312,0);
},
{
name = top;
pos = (434,691);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,-86,l),
(219,7,l),
(246,-3,o),
(278,-8,q),
(251,-86,l),
(322,-86,l),
(348,-12,l),
(460,-8,o),
(620,102,o),
(657,200,q),
(563,200,l),
(539,140,o),
(444,69,o),
(374,62,q),
(562,598,l),
(611,561,o),
(614,487,q),
(708,487,l),
(706,555,o),
(646,652,o),
(590,677,q),
(630,791,l),
(559,791,l),
(526,697,l),
(496,703,o),
(463,703,q),
(494,791,l),
(423,791,l),
(390,698,l),
(293,682,o),
(141,559,o),
(57,373,o),
(57,264,qs),
(57,196,o),
(107,76,o),
(159,38,q),
(115,-86,l)
);
},
{
closed = 1;
nodes = (
(144,352,o),
(197,495,o),
(296,597,o),
(362,618,q),
(189,125,l),
(144,181,o),
(144,271,qs)
);
},
{
closed = 1;
nodes = (
(437,630,l),
(444,630,ls),
(476,630,o),
(500,624,q),
(304,64,l),
(270,69,o),
(245,82,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
15 12 2 8 1 46 39 21 3 3 8 50 38 34 32 22 5 5 4 3 76 0 4 3 5 3 4 5 128 7 1 6 5 6 134 2 1 0 0 3 4 0 3 103 0 8 8 1 97 0 1 1 33 77 0 5 5 40 5 78 27 20 17 18 22 20 18 17 24 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 712;
}
);
note = cent;
unicode = 162;
},
{
glyphname = currency;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(148,154,l),
(189,121,o),
(244,121,qs),
(303,121,o),
(354,151,q),
(402,92,l),
(446,130,l),
(399,188,l),
(425,216,o),
(453,287,o),
(453,327,qs),
(453,370,o),
(433,405,q),
(506,466,l),
(474,504,l),
(401,441,l),
(361,473,o),
(306,473,qs),
(246,473,o),
(197,445,q),
(148,504,l),
(104,466,l),
(151,410,l),
(97,353,o),
(97,272,qs),
(97,229,o),
(117,192,q),
(44,130,l),
(75,92,l)
);
},
{
closed = 1;
nodes = (
(221,186,o),
(177,232,o),
(177,273,qs),
(177,332,o),
(245,409,o),
(294,409,qs),
(327,409,o),
(373,363,o),
(373,321,qs),
(373,265,o),
(305,186,o),
(255,186,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
14 12 8 6 5 5 2 0 20 15 1 3 3 2 27 23 21 3 1 3 3 76 13 7 2 0 74 28 22 2 1 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
4 1 3 0 1 3 1 101 0 2 2 0 97 0 0 0 36 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 2 3 0 2 105 4 1 3 1 1 3 89 4 1 3 3 1 97 0 1 3 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
29 29 29 40 29 39 39 45 41 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 532;
}
);
note = currency;
unicode = 164;
},
{
glyphname = dollar;
kernLeft = S;
kernRight = S;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(199,-87,l),
(268,-87,l),
(281,-12,l),
(350,-10,o),
(464,43,o),
(532,143,o),
(532,211,qs),
(532,329,o),
(387,384,qs),
(353,396,l),
(395,636,l),
(435,625,o),
(477,572,o),
(477,537,qs),
(477,524,o),
(476,518,q),
(563,518,l),
(566,535,o),
(566,549,qs),
(566,612,o),
(480,699,o),
(408,709,q),
(423,791,l),
(354,791,l),
(340,711,l),
(277,707,o),
(176,655,o),
(118,563,o),
(118,502,qs),
(118,448,o),
(184,366,o),
(249,342,qs),
(273,333,l),
(226,65,l),
(180,77,o),
(128,140,o),
(128,183,qs),
(128,197,o),
(131,210,q),
(43,210,l),
(39,193,o),
(39,170,qs),
(39,99,o),
(132,5,o),
(213,-8,q)
);
},
{
closed = 1;
nodes = (
(338,311,l),
(389,291,o),
(442,242,o),
(442,201,qs),
(442,139,o),
(364,63,o),
(293,59,q)
);
},
{
closed = 1;
nodes = (
(288,420,l),
(248,437,o),
(207,481,o),
(207,515,qs),
(207,564,o),
(272,631,o),
(327,639,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
58 33 2 3 1 57 50 34 11 4 0 3 10 1 6 0 44 1 4 6 4 76 22 1 1 1 75 0 2 1 2 133 0 3 1 0 1 3 0 128 0 0 6 1 0 6 126 0 5 4 5 134 0 1 1 39 77 7 1 6 6 4 98 0 4 4 40 4 78 45 45 45 51 45 51 17 28 22 17 29 20 8 8 28
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = Euro;
kernRight = Cacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,-12,o),
(676,100,o),
(716,203,q),
(621,203,l),
(594,136,o),
(481,62,o),
(399,62,qs),
(312,62,o),
(207,155,o),
(197,239,q),
(446,239,l),
(457,301,l),
(196,301,l),
(199,349,o),
(211,392,q),
(474,392,l),
(485,455,l),
(233,455,l),
(272,539,o),
(413,638,o),
(500,638,qs),
(582,638,o),
(670,562,o),
(672,494,q),
(767,494,l),
(764,597,o),
(631,712,o),
(512,712,qs),
(429,712,o),
(356,680,qs),
(284,648,o),
(174,532,o),
(143,455,q),
(53,455,l),
(42,392,l),
(123,392,l),
(112,346,o),
(109,301,q),
(25,301,l),
(14,239,l),
(109,239,l),
(118,123,o),
(265,-12,o),
(388,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
0 5 6 3 6 5 3 128 0 12 0 11 0 12 11 128 7 1 3 8 1 2 1 3 2 103 9 1 1 10 1 0 12 1 0 103 0 6 6 4 97 0 4 4 39 77 0 11 11 13 97 14 1 13 13 40 13 78 0 0 0 43 0 42 40 39 37 35 33 32 31 30 17 18 34 18 36 17 18 17 18 15 8 31
CALL[ ]	/* CallFunction */";
};
width = 771;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = uni20BD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(161,0,l),
(183,126,l),
(406,126,l),
(418,194,l),
(195,194,l),
(212,294,l),
(349,294,ls),
(417,294,o),
(545,343,o),
(628,447,o),
(628,524,qs),
(628,607,o),
(525,700,o),
(421,700,qs),
(201,700,l),
(141,363,l),
(54,363,l),
(43,294,l),
(129,294,l),
(111,194,l),
(25,194,l),
(13,126,l),
(99,126,l),
(77,0,l)
);
},
{
closed = 1;
nodes = (
(224,363,l),
(272,634,l),
(407,634,ls),
(541,634,o),
(541,520,qs),
(541,447,o),
(446,363,o),
(360,363,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
11 10 2 3 5 1 2 1 3 2 103 6 1 1 7 1 0 8 1 0 103 0 9 9 4 95 0 4 4 33 77 0 8 8 34 8 78 24 24 24 31 24 30 29 27 17 17 17 37 33 17 17 17 16 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 618;
}
);
note = uni20BD;
unicode = 8381;
},
{
glyphname = uni20A8;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (792,0);
},
{
name = top;
pos = (880,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (576,0);
ref = s;
}
);
width = 1080;
}
);
note = uni20A8;
unicode = 8360;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(41,0,l),
(490,0,l),
(502,69,l),
(137,69,l),
(245,164,o),
(245,280,qs),
(245,299,o),
(244,310,q),
(417,310,l),
(427,369,l),
(234,369,l),
(222,422,o),
(222,462,qs),
(222,541,o),
(311,642,o),
(387,642,qs),
(443,642,o),
(504,581,o),
(504,531,qs),
(504,515,o),
(503,507,q),
(580,507,l),
(582,529,o),
(582,539,qs),
(582,615,o),
(485,712,o),
(393,712,qs),
(329,712,o),
(215,656,o),
(144,541,o),
(144,456,qs),
(144,425,o),
(154,369,q),
(60,369,l),
(49,310,l),
(164,310,l),
(166,288,o),
(166,277,qs),
(166,210,o),
(108,104,o),
(50,49,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 3 4 1 4 3 1 128 5 1 1 6 1 0 7 1 0 103 0 4 4 2 97 0 2 2 39 77 0 7 7 8 95 0 8 8 34 8 78 17 20 17 20 36 20 37 17 20 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = yen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(297,0,l),
(327,167,l),
(527,167,l),
(538,228,l),
(338,228,l),
(345,266,l),
(381,318,l),
(554,318,l),
(564,379,l),
(424,379,l),
(649,700,l),
(554,700,l),
(316,344,l),
(204,700,l),
(109,700,l),
(221,379,l),
(80,379,l),
(70,318,l),
(243,318,l),
(261,266,l),
(254,228,l),
(54,228,l),
(43,167,l),
(243,167,l),
(213,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
11 1 2 3 4 1 1 2 2 76 6 1 3 7 1 2 1 3 2 104 8 1 1 9 1 0 10 1 0 103 5 1 4 4 33 77 0 10 10 34 10 78 24 23 22 21 18 17 17 18 17 17 18 17 16 11 8 31
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = yen;
unicode = 165;
},
{
glyphname = cent.001;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(193,-101,l),
(274,-101,l),
(290,-9,l),
(367,1,o),
(483,93,o),
(508,162,q),
(422,162,l),
(404,113,o),
(316,59,o),
(263,59,qs),
(206,59,o),
(130,139,o),
(130,208,qs),
(130,274,o),
(157,326,qs),
(184,377,o),
(275,436,o),
(329,436,qs),
(383,436,o),
(452,383,o),
(452,334,q),
(538,334,l),
(537,405,o),
(454,495,o),
(381,505,q),
(398,600,l),
(316,600,l),
(300,505,l),
(228,495,o),
(169,454,qs),
(110,411,o),
(43,279,o),
(43,199,qs),
(43,116,o),
(133,4,o),
(209,-9,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
10 1 2 0 35 1 5 3 2 76 0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 3 5 5 3 89 0 3 3 5 95 0 5 3 5 79 20 18 38 34 20 24 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = cent.001;
},
{
glyphname = uni2215;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,-95,l),
(453,764,l),
(370,764,l),
(-32,-95,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 391;
}
);
note = uni2215;
unicode = 8725;
},
{
glyphname = plus;
kernLeft = plus;
kernRight = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(307,72,l),
(339,255,l),
(530,255,l),
(542,326,l),
(352,326,l),
(384,508,l),
(308,508,l),
(276,326,l),
(85,326,l),
(73,255,l),
(264,255,l),
(231,72,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 5 0 5 134 3 1 1 4 1 0 5 1 0 104 0 2 2 36 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 1 2 133 0 5 0 5 134 3 1 1 0 0 1 87 3 1 1 1 0 96 4 1 0 1 0 80
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = plus;
unicode = 43;
},
{
glyphname = minus;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,255,l),
(512,326,l),
(116,326,l),
(104,255,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = multiply;
kernLeft = multiply;
kernRight = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(299,241,l),
(405,112,l),
(463,160,l),
(356,289,l),
(516,426,l),
(475,476,l),
(316,339,l),
(209,468,l),
(151,420,l),
(257,291,l),
(99,156,l),
(141,106,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
11 5 1 50
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(501,255,l),
(513,326,l),
(115,326,l),
(103,255,l)
);
},
{
closed = 1;
nodes = (
(308,90,o),
(341,124,o),
(341,148,qs),
(341,172,o),
(309,205,o),
(284,205,qs),
(259,205,o),
(226,172,o),
(226,148,qs),
(226,124,o),
(259,90,o),
(284,90,qs)
);
},
{
closed = 1;
nodes = (
(358,377,o),
(391,410,o),
(391,434,qs),
(391,458,o),
(358,491,o),
(334,491,qs),
(309,491,o),
(276,458,o),
(276,434,qs),
(276,410,o),
(309,377,o),
(334,377,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
0 0 0 1 2 0 1 103 0 2 6 1 3 2 3 101 7 1 5 5 4 97 0 4 4 36 5 78 16 16 4 4 16 27 16 26 22 20 4 15 4 14 37 17 16 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = divide;
unicode = 247;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(483,151,l),
(496,223,l),
(97,223,l),
(85,151,l)
);
},
{
closed = 1;
nodes = (
(520,359,l),
(532,431,l),
(134,431,l),
(122,359,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 2 0 3 0 2 3 103 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = equal;
unicode = 61;
},
{
glyphname = notequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(200,85,l),
(247,151,l),
(483,151,l),
(496,223,l),
(298,223,l),
(394,359,l),
(520,359,l),
(532,431,l),
(445,431,l),
(492,498,l),
(417,498,l),
(369,431,l),
(134,431,l),
(122,359,l),
(318,359,l),
(222,223,l),
(97,223,l),
(85,151,l),
(172,151,l),
(125,85,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 3 3 4 112 0 9 0 0 9 113 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 18 17 17 17 17 17 17 17 17 16 10 6 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = greater;
kernRight = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(211,137,l),
(496,367,l),
(293,598,l),
(187,598,l),
(392,367,l),
(106,137,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = greater;
unicode = 62;
},
{
glyphname = less;
kernLeft = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(456,137,l),
(251,367,l),
(537,598,l),
(432,598,l),
(146,367,l),
(350,137,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = less;
unicode = 60;
},
{
glyphname = greaterequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,213,l),
(506,405,l),
(294,598,l),
(185,598,l),
(394,406,l),
(118,213,l)
);
},
{
closed = 1;
nodes = (
(446,89,l),
(458,153,l),
(108,153,l),
(97,89,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lessequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(472,213,l),
(261,405,l),
(539,598,l),
(430,598,l),
(150,405,l),
(362,213,l)
);
},
{
closed = 1;
nodes = (
(449,89,l),
(461,153,l),
(111,153,l),
(101,89,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = plusminus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(316,125,l),
(341,266,l),
(541,266,l),
(554,337,l),
(354,337,l),
(379,478,l),
(303,478,l),
(278,337,l),
(79,337,l),
(66,266,l),
(266,266,l),
(241,125,l)
);
},
{
closed = 1;
nodes = (
(494,0,l),
(507,73,l),
(33,73,l),
(19,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 5 0 6 0 5 114 3 1 1 4 1 0 5 1 0 104 0 2 2 36 77 0 6 6 7 95 0 7 7 34 7 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 5 0 6 0 5 6 128 3 1 1 4 1 0 5 1 0 104 0 2 2 36 77 0 6 6 7 95 0 7 7 34 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 1 2 133 0 5 0 6 0 5 6 128 3 1 1 4 1 0 5 1 0 104 0 6 6 7 95 0 7 7 34 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 17 17 17 17 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = approxequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(447,319,o),
(531,391,o),
(555,461,q),
(492,461,l),
(482,431,o),
(439,395,o),
(413,395,qs),
(394,395,o),
(362,411,o),
(342,426,qs),
(319,443,o),
(281,461,o),
(256,461,qs),
(146,461,o),
(95,320,q),
(158,320,l),
(169,350,o),
(211,385,o),
(237,385,qs),
(257,385,o),
(287,370,o),
(308,354,qs),
(332,337,o),
(368,319,o),
(394,319,qs)
);
},
{
closed = 1;
nodes = (
(411,112,o),
(495,184,o),
(519,254,q),
(456,254,l),
(446,224,o),
(403,188,o),
(377,188,qs),
(358,188,o),
(326,204,o),
(306,219,qs),
(283,236,o),
(245,254,o),
(220,254,qs),
(110,254,o),
(59,113,q),
(122,113,l),
(133,143,o),
(175,178,o),
(201,178,qs),
(221,178,o),
(251,163,o),
(272,147,qs),
(296,130,o),
(332,112,o),
(358,112,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
4 1 2 0 0 1 2 0 105 0 3 12 5 2 1 8 3 1 105 0 9 6 7 9 89 10 1 8 0 6 7 8 6 105 0 9 9 7 97 13 11 2 7 9 7 81 25 25 0 0 25 49 25 48 46 45 43 41 37 35 34 33 31 29 0 24 0 23 18 36 33 18 36 14 6 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(435,249,o),
(519,321,o),
(543,391,q),
(480,391,l),
(470,361,o),
(427,325,o),
(401,325,qs),
(382,325,o),
(350,341,o),
(330,356,qs),
(307,373,o),
(269,391,o),
(244,391,qs),
(134,391,o),
(83,250,q),
(146,250,l),
(157,280,o),
(199,315,o),
(225,315,qs),
(245,315,o),
(275,300,o),
(296,284,qs),
(320,267,o),
(356,249,o),
(382,249,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 24 0 23 18 36 33 18 36 7 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = logicalnot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(540,223,l),
(577,432,l),
(78,432,l),
(66,365,l),
(482,365,l),
(457,223,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 0 0 2 113 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 2 134 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
17 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = logicalnot;
unicode = 172;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(103,178,l),
(366,597,l),
(478,178,l),
(564,178,l),
(422,700,l),
(344,700,l),
(17,178,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 0 1 76 0 0 1 0 133 2 1 1 1 118 18 17 16 3 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 620;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = infinity;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(222,141,o),
(313,196,o),
(347,239,q),
(377,193,o),
(445,141,o),
(499,141,qs),
(548,141,o),
(589,164,qs),
(630,187,o),
(678,264,o),
(678,311,qs),
(678,368,o),
(607,434,o),
(549,434,qs),
(495,434,o),
(402,376,o),
(369,330,q),
(339,380,o),
(270,434,o),
(217,434,qs),
(168,434,o),
(130,412,qs),
(90,390,o),
(43,313,o),
(43,265,qs),
(43,207,o),
(113,141,o),
(169,141,qs)
);
},
{
closed = 1;
nodes = (
(156,202,o),
(114,240,o),
(114,275,qs),
(114,315,o),
(170,374,o),
(211,374,qs),
(247,374,o),
(295,328,o),
(321,284,q),
(292,246,o),
(225,202,o),
(190,202,qs)
);
},
{
closed = 1;
nodes = (
(470,201,o),
(422,243,o),
(396,285,q),
(424,325,o),
(498,373,o),
(534,373,qs),
(569,373,o),
(607,333,o),
(607,299,qs),
(607,257,o),
(549,201,o),
(507,201,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
48 30 24 10 4 5 4 1 76 1 1 0 6 1 4 5 0 4 105 10 7 9 3 5 2 2 5 89 10 7 9 3 5 5 2 97 8 3 2 2 5 2 81 40 40 28 28 0 0 40 51 40 50 46 44 28 39 28 38 34 32 0 27 0 26 38 36 38 11 6 25
CALL[ ]	/* CallFunction */";
};
width = 707;
}
);
note = infinity;
unicode = 8734;
},
{
glyphname = integral;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-98,-191,ls),
(-31,-191,o),
(49,-126,o),
(70,-54,qs),
(310,782,ls),
(319,816,o),
(353,844,o),
(379,844,qs),
(397,844,l),
(417,915,l),
(394,915,ls),
(329,915,o),
(246,852,o),
(226,782,qs),
(-14,-54,ls),
(-25,-93,o),
(-53,-121,o),
(-81,-121,qs),
(-102,-121,l),
(-121,-191,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 1 0 2 0 1 2 105 0 0 3 3 0 89 0 0 0 3 97 0 3 0 3 81 37 33 37 32 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 258;
}
);
note = integral;
unicode = 8747;
},
{
glyphname = uni2126;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(281,0,l),
(293,69,l),
(221,89,o),
(133,216,o),
(133,307,qs),
(133,398,o),
(217,548,o),
(365,636,o),
(456,636,qs),
(513,636,o),
(614,589,o),
(679,489,o),
(679,412,qs),
(679,345,o),
(623,202,o),
(506,89,o),
(420,69,q),
(407,0,l),
(682,0,l),
(695,66,l),
(551,66,l),
(611,96,o),
(708,202,o),
(765,345,o),
(765,425,qs),
(765,500,o),
(699,632,o),
(565,712,o),
(469,712,qs),
(357,712,o),
(164,606,o),
(48,420,o),
(48,306,qs),
(48,244,o),
(104,105,o),
(162,66,q),
(17,66,l),
(5,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
35 1 0 4 1 76 0 1 0 4 0 1 4 105 2 1 0 3 3 0 87 2 1 0 0 3 95 5 1 3 0 3 79 23 40 17 23 38 16 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 789;
}
);
note = uni2126;
unicode = 8486;
},
{
glyphname = uni2206;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(621,0,l),
(633,65,l),
(461,700,l),
(391,700,l),
(-2,65,l),
(-14,0,l)
);
},
{
closed = 1;
nodes = (
(408,604,l),
(548,65,l),
(83,65,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
7 1 2 0 1 76 0 0 2 0 133 3 1 2 1 1 2 87 3 1 2 2 1 95 0 1 2 1 79 6 6 6 8 6 8 18 17 4 6 24
CALL[ ]	/* CallFunction */";
};
width = 695;
}
);
note = uni2206;
unicode = 8710;
},
{
glyphname = product;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(269,634,l),
(594,634,l),
(482,0,l),
(566,0,l),
(677,634,l),
(757,634,l),
(769,700,l),
(118,700,l),
(105,634,l),
(185,634,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
5 1 3 0 3 134 0 1 0 0 1 87 0 1 1 0 95 4 2 2 0 1 0 79 17 17 17 17 17 16 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = product;
unicode = 8719;
},
{
glyphname = summation;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(421,-49,l),
(433,16,l),
(115,16,l),
(430,295,l),
(441,360,l),
(222,635,l),
(542,635,l),
(554,700,l),
(164,700,l),
(147,604,l),
(360,326,l),
(49,47,l),
(32,-49,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
7 1 2 2 1 1 76 0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 19 17 19 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 564;
}
);
note = summation;
unicode = 8721;
},
{
glyphname = radical;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(213,-44,l),
(861,865,l),
(801,865,l),
(227,59,l),
(150,258,l),
(0,179,l),
(19,135,l),
(88,171,l),
(173,-44,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
4 3 2 1 4 1 0 1 76 0 0 1 0 133 0 1 1 118 17 21 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 705;
}
);
note = radical;
unicode = 8730;
},
{
glyphname = uni00B5;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(70,-220,l),
(113,23,l),
(151,-12,o),
(216,-12,qs),
(273,-12,o),
(373,42,o),
(405,89,q),
(395,0,l),
(471,0,l),
(558,496,l),
(474,496,l),
(427,230,ls),
(410,150,o),
(312,60,o),
(248,60,qs),
(143,60,o),
(143,167,qs),
(143,187,o),
(148,215,qs),
(197,496,l),
(113,496,l),
(-14,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
14 1 1 0 19 1 3 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 36 77 0 1 1 3 98 4 1 3 3 34 77 0 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
2 1 0 0 36 77 0 3 3 34 77 0 1 1 4 98 0 4 4 40 77 0 5 5 38 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 35 17 19 36 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = uni00B5;
unicode = 181;
},
{
glyphname = partialdiff;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(308,-10,o),
(479,178,o),
(561,431,o),
(561,524,qs),
(561,630,o),
(466,740,o),
(377,740,qs),
(331,740,o),
(280,726,q),
(271,676,l),
(321,689,o),
(353,689,qs),
(419,689,o),
(480,609,o),
(480,529,qs),
(480,492,o),
(472,444,q),
(468,505,o),
(406,557,o),
(354,557,qs),
(264,557,o),
(112,436,o),
(22,249,o),
(22,157,qs),
(22,84,o),
(104,-10,o),
(182,-10,qs)
);
},
{
closed = 1;
nodes = (
(160,62,o),
(108,117,o),
(108,172,qs),
(108,240,o),
(171,388,o),
(281,486,o),
(346,486,qs),
(392,486,o),
(443,432,o),
(443,378,qs),
(443,311,o),
(380,162,o),
(271,62,o),
(204,62,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
16 1 0 1 9 1 5 4 2 76 0 2 0 1 0 2 1 105 0 0 0 4 5 0 4 105 7 1 5 3 3 5 89 7 1 5 5 3 97 6 1 3 5 3 81 27 27 0 0 27 40 27 39 34 32 0 26 0 25 35 38 37 8 6 25
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = partialdiff;
unicode = 8706;
},
{
glyphname = percent;
kernLeft = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,0,l),
(708,700,l),
(625,700,l),
(95,0,l)
);
},
{
closed = 1;
nodes = (
(279,375,o),
(322,402,qs),
(365,430,o),
(415,519,o),
(415,572,qs),
(415,636,o),
(339,711,o),
(279,711,qs),
(227,711,o),
(183,684,qs),
(139,657,o),
(89,567,o),
(89,514,qs),
(89,451,o),
(165,375,o),
(226,375,qs)
);
},
{
closed = 1;
nodes = (
(201,438,o),
(159,481,o),
(159,521,qs),
(159,555,o),
(189,614,o),
(240,649,o),
(270,649,qs),
(304,649,o),
(345,607,o),
(345,566,qs),
(345,532,o),
(315,473,o),
(264,438,o),
(234,438,qs)
);
},
{
closed = 1;
nodes = (
(584,-12,o),
(627,15,qs),
(670,42,o),
(720,133,o),
(720,186,qs),
(720,250,o),
(645,324,o),
(584,324,qs),
(532,324,o),
(488,297,qs),
(444,270,o),
(394,180,o),
(394,127,qs),
(394,63,o),
(470,-12,o),
(531,-12,qs)
);
},
{
closed = 1;
nodes = (
(507,51,o),
(465,94,o),
(465,134,qs),
(465,168,o),
(495,227,o),
(546,262,o),
(576,262,qs),
(608,262,o),
(650,219,o),
(650,179,qs),
(650,145,o),
(620,86,o),
(570,51,o),
(540,51,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 105 0 4 4 0 97 2 1 0 0 33 77 13 1 9 9 1 97 12 7 2 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 105 0 4 4 0 97 2 1 0 0 33 77 0 1 1 34 77 13 1 9 9 7 97 12 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 105 0 0 0 33 77 0 4 4 2 97 0 2 2 39 77 0 1 1 34 77 13 1 9 9 7 97 12 1 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 36 values pushed */
50 50 34 34 20 20 4 4 50 63 50 62 57 55 34 49 34 48 42 40 20 33 20 32 27 25 4 19 4 18 39 17 16 14 8 25
CALL[ ]	/* CallFunction */";
};
width = 774;
}
);
note = percent;
unicode = 37;
},
{
glyphname = perthousand;
kernLeft = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,0,l),
(710,700,l),
(626,700,l),
(96,0,l)
);
},
{
closed = 1;
nodes = (
(280,375,o),
(323,402,qs),
(367,429,o),
(417,519,o),
(417,572,qs),
(417,636,o),
(341,711,o),
(280,711,qs),
(228,711,o),
(184,684,qs),
(140,657,o),
(90,567,o),
(90,514,qs),
(90,451,o),
(167,375,o),
(228,375,qs)
);
},
{
closed = 1;
nodes = (
(203,438,o),
(161,481,o),
(161,521,qs),
(161,555,o),
(191,614,o),
(242,649,o),
(272,649,qs),
(304,649,o),
(346,606,o),
(346,566,qs),
(346,532,o),
(316,473,o),
(266,438,o),
(236,438,qs)
);
},
{
closed = 1;
nodes = (
(586,-12,o),
(629,15,qs),
(672,43,o),
(722,133,o),
(722,186,qs),
(722,250,o),
(647,324,o),
(586,324,qs),
(534,324,o),
(490,297,qs),
(446,270,o),
(396,180,o),
(396,127,qs),
(396,63,o),
(472,-12,o),
(533,-12,qs)
);
},
{
closed = 1;
nodes = (
(508,51,o),
(467,93,o),
(467,134,qs),
(467,186,o),
(531,262,o),
(578,262,qs),
(610,262,o),
(652,219,o),
(652,179,qs),
(652,145,o),
(622,86,o),
(572,51,o),
(542,51,qs)
);
},
{
closed = 1;
nodes = (
(945,-12,o),
(988,15,qs),
(1031,43,o),
(1081,133,o),
(1081,186,qs),
(1081,250,o),
(1006,324,o),
(945,324,qs),
(893,324,o),
(849,297,qs),
(805,270,o),
(755,180,o),
(755,127,qs),
(755,63,o),
(831,-12,o),
(892,-12,qs)
);
},
{
closed = 1;
nodes = (
(868,51,o),
(826,94,o),
(826,134,qs),
(826,186,o),
(890,262,o),
(937,262,qs),
(969,262,o),
(1011,219,o),
(1011,179,qs),
(1011,127,o),
(947,51,o),
(900,51,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
15 1 5 14 1 3 6 5 3 105 10 1 6 12 1 8 9 6 8 105 0 4 4 0 97 2 1 0 0 33 77 19 13 17 3 9 9 1 97 18 11 16 7 4 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
15 1 5 14 1 3 6 5 3 105 10 1 6 12 1 8 9 6 8 105 0 4 4 0 97 2 1 0 0 33 77 0 1 1 34 77 19 13 17 3 9 9 7 97 18 11 16 3 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
15 1 5 14 1 3 6 5 3 105 10 1 6 12 1 8 9 6 8 105 0 0 0 33 77 0 4 4 2 97 0 2 2 39 77 0 1 1 34 77 19 13 17 3 9 9 7 97 18 11 16 3 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 52 values pushed */
79 79 63 63 50 50 34 34 20 20 4 4 79 90 79 89 85 83 63 78 63 77 71 69 50 62 50 61 57 55 34 49 34 48 42 40 20 33 20 32 27 25 4 19 4 18 39 17 16 20 8 25
CALL[ ]	/* CallFunction */";
};
width = 1135;
}
);
note = perthousand;
unicode = 8240;
},
{
glyphname = plus.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(308,125,l),
(340,308,l),
(531,308,l),
(543,379,l),
(353,379,l),
(385,561,l),
(309,561,l),
(277,379,l),
(86,379,l),
(74,308,l),
(265,308,l),
(232,125,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 1 2 133 0 5 0 5 134 3 1 1 0 0 1 87 3 1 1 1 0 96 4 1 0 1 0 80 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = plus.case;
},
{
glyphname = arrowup;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(336,712,l),
(66,483,l),
(111,428,l),
(225,527,l),
(272,573,l),
(171,-1,l),
(249,-1,l),
(350,573,l),
(381,527,l),
(461,428,l),
(524,483,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
10 9 8 7 5 2 6 0 74 0 0 0 34 0 78 19 1 8 23
CALL[ ]	/* CallFunction */";
};
width = 508;
}
);
note = arrowup;
unicode = 8593;
},
{
glyphname = arrowright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(795,350,l),
(606,579,l),
(542,525,l),
(624,428,l),
(663,389,l),
(89,389,l),
(75,311,l),
(649,311,l),
(596,272,l),
(480,175,l),
(526,121,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
9 1 0 1 1 76 8 7 2 1 74 10 1 0 73 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 18 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 821;
}
);
note = arrowright;
unicode = 8594;
},
{
glyphname = arrowdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(208,-12,l),
(478,217,l),
(433,272,l),
(319,173,l),
(272,127,l),
(373,700,l),
(295,700,l),
(194,127,l),
(163,173,l),
(83,272,l),
(20,217,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
10 9 8 7 5 2 6 0 73 0 0 0 33 0 78 19 1 8 23
CALL[ ]	/* CallFunction */";
};
width = 508;
}
);
note = arrowdown;
unicode = 8595;
},
{
glyphname = arrowleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(315,175,l),
(233,272,l),
(194,311,l),
(768,311,l),
(782,389,l),
(208,389,l),
(261,428,l),
(377,525,l),
(331,579,l),
(62,350,l),
(251,121,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
2 1 2 0 74 10 9 2 1 73 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 20 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 821;
}
);
note = arrowleft;
unicode = 8592;
},
{
glyphname = lozenge;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(528,350,l),
(332,589,l),
(49,350,l),
(245,110,l)
);
},
{
closed = 1;
nodes = (
(135,349,l),
(317,503,l),
(442,350,l),
(260,195,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 5 3 1 2 50
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = lozenge;
unicode = 9674;
},
{
glyphname = uni0308;
layers = (
{
anchors = (
{
name = _top;
pos = (192,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(333,606,o),
(367,639,o),
(367,664,qs),
(367,688,o),
(333,720,o),
(309,720,qs),
(284,720,o),
(251,688,o),
(251,664,qs),
(251,639,o),
(284,606,o),
(309,606,qs)
);
},
{
closed = 1;
nodes = (
(156,606,o),
(190,639,o),
(190,664,qs),
(190,688,o),
(156,720,o),
(132,720,qs),
(107,720,o),
(74,688,o),
(74,664,qs),
(74,639,o),
(107,606,o),
(132,606,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0308;
unicode = 776;
},
{
glyphname = uni0307;
layers = (
{
anchors = (
{
name = _top;
pos = (103,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(156,606,o),
(190,639,o),
(190,664,qs),
(190,688,o),
(156,720,o),
(132,720,qs),
(107,720,o),
(74,688,o),
(74,664,qs),
(74,639,o),
(107,606,o),
(132,606,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0307;
unicode = 775;
},
{
glyphname = gravecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (148,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(275,620,l),
(88,747,l),
(75,674,l),
(264,557,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = gravecomb;
unicode = 768;
},
{
glyphname = acutecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (149,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(286,668,l),
(299,747,l),
(66,620,l),
(55,551,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = acutecomb;
unicode = 769;
},
{
glyphname = uni030B;
layers = (
{
anchors = (
{
name = _top;
pos = (160,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(255,549,l),
(370,698,l),
(297,698,l),
(199,549,l)
);
},
{
closed = 1;
nodes = (
(110,549,l),
(218,698,l),
(145,698,l),
(53,549,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030B;
unicode = 779;
},
{
glyphname = uni030C.alt;
layers = (
{
anchors = (
{
name = _topright;
pos = (132,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(113,546,l),
(223,700,l),
(129,700,l),
(53,546,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 33 0 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.alt;
},
{
glyphname = uni0302;
layers = (
{
anchors = (
{
name = _top;
pos = (181,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,664,l),
(334,580,l),
(346,652,l),
(223,733,l),
(72,652,l),
(60,580,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0302;
unicode = 770;
},
{
glyphname = uni030C;
layers = (
{
anchors = (
{
name = _top;
pos = (181,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(348,668,l),
(360,733,l),
(208,649,l),
(86,733,l),
(74,668,l),
(197,586,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C;
unicode = 780;
},
{
glyphname = uni0306;
layers = (
{
anchors = (
{
name = _top;
pos = (185,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(266,588,o),
(351,661,o),
(364,718,qs),
(367,732,l),
(315,732,l),
(301,654,o),
(212,654,qs),
(134,654,o),
(134,712,q),
(135,722,o),
(136,732,q),
(86,732,l),
(81,712,o),
(81,691,qs),
(81,644,o),
(142,588,o),
(200,588,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
7 1 1 0 1 76 2 1 0 1 0 133 0 1 3 3 1 89 0 1 1 3 97 4 1 3 1 3 81 0 0 0 16 0 15 17 35 20 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0306;
unicode = 774;
},
{
glyphname = uni030A;
layers = (
{
anchors = (
{
name = _top;
pos = (151,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(225,557,o),
(285,613,o),
(285,660,qs),
(285,707,o),
(225,763,o),
(180,763,qs),
(136,763,o),
(75,707,o),
(75,660,qs),
(75,613,o),
(136,557,o),
(180,557,qs)
);
},
{
closed = 1;
nodes = (
(156,600,o),
(123,633,o),
(123,660,qs),
(123,687,o),
(156,719,o),
(180,719,qs),
(205,719,o),
(237,687,o),
(237,660,qs),
(237,633,o),
(204,600,o),
(180,600,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030A;
unicode = 778;
},
{
glyphname = tildecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (195,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(308,602,o),
(368,655,o),
(383,703,q),
(334,703,l),
(327,681,o),
(300,658,o),
(283,658,qs),
(268,658,o),
(249,669,o),
(234,680,qs),
(218,693,o),
(195,705,o),
(176,705,qs),
(137,705,o),
(78,654,o),
(63,604,q),
(112,604,l),
(127,649,o),
(162,649,qs),
(177,649,o),
(196,639,o),
(211,627,qs),
(225,615,o),
(250,602,o),
(269,602,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 24 0 23 18 36 34 17 36 7 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = tildecomb;
unicode = 771;
},
{
glyphname = uni0304;
layers = (
{
anchors = (
{
name = _top;
pos = (225,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(415,632,l),
(427,695,l),
(80,695,l),
(68,632,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0304;
unicode = 772;
},
{
glyphname = uni0312;
layers = (
{
anchors = (
{
name = _top;
pos = (95,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(192,783,l),
(131,783,o),
(72,699,o),
(72,637,qs),
(72,616,o),
(75,595,q),
(156,595,l),
(170,672,l),
(125,672,l),
(127,686,ls),
(131,714,o),
(161,743,o),
(185,743,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 37 values pushed */
0 2 4 1 3 0 2 3 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 0 0 0 12 0 12 20 17 19 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0312;
unicode = 786;
},
{
glyphname = uni0326;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = _bottom;
pos = (5,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-86,-238,l),
(-25,-238,o),
(34,-154,o),
(34,-92,qs),
(34,-71,o),
(31,-50,q),
(-50,-50,l),
(-64,-127,l),
(-19,-127,l),
(-21,-141,ls),
(-25,-169,o),
(-55,-198,o),
(-79,-198,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 38 values pushed */
0 1 0 0 3 1 0 103 4 1 3 2 2 3 89 4 1 3 3 2 97 0 2 3 2 81 0 0 0 12 0 12 20 17 19 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0326;
unicode = 806;
},
{
glyphname = uni0327;
layers = (
{
anchors = (
{
name = _bottom;
pos = (30,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(19,-259,ls),
(78,-259,o),
(158,-194,o),
(158,-140,qs),
(158,-102,o),
(96,-62,o),
(44,-63,q),
(58,17,l),
(2,17,l),
(-21,-113,l),
(28,-113,ls),
(89,-113,o),
(89,-149,qs),
(89,-177,o),
(49,-206,o),
(12,-206,qs),
(-80,-206,l),
(-89,-259,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 3 3 2 112 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 3 2 133 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 17 17 35 32 5 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0327;
unicode = 807;
},
{
glyphname = uni0328;
layers = (
{
anchors = (
{
name = _ogonek;
pos = (147,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(78,-203,o),
(117,-190,q),
(126,-134,l),
(90,-149,o),
(59,-149,qs),
(35,-149,o),
(6,-128,o),
(6,-109,qs),
(6,-63,o),
(84,-28,qs),
(147,0,l),
(134,43,l),
(77,20,ls),
(1,-11,o),
(-64,-83,o),
(-64,-127,qs),
(-64,-164,o),
(-6,-203,o),
(39,-203,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 33 values pushed */
15 7 6 3 0 74 0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 18 0 17 44 3 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0328;
unicode = 808;
},
{
glyphname = uni0308.case;
layers = (
{
anchors = (
{
name = _top;
pos = (228,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,775,o),
(397,808,o),
(397,833,qs),
(397,857,o),
(363,889,o),
(339,889,qs),
(314,889,o),
(281,857,o),
(281,833,qs),
(281,808,o),
(314,775,o),
(339,775,qs)
);
},
{
closed = 1;
nodes = (
(186,775,o),
(220,808,o),
(220,833,qs),
(220,857,o),
(186,889,o),
(162,889,qs),
(137,889,o),
(104,857,o),
(104,833,qs),
(104,808,o),
(137,775,o),
(162,775,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0308.case;
},
{
glyphname = uni0307.case;
layers = (
{
anchors = (
{
name = _top;
pos = (139,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,775,o),
(220,808,o),
(220,833,qs),
(220,857,o),
(186,889,o),
(162,889,qs),
(137,889,o),
(104,857,o),
(104,833,qs),
(104,808,o),
(137,775,o),
(162,775,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0307.case;
},
{
glyphname = gravecomb.case;
layers = (
{
anchors = (
{
name = _top;
pos = (185,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(308,804,l),
(121,931,l),
(108,858,l),
(297,741,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = gravecomb.case;
},
{
glyphname = acutecomb.case;
layers = (
{
anchors = (
{
name = _top;
pos = (185,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(318,858,l),
(331,931,l),
(98,804,l),
(87,741,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = acutecomb.case;
},
{
glyphname = uni030B.case;
layers = (
{
anchors = (
{
name = _top;
pos = (226,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(291,753,l),
(406,902,l),
(333,902,l),
(235,753,l)
);
},
{
closed = 1;
nodes = (
(146,753,l),
(254,902,l),
(181,902,l),
(89,753,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030B.case;
},
{
glyphname = uni030C.alt.case;
layers = (
{
anchors = (
{
name = _topright;
pos = (85,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(113,546,l),
(223,700,l),
(129,700,l),
(53,546,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 33 0 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.alt.case;
},
{
glyphname = uni0302.case;
layers = (
{
anchors = (
{
name = _top;
pos = (216,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(241,839,l),
(363,755,l),
(375,821,l),
(252,902,l),
(101,821,l),
(89,755,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0302.case;
},
{
glyphname = uni030C.case;
layers = (
{
anchors = (
{
name = _top;
pos = (218,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(378,836,l),
(390,901,l),
(238,817,l),
(116,901,l),
(104,836,l),
(227,754,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.case;
},
{
glyphname = uni0306.case;
layers = (
{
anchors = (
{
name = _top;
pos = (221,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(296,757,o),
(381,830,o),
(394,887,qs),
(397,901,l),
(345,901,l),
(331,823,o),
(242,823,qs),
(164,823,o),
(164,881,q),
(165,891,o),
(166,901,q),
(116,901,l),
(111,881,o),
(111,860,qs),
(111,813,o),
(172,757,o),
(230,757,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
7 1 1 0 1 76 2 1 0 1 0 133 0 1 3 3 1 89 0 1 1 3 97 4 1 3 1 3 81 0 0 0 16 0 15 17 35 20 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0306.case;
},
{
glyphname = uni030A.case;
layers = (
{
anchors = (
{
name = _top;
pos = (186,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(260,761,o),
(320,817,o),
(320,864,qs),
(320,911,o),
(260,967,o),
(215,967,qs),
(171,967,o),
(110,911,o),
(110,864,qs),
(110,817,o),
(171,761,o),
(215,761,qs)
);
},
{
closed = 1;
nodes = (
(191,804,o),
(158,837,o),
(158,864,qs),
(158,891,o),
(191,923,o),
(215,923,qs),
(240,923,o),
(272,891,o),
(272,864,qs),
(272,837,o),
(239,804,o),
(215,804,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030A.case;
},
{
glyphname = tildecomb.case;
layers = (
{
anchors = (
{
name = _top;
pos = (231,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,756,o),
(395,809,o),
(410,857,q),
(361,857,l),
(354,835,o),
(327,812,o),
(310,812,qs),
(295,812,o),
(276,823,o),
(261,834,qs),
(245,847,o),
(222,859,o),
(203,859,qs),
(164,859,o),
(105,808,o),
(90,758,q),
(139,758,l),
(154,803,o),
(189,803,qs),
(204,803,o),
(223,793,o),
(238,781,qs),
(252,769,o),
(277,756,o),
(296,756,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 24 0 23 18 36 34 17 36 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = tildecomb.case;
},
{
glyphname = uni0304.case;
layers = (
{
anchors = (
{
name = _top;
pos = (255,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,796,l),
(456,859,l),
(109,859,l),
(97,796,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0304.case;
},
{
glyphname = uni0327.case;
layers = (
{
anchors = (
{
name = _bottom;
pos = (26,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(19,-259,ls),
(78,-259,o),
(158,-194,o),
(158,-140,qs),
(158,-102,o),
(96,-62,o),
(44,-63,q),
(58,17,l),
(2,17,l),
(-21,-113,l),
(28,-113,ls),
(89,-113,o),
(89,-149,qs),
(89,-177,o),
(49,-206,o),
(12,-206,qs),
(-80,-206,l),
(-89,-259,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 3 3 2 112 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 3 2 133 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 17 17 35 32 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0327.case;
},
{
glyphname = uni0328.case;
layers = (
{
anchors = (
{
name = _ogonek;
pos = (147,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(78,-203,o),
(117,-190,q),
(126,-134,l),
(90,-149,o),
(59,-149,qs),
(35,-149,o),
(6,-128,o),
(6,-109,qs),
(6,-63,o),
(84,-28,qs),
(147,0,l),
(134,43,l),
(77,20,ls),
(1,-11,o),
(-64,-83,o),
(-64,-127,qs),
(-64,-164,o),
(-6,-203,o),
(39,-203,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 7 6 3 0 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 1 97 2 1 1 1 38 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 18 0 17 44 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0328.case;
},
{
glyphname = uni0308.narrow;
layers = (
{
anchors = (
{
name = _top;
pos = (192,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(333,606,o),
(367,639,o),
(367,664,qs),
(367,688,o),
(333,720,o),
(309,720,qs),
(284,720,o),
(251,688,o),
(251,664,qs),
(251,639,o),
(284,606,o),
(309,606,qs)
);
},
{
closed = 1;
nodes = (
(156,606,o),
(190,639,o),
(190,664,qs),
(190,688,o),
(156,720,o),
(132,720,qs),
(107,720,o),
(74,688,o),
(74,664,qs),
(74,639,o),
(107,606,o),
(132,606,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 1 0 97 2 1 0 0 41 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 1 0 97 2 1 0 0 39 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0308.narrow;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-147,0);
ref = uni0308;
}
);
width = 0;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-59,0);
ref = uni0307;
}
);
width = 0;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-105,0);
ref = gravecomb;
}
);
width = 0;
}
);
note = grave;
unicode = 96;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-105,0);
ref = acutecomb;
}
);
width = 0;
}
);
note = acute;
unicode = 180;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-145,0);
ref = uni030B;
}
);
width = 0;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-137,0);
ref = uni0302;
}
);
width = 0;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-137,0);
ref = uni030C;
}
);
width = 0;
}
);
note = caron;
unicode = 711;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-141,0);
ref = uni0306;
}
);
width = 0;
}
);
note = breve;
unicode = 728;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-107,0);
ref = uni030A;
}
);
width = 0;
}
);
note = ring;
unicode = 730;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-151,0);
ref = tildecomb;
}
);
width = 0;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-174,0);
ref = uni0304;
}
);
width = 0;
}
);
note = macron;
unicode = 175;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-114,0);
ref = uni0327;
}
);
width = 0;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-97,0);
ref = uni0328;
}
);
width = 0;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = uni02BA;
kernLeft = uni02BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(292,558,l),
(337,755,l),
(257,755,l),
(234,558,l)
);
},
{
closed = 1;
nodes = (
(162,558,l),
(207,755,l),
(127,755,l),
(104,558,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 286;
}
);
note = uni02BA;
unicode = 698;
},
{
glyphname = uni02B9;
kernLeft = uni02BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(162,558,l),
(207,755,l),
(127,755,l),
(104,558,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 156;
}
);
note = uni02B9;
unicode = 697;
},
{
glyphname = uniE000;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(294,0,l),
(294,214,l),
(499,0,l),
(645,0,l),
(401,260,l),
(630,511,l),
(486,511,l),
(294,309,l),
(294,700,l),
(180,700,l),
(180,0,l)
);
},
{
closed = 1;
nodes = (
(966,-12,o),
(1091,57,o),
(1162,179,o),
(1162,254,qs),
(1162,329,o),
(1091,452,o),
(966,523,o),
(888,523,qs),
(810,523,o),
(686,452,o),
(615,329,o),
(615,254,qs),
(615,179,o),
(686,57,o),
(810,-12,o),
(888,-12,qs)
);
},
{
closed = 1;
nodes = (
(839,95,o),
(768,137,o),
(729,210,o),
(729,254,qs),
(729,298,o),
(768,371,o),
(839,413,o),
(886,413,qs),
(933,413,o),
(1005,371,o),
(1045,298,o),
(1045,254,qs),
(1045,210,o),
(1005,137,o),
(933,95,o),
(886,95,qs)
);
},
{
closed = 1;
nodes = (
(812,566,o),
(853,607,o),
(853,637,qs),
(853,667,o),
(813,707,o),
(782,707,qs),
(752,707,o),
(711,665,o),
(711,636,qs),
(711,607,o),
(752,566,o),
(782,566,qs)
);
},
{
closed = 1;
nodes = (
(1023,566,o),
(1064,607,o),
(1064,637,qs),
(1064,667,o),
(1024,707,o),
(993,707,qs),
(963,707,o),
(922,665,o),
(922,636,qs),
(922,607,o),
(963,566,o),
(993,566,qs)
);
},
{
closed = 1;
nodes = (
(1342,0,l),
(1342,700,l),
(1232,700,l),
(1232,0,l)
);
},
{
closed = 1;
nodes = (
(1657,95,o),
(1585,140,o),
(1547,213,o),
(1547,254,qs),
(1547,297,o),
(1588,370,o),
(1660,413,o),
(1706,413,qs),
(1774,413,o),
(1862,323,o),
(1862,254,qs),
(1862,209,o),
(1822,136,o),
(1751,95,o),
(1706,95,qs)
);
},
{
closed = 1;
nodes = (
(1802,-12,o),
(1916,60,o),
(1978,182,o),
(1978,254,qs),
(1978,331,o),
(1912,454,o),
(1798,523,o),
(1727,523,qs),
(1670,523,o),
(1582,478,o),
(1547,431,q),
(1547,700,l),
(1437,700,l),
(1437,0,l),
(1547,0,l),
(1547,80,l),
(1582,33,o),
(1670,-12,o),
(1727,-12,qs)
);
},
{
closed = 1;
nodes = (
(2161,0,l),
(2161,511,l),
(2048,511,l),
(2048,0,l)
);
},
{
closed = 1;
nodes = (
(2134,566,o),
(2175,607,o),
(2175,637,qs),
(2175,667,o),
(2135,707,o),
(2104,707,qs),
(2074,707,o),
(2033,665,o),
(2033,636,qs),
(2033,607,o),
(2074,566,o),
(2104,566,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 171 values pushed */
93 1 6 1 8 5 2 3 7 6 88 1 2 7 3 76 17 12 2 0 8 9 8 0 9 128 20 1 1 4 6 4 1 6 128 21 16 13 3 4 2 7 5 7 2 5 128 22 10 2 8 30 23 27 11 26 5 9 4 8 9 105 18 1 4 14 1 6 7 4 6 105 28 15 25 3 7 2 5 7 89 28 15 25 3 7 7 5 97 29 19 24 3 5 7 5 81 109 109 86 86 71 71 55 55 43 43 27 27 11 11 109 120 109 119 115 113 108 107 106 105 86 104 86 103 97 95 92 91 90 89 71 85 71 84 78 76 70 69 68 67 55 66 55 65 61 59 43 54 43 53 49 47 27 42 27 41 35 33 11 26 11 25 39 18 18 18 16 31 6 27
CALL[ ]	/* CallFunction */";
};
width = 2305;
}
);
note = uniE000;
unicode = 57344;
},
{
glyphname = uniE001;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,225,l),
(239,173,o),
(312,118,o),
(359,118,qs),
(411,118,o),
(478,177,o),
(478,227,qs),
(478,278,o),
(410,339,o),
(355,339,qs),
(284,339,o),
(233,288,q),
(139,330,l),
(180,700,l),
(587,700,l),
(587,579,l),
(294,579,l),
(277,426,l),
(294,440,o),
(355,458,o),
(390,458,qs),
(462,458,o),
(567,400,o),
(623,296,o),
(623,229,qs),
(623,160,o),
(556,52,o),
(437,-8,o),
(361,-8,qs),
(272,-8,o),
(141,82,o),
(106,166,q)
);
},
{
closed = 1;
nodes = (
(942,-8,o),
(776,88,o),
(680,253,o),
(680,352,qs),
(680,449,o),
(770,614,o),
(934,711,o),
(1039,711,qs),
(1135,711,o),
(1296,620,o),
(1345,546,q),
(1235,468,l),
(1162,581,o),
(1039,581,qs),
(939,581,o),
(824,456,o),
(824,352,qs),
(824,283,o),
(882,177,o),
(981,120,o),
(1041,120,qs),
(1124,120,o),
(1226,203,o),
(1240,265,q),
(1027,265,l),
(1027,383,l),
(1379,383,l),
(1381,369,o),
(1381,328,qs),
(1381,238,o),
(1298,84,o),
(1143,-8,o),
(1041,-8,qs)
);
},
{
closed = 1;
nodes = (
(861,949,o),
(818,904,o),
(818,873,qs),
(818,843,o),
(861,798,o),
(894,798,qs),
(927,798,o),
(970,843,o),
(970,874,qs),
(970,904,o),
(927,949,o),
(894,949,qs)
);
},
{
closed = 1;
nodes = (
(1673,107,l),
(1720,157,o),
(1769,278,o),
(1769,342,qs),
(1769,405,o),
(1722,525,o),
(1676,575,q),
(1761,663,l),
(1824,597,o),
(1890,430,o),
(1890,342,qs),
(1890,254,o),
(1824,89,o),
(1761,23,q)
);
},
{
closed = 1;
nodes = (
(1845,-59,l),
(1925,23,o),
(2007,231,o),
(2007,342,qs),
(2007,453,o),
(1925,661,o),
(1845,742,q),
(1931,831,l),
(2029,731,o),
(2131,477,o),
(2131,342,qs),
(2131,208,o),
(2029,-47,o),
(1931,-148,q)
);
},
{
closed = 1;
nodes = (
(1094,949,o),
(1051,904,o),
(1051,873,qs),
(1051,843,o),
(1094,798,o),
(1127,798,qs),
(1160,798,o),
(1203,843,o),
(1203,874,qs),
(1203,904,o),
(1160,949,o),
(1127,949,qs)
);
},
{
closed = 1;
nodes = (
(1603,248,o),
(1658,303,o),
(1658,342,qs),
(1658,381,o),
(1603,436,o),
(1564,436,qs),
(1525,436,o),
(1470,381,o),
(1470,342,qs),
(1470,303,o),
(1525,248,o),
(1564,248,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
96 1 12 13 97 1 10 12 82 1 2 3 83 53 52 3 1 2 13 1 6 16 19 18 2 7 4 31 30 2 5 17 90 89 2 0 5 8 76 104 103 2 0 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
20 15 19 3 13 12 13 133 14 1 12 10 10 12 112 0 16 1 6 1 16 6 128 21 1 17 7 5 7 17 5 128 0 10 3 2 10 89 0 3 9 1 2 1 3 2 105 0 1 0 4 7 1 4 105 0 6 0 7 17 6 7 103 8 1 5 0 0 5 89 8 1 5 5 0 97 18 11 2 0 5 0 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 82 values pushed */
20 15 19 3 13 12 13 133 14 1 12 10 12 133 0 16 1 6 1 16 6 128 21 1 17 7 5 7 17 5 128 0 10 3 2 10 89 0 3 9 1 2 1 3 2 105 0 1 0 4 7 1 4 105 0 6 0 7 17 6 7 103 8 1 5 0 0 5 89 8 1 5 5 0 97 18 11 2 0 5 0 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 46 values pushed */
117 117 105 105 65 65 32 32 117 128 117 127 123 121 105 116 105 115 111 109 65 76 65 75 71 69 32 64 32 63 57 55 51 49 34 17 25 36 35 17 19 38 33 22 6 31
CALL[ ]	/* CallFunction */";
};
width = 2225;
}
);
note = uniE001;
unicode = 57345;
},
{
glyphname = uniE002;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,48,o),
(533,48,qs),
(540,48,o),
(545,53,qs),
(722,229,ls),
(781,288,o),
(781,367,qs),
(781,386,ls),
(781,393,o),
(784,399,o),
(790,401,qs),
(838,418,o),
(900,499,o),
(900,550,qs),
(900,594,o),
(858,667,o),
(786,710,o),
(741,710,qs),
(688,710,o),
(611,653,o),
(591,603,qs),
(587,592,o),
(575,584,o),
(566,584,qs),
(501,584,ls),
(490,584,o),
(478,592,o),
(474,603,qs),
(454,653,o),
(377,710,o),
(324,710,qs),
(279,710,o),
(207,667,o),
(165,594,o),
(165,550,qs),
(165,499,o),
(227,418,o),
(275,401,qs),
(281,399,o),
(284,393,o),
(284,386,qs),
(284,367,ls),
(284,294,o),
(343,229,q),
(520,53,l)
);
},
{
closed = 1;
nodes = (
(496,0,ls),
(502,0,o),
(509,7,o),
(509,12,qs),
(509,17,o),
(505,21,qs),
(302,222,ls),
(266,258,o),
(213,258,qs),
(179,258,o),
(119,227,o),
(81,168,o),
(81,130,qs),
(81,97,o),
(114,37,o),
(174,0,o),
(213,0,qs)
);
},
{
closed = 1;
nodes = (
(275,435,o),
(205,505,o),
(205,554,qs),
(205,603,o),
(275,672,o),
(324,672,qs),
(373,672,o),
(442,603,o),
(442,554,qs),
(442,505,o),
(373,435,o),
(324,435,qs)
);
},
{
closed = 1;
nodes = (
(364,456,o),
(421,514,o),
(421,554,qs),
(421,594,o),
(364,651,o),
(324,651,qs),
(284,651,o),
(226,594,o),
(226,554,qs),
(226,514,o),
(284,456,o),
(324,456,qs)
);
},
{
closed = 1;
nodes = (
(295,484,o),
(254,525,o),
(254,554,qs),
(254,583,o),
(295,623,o),
(324,623,qs),
(338,623,o),
(354,616,q),
(346,614,o),
(336,600,o),
(336,592,qs),
(336,581,o),
(351,566,o),
(362,566,qs),
(370,566,o),
(384,576,o),
(386,584,q),
(393,568,o),
(393,554,qs),
(393,525,o),
(353,484,o),
(324,484,qs)
);
},
{
closed = 1;
nodes = (
(852,0,ls),
(891,0,o),
(951,37,o),
(984,97,o),
(984,130,qs),
(984,168,o),
(946,227,o),
(886,258,o),
(852,258,qs),
(799,258,o),
(763,222,qs),
(560,21,ls),
(556,17,o),
(556,12,qs),
(556,7,o),
(563,0,o),
(569,0,qs)
);
},
{
closed = 1;
nodes = (
(693,435,o),
(623,505,o),
(623,554,qs),
(623,603,o),
(693,672,o),
(742,672,qs),
(791,672,o),
(860,603,o),
(860,554,qs),
(860,505,o),
(791,435,o),
(742,435,qs)
);
},
{
closed = 1;
nodes = (
(782,456,o),
(839,514,o),
(839,554,qs),
(839,594,o),
(782,651,o),
(742,651,qs),
(702,651,o),
(644,594,o),
(644,554,qs),
(644,514,o),
(702,456,o),
(742,456,qs)
);
},
{
closed = 1;
nodes = (
(713,484,o),
(672,525,o),
(672,554,qs),
(672,583,o),
(713,623,o),
(742,623,qs),
(756,623,o),
(772,616,q),
(764,614,o),
(754,600,o),
(754,592,qs),
(754,581,o),
(769,566,o),
(780,566,qs),
(788,566,o),
(802,576,o),
(804,584,q),
(811,568,o),
(811,554,qs),
(811,525,o),
(771,484,o),
(742,484,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
162 159 99 96 4 1 11 3 1 4 7 2 76 153 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
0 1 11 10 11 1 10 128 19 1 10 12 11 10 112 26 16 23 3 7 9 4 9 7 4 128 13 1 4 3 9 4 3 126 0 3 5 9 3 5 126 14 22 2 5 5 132 2 1 0 15 1 6 8 0 6 105 17 1 8 20 1 11 1 8 11 105 28 21 25 3 12 9 9 12 89 28 21 25 3 12 12 9 97 27 18 24 3 9 12 9 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 93 values pushed */
0 1 11 10 11 1 10 128 19 1 10 12 11 10 12 126 26 16 23 3 7 9 4 9 7 4 128 13 1 4 3 9 4 3 126 0 3 5 9 3 5 126 14 22 2 5 5 132 2 1 0 15 1 6 8 0 6 105 17 1 8 20 1 11 1 8 11 105 28 21 25 3 12 9 9 12 89 28 21 25 3 12 12 9 97 27 18 24 3 9 12 9 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 70 values pushed */
149 149 137 137 125 125 86 86 74 74 62 62 45 45 149 170 149 169 165 163 157 155 137 148 137 147 143 141 125 136 125 135 131 129 124 122 116 114 86 107 86 106 102 100 94 92 74 85 74 84 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 29 6 27
CALL[ ]	/* CallFunction */";
};
width = 1107;
}
);
note = uniE002;
unicode = 57346;
},
{
glyphname = uniE003;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,48,o),
(533,48,qs),
(540,48,o),
(545,53,qs),
(722,229,ls),
(781,288,o),
(781,367,qs),
(781,386,ls),
(781,393,o),
(784,399,o),
(790,401,qs),
(838,418,o),
(900,499,o),
(900,550,qs),
(900,594,o),
(858,667,o),
(786,710,o),
(741,710,qs),
(688,710,o),
(611,653,o),
(591,603,qs),
(587,592,o),
(575,584,o),
(566,584,qs),
(501,584,ls),
(490,584,o),
(478,592,o),
(474,603,qs),
(454,653,o),
(377,710,o),
(324,710,qs),
(279,710,o),
(207,667,o),
(165,594,o),
(165,550,qs),
(165,499,o),
(227,418,o),
(275,401,qs),
(281,399,o),
(284,393,o),
(284,386,qs),
(284,367,ls),
(284,294,o),
(343,229,q),
(520,53,l)
);
},
{
closed = 1;
nodes = (
(496,0,ls),
(502,0,o),
(509,7,o),
(509,12,qs),
(509,17,o),
(505,21,qs),
(302,222,ls),
(266,258,o),
(213,258,qs),
(179,258,o),
(119,227,o),
(81,168,o),
(81,130,qs),
(81,97,o),
(114,37,o),
(174,0,o),
(213,0,qs)
);
},
{
closed = 1;
nodes = (
(284,456,o),
(226,514,o),
(226,554,qs),
(226,594,o),
(284,651,o),
(324,651,qs),
(364,651,o),
(421,594,o),
(421,554,qs),
(421,514,o),
(364,456,o),
(324,456,qs)
);
},
{
closed = 1;
nodes = (
(353,484,o),
(393,525,o),
(393,554,qs),
(393,568,o),
(386,584,q),
(384,576,o),
(370,566,o),
(362,566,qs),
(351,566,o),
(336,581,o),
(336,592,qs),
(336,600,o),
(346,614,o),
(354,616,q),
(338,623,o),
(324,623,qs),
(295,623,o),
(254,583,o),
(254,554,qs),
(254,525,o),
(295,484,o),
(324,484,qs)
);
},
{
closed = 1;
nodes = (
(852,0,ls),
(891,0,o),
(951,37,o),
(984,97,o),
(984,130,qs),
(984,168,o),
(946,227,o),
(886,258,o),
(852,258,qs),
(799,258,o),
(763,222,qs),
(560,21,ls),
(556,17,o),
(556,12,qs),
(556,7,o),
(563,0,o),
(569,0,qs)
);
},
{
closed = 1;
nodes = (
(702,456,o),
(644,514,o),
(644,554,qs),
(644,594,o),
(702,651,o),
(742,651,qs),
(782,651,o),
(839,594,o),
(839,554,qs),
(839,514,o),
(782,456,o),
(742,456,qs)
);
},
{
closed = 1;
nodes = (
(771,484,o),
(811,525,o),
(811,554,qs),
(811,568,o),
(804,584,q),
(802,576,o),
(788,566,o),
(780,566,qs),
(769,566,o),
(754,581,o),
(754,592,qs),
(754,600,o),
(764,614,o),
(772,616,q),
(756,623,o),
(742,623,qs),
(713,623,o),
(672,583,o),
(672,554,qs),
(672,525,o),
(713,484,o),
(742,484,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 150 values pushed */
132 81 2 1 8 3 1 4 7 2 76 141 90 2 1 1 75 0 1 8 9 8 1 9 128 16 1 9 10 8 9 10 126 21 14 19 3 7 10 4 10 7 4 128 11 1 4 3 10 4 3 126 0 3 5 10 3 5 126 12 18 2 5 5 132 2 1 0 13 1 6 8 0 6 105 15 1 8 1 10 8 89 15 1 8 8 10 97 22 17 20 3 10 8 10 81 125 125 113 113 74 74 62 62 45 45 125 146 125 145 138 137 131 129 113 124 113 123 119 117 112 110 104 102 74 95 74 94 87 86 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 23 6 27
CALL[ ]	/* CallFunction */";
};
width = 1107;
}
);
note = uniE003;
unicode = 57347;
},
{
glyphname = uniE004;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,48,o),
(533,48,qs),
(540,48,o),
(545,53,qs),
(722,229,ls),
(781,288,o),
(781,367,qs),
(781,386,ls),
(781,393,o),
(784,399,o),
(790,401,qs),
(838,418,o),
(900,499,o),
(900,550,qs),
(900,594,o),
(858,667,o),
(786,710,o),
(741,710,qs),
(688,710,o),
(611,653,o),
(591,603,qs),
(587,592,o),
(575,584,o),
(566,584,qs),
(501,584,ls),
(490,584,o),
(478,592,o),
(474,603,qs),
(454,653,o),
(377,710,o),
(324,710,qs),
(279,710,o),
(207,667,o),
(165,594,o),
(165,550,qs),
(165,499,o),
(227,418,o),
(275,401,qs),
(281,399,o),
(284,393,o),
(284,386,qs),
(284,367,ls),
(284,294,o),
(343,229,q),
(520,53,l)
);
},
{
closed = 1;
nodes = (
(496,0,ls),
(502,0,o),
(509,7,o),
(509,12,qs),
(509,17,o),
(505,21,qs),
(302,222,ls),
(266,258,o),
(213,258,qs),
(179,258,o),
(119,227,o),
(81,168,o),
(81,130,qs),
(81,97,o),
(114,37,o),
(174,0,o),
(213,0,qs)
);
},
{
closed = 1;
nodes = (
(275,435,o),
(205,505,o),
(205,554,qs),
(205,603,o),
(275,672,o),
(324,672,qs),
(373,672,o),
(442,603,o),
(442,554,qs),
(442,505,o),
(373,435,o),
(324,435,qs)
);
},
{
closed = 1;
nodes = (
(364,456,o),
(421,514,o),
(421,554,qs),
(421,594,o),
(364,651,o),
(324,651,qs),
(284,651,o),
(226,594,o),
(226,554,qs),
(226,514,o),
(284,456,o),
(324,456,qs)
);
},
{
closed = 1;
nodes = (
(295,484,o),
(254,525,o),
(254,554,qs),
(254,583,o),
(295,623,o),
(324,623,qs),
(338,623,o),
(354,616,q),
(346,614,o),
(336,600,o),
(336,592,qs),
(336,581,o),
(351,566,o),
(362,566,qs),
(370,566,o),
(384,576,o),
(386,584,q),
(393,568,o),
(393,554,qs),
(393,525,o),
(353,484,o),
(324,484,qs)
);
},
{
closed = 1;
nodes = (
(852,0,ls),
(891,0,o),
(951,37,o),
(984,97,o),
(984,130,qs),
(984,168,o),
(946,227,o),
(886,258,o),
(852,258,qs),
(799,258,o),
(763,222,qs),
(560,21,ls),
(556,17,o),
(556,12,qs),
(556,7,o),
(563,0,o),
(569,0,qs)
);
},
{
closed = 1;
nodes = (
(1236,0,l),
(1236,214,l),
(1441,0,l),
(1587,0,l),
(1343,260,l),
(1572,511,l),
(1428,511,l),
(1236,309,l),
(1236,700,l),
(1122,700,l),
(1122,0,l)
);
},
{
closed = 1;
nodes = (
(1908,-12,o),
(2033,57,o),
(2104,179,o),
(2104,254,qs),
(2104,329,o),
(2033,452,o),
(1908,523,o),
(1830,523,qs),
(1752,523,o),
(1628,452,o),
(1557,329,o),
(1557,254,qs),
(1557,179,o),
(1628,57,o),
(1752,-12,o),
(1830,-12,qs)
);
},
{
closed = 1;
nodes = (
(1781,95,o),
(1710,137,o),
(1671,210,o),
(1671,254,qs),
(1671,298,o),
(1710,371,o),
(1781,413,o),
(1828,413,qs),
(1875,413,o),
(1947,371,o),
(1987,298,o),
(1987,254,qs),
(1987,210,o),
(1947,137,o),
(1875,95,o),
(1828,95,qs)
);
},
{
closed = 1;
nodes = (
(1754,566,o),
(1795,607,o),
(1795,637,qs),
(1795,667,o),
(1755,707,o),
(1724,707,qs),
(1694,707,o),
(1653,665,o),
(1653,636,qs),
(1653,607,o),
(1694,566,o),
(1724,566,qs)
);
},
{
closed = 1;
nodes = (
(1965,566,o),
(2006,607,o),
(2006,637,qs),
(2006,667,o),
(1966,707,o),
(1935,707,qs),
(1905,707,o),
(1864,665,o),
(1864,636,qs),
(1864,607,o),
(1905,566,o),
(1935,566,qs)
);
},
{
closed = 1;
nodes = (
(2284,0,l),
(2284,700,l),
(2174,700,l),
(2174,0,l)
);
},
{
closed = 1;
nodes = (
(2599,95,o),
(2527,140,o),
(2489,213,o),
(2489,254,qs),
(2489,297,o),
(2530,370,o),
(2602,413,o),
(2648,413,qs),
(2716,413,o),
(2804,323,o),
(2804,254,qs),
(2804,209,o),
(2764,136,o),
(2693,95,o),
(2648,95,qs)
);
},
{
closed = 1;
nodes = (
(2744,-12,o),
(2858,60,o),
(2920,182,o),
(2920,254,qs),
(2920,331,o),
(2854,454,o),
(2740,523,o),
(2669,523,qs),
(2612,523,o),
(2524,478,o),
(2489,431,q),
(2489,700,l),
(2379,700,l),
(2379,0,l),
(2489,0,l),
(2489,80,l),
(2524,33,o),
(2612,-12,o),
(2669,-12,qs)
);
},
{
closed = 1;
nodes = (
(3103,0,l),
(3103,511,l),
(2990,511,l),
(2990,0,l)
);
},
{
closed = 1;
nodes = (
(3076,566,o),
(3117,607,o),
(3117,637,qs),
(3117,667,o),
(3077,707,o),
(3046,707,qs),
(3016,707,o),
(2975,665,o),
(2975,636,qs),
(2975,607,o),
(3016,566,o),
(3046,566,qs)
);
},
{
closed = 1;
nodes = (
(693,435,o),
(623,505,o),
(623,554,qs),
(623,603,o),
(693,672,o),
(742,672,qs),
(791,672,o),
(860,603,o),
(860,554,qs),
(860,505,o),
(791,435,o),
(742,435,qs)
);
},
{
closed = 1;
nodes = (
(782,456,o),
(839,514,o),
(839,554,qs),
(839,594,o),
(782,651,o),
(742,651,qs),
(702,651,o),
(644,594,o),
(644,554,qs),
(644,514,o),
(702,456,o),
(742,456,qs)
);
},
{
closed = 1;
nodes = (
(713,484,o),
(672,525,o),
(672,554,qs),
(672,583,o),
(713,623,o),
(742,623,qs),
(756,623,o),
(772,616,q),
(764,614,o),
(754,600,o),
(754,592,qs),
(754,581,o),
(769,566,o),
(780,566,qs),
(788,566,o),
(802,576,o),
(804,584,q),
(811,568,o),
(811,554,qs),
(811,525,o),
(771,484,o),
(742,484,qs)
);
}
);
userData = {
assembly = "NPUSHW[ ]	/* 33 values pushed */
283 280 99 96 4 1 11 218 1 21 7 130 127 3 3 4 21 133 1 22 4 213 1 3 22 5 76 274 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 154 values pushed */
32 27 2 15 0 6 0 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 39 1 6 8 0 6 89 41 1 8 44 1 11 1 8 11 105 37 25 23 2 4 0 43 56 38 53 26 52 24 7 10 19 0 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 155 values pushed */
32 27 2 15 23 6 23 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 2 1 0 39 1 6 8 0 6 105 41 1 8 44 1 11 1 8 11 105 37 25 2 23 43 56 38 53 26 52 24 7 10 19 23 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 154 values pushed */
32 27 2 15 0 6 0 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 39 1 6 8 0 6 89 41 1 8 44 1 11 1 8 11 105 37 25 23 2 4 0 43 56 38 53 26 52 24 7 10 19 0 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 146 values pushed */
270 270 258 258 246 246 234 234 211 211 196 196 180 180 168 168 152 152 136 136 86 86 74 74 62 62 45 45 270 291 270 290 286 284 278 276 258 269 258 268 264 262 246 257 246 256 252 250 234 245 234 244 240 238 233 232 231 230 211 229 211 228 222 220 217 216 215 214 196 210 196 209 203 201 195 194 193 192 180 191 180 190 186 184 168 179 168 178 174 172 152 167 152 166 160 158 136 151 136 150 144 142 135 134 132 131 129 128 126 125 124 122 116 114 86 107 86 106 102 100 94 92 74 85 74 84 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 60 6 27
CALL[ ]	/* CallFunction */";
};
width = 3247;
}
);
note = uniE004;
},
{
glyphname = uniE005;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,48,o),
(533,48,qs),
(540,48,o),
(545,53,qs),
(722,229,ls),
(781,288,o),
(781,367,qs),
(781,386,ls),
(781,393,o),
(784,399,o),
(790,401,qs),
(838,418,o),
(900,499,o),
(900,550,qs),
(900,594,o),
(858,667,o),
(786,710,o),
(741,710,qs),
(688,710,o),
(611,653,o),
(591,603,qs),
(587,592,o),
(575,584,o),
(566,584,qs),
(501,584,ls),
(490,584,o),
(478,592,o),
(474,603,qs),
(454,653,o),
(377,710,o),
(324,710,qs),
(279,710,o),
(207,667,o),
(165,594,o),
(165,550,qs),
(165,499,o),
(227,418,o),
(275,401,qs),
(281,399,o),
(284,393,o),
(284,386,qs),
(284,367,ls),
(284,294,o),
(343,229,q),
(520,53,l)
);
},
{
closed = 1;
nodes = (
(496,0,ls),
(502,0,o),
(509,7,o),
(509,12,qs),
(509,17,o),
(505,21,qs),
(302,222,ls),
(266,258,o),
(213,258,qs),
(179,258,o),
(119,227,o),
(81,168,o),
(81,130,qs),
(81,97,o),
(114,37,o),
(174,0,o),
(213,0,qs)
);
},
{
closed = 1;
nodes = (
(284,456,o),
(226,514,o),
(226,554,qs),
(226,594,o),
(284,651,o),
(324,651,qs),
(364,651,o),
(421,594,o),
(421,554,qs),
(421,514,o),
(364,456,o),
(324,456,qs)
);
},
{
closed = 1;
nodes = (
(353,484,o),
(393,525,o),
(393,554,qs),
(393,568,o),
(386,584,q),
(384,576,o),
(370,566,o),
(362,566,qs),
(351,566,o),
(336,581,o),
(336,592,qs),
(336,600,o),
(346,614,o),
(354,616,q),
(338,623,o),
(324,623,qs),
(295,623,o),
(254,583,o),
(254,554,qs),
(254,525,o),
(295,484,o),
(324,484,qs)
);
},
{
closed = 1;
nodes = (
(852,0,ls),
(891,0,o),
(951,37,o),
(984,97,o),
(984,130,qs),
(984,168,o),
(946,227,o),
(886,258,o),
(852,258,qs),
(799,258,o),
(763,222,qs),
(560,21,ls),
(556,17,o),
(556,12,qs),
(556,7,o),
(563,0,o),
(569,0,qs)
);
},
{
closed = 1;
nodes = (
(702,456,o),
(644,514,o),
(644,554,qs),
(644,594,o),
(702,651,o),
(742,651,qs),
(782,651,o),
(839,594,o),
(839,554,qs),
(839,514,o),
(782,456,o),
(742,456,qs)
);
},
{
closed = 1;
nodes = (
(771,484,o),
(811,525,o),
(811,554,qs),
(811,568,o),
(804,584,q),
(802,576,o),
(788,566,o),
(780,566,qs),
(769,566,o),
(754,581,o),
(754,592,qs),
(754,600,o),
(764,614,o),
(772,616,q),
(756,623,o),
(742,623,qs),
(713,623,o),
(672,583,o),
(672,554,qs),
(672,525,o),
(713,484,o),
(742,484,qs)
);
},
{
closed = 1;
nodes = (
(1236,0,l),
(1236,214,l),
(1441,0,l),
(1587,0,l),
(1343,260,l),
(1572,511,l),
(1428,511,l),
(1236,309,l),
(1236,700,l),
(1122,700,l),
(1122,0,l)
);
},
{
closed = 1;
nodes = (
(1908,-12,o),
(2033,57,o),
(2104,179,o),
(2104,254,qs),
(2104,329,o),
(2033,452,o),
(1908,523,o),
(1830,523,qs),
(1752,523,o),
(1628,452,o),
(1557,329,o),
(1557,254,qs),
(1557,179,o),
(1628,57,o),
(1752,-12,o),
(1830,-12,qs)
);
},
{
closed = 1;
nodes = (
(1781,95,o),
(1710,137,o),
(1671,210,o),
(1671,254,qs),
(1671,298,o),
(1710,371,o),
(1781,413,o),
(1828,413,qs),
(1875,413,o),
(1947,371,o),
(1987,298,o),
(1987,254,qs),
(1987,210,o),
(1947,137,o),
(1875,95,o),
(1828,95,qs)
);
},
{
closed = 1;
nodes = (
(1754,566,o),
(1795,607,o),
(1795,637,qs),
(1795,667,o),
(1755,707,o),
(1724,707,qs),
(1694,707,o),
(1653,665,o),
(1653,636,qs),
(1653,607,o),
(1694,566,o),
(1724,566,qs)
);
},
{
closed = 1;
nodes = (
(1965,566,o),
(2006,607,o),
(2006,637,qs),
(2006,667,o),
(1966,707,o),
(1935,707,qs),
(1905,707,o),
(1864,665,o),
(1864,636,qs),
(1864,607,o),
(1905,566,o),
(1935,566,qs)
);
},
{
closed = 1;
nodes = (
(2284,0,l),
(2284,700,l),
(2174,700,l),
(2174,0,l)
);
},
{
closed = 1;
nodes = (
(2599,95,o),
(2527,140,o),
(2489,213,o),
(2489,254,qs),
(2489,297,o),
(2530,370,o),
(2602,413,o),
(2648,413,qs),
(2716,413,o),
(2804,323,o),
(2804,254,qs),
(2804,209,o),
(2764,136,o),
(2693,95,o),
(2648,95,qs)
);
},
{
closed = 1;
nodes = (
(2744,-12,o),
(2858,60,o),
(2920,182,o),
(2920,254,qs),
(2920,331,o),
(2854,454,o),
(2740,523,o),
(2669,523,qs),
(2612,523,o),
(2524,478,o),
(2489,431,q),
(2489,700,l),
(2379,700,l),
(2379,0,l),
(2489,0,l),
(2489,80,l),
(2524,33,o),
(2612,-12,o),
(2669,-12,qs)
);
},
{
closed = 1;
nodes = (
(3103,0,l),
(3103,511,l),
(2990,511,l),
(2990,0,l)
);
},
{
closed = 1;
nodes = (
(3076,566,o),
(3117,607,o),
(3117,637,qs),
(3117,667,o),
(3077,707,o),
(3046,707,qs),
(3016,707,o),
(2975,665,o),
(2975,636,qs),
(2975,607,o),
(3016,566,o),
(3046,566,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
132 81 2 1 8 240 1 24 7 152 149 3 3 4 24 155 1 25 4 235 1 3 25 5 76 141 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 149 values pushed */
35 30 2 18 0 6 0 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 13 1 6 8 0 6 89 40 28 26 2 4 0 53 41 50 29 49 5 27 9 0 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 150 values pushed */
35 30 2 18 26 6 26 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 2 1 0 13 1 6 8 0 6 105 40 28 2 26 53 41 50 29 49 5 27 9 26 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 149 values pushed */
35 30 2 18 0 6 0 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 13 1 6 8 0 6 89 40 28 26 2 4 0 53 41 50 29 49 5 27 9 0 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 130 values pushed */
256 256 233 233 218 218 202 202 190 190 174 174 158 158 125 125 113 113 74 74 62 62 45 45 256 267 256 266 262 260 255 254 253 252 233 251 233 250 244 242 239 238 237 236 218 232 218 231 225 223 217 216 215 214 202 213 202 212 208 206 190 201 190 200 196 194 174 189 174 188 182 180 158 173 158 172 166 164 157 156 154 153 151 150 148 147 125 146 125 145 138 137 131 129 113 124 113 123 119 117 112 110 104 102 74 95 74 94 87 86 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 54 6 27
CALL[ ]	/* CallFunction */";
};
width = 3247;
}
);
note = uniE005;
},
{
glyphname = REbackwards;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-27,0,l),
(77,0,l),
(312,310,l),
(428,310,l),
(373,0,l),
(457,0,l),
(581,700,l),
(374,700,ls),
(248,700,o),
(101,584,o),
(101,475,qs),
(101,414,o),
(170,337,o),
(232,326,q)
);
},
{
closed = 1;
nodes = (
(251,381,o),
(188,435,o),
(188,483,qs),
(188,560,o),
(272,630,o),
(363,630,qs),
(484,630,l),
(440,381,l),
(319,381,ls)
);
},
{
closed = 1;
nodes = (
(1038,0,l),
(1162,700,l),
(729,700,l),
(717,631,l),
(1066,631,l),
(1026,404,l),
(721,404,l),
(709,336,l),
(1014,336,l),
(966,69,l),
(617,69,l),
(605,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
13 1 2 7 1 76 0 8 0 7 2 8 7 103 12 1 5 0 2 6 5 2 103 9 1 4 4 0 95 10 1 0 0 33 77 0 6 6 1 95 11 3 2 1 1 34 1 78 14 14 34 33 32 31 30 29 28 27 26 25 24 23 14 22 14 21 35 17 17 17 36 13 8 27
CALL[ ]	/* CallFunction */";
};
width = 1156;
}
);
note = REbackwards;
},
{
glyphname = RethinkWordmark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(3260,0,l),
(3260,488,l),
(3589,0,l),
(3717,0,l),
(3717,700,l),
(3589,700,l),
(3589,211,l),
(3260,700,l),
(3132,700,l),
(3132,0,l)
);
},
{
closed = 1;
nodes = (
(24,0,l),
(175,0,l),
(347,295,l),
(425,295,l),
(425,0,l),
(553,0,l),
(553,700,l),
(310,700,ls),
(202,700,o),
(135,647,qs),
(70,594,o),
(70,498,qs),
(70,426,o),
(109,379,qs),
(148,333,o),
(219,316,q)
);
},
{
closed = 1;
nodes = (
(251,404,o),
(225,428,qs),
(200,455,o),
(200,498,qs),
(200,542,o),
(226,566,qs),
(251,591,o),
(313,591,qs),
(425,591,l),
(425,404,l),
(313,404,ls)
);
},
{
closed = 1;
nodes = (
(1187,0,l),
(1187,700,l),
(738,700,l),
(738,591,l),
(1059,591,l),
(1059,424,l),
(784,424,l),
(784,315,l),
(1059,315,l),
(1059,109,l),
(738,109,l),
(738,0,l)
);
},
{
closed = 1;
nodes = (
(1682,0,l),
(1682,591,l),
(1887,591,l),
(1887,700,l),
(1350,700,l),
(1350,591,l),
(1554,591,l),
(1554,0,l)
);
},
{
closed = 1;
nodes = (
(2172,0,l),
(2172,316,l),
(2486,316,l),
(2486,0,l),
(2614,0,l),
(2614,700,l),
(2486,700,l),
(2486,425,l),
(2172,425,l),
(2172,700,l),
(2044,700,l),
(2044,0,l)
);
},
{
closed = 1;
nodes = (
(2937,0,l),
(2937,700,l),
(2809,700,l),
(2809,0,l)
);
},
{
closed = 1;
nodes = (
(4039,0,l),
(4039,261,l),
(4110,339,l),
(4312,0,l),
(4463,0,l),
(4196,433,l),
(4440,700,l),
(4279,700,l),
(4039,431,l),
(4039,700,l),
(3911,700,l),
(3911,0,l)
);
},
{
closed = 1;
nodes = (
(4613,700,l),
(4646,700,l),
(4681,765,l),
(4699,765,l),
(4699,700,l),
(4727,700,l),
(4727,855,l),
(4673,855,ls),
(4647,855,o),
(4625,830,o),
(4625,811,qs),
(4625,783,o),
(4654,772,q)
);
},
{
closed = 1;
nodes = (
(4720,629,o),
(4785,667,o),
(4823,733,o),
(4823,772,qs),
(4823,811,o),
(4785,877,o),
(4719,916,o),
(4680,916,qs),
(4637,916,o),
(4572,874,o),
(4536,808,o),
(4536,772,qs),
(4536,734,o),
(4574,668,o),
(4640,629,o),
(4680,629,qs)
);
},
{
closed = 1;
nodes = (
(4648,652,o),
(4593,685,o),
(4560,740,o),
(4560,772,qs),
(4560,822,o),
(4631,892,o),
(4680,892,qs),
(4730,892,o),
(4800,822,o),
(4800,772,qs),
(4800,723,o),
(4730,652,o),
(4680,652,qs)
);
},
{
closed = 1;
nodes = (
(4668,789,o),
(4652,800,o),
(4652,811,qs),
(4652,832,o),
(4677,832,qs),
(4699,832,l),
(4699,789,l),
(4680,789,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
97 1 34 41 78 75 7 3 12 8 81 25 2 11 9 82 2 2 10 6 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 105 values pushed */
35 1 33 34 0 40 33 114 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 45 1 41 0 34 33 41 34 103 44 1 39 43 1 37 8 39 37 105 21 1 12 24 1 11 6 12 11 103 42 1 9 0 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 106 values pushed */
35 1 33 34 0 34 33 0 128 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 45 1 41 0 34 33 41 34 103 44 1 39 43 1 37 8 39 37 105 21 1 12 24 1 11 6 12 11 103 42 1 9 0 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 94 values pushed */
127 127 114 114 98 98 26 26 127 134 127 133 130 128 114 126 114 125 120 118 98 113 98 112 106 104 96 95 94 93 92 91 90 88 84 83 80 79 77 76 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 26 36 26 35 35 17 17 17 39 18 17 18 16 46 8 31
CALL[ ]	/* CallFunction */";
};
width = 4789;
}
);
note = RethinkWordmark;
},
{
glyphname = Rlogobig;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(525,-12,o),
(692,85,o),
(789,252,o),
(789,350,qs),
(789,448,o),
(692,615,o),
(525,712,o),
(427,712,qs),
(329,712,o),
(162,615,o),
(65,448,o),
(65,350,qs),
(65,252,o),
(162,85,o),
(329,-12,o),
(427,-12,qs)
);
},
{
closed = 1;
nodes = (
(345,47,o),
(206,129,o),
(124,268,o),
(124,350,qs),
(124,432,o),
(206,571,o),
(345,652,o),
(427,652,qs),
(509,652,o),
(648,571,o),
(729,432,o),
(729,350,qs),
(729,268,o),
(648,129,o),
(509,47,o),
(427,47,qs)
);
},
{
closed = 1;
nodes = (
(342,168,l),
(356,196,o),
(416,308,o),
(429,333,q),
(474,333,l),
(474,168,l),
(547,168,l),
(547,559,l),
(410,559,ls),
(344,559,o),
(287,493,o),
(287,447,qs),
(287,411,o),
(327,361,o),
(361,349,q),
(258,168,l)
);
},
{
closed = 1;
nodes = (
(395,392,o),
(356,420,o),
(356,447,qs),
(356,473,o),
(391,501,o),
(419,501,qs),
(474,501,l),
(474,392,l),
(428,392,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
7 1 5 6 3 6 5 3 128 0 4 0 8 9 4 8 105 12 1 9 0 6 5 9 6 103 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 97 10 1 1 1 40 1 78 48 48 16 16 0 0 48 56 48 55 51 49 47 46 43 42 41 40 39 37 16 31 16 30 24 22 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 818;
}
);
note = Rlogobig;
}
);
instances = (
{
customParameters = (
{
name = styleMapFamilyName;
value = "Rethink Sans";
}
);
instanceInterpolations = {
m01 = 1;
};
isItalic = 1;
name = Italic;
properties = (
{
key = postscriptFontName;
value = "KolbiSans-Italic";
},
{
key = postscriptFullNames;
values = (
{
language = ENG;
value = "Kolbi Sans Italic";
}
);
}
);
}
);
kerningLTR = {
m01 = {
"@MMK_L_A" = {
"@MMK_R_C" = -50;
"@MMK_R_S" = -20;
"@MMK_R_T" = -80;
"@MMK_R_U" = -31;
"@MMK_R_V" = -118;
"@MMK_R_W" = -80;
"@MMK_R_Y" = -107;
"@MMK_R_a" = -20;
"@MMK_R_asterisk" = -86;
"@MMK_R_backslash" = -61;
"@MMK_R_c" = -25;
"@MMK_R_f" = -17;
"@MMK_R_hyphen" = -40;
"@MMK_R_multiply" = -49;
"@MMK_R_parenright" = -26;
"@MMK_R_plus" = -57;
"@MMK_R_question" = -40;
"@MMK_R_s" = -10;
"@MMK_R_t" = -43;
"@MMK_R_u" = -25;
"@MMK_R_v" = -70;
"@MMK_R_w" = -47;
"@MMK_R_x" = -40;
"@MMK_R_y" = -79;
"@MMK_R_z" = 3;
};
"@MMK_L_B" = {
"@MMK_R_A" = -25;
"@MMK_R_AE" = -39;
"@MMK_R_T" = -58;
"@MMK_R_V" = -50;
"@MMK_R_W" = -25;
"@MMK_R_X" = -30;
"@MMK_R_Y" = -50;
"@MMK_R_asterisk" = -21;
"@MMK_R_backslash" = -31;
"@MMK_R_braceright" = -40;
"@MMK_R_comma" = -21;
"@MMK_R_g" = -15;
"@MMK_R_parenright" = -69;
"@MMK_R_period" = -30;
"@MMK_R_slash" = -47;
"@MMK_R_underscore" = -50;
"@MMK_R_x" = -10;
};
"@MMK_L_Cacute" = {
"@MMK_R_AE" = -17;
"@MMK_R_T" = -20;
"@MMK_R_V" = -26;
"@MMK_R_W" = -20;
"@MMK_R_X" = -20;
"@MMK_R_Y" = -40;
"@MMK_R_parenright" = -20;
};
"@MMK_L_E" = {
"@MMK_R_C" = -10;
};
"@MMK_L_F" = {
"@MMK_R_A" = -60;
"@MMK_R_a" = -40;
"@MMK_R_c" = -30;
"@MMK_R_g" = -40;
"@MMK_R_period" = -60;
"@MMK_R_s" = -20;
};
"@MMK_L_G" = {
"@MMK_R_T" = -25;
"@MMK_R_W" = -25;
"@MMK_R_Y" = -35;
};
"@MMK_L_J" = {
"@MMK_R_A" = -23;
};
"@MMK_L_K" = {
"@MMK_R_C" = -52;
"@MMK_R_J" = -15;
"@MMK_R_S" = -20;
"@MMK_R_a" = -24;
"@MMK_R_asterisk" = -4;
"@MMK_R_c" = -55;
"@MMK_R_dotlessi" = -20;
"@MMK_R_f" = -15;
"@MMK_R_g" = -25;
"@MMK_R_guillemotleft" = -41;
"@MMK_R_hyphen" = -60;
"@MMK_R_i" = -15;
"@MMK_R_igrave" = -10;
"@MMK_R_j" = -15;
"@MMK_R_plus" = -40;
"@MMK_R_question" = -13;
"@MMK_R_s" = -35;
"@MMK_R_t" = -25;
"@MMK_R_u" = -35;
"@MMK_R_v" = -55;
"@MMK_R_w" = -50;
"@MMK_R_x" = -40;
"@MMK_R_y" = -55;
"@MMK_R_z" = -15;
};
"@MMK_L_L" = {
"@MMK_R_C" = -79;
"@MMK_R_S" = -45;
"@MMK_R_T" = -120;
"@MMK_R_U" = -40;
"@MMK_R_V" = -139;
"@MMK_R_W" = -80;
"@MMK_R_Y" = -114;
"@MMK_R_asterisk" = -103;
"@MMK_R_backslash" = -61;
"@MMK_R_c" = -30;
"@MMK_R_hyphen" = -60;
"@MMK_R_percent" = -57;
"@MMK_R_plus" = -60;
"@MMK_R_question" = -30;
"@MMK_R_t" = -8;
"@MMK_R_uni018F" = -30;
"@MMK_R_uni02BA" = -94;
"@MMK_R_v" = -69;
"@MMK_R_w" = -41;
"@MMK_R_x" = -20;
"@MMK_R_y" = -70;
};
"@MMK_L_P" = {
"@MMK_R_A" = -72;
"@MMK_R_AE" = -109;
"@MMK_R_S" = 1;
"@MMK_R_V" = -15;
"@MMK_R_Y" = -19;
"@MMK_R_a" = -25;
"@MMK_R_c" = -30;
"@MMK_R_g" = -21;
"@MMK_R_period" = -50;
};
"@MMK_L_Q" = {
"@MMK_R_A" = -26;
"@MMK_R_T" = -34;
"@MMK_R_U" = 3;
"@MMK_R_V" = -37;
"@MMK_R_W" = -25;
"@MMK_R_Y" = -57;
"@MMK_R_u" = 3;
};
"@MMK_L_R" = {
"@MMK_R_C" = -15;
"@MMK_R_J" = -10;
"@MMK_R_T" = -25;
"@MMK_R_V" = -34;
"@MMK_R_W" = -20;
"@MMK_R_Y" = -30;
"@MMK_R_a" = -20;
"@MMK_R_c" = -25;
"@MMK_R_plus" = -17;
"@MMK_R_s" = -17;
"@MMK_R_u" = -10;
};
"@MMK_L_S" = {
"@MMK_R_T" = -30;
"@MMK_R_V" = -50;
"@MMK_R_W" = -30;
"@MMK_R_Y" = -50;
};
"@MMK_L_T" = {
"@MMK_R_A" = -71;
"@MMK_R_AE" = -90;
"@MMK_R_C" = -36;
"@MMK_R_J" = -60;
"@MMK_R_S" = -15;
"@MMK_R_a" = -105;
"@MMK_R_backslash" = 21;
"@MMK_R_c" = -105;
"@MMK_R_comma" = -80;
"@MMK_R_dotlessi" = -90;
"@MMK_R_exclamdown" = -52;
"@MMK_R_f" = -20;
"@MMK_R_g" = -100;
"@MMK_R_hyphen" = -50;
"@MMK_R_ibreve" = 60;
"@MMK_R_multiply" = -87;
"@MMK_R_p" = -90;
"@MMK_R_period" = -80;
"@MMK_R_plus" = -57;
"@MMK_R_question" = 20;
"@MMK_R_questiondown" = -69;
"@MMK_R_rcaron" = -60;
"@MMK_R_s" = -100;
"@MMK_R_semicolon" = -51;
"@MMK_R_slash" = -41;
"@MMK_R_t" = -29;
"@MMK_R_u" = -100;
"@MMK_R_underscore" = -60;
"@MMK_R_v" = -75;
"@MMK_R_w" = -80;
"@MMK_R_x" = -75;
"@MMK_R_y" = -75;
"@MMK_R_z" = -80;
};
"@MMK_L_Thorn" = {
"@MMK_R_A" = -24;
"@MMK_R_T" = -97;
"@MMK_R_V" = -60;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -79;
"@MMK_R_period" = -26;
};
"@MMK_L_U" = {
"@MMK_R_A" = -39;
"@MMK_R_AE" = -56;
"@MMK_R_g" = -25;
"@MMK_R_period" = -20;
"@MMK_R_s" = -10;
"@MMK_R_slash" = -30;
"@MMK_R_underscore" = -39;
};
"@MMK_L_V" = {
"@MMK_R_A" = -90;
"@MMK_R_AE" = -107;
"@MMK_R_C" = -25;
"@MMK_R_J" = -60;
"@MMK_R_a" = -55;
"@MMK_R_backslash" = 3;
"@MMK_R_c" = -65;
"@MMK_R_colon" = -30;
"@MMK_R_comma" = -79;
"@MMK_R_dotlessi" = -40;
"@MMK_R_exclamdown" = -31;
"@MMK_R_f" = -15;
"@MMK_R_g" = -65;
"@MMK_R_hyphen" = -49;
"@MMK_R_multiply" = -57;
"@MMK_R_p" = -40;
"@MMK_R_period" = -60;
"@MMK_R_plus" = -66;
"@MMK_R_s" = -55;
"@MMK_R_slash" = -67;
"@MMK_R_t" = -15;
"@MMK_R_u" = -35;
"@MMK_R_underscore" = -70;
"@MMK_R_v" = -20;
"@MMK_R_w" = -25;
"@MMK_R_x" = -20;
"@MMK_R_y" = -15;
"@MMK_R_z" = -20;
};
"@MMK_L_W" = {
"@MMK_R_A" = -89;
"@MMK_R_AE" = -96;
"@MMK_R_C" = -35;
"@MMK_R_J" = -50;
"@MMK_R_Oslash" = -20;
"@MMK_R_S" = -10;
"@MMK_R_a" = -75;
"@MMK_R_c" = -75;
"@MMK_R_comma" = -59;
"@MMK_R_dotlessi" = -45;
"@MMK_R_exclamdown" = -23;
"@MMK_R_f" = -15;
"@MMK_R_g" = -80;
"@MMK_R_hyphen" = -49;
"@MMK_R_i" = -20;
"@MMK_R_iacute" = -20;
"@MMK_R_j" = -15;
"@MMK_R_multiply" = -49;
"@MMK_R_p" = -45;
"@MMK_R_period" = -70;
"@MMK_R_plus" = -57;
"@MMK_R_rcaron" = -30;
"@MMK_R_s" = -70;
"@MMK_R_semicolon" = -23;
"@MMK_R_slash" = -59;
"@MMK_R_t" = -20;
"@MMK_R_u" = -40;
"@MMK_R_underscore" = -47;
"@MMK_R_v" = -30;
"@MMK_R_w" = -30;
"@MMK_R_x" = -30;
"@MMK_R_y" = -30;
"@MMK_R_z" = -30;
};
"@MMK_L_X" = {
"@MMK_R_C" = -52;
"@MMK_R_a" = -30;
"@MMK_R_c" = -45;
"@MMK_R_g" = -20;
"@MMK_R_s" = -35;
"@MMK_R_t" = -35;
"@MMK_R_u" = -31;
"@MMK_R_w" = -45;
"@MMK_R_y" = -60;
"@MMK_R_z" = -20;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -89;
"@MMK_R_AE" = -81;
"@MMK_R_C" = -40;
"@MMK_R_J" = -60;
"@MMK_R_Oslash" = -32;
"@MMK_R_a" = -75;
"@MMK_R_c" = -85;
"@MMK_R_colon" = -40;
"@MMK_R_comma" = -53;
"@MMK_R_dotlessi" = -40;
"@MMK_R_exclamdown" = -41;
"@MMK_R_f" = -20;
"@MMK_R_g" = -65;
"@MMK_R_hyphen" = -41;
"@MMK_R_i" = -25;
"@MMK_R_iacute" = -25;
"@MMK_R_igrave" = -10;
"@MMK_R_multiply" = -87;
"@MMK_R_p" = -40;
"@MMK_R_period" = -73;
"@MMK_R_plus" = -89;
"@MMK_R_questiondown" = -71;
"@MMK_R_s" = -85;
"@MMK_R_semicolon" = -34;
"@MMK_R_slash" = -53;
"@MMK_R_t" = -20;
"@MMK_R_u" = -65;
"@MMK_R_underscore" = -71;
"@MMK_R_uni02BA" = 30;
"@MMK_R_v" = -40;
"@MMK_R_w" = -30;
"@MMK_R_x" = -40;
"@MMK_R_y" = -40;
"@MMK_R_z" = -40;
};
"@MMK_L_Z" = {
"@MMK_R_C" = -20;
"@MMK_R_a" = -15;
"@MMK_R_c" = -25;
"@MMK_R_s" = -15;
};
"@MMK_L_a" = {
"@MMK_R_asterisk" = -31;
"@MMK_R_backslash" = -40;
"@MMK_R_lslash" = 10;
"@MMK_R_uni02BA" = -61;
"@MMK_R_v" = -21;
"@MMK_R_w" = -13;
"@MMK_R_y" = -28;
};
"@MMK_L_aacute" = {
"@MMK_R_asterisk" = -31;
"@MMK_R_backslash" = -60;
"@MMK_R_v" = -29;
"@MMK_R_w" = -30;
"@MMK_R_y" = -27;
};
"@MMK_L_ae" = {
"@MMK_R_Y" = -80;
"@MMK_R_asterisk" = -34;
"@MMK_R_backslash" = -61;
"@MMK_R_g" = -3;
"@MMK_R_lslash" = 15;
"@MMK_R_question" = -20;
"@MMK_R_uni02BA" = -63;
"@MMK_R_v" = -25;
"@MMK_R_w" = -20;
"@MMK_R_x" = -20;
"@MMK_R_y" = -31;
};
"@MMK_L_asterisk" = {
"@MMK_R_A" = -66;
"@MMK_R_AE" = -111;
"@MMK_R_C" = -12;
"@MMK_R_a" = -3;
"@MMK_R_c" = -14;
"@MMK_R_s" = -18;
};
"@MMK_L_b" = {
"@MMK_R_T" = -110;
"@MMK_R_V" = -80;
"@MMK_R_asterisk" = -53;
"@MMK_R_backslash" = -81;
"@MMK_R_braceright" = -50;
"@MMK_R_c" = -5;
"@MMK_R_f" = -10;
"@MMK_R_g" = -5;
"@MMK_R_parenright" = -59;
"@MMK_R_question" = -40;
"@MMK_R_s" = -5;
"@MMK_R_slash" = -9;
"@MMK_R_t" = -20;
"@MMK_R_uni02BA" = -89;
"@MMK_R_v" = -39;
"@MMK_R_w" = -29;
"@MMK_R_x" = -30;
"@MMK_R_y" = -49;
"@MMK_R_z" = -10;
};
"@MMK_L_backslash" = {
"@MMK_R_C" = -40;
"@MMK_R_T" = -86;
"@MMK_R_U" = -4;
"@MMK_R_V" = -84;
"@MMK_R_W" = -69;
"@MMK_R_Y" = -70;
"@MMK_R_c" = -20;
"@MMK_R_hyphen" = -47;
"@MMK_R_uni02BA" = -101;
};
"@MMK_L_braceright" = {
"@MMK_R_A" = -49;
"@MMK_R_AE" = -50;
"@MMK_R_T" = -49;
"@MMK_R_W" = -21;
"@MMK_R_Y" = -50;
"@MMK_R_period" = -50;
};
"@MMK_L_c" = {
"@MMK_R_y" = -15;
};
"@MMK_L_colon" = {
"@MMK_R_V" = -30;
"@MMK_R_Y" = -40;
};
"@MMK_L_comma" = {
"@MMK_R_C" = -39;
"@MMK_R_T" = -80;
"@MMK_R_V" = -80;
"@MMK_R_W" = -57;
"@MMK_R_Y" = -73;
"@MMK_R_percent" = -52;
"@MMK_R_t" = -23;
"@MMK_R_w" = -30;
"@MMK_R_y" = -50;
};
"@MMK_L_exclamdown" = {
"@MMK_R_T" = -39;
"@MMK_R_V" = -31;
"@MMK_R_W" = -4;
"@MMK_R_Y" = -41;
};
"@MMK_L_f" = {
"@MMK_R_a" = -16;
"@MMK_R_c" = -10;
"@MMK_R_g" = -20;
"@MMK_R_period" = -4;
"@MMK_R_s" = -14;
};
"@MMK_L_g" = {
"@MMK_R_c" = -19;
"@MMK_R_f" = 10;
"@MMK_R_j" = 21;
"@MMK_R_t" = 20;
"@MMK_R_u" = -5;
};
"@MMK_L_germandbls" = {
"@MMK_R_y" = -40;
};
"@MMK_L_greater" = {
"@MMK_R_period" = -60;
};
"@MMK_L_hyphen" = {
"@MMK_R_A" = -39;
"@MMK_R_T" = -51;
"@MMK_R_V" = -49;
"@MMK_R_W" = -39;
"@MMK_R_Y" = -51;
"@MMK_R_backslash" = -76;
"@MMK_R_slash" = -47;
};
"@MMK_L_ibreve" = {
"@MMK_R_T" = 60;
};
"@MMK_L_k" = {
"@MMK_R_a" = -31;
"@MMK_R_c" = -31;
"@MMK_R_s" = -21;
};
"@MMK_L_lslash" = {
"@MMK_R_w" = 10;
};
"@MMK_L_multiply" = {
"@MMK_R_A" = -17;
"@MMK_R_AE" = -26;
"@MMK_R_T" = -87;
"@MMK_R_V" = -51;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -71;
};
"@MMK_L_parenleft" = {
"@MMK_R_A" = -34;
"@MMK_R_C" = -59;
"@MMK_R_a" = -50;
"@MMK_R_c" = -31;
"@MMK_R_s" = -20;
};
"@MMK_L_period" = {
"@MMK_R_C" = -50;
"@MMK_R_T" = -80;
"@MMK_R_U" = -20;
"@MMK_R_V" = -60;
"@MMK_R_W" = -70;
"@MMK_R_Y" = -74;
"@MMK_R_backslash" = -106;
"@MMK_R_less" = -60;
"@MMK_R_question" = -47;
"@MMK_R_v" = -43;
"@MMK_R_w" = -40;
"@MMK_R_y" = -60;
};
"@MMK_L_plus" = {
"@MMK_R_A" = -34;
"@MMK_R_T" = -59;
"@MMK_R_V" = -77;
"@MMK_R_W" = -57;
"@MMK_R_Y" = -80;
};
"@MMK_L_question" = {
"@MMK_R_A" = -69;
"@MMK_R_AE" = -86;
"@MMK_R_period" = -90;
};
"@MMK_L_questiondown" = {
"@MMK_R_T" = -77;
"@MMK_R_Y" = -70;
"@MMK_R_c" = -31;
"@MMK_R_percent" = -31;
"@MMK_R_z" = 20;
};
"@MMK_L_quotedblright" = {
"@MMK_R_J" = -71;
"@MMK_R_s" = -43;
"@MMK_R_slash" = -101;
};
"@MMK_L_r" = {
"@MMK_R_c" = -19;
"@MMK_R_colon" = 17;
"@MMK_R_period" = -40;
"@MMK_R_u" = 4;
};
"@MMK_L_s" = {
"@MMK_R_asterisk" = -60;
"@MMK_R_backslash" = -69;
"@MMK_R_f" = -15;
"@MMK_R_parenright" = -21;
"@MMK_R_question" = -29;
"@MMK_R_t" = -20;
"@MMK_R_v" = -35;
"@MMK_R_w" = -15;
"@MMK_R_x" = -15;
"@MMK_R_y" = -35;
};
"@MMK_L_semicolon" = {
"@MMK_R_T" = -40;
"@MMK_R_Y" = -6;
};
"@MMK_L_slash" = {
"@MMK_R_C" = -37;
"@MMK_R_T" = 4;
"@MMK_R_V" = 31;
"@MMK_R_W" = 4;
"@MMK_R_Y" = 40;
"@MMK_R_a" = -30;
"@MMK_R_c" = -46;
"@MMK_R_dotlessi" = -14;
"@MMK_R_g" = -31;
"@MMK_R_hyphen" = -47;
"@MMK_R_period" = -116;
"@MMK_R_s" = -34;
};
"@MMK_L_t" = {
"@MMK_R_c" = -19;
"@MMK_R_comma" = 52;
};
"@MMK_L_underscore" = {
"@MMK_R_C" = -63;
"@MMK_R_T" = -71;
"@MMK_R_U" = -43;
"@MMK_R_V" = -90;
"@MMK_R_W" = -63;
"@MMK_R_Y" = -71;
};
"@MMK_L_v" = {
"@MMK_R_A" = -80;
"@MMK_R_a" = -6;
"@MMK_R_c" = -22;
"@MMK_R_g" = -21;
"@MMK_R_period" = -40;
"@MMK_R_s" = -15;
"@MMK_R_t" = 20;
};
"@MMK_L_w" = {
"@MMK_R_a" = -5;
"@MMK_R_c" = -13;
"@MMK_R_comma" = -30;
"@MMK_R_g" = -17;
"@MMK_R_lslash" = 5;
"@MMK_R_period" = -40;
"@MMK_R_questiondown" = -17;
"@MMK_R_s" = -15;
};
"@MMK_L_x" = {
"@MMK_R_c" = -25;
"@MMK_R_s" = -15;
};
"@MMK_L_y" = {
"@MMK_R_T" = -80;
"@MMK_R_a" = -20;
"@MMK_R_c" = -21;
"@MMK_R_comma" = -60;
"@MMK_R_g" = -23;
"@MMK_R_multiply" = -17;
"@MMK_R_period" = -50;
"@MMK_R_questiondown" = -39;
"@MMK_R_s" = -17;
"@MMK_R_slash" = -30;
};
"@MMK_L_z" = {
"@MMK_R_c" = -10;
};
AE = {
ibreve = 29;
imacron = 51;
itilde = 33;
v = -19;
};
AEacute = {
ibreve = 29;
imacron = 51;
itilde = 33;
v = -19;
};
Aacute = {
asterisk = -86;
backslash = -61;
f = -17;
multiply = -49;
parenright = -26;
plus = -57;
question = -40;
v = -70;
};
Abreve = {
asterisk = -86;
backslash = -61;
f = -17;
multiply = -49;
parenright = -26;
plus = -57;
question = -40;
v = -70;
};
Acircumflex = {
asterisk = -86;
backslash = -61;
f = -17;
multiply = -49;
parenright = -26;
plus = -57;
question = -40;
v = -70;
};
Adieresis = {
asterisk = -86;
backslash = -61;
f = -17;
multiply = -49;
parenright = -26;
plus = -57;
question = -40;
v = -70;
};
Agrave = {
asterisk = -86;
backslash = -61;
f = -17;
multiply = -49;
parenright = -26;
plus = -57;
question = -40;
v = -70;
};
Amacron = {
asterisk = -86;
backslash = -61;
f = -17;
multiply = -49;
parenright = -26;
plus = -57;
question = -40;
v = -70;
};
Aogonek = {
asterisk = -86;
backslash = -61;
f = -17;
multiply = -49;
parenright = -26;
plus = -57;
question = -40;
v = -70;
};
Aring = {
asterisk = -86;
backslash = -61;
f = -17;
multiply = -49;
parenright = -26;
plus = -57;
question = -40;
v = -70;
};
Atilde = {
asterisk = -86;
backslash = -61;
f = -17;
multiply = -49;
parenright = -26;
plus = -57;
question = -40;
v = -70;
};
B = {
A = -17;
AE = -26;
AEacute = -26;
Aacute = -17;
Abreve = -17;
Acircumflex = -17;
Adieresis = -17;
Agrave = -17;
Amacron = -17;
Aogonek = -17;
Aring = -17;
Atilde = -17;
T = -38;
Tcaron = -38;
V = -28;
W = -20;
Wacute = -20;
Wcircumflex = -20;
Wdieresis = -20;
Wgrave = -20;
X = -15;
Y = -39;
Yacute = -39;
Ycircumflex = -39;
Ydieresis = -39;
Ygrave = -39;
imacron = 30;
uni0162 = -38;
uni021A = -38;
uni1EF8 = -39;
};
Cacute = {
imacron = 30;
itilde = 30;
};
Ccaron = {
imacron = 30;
itilde = 30;
};
Ccedilla = {
imacron = 30;
itilde = 30;
};
Cdotaccent = {
imacron = 30;
itilde = 30;
};
E = {
ibreve = 10;
imacron = 51;
itilde = 33;
v = -19;
};
Eacute = {
ibreve = 29;
imacron = 51;
itilde = 33;
v = -19;
};
Ebreve = {
ibreve = 29;
imacron = 51;
itilde = 33;
v = -19;
};
Ecaron = {
ibreve = 29;
imacron = 51;
itilde = 33;
v = -19;
};
Ecircumflex = {
ibreve = 29;
imacron = 51;
itilde = 33;
v = -19;
};
Edieresis = {
ibreve = 29;
imacron = 51;
itilde = 33;
v = -19;
};
Edotaccent = {
ibreve = 29;
imacron = 51;
itilde = 33;
v = -19;
};
Egrave = {
ibreve = 29;
imacron = 51;
itilde = 33;
v = -19;
};
Emacron = {
ibreve = 29;
imacron = 51;
itilde = 33;
v = -19;
};
Eogonek = {
ibreve = 29;
imacron = 51;
itilde = 33;
v = -19;
};
Euro = {
imacron = 30;
itilde = 30;
};
F = {
J = -56;
comma = -40;
ibreve = 20;
icircumflex = 20;
imacron = 61;
itilde = 30;
multiply = -20;
underscore = -40;
};
G = {
imacron = 30;
};
Gbreve = {
imacron = 30;
};
Gdotaccent = {
imacron = 30;
};
H = {
imacron = 40;
itilde = 4;
};
I = {
imacron = 40;
itilde = 4;
};
Iacute = {
imacron = 40;
itilde = 4;
};
Ibreve = {
imacron = 40;
itilde = 4;
};
Icircumflex = {
imacron = 40;
itilde = 4;
};
Idieresis = {
imacron = 40;
itilde = 4;
};
Idotaccent = {
imacron = 40;
itilde = 4;
};
Igrave = {
imacron = 40;
itilde = 4;
};
Imacron = {
imacron = 40;
itilde = 4;
};
Iogonek = {
imacron = 40;
itilde = 4;
};
Itilde = {
imacron = 40;
itilde = 4;
};
J = {
igrave = 50;
imacron = 69;
};
K = {
ibreve = 20;
icircumflex = 0;
imacron = 50;
};
L = {
V = -80;
};
Lacute = {
V = -80;
};
Lcaron = {
V = -80;
};
Ldot = {
V = -80;
};
Lslash = {
V = -80;
};
M = {
imacron = 40;
itilde = 4;
};
N = {
imacron = 40;
itilde = 4;
};
Nacute = {
imacron = 40;
itilde = 4;
};
Ncaron = {
imacron = 40;
itilde = 4;
};
Ntilde = {
imacron = 40;
itilde = 4;
};
OE = {
ibreve = 29;
imacron = 51;
itilde = 33;
v = -19;
};
Oslash = {
igrave = 50;
imacron = 44;
slash = -47;
underscore = -37;
};
P = {
J = -74;
X = -30;
Z = -20;
Zacute = -20;
Zcaron = -20;
Zdotaccent = -20;
comma = -83;
imacron = 10;
itilde = 31;
parenright = -40;
slash = -77;
underscore = -41;
};
Q = {
X = -20;
};
R = {
imacron = 30;
itilde = 20;
};
Racute = {
imacron = 30;
itilde = 20;
};
Rcaron = {
imacron = 30;
itilde = 20;
};
S = {
imacron = 31;
itilde = 20;
};
Sacute = {
imacron = 31;
itilde = 20;
};
Scaron = {
imacron = 31;
itilde = 20;
};
Scedilla = {
imacron = 31;
itilde = 20;
};
T = {
amacron = -90;
emacron = -90;
ibreve = 25;
icircumflex = 20;
imacron = 65;
itilde = 30;
omacron = -100;
racute = -80;
umacron = -90;
};
Tcaron = {
amacron = -90;
emacron = -90;
ibreve = 25;
icircumflex = 20;
imacron = 65;
itilde = 30;
omacron = -100;
racute = -80;
umacron = -90;
};
Thorn = {
X = -70;
parenright = -50;
};
U = {
imacron = 41;
itilde = 3;
};
Uacute = {
imacron = 41;
itilde = 3;
};
Ubreve = {
imacron = 41;
itilde = 3;
};
Ucircumflex = {
imacron = 41;
itilde = 3;
};
Udieresis = {
imacron = 41;
itilde = 3;
};
Ugrave = {
imacron = 41;
itilde = 3;
};
Uhungarumlaut = {
imacron = 41;
itilde = 3;
};
Umacron = {
imacron = 41;
itilde = 3;
};
Uogonek = {
imacron = 41;
itilde = 3;
};
Uring = {
imacron = 41;
itilde = 3;
};
Utilde = {
imacron = 41;
itilde = 3;
};
V = {
ibreve = 30;
icircumflex = 20;
imacron = 70;
itilde = 30;
};
W = {
ibreve = 25;
icircumflex = 10;
imacron = 70;
itilde = 20;
};
Wacute = {
ibreve = 25;
icircumflex = 10;
imacron = 70;
itilde = 20;
};
Wcircumflex = {
ibreve = 25;
icircumflex = 10;
imacron = 70;
itilde = 20;
};
Wdieresis = {
ibreve = 25;
icircumflex = 10;
imacron = 70;
itilde = 20;
};
Wgrave = {
ibreve = 25;
icircumflex = 10;
imacron = 70;
itilde = 20;
};
X = {
f = -15;
ibreve = 29;
imacron = 50;
itilde = 10;
multiply = -69;
question = -21;
v = -60;
x = -20;
};
Y = {
ibreve = 20;
icircumflex = 10;
imacron = 60;
itilde = 20;
};
Yacute = {
ibreve = 20;
icircumflex = 10;
imacron = 60;
itilde = 20;
};
Ycircumflex = {
ibreve = 20;
icircumflex = 10;
imacron = 60;
itilde = 20;
};
Ydieresis = {
ibreve = 20;
icircumflex = 10;
imacron = 60;
itilde = 20;
};
Ygrave = {
ibreve = 20;
icircumflex = 10;
imacron = 60;
itilde = 20;
};
Z = {
ibreve = 39;
imacron = 60;
itilde = 31;
};
Zacute = {
ibreve = 39;
imacron = 60;
itilde = 31;
};
Zcaron = {
ibreve = 39;
imacron = 60;
itilde = 31;
};
Zdotaccent = {
ibreve = 39;
imacron = 60;
itilde = 31;
};
asterisk = {
J = -69;
exclam = -4;
imacron = 69;
itilde = 40;
questiondown = -81;
slash = -121;
};
backslash = {
backslash = -129;
comma = 50;
question = -30;
quotedblbase = 59;
quotedblleft = -69;
quotedblright = -107;
quoteleft = -69;
quoteright = -107;
quotesinglbase = 59;
underscore = 23;
};
bar = {
imacron = 40;
itilde = 4;
};
bracketleft = {
imacron = 8;
};
bracketright = {
imacron = 60;
itilde = 23;
};
brokenbar = {
imacron = 40;
itilde = 4;
};
c = {
asterisk = -26;
backslash = -71;
parenright = -30;
question = -31;
v = -16;
x = -15;
};
cacute = {
asterisk = -26;
backslash = -71;
parenright = -30;
question = -31;
v = -16;
};
ccaron = {
asterisk = -26;
backslash = -71;
parenright = -30;
question = -31;
v = -16;
};
ccedilla = {
asterisk = -26;
backslash = -71;
parenright = -30;
question = -31;
v = -16;
};
cdotaccent = {
asterisk = -26;
backslash = -71;
parenright = -30;
question = -31;
v = -16;
};
comma = {
backslash = -89;
question = -4;
v = -51;
};
d = {
imacron = 40;
};
dcaron = {
questiondown = -7;
};
dcroat = {
imacron = 64;
};
dollar = {
imacron = 31;
itilde = 20;
};
eth = {
imacron = 30;
};
exclam = {
asterisk = -6;
igrave = 49;
imacron = 50;
itilde = 3;
};
f = {
ibreve = 29;
igrave = 40;
imacron = 60;
itilde = 33;
};
fl = {
imacron = 40;
};
germandbls = {
asterisk = -60;
v = -60;
};
greater = {
parenright = -60;
};
i = {
lslash = 5;
};
iacute = {
asterisk = 34;
b = 60;
backslash = 71;
braceright = 4;
bracketleft = 60;
bracketright = 8;
exclam = 49;
f = 40;
h = 60;
idieresis = 80;
imacron = 60;
itilde = 46;
k = 60;
l = 60;
lacute = 60;
lcaron = 60;
ldot = 60;
lslash = 40;
parenright = 6;
question = 59;
quotedblleft = 57;
quotedblright = 40;
quoteleft = 57;
quoteright = 40;
uni0137 = 60;
uni013C = 60;
};
ibreve = {
backslash = 51;
question = 40;
};
imacron = {
B = 40;
D = 40;
Dcaron = 40;
E = 40;
Eacute = 40;
Ebreve = 40;
Ecaron = 40;
Ecircumflex = 40;
Edieresis = 40;
Edotaccent = 40;
Egrave = 40;
Emacron = 40;
Eogonek = 40;
F = 40;
H = 40;
I = 40;
Iacute = 40;
Ibreve = 40;
Icircumflex = 40;
Idieresis = 40;
Idotaccent = 40;
Igrave = 40;
Imacron = 40;
Itilde = 40;
K = 40;
L = 40;
Lacute = 40;
Lcaron = 40;
Ldot = 40;
M = 40;
N = 40;
Nacute = 40;
Ncaron = 40;
Ntilde = 40;
P = 40;
R = 40;
Racute = 40;
Rcaron = 40;
Thorn = 40;
asterisk = 70;
b = 60;
backslash = 97;
bar = 40;
bracketleft = 60;
bracketright = 8;
brokenbar = 40;
exclam = 70;
f = 40;
germandbls = 60;
h = 60;
k = 60;
l = 60;
lacute = 60;
lcaron = 60;
ldot = 60;
lslash = 69;
question = 77;
quotedblleft = 77;
quotedblright = 70;
quoteleft = 77;
quoteright = 70;
thorn = 60;
uni0136 = 40;
uni0137 = 60;
uni013B = 40;
uni013C = 60;
uni0145 = 40;
uni0156 = 40;
uni02B9 = 100;
uni02BA = 100;
uni1EBC = 40;
uni20A8 = 40;
z = 40;
zacute = 40;
zcaron = 40;
zdotaccent = 40;
};
itilde = {
asterisk = 40;
b = 6;
bracketleft = 23;
exclam = 4;
f = 30;
h = 6;
j = 31;
k = 6;
l = 6;
lacute = 6;
lcaron = 6;
ldot = 6;
question = 40;
quotedblleft = 30;
quotedblright = 30;
quoteleft = 30;
quoteright = 30;
uni0137 = 6;
uni013C = 6;
uni02B9 = 60;
uni02BA = 60;
};
j = {
itilde = 40;
};
l = {
imacron = 40;
};
lacute = {
imacron = 40;
};
lcaron = {
b = 80;
h = 80;
k = 80;
l = 80;
questiondown = -7;
};
less = {
parenright = -41;
};
lslash = {
i = 5;
imacron = 60;
questiondown = 21;
v = 10;
};
multiply = {
X = -37;
};
plus = {
slash = -39;
};
q = {
backslash = -40;
j = 30;
};
question = {
J = -37;
X = -30;
comma = -56;
ibreve = 30;
igrave = 40;
imacron = 51;
itilde = 33;
parenright = -74;
questiondown = -97;
quotedblbase = -33;
quotesinglbase = -33;
slash = -70;
underscore = -61;
};
questiondown = {
asterisk = -43;
backslash = -50;
question = -43;
quotedblbase = 40;
quotesinglbase = 40;
v = -17;
};
quotedbl = {
ibreve = 29;
imacron = 86;
itilde = 30;
};
quotedblbase = {
backslash = -120;
question = -30;
};
quotedblleft = {
J = -71;
ibreve = 17;
imacron = 67;
itilde = 21;
questiondown = -63;
slash = -106;
};
quotedblright = {
ibreve = 29;
imacron = 86;
itilde = 30;
};
quoteleft = {
J = -71;
ibreve = 17;
imacron = 67;
itilde = 21;
questiondown = -63;
slash = -106;
};
quoteright = {
ibreve = 29;
imacron = 86;
itilde = 30;
};
quotesinglbase = {
backslash = -120;
question = -30;
};
quotesingle = {
ibreve = 29;
imacron = 86;
itilde = 30;
};
slash = {
B = 41;
D = 41;
Dcaron = 41;
E = 41;
Eacute = 41;
Ebreve = 41;
Ecaron = 41;
Ecircumflex = 41;
Edieresis = 41;
Edotaccent = 41;
Egrave = 41;
Emacron = 41;
Eogonek = 41;
F = 41;
H = 41;
I = 41;
Iacute = 41;
Ibreve = 41;
Icircumflex = 60;
Idieresis = 51;
Idotaccent = 41;
Igrave = 40;
Imacron = 90;
Itilde = 41;
J = -39;
K = 41;
L = 41;
Lacute = 41;
Lcaron = 41;
Ldot = 41;
M = 41;
N = 41;
Nacute = 41;
Ncaron = 41;
Ntilde = 41;
Oslash = -37;
P = 41;
R = 41;
Racute = 41;
Rcaron = 41;
Thorn = 41;
bar = 41;
brokenbar = 41;
comma = -41;
ibreve = 40;
icircumflex = 45;
idieresis = 36;
igrave = 89;
imacron = 80;
plus = -64;
questiondown = -59;
quotedblbase = -78;
quotesinglbase = -78;
slash = -127;
underscore = -121;
uni0136 = 41;
uni013B = 41;
uni0145 = 41;
uni0156 = 41;
uni1EBC = 41;
uni20A8 = 41;
};
underscore = {
asterisk = -99;
backslash = -159;
j = 8;
question = -60;
underscore = -118;
};
uni0122 = {
imacron = 30;
};
uni0136 = {
ibreve = 20;
icircumflex = 0;
imacron = 50;
};
uni013B = {
V = -80;
};
uni013C = {
imacron = 40;
};
uni0145 = {
imacron = 40;
itilde = 4;
};
uni0156 = {
imacron = 30;
itilde = 20;
};
uni0162 = {
amacron = -90;
emacron = -90;
ibreve = 25;
icircumflex = 20;
imacron = 65;
itilde = 30;
omacron = -100;
racute = -80;
umacron = -90;
};
uni0218 = {
imacron = 31;
itilde = 20;
};
uni021A = {
amacron = -90;
emacron = -90;
ibreve = 25;
icircumflex = 20;
imacron = 65;
itilde = 30;
omacron = -100;
racute = -80;
umacron = -90;
};
uni02B9 = {
J = -34;
backslash = 20;
imacron = 100;
itilde = 60;
};
uni02BA = {
J = -34;
backslash = 20;
imacron = 100;
itilde = 60;
};
uni1EBC = {
ibreve = 29;
imacron = 51;
itilde = 33;
v = -19;
};
uni1EF8 = {
ibreve = 20;
icircumflex = 10;
imacron = 60;
itilde = 20;
};
v = {
comma = -40;
f = 20;
lslash = 5;
questiondown = -26;
};
z = {
imacron = 40;
};
zacute = {
imacron = 40;
};
zcaron = {
imacron = 40;
};
zdotaccent = {
imacron = 40;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2022 The Rethink Sans Project Authors (https://github.com/hans-thiessen/Rethink-Sans)";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "The Rethink Sans project authors (Hans Thiessen). DM Sans designed by Colophon Foundry.";
}
);
},
{
key = designerURL;
value = "https://www.hansthiessen.com/";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://scripts.sil.org/OFL";
}
);
},
{
key = licenseURL;
value = "https://scripts.sil.org/OFL";
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Rethink Communications LLC";
}
);
},
{
key = manufacturerURL;
value = "https://rethinkideas.com/";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 1;
}
