{
.appVersion = "3343";
.formatVersion = 3;
customParameters = (
{
name = panose;
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
4,
5,
6,
7,
9,
29,
31,
32,
33,
35,
36,
37,
38,
42,
45,
47,
60,
62
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
CR,
space,
A,
Aacute,
Abreve,
uni01CD,
Acircumflex,
Adieresis,
Agrave,
Amacron,
Aogonek,
Aring,
Atilde,
AE,
AEacute,
B,
C,
Cacute,
Ccaron,
Ccedilla,
Cdotaccent,
D,
Dcaron,
Dcroat,
Eth,
E,
Eacute,
Ebreve,
Ecaron,
Ecircumflex,
Edieresis,
Edotaccent,
Egrave,
Emacron,
Eogonek,
uni018E,
uni1EBC,
uni018F,
F,
G,
Gbreve,
uni0122,
Gdotaccent,
H,
Hbar,
I,
IJ,
Iacute,
Ibreve,
Icircumflex,
Idieresis,
Idotaccent,
Igrave,
Imacron,
Iogonek,
Itilde,
J,
uni004A0301,
K,
uni0136,
L,
Lacute,
Lcaron,
uni013B,
Ldot,
Lslash,
M,
N,
Nacute,
Ncaron,
uni0145,
Ntilde,
Eng,
O,
Oacute,
Obreve,
Ocircumflex,
Odieresis,
Ograve,
Ohungarumlaut,
Omacron,
Oslash,
Otilde,
OE,
P,
Thorn,
Q,
R,
Racute,
Rcaron,
uni0156,
S,
Sacute,
Scaron,
Scedilla,
uni0218,
uni1E9E,
T,
Tcaron,
uni0162,
uni021A,
U,
Uacute,
Ubreve,
Ucircumflex,
Udieresis,
Ugrave,
Uhungarumlaut,
Umacron,
Uogonek,
Uring,
Utilde,
V,
W,
Wacute,
Wcircumflex,
Wdieresis,
Wgrave,
X,
Y,
Yacute,
Ycircumflex,
Ydieresis,
Ygrave,
uni1EF8,
Z,
Zacute,
Zcaron,
Zdotaccent,
uniA78B,
a,
aacute,
abreve,
uni01CE,
acircumflex,
adieresis,
agrave,
amacron,
aogonek,
aring,
atilde,
ae,
aeacute,
b,
c,
cacute,
ccaron,
ccedilla,
cdotaccent,
d,
dcaron,
dcroat,
eth,
e,
eacute,
ebreve,
ecaron,
ecircumflex,
edieresis,
edotaccent,
egrave,
emacron,
eogonek,
uni1EBD,
uni0259,
f,
g,
gbreve,
uni0123,
gdotaccent,
h,
hbar,
i,
dotlessi,
iacute,
ibreve,
icircumflex,
idieresis,
i.loclTRK,
igrave,
imacron,
iogonek,
itilde,
ij,
j,
uni0237,
uni006A0301,
k,
uni0137,
l,
lacute,
lcaron,
uni013C,
ldot,
lslash,
m,
n,
nacute,
ncaron,
uni0146,
ntilde,
eng,
o,
oacute,
obreve,
ocircumflex,
odieresis,
ograve,
ohungarumlaut,
omacron,
oslash,
otilde,
oe,
p,
thorn,
q,
r,
racute,
rcaron,
uni0157,
s,
sacute,
scaron,
scedilla,
uni0219,
germandbls,
t,
tcaron,
uni0163,
uni021B,
u,
uacute,
ubreve,
ucircumflex,
udieresis,
ugrave,
uhungarumlaut,
umacron,
uogonek,
uring,
utilde,
v,
w,
wacute,
wcircumflex,
wdieresis,
wgrave,
x,
y,
yacute,
ycircumflex,
ydieresis,
ygrave,
uni1EF9,
z,
zacute,
zcaron,
zdotaccent,
uniA78C,
fi,
fl,
ordfeminine,
ordmasculine,
uni042F,
uni0394,
Pi,
uni03A9,
uni03BC,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
uni24EA,
uni2780,
uni2781,
uni2782,
uni2783,
uni2784,
uni2785,
uni2786,
uni2787,
uni2788,
uni278A,
uni278B,
uni278C,
uni278D,
uni278E,
uni278F,
uni2790,
uni2791,
uni2792,
uni24EA.solid,
zero.dnom,
one.dnom,
two.dnom,
three.dnom,
four.dnom,
five.dnom,
six.dnom,
seven.dnom,
eight.dnom,
nine.dnom,
zero.numr,
one.numr,
two.numr,
three.numr,
four.numr,
five.numr,
six.numr,
seven.numr,
eight.numr,
nine.numr,
fraction,
onehalf,
onequarter,
threequarters,
oneeighth,
threeeighths,
fiveeighths,
seveneighths,
uni2080,
uni2081,
uni2082,
uni2083,
uni2084,
uni2085,
uni2086,
uni2087,
uni2088,
uni2089,
uni2070,
uni00B9,
uni00B2,
uni00B3,
uni2074,
uni2075,
uni2076,
uni2077,
uni2078,
uni2079,
uni00A0,
period,
comma,
colon,
semicolon,
ellipsis,
exclam,
exclamdown,
question,
questiondown,
periodcentered,
bullet,
asterisk,
numbersign,
slash,
backslash,
periodcentered.loclCAT,
periodcentered.loclCAT.case,
hyphen,
endash,
emdash,
underscore,
parenleft,
parenright,
braceleft,
braceright,
bracketleft,
bracketright,
quotesinglbase,
quotedblbase,
quotedblleft,
quotedblright,
quoteleft,
quoteright,
guillemotleft,
guillemotright,
guilsinglleft,
guilsinglright,
quotedbl,
quotesingle,
florin,
at,
ampersand,
paragraph,
section,
copyright,
registered,
trademark,
degree,
bar,
brokenbar,
dagger,
uni2113,
daggerdbl,
estimated,
at.case,
registered.case,
uni20BF,
cent,
currency,
dollar,
Euro,
uni20BD,
uni20A8,
sterling,
yen,
cent.001,
uni2215,
plus,
minus,
multiply,
divide,
equal,
notequal,
greater,
less,
greaterequal,
lessequal,
plusminus,
approxequal,
asciitilde,
logicalnot,
asciicircum,
infinity,
integral,
uni2126,
uni2206,
product,
summation,
radical,
uni00B5,
partialdiff,
percent,
perthousand,
plus.case,
arrowup,
arrowright,
arrowdown,
arrowleft,
lozenge,
uni0308,
uni0307,
gravecomb,
acutecomb,
uni030B,
uni030C.alt,
uni0302,
uni030C,
uni0306,
uni030A,
tildecomb,
uni0304,
uni0312,
uni0326,
uni0327,
uni0328,
uni0308.case,
uni0307.case,
gravecomb.case,
acutecomb.case,
uni030B.case,
uni030C.alt.case,
uni0302.case,
uni030C.case,
uni0306.case,
uni030A.case,
tildecomb.case,
uni0304.case,
uni0327.case,
uni0328.case,
uni0308.narrow,
dieresis,
dotaccent,
grave,
acute,
hungarumlaut,
circumflex,
caron,
breve,
ring,
tilde,
macron,
cedilla,
ogonek,
uni02BA,
uni02B9,
uniE000,
uniE001,
uniE002,
uniE003,
uniE004,
uniE005,
REbackwards,
RethinkWordmark,
Rlogobig
);
}
);
date = "2021-03-04 17:58:23 +0000";
familyName = "Kolbi Sans";
featurePrefixes = (
{
code = "lookup SUB_19 {
	sub i by dotlessi;
	sub j by uni0237;
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_19;
lookup SUB_20 {
	sub iogonek by dotlessi uni0328;
} SUB_20;
lookup SUB_21 {
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_21;
lookup SUB_22 {
	sub periodcentered by periodcentered.loclCAT;
} SUB_22;
lookup SUB_23 {
	sub J by uni004A0301;
	sub j by uni006A0301;
	sub periodcentered by periodcentered.loclCAT.case;
} SUB_23;
lookup SUB_24 {
	sub zero.numr by zero.dnom;
	sub one.numr by one.dnom;
	sub two.numr by two.dnom;
	sub three.numr by three.dnom;
	sub four.numr by four.dnom;
	sub five.numr by five.dnom;
	sub six.numr by six.dnom;
	sub seven.numr by seven.dnom;
	sub eight.numr by eight.dnom;
	sub nine.numr by nine.dnom;
} SUB_24;
lookup SUB_25 {
	sub A by ordfeminine;
	sub O by ordmasculine;
	sub a by ordfeminine;
	sub o by ordmasculine;
} SUB_25;
";
name = Prefix;
}
);
features = (
{
automatic = 1;
code = "";
tag = aalt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_1 {
	@SUB_1_0_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub [i j]' lookup SUB_19 @SUB_1_0_LA_0;
	@SUB_1_1_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub [i j]' lookup SUB_19 [uni0327 uni0328] @SUB_1_1_LA_0;
	@SUB_1_2_BT_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	@SUB_1_2_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_1_2_BT_0 @SUB_1_2_1' lookup SUB_19;
	@SUB_1_3_BT_0 = [A Aacute Abreve uni01CD Acircumflex Adieresis Agrave Amacron Aogonek Aring Atilde AE AEacute B C Cacute Ccaron Ccedilla Cdotaccent D Dcaron Dcroat Eth E Eacute Ebreve Ecaron Ecircumflex Edieresis Edotaccent Egrave Emacron Eogonek uni018E uni1EBC uni018F F G Gbreve uni0122 Gdotaccent H Hbar I IJ Iacute Ibreve Icircumflex Idieresis Idotaccent Igrave Imacron Iogonek Itilde J uni004A0301 K uni0136 L Lacute Lcaron uni013B Ldot Lslash M N Nacute Ncaron uni0145 Ntilde Eng O Oacute Obreve Ocircumflex Odieresis Ograve Ohungarumlaut Omacron Oslash Otilde OE P Thorn Q R Racute Rcaron uni0156 S Sacute Scaron Scedilla uni0218 uni1E9E T Tcaron uni0162 uni021A U Uacute Ubreve Ucircumflex Udieresis Ugrave Uhungarumlaut Umacron Uogonek Uring Utilde V W Wacute Wcircumflex Wdieresis Wgrave X Y Yacute Ycircumflex Ydieresis Ygrave uni1EF8 Z Zacute Zcaron Zdotaccent uniA78B uni042F uni0394 Pi uni03A9];
	@SUB_1_3_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_1_3_BT_0 @SUB_1_3_1' lookup SUB_19;
	@SUB_1_4_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub iogonek' lookup SUB_20 @SUB_1_4_LA_0;
} SUB_1;
lookup SUB_2 {
	@SUB_2_0_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	@SUB_2_0_LA_1 = [uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni030C.alt.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0327.case uni0328.case];
	sub @SUB_2_0_0' lookup SUB_21 @SUB_2_0_LA_1;
	@SUB_2_1_BT_0 = [uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni030C.alt.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0327.case uni0328.case];
	@SUB_2_1_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_2_1_BT_0 @SUB_2_1_1' lookup SUB_21;
} SUB_2;
lookup SUB_3 {
	sub Ldot by L periodcentered.loclCAT.case;
	sub fi by f i;
	sub fl by f l;
} SUB_3;
script latn;
language dflt;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language AZE;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language CAT;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language CRT;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language KAZ;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language MOL;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language NLD;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language ROM;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language TAT;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language TRK;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
";
tag = ccmp;
},
{
code = "script latn;
language AZE;
lookup SUB_4 {
	sub i by i.loclTRK;
} SUB_4;
language CRT;
lookup SUB_4;
language KAZ;
lookup SUB_4;
language TAT;
lookup SUB_4;
language TRK;
lookup SUB_4;
language MOL;
lookup SUB_5 {
	sub Scedilla by uni0218;
	sub uni0162 by uni021A;
	sub scedilla by uni0219;
	sub uni0163 by uni021B;
} SUB_5;
language ROM;
lookup SUB_5;
language CAT;
lookup SUB_6 {
	sub L periodcentered' lookup SUB_23 L;
	sub l periodcentered' lookup SUB_22 l;
} SUB_6;
language NLD;
lookup SUB_7 {
	sub Iacute J' lookup SUB_23;
	sub iacute j' lookup SUB_23;
} SUB_7;
";
tag = locl;
},
{
code = "script DFLT;
language dflt;
lookup SUB_8 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_8;
script latn;
language dflt;
lookup SUB_8;
language AZE;
lookup SUB_8;
language CAT;
lookup SUB_8;
language CRT;
lookup SUB_8;
language KAZ;
lookup SUB_8;
language MOL;
lookup SUB_8;
language NLD;
lookup SUB_8;
language ROM;
lookup SUB_8;
language TAT;
lookup SUB_8;
language TRK;
lookup SUB_8;
";
tag = subs;
},
{
code = "script DFLT;
language dflt;
lookup SUB_9 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_9;
script latn;
language dflt;
lookup SUB_9;
language AZE;
lookup SUB_9;
language CAT;
lookup SUB_9;
language CRT;
lookup SUB_9;
language KAZ;
lookup SUB_9;
language MOL;
lookup SUB_9;
language NLD;
lookup SUB_9;
language ROM;
lookup SUB_9;
language TAT;
lookup SUB_9;
language TRK;
lookup SUB_9;
";
tag = sinf;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	sub zero by uni2070;
	sub one by uni00B9;
	sub two by uni00B2;
	sub three by uni00B3;
	sub four by uni2074;
	sub five by uni2075;
	sub six by uni2076;
	sub seven by uni2077;
	sub eight by uni2078;
	sub nine by uni2079;
} SUB_10;
script latn;
language dflt;
lookup SUB_10;
language AZE;
lookup SUB_10;
language CAT;
lookup SUB_10;
language CRT;
lookup SUB_10;
language KAZ;
lookup SUB_10;
language MOL;
lookup SUB_10;
language NLD;
lookup SUB_10;
language ROM;
lookup SUB_10;
language TAT;
lookup SUB_10;
language TRK;
lookup SUB_10;
";
tag = sups;
},
{
code = "script DFLT;
language dflt;
lookup SUB_11 {
	sub zero by zero.numr;
	sub one by one.numr;
	sub two by two.numr;
	sub three by three.numr;
	sub four by four.numr;
	sub five by five.numr;
	sub six by six.numr;
	sub seven by seven.numr;
	sub eight by eight.numr;
	sub nine by nine.numr;
} SUB_11;
script latn;
language dflt;
lookup SUB_11;
language AZE;
lookup SUB_11;
language CAT;
lookup SUB_11;
language CRT;
lookup SUB_11;
language KAZ;
lookup SUB_11;
language MOL;
lookup SUB_11;
language NLD;
lookup SUB_11;
language ROM;
lookup SUB_11;
language TAT;
lookup SUB_11;
language TRK;
lookup SUB_11;
";
tag = numr;
},
{
code = "script DFLT;
language dflt;
lookup SUB_12 {
	sub zero by zero.dnom;
	sub one by one.dnom;
	sub two by two.dnom;
	sub three by three.dnom;
	sub four by four.dnom;
	sub five by five.dnom;
	sub six by six.dnom;
	sub seven by seven.dnom;
	sub eight by eight.dnom;
	sub nine by nine.dnom;
} SUB_12;
script latn;
language dflt;
lookup SUB_12;
language AZE;
lookup SUB_12;
language CAT;
lookup SUB_12;
language CRT;
lookup SUB_12;
language KAZ;
lookup SUB_12;
language MOL;
lookup SUB_12;
language NLD;
lookup SUB_12;
language ROM;
lookup SUB_12;
language TAT;
lookup SUB_12;
language TRK;
lookup SUB_12;
";
tag = dnom;
},
{
code = "script DFLT;
language dflt;
lookup SUB_13 {
	sub slash by fraction;
} SUB_13;
lookup SUB_14 {
	sub zero by zero.numr;
	sub one by one.numr;
	sub two by two.numr;
	sub three by three.numr;
	sub four by four.numr;
	sub five by five.numr;
	sub six by six.numr;
	sub seven by seven.numr;
	sub eight by eight.numr;
	sub nine by nine.numr;
} SUB_14;
lookup SUB_15 {
	@SUB_15_0_0 = [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
	sub fraction @SUB_15_0_0' lookup SUB_24;
	@SUB_15_1_BT_0 = [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];
	@SUB_15_1_1 = [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
	sub @SUB_15_1_BT_0 @SUB_15_1_1' lookup SUB_24;
} SUB_15;
script latn;
language dflt;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language AZE;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language CAT;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language CRT;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language KAZ;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language MOL;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language NLD;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language ROM;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language TAT;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language TRK;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
";
tag = frac;
},
{
code = "script DFLT;
language dflt;
lookup SUB_16 {
	lookupflag IgnoreMarks;
	sub E less by uni018E;
	sub R E less by REbackwards;
	sub R less E by REbackwards;
	sub R greater by RethinkWordmark;
	sub R less by uni042F;
	sub f i by fi;
	sub f l by fl;
	sub hyphen hyphen hyphen greater by arrowdown;
	sub hyphen hyphen greater by arrowright;
	sub parenleft R parenright by Rlogobig;
	sub parenleft zero parenright by uni24EA;
	sub parenleft one parenright by uni2780;
	sub parenleft two parenright by uni2781;
	sub parenleft three parenright by uni2782;
	sub parenleft four parenright by uni2783;
	sub parenleft five parenright by uni2784;
	sub parenleft six parenright by uni2785;
	sub parenleft seven parenright by uni2786;
	sub parenleft eight parenright by uni2787;
	sub parenleft nine parenright by uni2788;
	sub braceleft zero braceright by uni24EA.solid;
	sub braceleft one braceright by uni278A;
	sub braceleft two braceright by uni278B;
	sub braceleft three braceright by uni278C;
	sub braceleft four braceright by uni278D;
	sub braceleft five braceright by uni278E;
	sub braceleft six braceright by uni278F;
	sub braceleft seven braceright by uni2790;
	sub braceleft eight braceright by uni2791;
	sub braceleft nine braceright by uni2792;
	sub registered plus by registered.case;
	sub less hyphen hyphen hyphen by arrowup;
	sub less hyphen hyphen by arrowleft;
} SUB_16;
script latn;
language dflt;
lookup SUB_16;
language AZE;
lookup SUB_16;
language CAT;
lookup SUB_16;
language CRT;
lookup SUB_16;
language KAZ;
lookup SUB_16;
language MOL;
lookup SUB_16;
language NLD;
lookup SUB_16;
language ROM;
lookup SUB_16;
language TAT;
lookup SUB_16;
language TRK;
lookup SUB_16;
";
tag = liga;
},
{
code = "script DFLT;
language dflt;
lookup SUB_17 {
	@SUB_17_0_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_17_0_BT_0 [A a]' lookup SUB_25;
	@SUB_17_1_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_17_1_BT_0 [O o]' lookup SUB_25;
} SUB_17;
script latn;
language dflt;
lookup SUB_17;
language AZE;
lookup SUB_17;
language CAT;
lookup SUB_17;
language CRT;
lookup SUB_17;
language KAZ;
lookup SUB_17;
language MOL;
lookup SUB_17;
language NLD;
lookup SUB_17;
language ROM;
lookup SUB_17;
language TAT;
lookup SUB_17;
language TRK;
lookup SUB_17;
";
tag = ordn;
},
{
code = "script DFLT;
language dflt;
lookup SUB_18 {
	sub periodcentered.loclCAT by periodcentered.loclCAT.case;
	sub at by at.case;
	sub registered by registered.case;
	sub plus by plus.case;
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_18;
script latn;
language dflt;
lookup SUB_18;
language AZE;
lookup SUB_18;
language CAT;
lookup SUB_18;
language CRT;
lookup SUB_18;
language KAZ;
lookup SUB_18;
language MOL;
lookup SUB_18;
language NLD;
lookup SUB_18;
language ROM;
lookup SUB_18;
language TAT;
lookup SUB_18;
language TRK;
lookup SUB_18;
";
tag = case;
},
{
code = "script DFLT;
language dflt;
lookup POS_2 {
	markClass uni0326 <anchor 56 0> @POS_2_0_MARK_0;
	markClass uni0327 <anchor 84 0> @POS_2_0_MARK_0;
	markClass uni0327.case <anchor 82 0> @POS_2_0_MARK_0;
	markClass uni0308 <anchor 171 496> @POS_2_0_MARK_1;
	markClass uni0307 <anchor 71 496> @POS_2_0_MARK_1;
	markClass gravecomb <anchor 109 496> @POS_2_0_MARK_1;
	markClass acutecomb <anchor 109 496> @POS_2_0_MARK_1;
	markClass uni030B <anchor 132 496> @POS_2_0_MARK_1;
	markClass uni0302 <anchor 142 496> @POS_2_0_MARK_1;
	markClass uni030C <anchor 142 496> @POS_2_0_MARK_1;
	markClass uni0306 <anchor 149 496> @POS_2_0_MARK_1;
	markClass uni030A <anchor 110 496> @POS_2_0_MARK_1;
	markClass tildecomb <anchor 164 496> @POS_2_0_MARK_1;
	markClass uni0304 <anchor 176 496> @POS_2_0_MARK_1;
	markClass uni0312 <anchor 58 496> @POS_2_0_MARK_1;
	markClass uni0308.case <anchor 171 700> @POS_2_0_MARK_1;
	markClass uni0307.case <anchor 71 700> @POS_2_0_MARK_1;
	markClass gravecomb.case <anchor 109 700> @POS_2_0_MARK_1;
	markClass acutecomb.case <anchor 109 700> @POS_2_0_MARK_1;
	markClass uni030B.case <anchor 162 700> @POS_2_0_MARK_1;
	markClass uni0302.case <anchor 142 700> @POS_2_0_MARK_1;
	markClass uni030C.case <anchor 142 700> @POS_2_0_MARK_1;
	markClass uni0306.case <anchor 149 700> @POS_2_0_MARK_1;
	markClass uni030A.case <anchor 110 700> @POS_2_0_MARK_1;
	markClass tildecomb.case <anchor 164 700> @POS_2_0_MARK_1;
	markClass uni0304.case <anchor 176 700> @POS_2_0_MARK_1;
	markClass uni0308.narrow <anchor 171 496> @POS_2_0_MARK_1;
	pos base cent <anchor 380 6> mark @POS_2_0_MARK_0 <anchor 379 694> mark @POS_2_0_MARK_1;
	pos base uni20A8 <anchor 826 0> mark @POS_2_0_MARK_0 <anchor 819 496> mark @POS_2_0_MARK_1;
} POS_2;
lookup POS_3 {
	markClass uni0326 <anchor 56 0> @POS_3_0_MARK_0;
	markClass uni0327 <anchor 84 0> @POS_3_0_MARK_0;
	markClass uni0327.case <anchor 82 0> @POS_3_0_MARK_0;
	markClass uni0308 <anchor 171 496> @POS_3_0_MARK_1;
	markClass uni0307 <anchor 71 496> @POS_3_0_MARK_1;
	markClass gravecomb <anchor 109 496> @POS_3_0_MARK_1;
	markClass acutecomb <anchor 109 496> @POS_3_0_MARK_1;
	markClass uni030B <anchor 132 496> @POS_3_0_MARK_1;
	markClass uni0302 <anchor 142 496> @POS_3_0_MARK_1;
	markClass uni030C <anchor 142 496> @POS_3_0_MARK_1;
	markClass uni0306 <anchor 149 496> @POS_3_0_MARK_1;
	markClass uni030A <anchor 110 496> @POS_3_0_MARK_1;
	markClass tildecomb <anchor 164 496> @POS_3_0_MARK_1;
	markClass uni0304 <anchor 176 496> @POS_3_0_MARK_1;
	markClass uni0312 <anchor 58 496> @POS_3_0_MARK_1;
	markClass uni0308.case <anchor 171 700> @POS_3_0_MARK_1;
	markClass uni0307.case <anchor 71 700> @POS_3_0_MARK_1;
	markClass gravecomb.case <anchor 109 700> @POS_3_0_MARK_1;
	markClass acutecomb.case <anchor 109 700> @POS_3_0_MARK_1;
	markClass uni030B.case <anchor 162 700> @POS_3_0_MARK_1;
	markClass uni0302.case <anchor 142 700> @POS_3_0_MARK_1;
	markClass uni030C.case <anchor 142 700> @POS_3_0_MARK_1;
	markClass uni0306.case <anchor 149 700> @POS_3_0_MARK_1;
	markClass uni030A.case <anchor 110 700> @POS_3_0_MARK_1;
	markClass tildecomb.case <anchor 164 700> @POS_3_0_MARK_1;
	markClass uni0304.case <anchor 176 700> @POS_3_0_MARK_1;
	markClass uni0308.narrow <anchor 171 496> @POS_3_0_MARK_1;
	pos base A <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 700> mark @POS_3_0_MARK_1;
	pos base Aacute <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 942> mark @POS_3_0_MARK_1;
	pos base Abreve <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 909> mark @POS_3_0_MARK_1;
	pos base uni01CD <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 910> mark @POS_3_0_MARK_1;
	pos base Acircumflex <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 911> mark @POS_3_0_MARK_1;
	pos base Adieresis <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 912> mark @POS_3_0_MARK_1;
	pos base Agrave <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 942> mark @POS_3_0_MARK_1;
	pos base Amacron <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 867> mark @POS_3_0_MARK_1;
	pos base Aogonek <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 700> mark @POS_3_0_MARK_1;
	pos base Aring <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 971> mark @POS_3_0_MARK_1;
	pos base Atilde <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 868> mark @POS_3_0_MARK_1;
	pos base AE <anchor 461 0> mark @POS_3_0_MARK_0 <anchor 536 700> mark @POS_3_0_MARK_1;
	pos base AEacute <anchor 461 0> mark @POS_3_0_MARK_0 <anchor 536 942> mark @POS_3_0_MARK_1;
	pos base C <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 380 700> mark @POS_3_0_MARK_1;
	pos base Cacute <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 380 942> mark @POS_3_0_MARK_1;
	pos base Ccaron <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 380 910> mark @POS_3_0_MARK_1;
	pos base Ccedilla <anchor 381 -261> mark @POS_3_0_MARK_0 <anchor 380 700> mark @POS_3_0_MARK_1;
	pos base Cdotaccent <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 380 912> mark @POS_3_0_MARK_1;
	pos base D <anchor 344 0> mark @POS_3_0_MARK_0 <anchor 344 700> mark @POS_3_0_MARK_1;
	pos base Dcaron <anchor 344 0> mark @POS_3_0_MARK_0 <anchor 344 910> mark @POS_3_0_MARK_1;
	pos base E <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 700> mark @POS_3_0_MARK_1;
	pos base Eacute <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 942> mark @POS_3_0_MARK_1;
	pos base Ebreve <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 909> mark @POS_3_0_MARK_1;
	pos base Ecaron <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 910> mark @POS_3_0_MARK_1;
	pos base Ecircumflex <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 911> mark @POS_3_0_MARK_1;
	pos base Edieresis <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 912> mark @POS_3_0_MARK_1;
	pos base Edotaccent <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 912> mark @POS_3_0_MARK_1;
	pos base Egrave <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 942> mark @POS_3_0_MARK_1;
	pos base Emacron <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 867> mark @POS_3_0_MARK_1;
	pos base Eogonek <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 700> mark @POS_3_0_MARK_1;
	pos base uni1EBC <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 868> mark @POS_3_0_MARK_1;
	pos base G <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 381 700> mark @POS_3_0_MARK_1;
	pos base Gbreve <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 381 909> mark @POS_3_0_MARK_1;
	pos base uni0122 <anchor 381 -256> mark @POS_3_0_MARK_0 <anchor 381 700> mark @POS_3_0_MARK_1;
	pos base Gdotaccent <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 381 912> mark @POS_3_0_MARK_1;
	pos base I <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 700> mark @POS_3_0_MARK_1;
	pos base IJ <anchor 500 0> mark @POS_3_0_MARK_0 <anchor 635 700> mark @POS_3_0_MARK_1;
	pos base Iacute <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 942> mark @POS_3_0_MARK_1;
	pos base Ibreve <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 909> mark @POS_3_0_MARK_1;
	pos base Icircumflex <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 911> mark @POS_3_0_MARK_1;
	pos base Idieresis <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 912> mark @POS_3_0_MARK_1;
	pos base Idotaccent <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 912> mark @POS_3_0_MARK_1;
	pos base Igrave <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 942> mark @POS_3_0_MARK_1;
	pos base Imacron <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 867> mark @POS_3_0_MARK_1;
	pos base Iogonek <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 700> mark @POS_3_0_MARK_1;
	pos base Itilde <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 868> mark @POS_3_0_MARK_1;
	pos base J <anchor 256 0> mark @POS_3_0_MARK_0 <anchor 391 700> mark @POS_3_0_MARK_1;
	pos base uni004A0301 <anchor 256 0> mark @POS_3_0_MARK_0 <anchor 391 942> mark @POS_3_0_MARK_1;
	pos base K <anchor 302 0> mark @POS_3_0_MARK_0 <anchor 302 700> mark @POS_3_0_MARK_1;
	pos base uni0136 <anchor 303 -256> mark @POS_3_0_MARK_0 <anchor 302 700> mark @POS_3_0_MARK_1;
	pos base L <anchor 266 0> mark @POS_3_0_MARK_0 <anchor 177 700> mark @POS_3_0_MARK_1;
	pos base Lacute <anchor 266 0> mark @POS_3_0_MARK_0 <anchor 177 942> mark @POS_3_0_MARK_1;
	pos base Lcaron <anchor 266 0> mark @POS_3_0_MARK_0 <anchor 177 700> mark @POS_3_0_MARK_1;
	pos base uni013B <anchor 266 -256> mark @POS_3_0_MARK_0 <anchor 177 700> mark @POS_3_0_MARK_1;
	pos base N <anchor 351 0> mark @POS_3_0_MARK_0 <anchor 351 700> mark @POS_3_0_MARK_1;
	pos base Nacute <anchor 351 0> mark @POS_3_0_MARK_0 <anchor 351 942> mark @POS_3_0_MARK_1;
	pos base Ncaron <anchor 351 0> mark @POS_3_0_MARK_0 <anchor 351 910> mark @POS_3_0_MARK_1;
	pos base uni0145 <anchor 351 -256> mark @POS_3_0_MARK_0 <anchor 351 700> mark @POS_3_0_MARK_1;
	pos base Ntilde <anchor 351 0> mark @POS_3_0_MARK_0 <anchor 351 868> mark @POS_3_0_MARK_1;
	pos base O <anchor 396 0> mark @POS_3_0_MARK_0 <anchor 396 700> mark @POS_3_0_MARK_1;
	pos base Oacute <anchor 396 0> mark @POS_3_0_MARK_0 <anchor 396 942> mark @POS_3_0_MARK_1;
	pos base Obreve <anchor 396 0> mark @POS_3_0_MARK_0 <anchor 396 909> mark @POS_3_0_MARK_1;
	pos base Ocircumflex <anchor 396 0> mark @POS_3_0_MARK_0 <anchor 396 911> mark @POS_3_0_MARK_1;
	pos base Odieresis <anchor 396 0> mark @POS_3_0_MARK_0 <anchor 396 912> mark @POS_3_0_MARK_1;
	pos base Ograve <anchor 396 0> mark @POS_3_0_MARK_0 <anchor 396 942> mark @POS_3_0_MARK_1;
	pos base Ohungarumlaut <anchor 396 0> mark @POS_3_0_MARK_0 <anchor 396 915> mark @POS_3_0_MARK_1;
	pos base Omacron <anchor 396 0> mark @POS_3_0_MARK_0 <anchor 396 867> mark @POS_3_0_MARK_1;
	pos base Otilde <anchor 396 0> mark @POS_3_0_MARK_0 <anchor 396 868> mark @POS_3_0_MARK_1;
	pos base R <anchor 307 0> mark @POS_3_0_MARK_0 <anchor 294 700> mark @POS_3_0_MARK_1;
	pos base Racute <anchor 307 0> mark @POS_3_0_MARK_0 <anchor 294 942> mark @POS_3_0_MARK_1;
	pos base Rcaron <anchor 307 0> mark @POS_3_0_MARK_0 <anchor 294 910> mark @POS_3_0_MARK_1;
	pos base uni0156 <anchor 307 -256> mark @POS_3_0_MARK_0 <anchor 294 700> mark @POS_3_0_MARK_1;
	pos base S <anchor 292 0> mark @POS_3_0_MARK_0 <anchor 292 700> mark @POS_3_0_MARK_1;
	pos base Sacute <anchor 292 0> mark @POS_3_0_MARK_0 <anchor 292 942> mark @POS_3_0_MARK_1;
	pos base Scaron <anchor 292 0> mark @POS_3_0_MARK_0 <anchor 292 910> mark @POS_3_0_MARK_1;
	pos base Scedilla <anchor 292 -261> mark @POS_3_0_MARK_0 <anchor 292 700> mark @POS_3_0_MARK_1;
	pos base uni0218 <anchor 292 -256> mark @POS_3_0_MARK_0 <anchor 292 700> mark @POS_3_0_MARK_1;
	pos base T <anchor 286 0> mark @POS_3_0_MARK_0 <anchor 286 700> mark @POS_3_0_MARK_1;
	pos base Tcaron <anchor 286 0> mark @POS_3_0_MARK_0 <anchor 286 910> mark @POS_3_0_MARK_1;
	pos base uni0162 <anchor 286 -261> mark @POS_3_0_MARK_0 <anchor 286 700> mark @POS_3_0_MARK_1;
	pos base uni021A <anchor 286 -256> mark @POS_3_0_MARK_0 <anchor 286 700> mark @POS_3_0_MARK_1;
	pos base U <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 700> mark @POS_3_0_MARK_1;
	pos base Uacute <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 942> mark @POS_3_0_MARK_1;
	pos base Ubreve <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 909> mark @POS_3_0_MARK_1;
	pos base Ucircumflex <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 911> mark @POS_3_0_MARK_1;
	pos base Udieresis <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 912> mark @POS_3_0_MARK_1;
	pos base Ugrave <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 942> mark @POS_3_0_MARK_1;
	pos base Uhungarumlaut <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 915> mark @POS_3_0_MARK_1;
	pos base Umacron <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 867> mark @POS_3_0_MARK_1;
	pos base Uogonek <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 700> mark @POS_3_0_MARK_1;
	pos base Uring <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 971> mark @POS_3_0_MARK_1;
	pos base Utilde <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 868> mark @POS_3_0_MARK_1;
	pos base W <anchor 506 0> mark @POS_3_0_MARK_0 <anchor 506 700> mark @POS_3_0_MARK_1;
	pos base Wacute <anchor 506 0> mark @POS_3_0_MARK_0 <anchor 506 942> mark @POS_3_0_MARK_1;
	pos base Wcircumflex <anchor 506 0> mark @POS_3_0_MARK_0 <anchor 506 911> mark @POS_3_0_MARK_1;
	pos base Wdieresis <anchor 506 0> mark @POS_3_0_MARK_0 <anchor 506 912> mark @POS_3_0_MARK_1;
	pos base Wgrave <anchor 506 0> mark @POS_3_0_MARK_0 <anchor 506 942> mark @POS_3_0_MARK_1;
	pos base Y <anchor 300 0> mark @POS_3_0_MARK_0 <anchor 300 700> mark @POS_3_0_MARK_1;
	pos base Yacute <anchor 300 0> mark @POS_3_0_MARK_0 <anchor 300 942> mark @POS_3_0_MARK_1;
	pos base Ycircumflex <anchor 300 0> mark @POS_3_0_MARK_0 <anchor 300 911> mark @POS_3_0_MARK_1;
	pos base Ydieresis <anchor 300 0> mark @POS_3_0_MARK_0 <anchor 300 912> mark @POS_3_0_MARK_1;
	pos base Ygrave <anchor 300 0> mark @POS_3_0_MARK_0 <anchor 300 942> mark @POS_3_0_MARK_1;
	pos base uni1EF8 <anchor 300 0> mark @POS_3_0_MARK_0 <anchor 300 868> mark @POS_3_0_MARK_1;
	pos base Z <anchor 274 0> mark @POS_3_0_MARK_0 <anchor 274 700> mark @POS_3_0_MARK_1;
	pos base Zacute <anchor 274 0> mark @POS_3_0_MARK_0 <anchor 274 942> mark @POS_3_0_MARK_1;
	pos base Zcaron <anchor 274 0> mark @POS_3_0_MARK_0 <anchor 274 910> mark @POS_3_0_MARK_1;
	pos base Zdotaccent <anchor 274 0> mark @POS_3_0_MARK_0 <anchor 274 912> mark @POS_3_0_MARK_1;
	pos base a <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 496> mark @POS_3_0_MARK_1;
	pos base aacute <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 749> mark @POS_3_0_MARK_1;
	pos base abreve <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 722> mark @POS_3_0_MARK_1;
	pos base uni01CE <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 730> mark @POS_3_0_MARK_1;
	pos base acircumflex <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 730> mark @POS_3_0_MARK_1;
	pos base adieresis <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 723> mark @POS_3_0_MARK_1;
	pos base agrave <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 749> mark @POS_3_0_MARK_1;
	pos base amacron <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 693> mark @POS_3_0_MARK_1;
	pos base aogonek <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 496> mark @POS_3_0_MARK_1;
	pos base aring <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 766> mark @POS_3_0_MARK_1;
	pos base atilde <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 705> mark @POS_3_0_MARK_1;
	pos base ae <anchor 454 0> mark @POS_3_0_MARK_0 <anchor 454 496> mark @POS_3_0_MARK_1;
	pos base aeacute <anchor 454 0> mark @POS_3_0_MARK_0 <anchor 454 749> mark @POS_3_0_MARK_1;
	pos base c <anchor 287 0> mark @POS_3_0_MARK_0 <anchor 285 496> mark @POS_3_0_MARK_1;
	pos base cacute <anchor 287 0> mark @POS_3_0_MARK_0 <anchor 285 749> mark @POS_3_0_MARK_1;
	pos base ccaron <anchor 287 0> mark @POS_3_0_MARK_0 <anchor 285 730> mark @POS_3_0_MARK_1;
	pos base ccedilla <anchor 287 -261> mark @POS_3_0_MARK_0 <anchor 285 496> mark @POS_3_0_MARK_1;
	pos base cdotaccent <anchor 287 0> mark @POS_3_0_MARK_0 <anchor 285 723> mark @POS_3_0_MARK_1;
	pos base d <anchor 307 0> mark @POS_3_0_MARK_0 <anchor 307 992> mark @POS_3_0_MARK_1;
	pos base dcaron <anchor 307 0> mark @POS_3_0_MARK_0 <anchor 307 992> mark @POS_3_0_MARK_1;
	pos base e <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 496> mark @POS_3_0_MARK_1;
	pos base eacute <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 749> mark @POS_3_0_MARK_1;
	pos base ebreve <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 722> mark @POS_3_0_MARK_1;
	pos base ecaron <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 730> mark @POS_3_0_MARK_1;
	pos base ecircumflex <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 730> mark @POS_3_0_MARK_1;
	pos base edieresis <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 723> mark @POS_3_0_MARK_1;
	pos base edotaccent <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 723> mark @POS_3_0_MARK_1;
	pos base egrave <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 749> mark @POS_3_0_MARK_1;
	pos base emacron <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 693> mark @POS_3_0_MARK_1;
	pos base eogonek <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 496> mark @POS_3_0_MARK_1;
	pos base uni1EBD <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 705> mark @POS_3_0_MARK_1;
	pos base g <anchor 264 -310> mark @POS_3_0_MARK_0 <anchor 254 496> mark @POS_3_0_MARK_1;
	pos base gbreve <anchor 264 -310> mark @POS_3_0_MARK_0 <anchor 254 722> mark @POS_3_0_MARK_1;
	pos base uni0123 <anchor 264 -310> mark @POS_3_0_MARK_0 <anchor 254 804> mark @POS_3_0_MARK_1;
	pos base gdotaccent <anchor 264 -310> mark @POS_3_0_MARK_0 <anchor 254 723> mark @POS_3_0_MARK_1;
	pos base i <anchor 117 0> mark @POS_3_0_MARK_0;
	pos base dotlessi <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 496> mark @POS_3_0_MARK_1;
	pos base iacute <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 749> mark @POS_3_0_MARK_1;
	pos base ibreve <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 722> mark @POS_3_0_MARK_1;
	pos base icircumflex <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 730> mark @POS_3_0_MARK_1;
	pos base idieresis <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 723> mark @POS_3_0_MARK_1;
	pos base i.loclTRK <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 723> mark @POS_3_0_MARK_1;
	pos base igrave <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 749> mark @POS_3_0_MARK_1;
	pos base imacron <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 693> mark @POS_3_0_MARK_1;
	pos base iogonek <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 723> mark @POS_3_0_MARK_1;
	pos base itilde <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 705> mark @POS_3_0_MARK_1;
	pos base ij <anchor 117 0> mark @POS_3_0_MARK_0;
	pos base uni0237 <anchor 118 -310> mark @POS_3_0_MARK_0 <anchor 118 496> mark @POS_3_0_MARK_1;
	pos base uni006A0301 <anchor 118 -310> mark @POS_3_0_MARK_0 <anchor 118 749> mark @POS_3_0_MARK_1;
	pos base k <anchor 257 0> mark @POS_3_0_MARK_0 <anchor 257 992> mark @POS_3_0_MARK_1;
	pos base uni0137 <anchor 257 -256> mark @POS_3_0_MARK_0 <anchor 257 992> mark @POS_3_0_MARK_1;
	pos base l <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 700> mark @POS_3_0_MARK_1;
	pos base lacute <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 953> mark @POS_3_0_MARK_1;
	pos base lcaron <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 700> mark @POS_3_0_MARK_1;
	pos base uni013C <anchor 111 -256> mark @POS_3_0_MARK_0 <anchor 111 700> mark @POS_3_0_MARK_1;
	pos base n <anchor 295 0> mark @POS_3_0_MARK_0 <anchor 296 496> mark @POS_3_0_MARK_1;
	pos base nacute <anchor 295 0> mark @POS_3_0_MARK_0 <anchor 296 749> mark @POS_3_0_MARK_1;
	pos base ncaron <anchor 295 0> mark @POS_3_0_MARK_0 <anchor 296 730> mark @POS_3_0_MARK_1;
	pos base uni0146 <anchor 295 -256> mark @POS_3_0_MARK_0 <anchor 296 496> mark @POS_3_0_MARK_1;
	pos base ntilde <anchor 295 0> mark @POS_3_0_MARK_0 <anchor 296 705> mark @POS_3_0_MARK_1;
	pos base o <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 297 496> mark @POS_3_0_MARK_1;
	pos base oacute <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 297 749> mark @POS_3_0_MARK_1;
	pos base obreve <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 297 722> mark @POS_3_0_MARK_1;
	pos base ocircumflex <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 297 730> mark @POS_3_0_MARK_1;
	pos base odieresis <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 297 723> mark @POS_3_0_MARK_1;
	pos base ograve <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 297 749> mark @POS_3_0_MARK_1;
	pos base ohungarumlaut <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 297 711> mark @POS_3_0_MARK_1;
	pos base omacron <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 297 693> mark @POS_3_0_MARK_1;
	pos base otilde <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 297 705> mark @POS_3_0_MARK_1;
	pos base r <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 177 496> mark @POS_3_0_MARK_1;
	pos base racute <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 177 749> mark @POS_3_0_MARK_1;
	pos base rcaron <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 177 730> mark @POS_3_0_MARK_1;
	pos base uni0157 <anchor 116 -256> mark @POS_3_0_MARK_0 <anchor 177 496> mark @POS_3_0_MARK_1;
	pos base s <anchor 251 0> mark @POS_3_0_MARK_0 <anchor 244 496> mark @POS_3_0_MARK_1;
	pos base sacute <anchor 251 0> mark @POS_3_0_MARK_0 <anchor 244 749> mark @POS_3_0_MARK_1;
	pos base scaron <anchor 251 0> mark @POS_3_0_MARK_0 <anchor 244 730> mark @POS_3_0_MARK_1;
	pos base scedilla <anchor 251 -261> mark @POS_3_0_MARK_0 <anchor 244 496> mark @POS_3_0_MARK_1;
	pos base uni0219 <anchor 251 -256> mark @POS_3_0_MARK_0 <anchor 244 496> mark @POS_3_0_MARK_1;
	pos base t <anchor 229 0> mark @POS_3_0_MARK_0 <anchor 185 496> mark @POS_3_0_MARK_1;
	pos base tcaron <anchor 229 0> mark @POS_3_0_MARK_0 <anchor 185 496> mark @POS_3_0_MARK_1;
	pos base uni0163 <anchor 229 -261> mark @POS_3_0_MARK_0 <anchor 185 496> mark @POS_3_0_MARK_1;
	pos base uni021B <anchor 229 -256> mark @POS_3_0_MARK_0 <anchor 185 496> mark @POS_3_0_MARK_1;
	pos base u <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 496> mark @POS_3_0_MARK_1;
	pos base uacute <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 749> mark @POS_3_0_MARK_1;
	pos base ubreve <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 722> mark @POS_3_0_MARK_1;
	pos base ucircumflex <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 730> mark @POS_3_0_MARK_1;
	pos base udieresis <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 723> mark @POS_3_0_MARK_1;
	pos base ugrave <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 749> mark @POS_3_0_MARK_1;
	pos base uhungarumlaut <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 711> mark @POS_3_0_MARK_1;
	pos base umacron <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 693> mark @POS_3_0_MARK_1;
	pos base uogonek <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 496> mark @POS_3_0_MARK_1;
	pos base uring <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 766> mark @POS_3_0_MARK_1;
	pos base utilde <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 705> mark @POS_3_0_MARK_1;
	pos base w <anchor 376 0> mark @POS_3_0_MARK_0 <anchor 376 496> mark @POS_3_0_MARK_1;
	pos base wacute <anchor 376 0> mark @POS_3_0_MARK_0 <anchor 376 749> mark @POS_3_0_MARK_1;
	pos base wcircumflex <anchor 376 0> mark @POS_3_0_MARK_0 <anchor 376 730> mark @POS_3_0_MARK_1;
	pos base wdieresis <anchor 376 0> mark @POS_3_0_MARK_0 <anchor 376 723> mark @POS_3_0_MARK_1;
	pos base wgrave <anchor 376 0> mark @POS_3_0_MARK_0 <anchor 376 749> mark @POS_3_0_MARK_1;
	pos base y <anchor 273 0> mark @POS_3_0_MARK_0 <anchor 273 496> mark @POS_3_0_MARK_1;
	pos base yacute <anchor 273 0> mark @POS_3_0_MARK_0 <anchor 273 749> mark @POS_3_0_MARK_1;
	pos base ycircumflex <anchor 273 0> mark @POS_3_0_MARK_0 <anchor 273 730> mark @POS_3_0_MARK_1;
	pos base ydieresis <anchor 273 0> mark @POS_3_0_MARK_0 <anchor 273 723> mark @POS_3_0_MARK_1;
	pos base ygrave <anchor 273 0> mark @POS_3_0_MARK_0 <anchor 273 749> mark @POS_3_0_MARK_1;
	pos base uni1EF9 <anchor 273 0> mark @POS_3_0_MARK_0 <anchor 273 705> mark @POS_3_0_MARK_1;
	pos base z <anchor 217 0> mark @POS_3_0_MARK_0 <anchor 217 496> mark @POS_3_0_MARK_1;
	pos base zacute <anchor 217 0> mark @POS_3_0_MARK_0 <anchor 217 749> mark @POS_3_0_MARK_1;
	pos base zcaron <anchor 217 0> mark @POS_3_0_MARK_0 <anchor 217 730> mark @POS_3_0_MARK_1;
	pos base zdotaccent <anchor 217 0> mark @POS_3_0_MARK_0 <anchor 217 723> mark @POS_3_0_MARK_1;
} POS_3;
lookup POS_4 {
	markClass uni0328 <anchor 203 0> @POS_4_0_MARK_0;
	markClass uni0328.case <anchor 203 0> @POS_4_0_MARK_0;
	pos base A <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base Aacute <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base Abreve <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base uni01CD <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base Acircumflex <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base Adieresis <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base Agrave <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base Amacron <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base Aogonek <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base Aring <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base Atilde <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base E <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base Eacute <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base Ebreve <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base Ecaron <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base Ecircumflex <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base Edieresis <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base Edotaccent <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base Egrave <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base Emacron <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base Eogonek <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base uni1EBC <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base I <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base IJ <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base Iacute <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base Ibreve <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base Icircumflex <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base Idieresis <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base Idotaccent <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base Igrave <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base Imacron <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base Iogonek <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base Itilde <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base O <anchor 474 10> mark @POS_4_0_MARK_0;
	pos base Oacute <anchor 474 10> mark @POS_4_0_MARK_0;
	pos base Obreve <anchor 474 10> mark @POS_4_0_MARK_0;
	pos base Ocircumflex <anchor 474 10> mark @POS_4_0_MARK_0;
	pos base Odieresis <anchor 474 10> mark @POS_4_0_MARK_0;
	pos base Ograve <anchor 474 10> mark @POS_4_0_MARK_0;
	pos base Ohungarumlaut <anchor 474 10> mark @POS_4_0_MARK_0;
	pos base Omacron <anchor 474 10> mark @POS_4_0_MARK_0;
	pos base Otilde <anchor 474 10> mark @POS_4_0_MARK_0;
	pos base U <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Uacute <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Ubreve <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Ucircumflex <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Udieresis <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Ugrave <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Uhungarumlaut <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Umacron <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Uogonek <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Uring <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Utilde <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base a <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base aacute <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base abreve <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base uni01CE <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base acircumflex <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base adieresis <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base agrave <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base amacron <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base aogonek <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base aring <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base atilde <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base e <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base eacute <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base ebreve <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base ecaron <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base ecircumflex <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base edieresis <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base edotaccent <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base egrave <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base emacron <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base eogonek <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base uni1EBD <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base dotlessi <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base iacute <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base ibreve <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base icircumflex <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base idieresis <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base i.loclTRK <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base igrave <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base imacron <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base iogonek <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base itilde <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base o <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base oacute <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base obreve <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base ocircumflex <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base odieresis <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base ograve <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base ohungarumlaut <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base omacron <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base otilde <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base u <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base uacute <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base ubreve <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base ucircumflex <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base udieresis <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base ugrave <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base uhungarumlaut <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base umacron <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base uogonek <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base uring <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base utilde <anchor 510 0> mark @POS_4_0_MARK_0;
} POS_4;
lookup POS_5 {
	markClass uni030C.alt <anchor 0 992> @POS_5_0_MARK_0;
	markClass uni030C.alt.case <anchor 2 700> @POS_5_0_MARK_0;
	pos base L <anchor 271 700> mark @POS_5_0_MARK_0;
	pos base Lacute <anchor 271 700> mark @POS_5_0_MARK_0;
	pos base Lcaron <anchor 271 700> mark @POS_5_0_MARK_0;
	pos base uni013B <anchor 271 700> mark @POS_5_0_MARK_0;
	pos base O <anchor 771 700> mark @POS_5_0_MARK_0;
	pos base Oacute <anchor 771 700> mark @POS_5_0_MARK_0;
	pos base Obreve <anchor 771 700> mark @POS_5_0_MARK_0;
	pos base Ocircumflex <anchor 771 700> mark @POS_5_0_MARK_0;
	pos base Odieresis <anchor 771 700> mark @POS_5_0_MARK_0;
	pos base Ograve <anchor 771 700> mark @POS_5_0_MARK_0;
	pos base Ohungarumlaut <anchor 771 700> mark @POS_5_0_MARK_0;
	pos base Omacron <anchor 771 700> mark @POS_5_0_MARK_0;
	pos base Otilde <anchor 771 700> mark @POS_5_0_MARK_0;
	pos base U <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Uacute <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Ubreve <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Ucircumflex <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Udieresis <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Ugrave <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Uhungarumlaut <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Umacron <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Uogonek <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Uring <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Utilde <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base d <anchor 593 992> mark @POS_5_0_MARK_0;
	pos base dcaron <anchor 593 992> mark @POS_5_0_MARK_0;
	pos base l <anchor 202 992> mark @POS_5_0_MARK_0;
	pos base lacute <anchor 202 992> mark @POS_5_0_MARK_0;
	pos base lcaron <anchor 202 992> mark @POS_5_0_MARK_0;
	pos base uni013C <anchor 202 992> mark @POS_5_0_MARK_0;
	pos base o <anchor 572 496> mark @POS_5_0_MARK_0;
	pos base oacute <anchor 572 496> mark @POS_5_0_MARK_0;
	pos base obreve <anchor 572 496> mark @POS_5_0_MARK_0;
	pos base ocircumflex <anchor 572 496> mark @POS_5_0_MARK_0;
	pos base odieresis <anchor 572 496> mark @POS_5_0_MARK_0;
	pos base ograve <anchor 572 496> mark @POS_5_0_MARK_0;
	pos base ohungarumlaut <anchor 572 496> mark @POS_5_0_MARK_0;
	pos base omacron <anchor 572 496> mark @POS_5_0_MARK_0;
	pos base otilde <anchor 572 496> mark @POS_5_0_MARK_0;
	pos base t <anchor 253 992> mark @POS_5_0_MARK_0;
	pos base tcaron <anchor 253 992> mark @POS_5_0_MARK_0;
	pos base uni0163 <anchor 253 992> mark @POS_5_0_MARK_0;
	pos base uni021B <anchor 253 992> mark @POS_5_0_MARK_0;
	pos base u <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base uacute <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base ubreve <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base ucircumflex <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base udieresis <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base ugrave <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base uhungarumlaut <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base umacron <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base uogonek <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base uring <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base utilde <anchor 547 496> mark @POS_5_0_MARK_0;
} POS_5;
script latn;
language dflt;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language AZE;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language CAT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language CRT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language KAZ;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language MOL;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language NLD;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language ROM;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language TAT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language TRK;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
";
tag = mark;
},
{
code = "script DFLT;
language dflt;
lookup POS_6 {
	lookupflag UseMarkFilteringSet [uni0326 uni0327 uni0327.case];
	markClass uni0326 <anchor 56 0> @POS_6_0_MARK_0;
	markClass uni0327 <anchor 84 0> @POS_6_0_MARK_0;
	markClass uni0327.case <anchor 82 0> @POS_6_0_MARK_0;
	pos mark uni0326 <anchor 56 -256> mark @POS_6_0_MARK_0;
	pos mark uni0327 <anchor 84 -261> mark @POS_6_0_MARK_0;
	pos mark uni0327.case <anchor 82 -261> mark @POS_6_0_MARK_0;
} POS_6;
lookup POS_7 {
	lookupflag UseMarkFilteringSet [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312 uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0308.narrow];
	markClass uni0308 <anchor 171 496> @POS_7_0_MARK_0;
	markClass uni0307 <anchor 71 496> @POS_7_0_MARK_0;
	markClass gravecomb <anchor 109 496> @POS_7_0_MARK_0;
	markClass acutecomb <anchor 109 496> @POS_7_0_MARK_0;
	markClass uni030B <anchor 132 496> @POS_7_0_MARK_0;
	markClass uni0302 <anchor 142 496> @POS_7_0_MARK_0;
	markClass uni030C <anchor 142 496> @POS_7_0_MARK_0;
	markClass uni0306 <anchor 149 496> @POS_7_0_MARK_0;
	markClass uni030A <anchor 110 496> @POS_7_0_MARK_0;
	markClass tildecomb <anchor 164 496> @POS_7_0_MARK_0;
	markClass uni0304 <anchor 176 496> @POS_7_0_MARK_0;
	markClass uni0312 <anchor 58 496> @POS_7_0_MARK_0;
	markClass uni0308.case <anchor 171 700> @POS_7_0_MARK_0;
	markClass uni0307.case <anchor 71 700> @POS_7_0_MARK_0;
	markClass gravecomb.case <anchor 109 700> @POS_7_0_MARK_0;
	markClass acutecomb.case <anchor 109 700> @POS_7_0_MARK_0;
	markClass uni030B.case <anchor 162 700> @POS_7_0_MARK_0;
	markClass uni0302.case <anchor 142 700> @POS_7_0_MARK_0;
	markClass uni030C.case <anchor 142 700> @POS_7_0_MARK_0;
	markClass uni0306.case <anchor 149 700> @POS_7_0_MARK_0;
	markClass uni030A.case <anchor 110 700> @POS_7_0_MARK_0;
	markClass tildecomb.case <anchor 164 700> @POS_7_0_MARK_0;
	markClass uni0304.case <anchor 176 700> @POS_7_0_MARK_0;
	markClass uni0308.narrow <anchor 171 496> @POS_7_0_MARK_0;
	pos mark uni0308 <anchor 171 723> mark @POS_7_0_MARK_0;
	pos mark uni0307 <anchor 71 723> mark @POS_7_0_MARK_0;
	pos mark gravecomb <anchor 109 749> mark @POS_7_0_MARK_0;
	pos mark acutecomb <anchor 109 749> mark @POS_7_0_MARK_0;
	pos mark uni030B <anchor 132 711> mark @POS_7_0_MARK_0;
	pos mark uni0302 <anchor 142 730> mark @POS_7_0_MARK_0;
	pos mark uni030C <anchor 142 730> mark @POS_7_0_MARK_0;
	pos mark uni0306 <anchor 149 722> mark @POS_7_0_MARK_0;
	pos mark uni030A <anchor 110 766> mark @POS_7_0_MARK_0;
	pos mark tildecomb <anchor 164 705> mark @POS_7_0_MARK_0;
	pos mark uni0304 <anchor 176 693> mark @POS_7_0_MARK_0;
	pos mark uni0312 <anchor 58 804> mark @POS_7_0_MARK_0;
	pos mark uni0308.case <anchor 171 912> mark @POS_7_0_MARK_0;
	pos mark uni0307.case <anchor 71 912> mark @POS_7_0_MARK_0;
	pos mark gravecomb.case <anchor 109 942> mark @POS_7_0_MARK_0;
	pos mark acutecomb.case <anchor 109 942> mark @POS_7_0_MARK_0;
	pos mark uni030B.case <anchor 162 915> mark @POS_7_0_MARK_0;
	pos mark uni0302.case <anchor 142 911> mark @POS_7_0_MARK_0;
	pos mark uni030C.case <anchor 142 910> mark @POS_7_0_MARK_0;
	pos mark uni0306.case <anchor 149 909> mark @POS_7_0_MARK_0;
	pos mark uni030A.case <anchor 110 971> mark @POS_7_0_MARK_0;
	pos mark tildecomb.case <anchor 164 868> mark @POS_7_0_MARK_0;
	pos mark uni0304.case <anchor 176 867> mark @POS_7_0_MARK_0;
	pos mark uni0308.narrow <anchor 171 723> mark @POS_7_0_MARK_0;
} POS_7;
script latn;
language dflt;
lookup POS_6;
lookup POS_7;
language AZE;
lookup POS_6;
lookup POS_7;
language CAT;
lookup POS_6;
lookup POS_7;
language CRT;
lookup POS_6;
lookup POS_7;
language KAZ;
lookup POS_6;
lookup POS_7;
language MOL;
lookup POS_6;
lookup POS_7;
language NLD;
lookup POS_6;
lookup POS_7;
language ROM;
lookup POS_6;
lookup POS_7;
language TAT;
lookup POS_6;
lookup POS_7;
language TRK;
lookup POS_6;
lookup POS_7;
";
tag = mkmk;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 992;
},
{
name = typoDescender;
value = -310;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 992;
},
{
name = winDescent;
value = 310;
},
{
name = hheaAscender;
value = 992;
},
{
name = hheaDescender;
value = -310;
},
{
name = strikeoutPosition;
value = 297;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
200
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 1
INSTCTRL[ ]	/* SetInstrExecControl */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
WCVTF[ ]	/* WriteCVTInFUnits */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 6 values pushed */
0 0 42 0 4 0
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
NPUSHB[ ]	/* 10 values pushed */
55 4 47 4 31 8 21 5 4 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
NPUSHB[ ]	/* 10 values pushed */
59 2 51 2 39 6 26 3 4 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 11
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 6 values pushed */
3584 3072 2048 1408 4 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 15
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 6 values pushed */
64 64 64 64 4 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
36 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
40 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 1 value pushed */
2048
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
39 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 3 values pushed */
2176 1 1088
GETINFO[ ]	/* GetInfo */
MUL[ ]	/* Multiply */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
57 2 49 2 33 6 23 3 4 14
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 1 value pushed */
511
SCANCTRL[ ]	/* ScanConversionControl */
PUSHB[ ]	/* 1 value pushed */
4
SCANTYPE[ ]	/* ScanType */
PUSHB[ ]	/* 2 values pushed */
2 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
5 100 6 0
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */
0
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
RCVT[ ]	/* ReadCVT */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
14
LTEQ[ ]	/* LessThenOrEqual */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
6
GTEQ[ ]	/* GreaterThanOrEqual */
AND[ ]	/* LogicalAnd */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
52
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
40
EIF[ ]	/* EndIf */
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
2
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 4 values pushed */
3 20 21 0
WS[ ]	/* WriteStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
19
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
2 20
RS[ ]	/* ReadStore */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
37 3
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
EQ[ ]	/* Equal */
JROT[ ]	/* JumpRelativeOnTrue */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
4
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 3 values pushed */
2 2 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
33
NEG[ ]	/* Negate */
JMPR[ ]	/* Jump */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 3 values pushed */
14 21 1
WS[ ]	/* WriteStore */
JMPR[ ]	/* Jump */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
19 1 19
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 3 values pushed */
22 1 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
4
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
21
RS[ ]	/* ReadStore */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
AND[ ]	/* LogicalAnd */
PUSHB[ ]	/* 3 values pushed */
40 1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
EIF[ ]	/* EndIf */
GT[ ]	/* GreaterThan */
OR[ ]	/* LogicalOr */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
ROLL[ ]	/* RollTopThreeStack */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
80
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
56
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
56
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
48
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
54
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
54
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
30
MPPEM[ ]	/* MeasurePixelPerEm */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 1 value pushed */
4096
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1280
DIV[ ]	/* Divide */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ABS[ ]	/* Absolute */
SUB[ ]	/* Subtract */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
7
RS[ ]	/* ReadStore */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
7
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
6
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 2 values pushed */
7 98
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
5
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
48 5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
ADD[ ]	/* Add */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
SUB[ ]	/* Subtract */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
EIF[ ]	/* EndIf */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 3 values pushed */
0 2 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
7
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
9 14 0
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
11
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
12
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
13
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
36
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
14
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 4 values pushed */
13 12 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
15
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 2
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
100
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
16
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
17
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHW[ ]	/* 1 value pushed */
1024
MUL[ ]	/* Multiply */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
18
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
13
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
19
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
MPPEM[ ]	/* MeasurePixelPerEm */
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
19
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 18
RS[ ]	/* ReadStore */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
18 18
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
17
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
15 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
16 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
0 0
SZP0[ ]	/* SetZonePointer0 */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
0
MIAP[0]	/* MoveIndirectAbsPt */
PUSHB[ ]	/* 3 values pushed */
1 1 1
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 8 values pushed */
24 24 1 0 17 0 19 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
20
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
27
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
28
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
29
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
30
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
31
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
43
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
6
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP1[ ]	/* DeltaExceptionP1 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
44
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
22
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP2[ ]	/* DeltaExceptionP2 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
38
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP3[ ]	/* DeltaExceptionP3 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 6 values pushed */
24 24 1 0 17 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
33
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
34
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
35
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
36
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
37
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
38
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
39
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
40
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
41
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
42
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
46
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
24
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
46
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
48
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
47
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
49
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
50
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
51
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
52
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
SHC[1]	/* ShiftContourByLastPt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
53
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 5 values pushed */
0 0 0 0 0
WCVTP[ ]	/* WriteCVTInPixels */
MIAP[0]	/* MoveIndirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
52 1
SZP2[ ]	/* SetZonePointer2 */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
54
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55
FDEF[ ]	/* FunctionDefinition */
MDAP[0]	/* MoveDirectAbsPt */
SLOOP[ ]	/* SetLoopVariable */
ALIGNRP[ ]	/* AlignRelativePt */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 0
SZPS[ ]	/* SetZonePointerS */
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
56 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
NEG[ ]	/* Negate */
ROLL[ ]	/* RollTopThreeStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
60
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
61
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
62
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
0
EQ[ ]	/* Equal */
IF[ ]	/* If */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
63
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
64
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
65
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
66
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
67
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
68
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
69
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
70
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
10 4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
71
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
72
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
73
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
74
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
75
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 1
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
PUSHB[ ]	/* 1 value pushed */
55
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
76
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
77
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
RCVT[ ]	/* ReadCVT */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
78
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
77
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
79
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
80
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
81
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
82
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
83
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
84
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
85
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
86
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
87
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
88
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
89
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
90
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
91
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
92
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
93
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
94
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
95
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
96
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
97
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
98
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
99
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
100
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
101
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
102
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
103
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
104
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
105
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
106
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
107
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
108
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
109
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
110
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
111
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
112
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
113
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
114
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
115
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
116
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
117
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
118
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
119
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
120
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
121
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
122
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
123
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
124
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
125
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
126
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
127
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
128
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
129
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
130
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
131
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
132
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
133
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
134
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
135
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
136
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
137
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
138
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
139
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
11 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
6
ELSE[ ]	/* Else */
PUSHB[ ]	/* 3 values pushed */
4 2 3
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
8
NEG[ ]	/* Negate */
PUSHB[ ]	/* 1 value pushed */
3
DEPTH[ ]	/* GetDepthStack */
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    24,
    24,
    24,
    24,
    712,
    0,
    \"-220\",
    712,
    0,
    \"-220\",
    107,
    107,
    92,
    92,
    700,
    0,
    700,
    496,
    0,
    \"-220\",
    712,
    \"-12\",
    723,
    508,
    \"-12\",
    \"-220\",
    71,
    71,
    63,
    63,
    353,
    0,
    358,
    \"-5\",
    71,
    71,
    63,
    63,
    700,
    347,
    705,
    342
)";
}
);
id = m01;
metricValues = (
{
pos = 992;
},
{
pos = 700;
},
{
pos = 496;
},
{
},
{
pos = -310;
},
{
}
);
name = Medium;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(465,0,l),
(465,700,l),
(64,700,l),
(64,0,l)
);
},
{
closed = 1;
nodes = (
(134,643,l),
(395,643,l),
(395,57,l),
(134,57,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 0 0 2 3 0 2 103 4 1 3 1 1 3 87 4 1 3 3 1 95 0 1 3 1 79 4 4 4 7 4 7 18 17 16 5 6 25
CALL[ ]	/* CallFunction */";
};
width = 529;
}
);
note = .notdef;
},
{
glyphname = CR;
layers = (
{
layerId = m01;
width = 600;
}
);
note = CR;
unicode = 13;
},
{
glyphname = space;
kernLeft = space;
kernRight = space;
layers = (
{
layerId = m01;
width = 248;
}
);
note = space;
unicode = 32;
},
{
glyphname = A;
kernLeft = A;
kernRight = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (340,0);
},
{
name = ogonek;
pos = (655,0);
},
{
name = top;
pos = (340,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(136,0,l),
(196,170,l),
(483,170,l),
(542,0,l),
(655,0,l),
(398,700,l),
(282,700,l),
(25,0,l)
);
},
{
closed = 1;
nodes = (
(339,574,l),
(452,255,l),
(227,255,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
9 1 4 0 1 76 5 1 4 0 2 1 4 2 104 0 0 0 33 77 3 1 1 1 34 1 78 8 8 8 10 8 10 17 17 17 16 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 679;
}
);
note = A;
unicode = 65;
},
{
glyphname = Aacute;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (340,0);
},
{
name = ogonek;
pos = (655,0);
},
{
name = top;
pos = (340,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (231,0);
ref = acutecomb.case;
}
);
width = 679;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Abreve;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (340,0);
},
{
name = ogonek;
pos = (655,0);
},
{
name = top;
pos = (340,909);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (191,0);
ref = uni0306.case;
}
);
width = 679;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = uni01CD;
layers = (
{
anchors = (
{
name = bottom;
pos = (340,0);
},
{
name = ogonek;
pos = (655,0);
},
{
name = top;
pos = (340,910);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (198,0);
ref = uni030C.case;
}
);
width = 679;
}
);
note = uni01CD;
unicode = 461;
},
{
glyphname = Acircumflex;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (340,0);
},
{
name = ogonek;
pos = (655,0);
},
{
name = top;
pos = (340,911);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (198,0);
ref = uni0302.case;
}
);
width = 679;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Adieresis;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (340,0);
},
{
name = ogonek;
pos = (655,0);
},
{
name = top;
pos = (340,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (169,0);
ref = uni0308.case;
}
);
width = 679;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Agrave;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (340,0);
},
{
name = ogonek;
pos = (655,0);
},
{
name = top;
pos = (340,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (231,0);
ref = gravecomb.case;
}
);
width = 679;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Amacron;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (340,0);
},
{
name = ogonek;
pos = (655,0);
},
{
name = top;
pos = (340,867);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (164,0);
ref = uni0304.case;
}
);
width = 679;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = Aogonek;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (340,0);
},
{
name = ogonek;
pos = (655,0);
},
{
name = top;
pos = (340,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(136,0,l),
(196,170,l),
(483,170,l),
(539,10,l),
(493,-17,o),
(452,-74,o),
(452,-107,qs),
(452,-156,o),
(524,-206,o),
(578,-206,qs),
(618,-206,o),
(659,-193,q),
(659,-127,l),
(622,-142,o),
(591,-142,qs),
(565,-142,o),
(535,-118,o),
(535,-97,qs),
(535,-78,o),
(565,-44,o),
(600,-27,qs),
(655,0,l),
(398,700,l),
(282,700,l),
(25,0,l)
);
},
{
closed = 1;
nodes = (
(339,574,l),
(452,255,l),
(227,255,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
26 1 5 0 20 1 4 3 11 1 1 4 12 1 2 1 4 76 2 1 4 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 5 0 3 4 5 3 104 0 0 0 33 77 0 4 4 34 77 0 1 1 2 97 0 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
6 1 5 0 3 4 5 3 104 0 1 0 2 1 2 101 0 0 0 33 77 0 4 4 34 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
25 25 25 27 25 27 17 22 35 39 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 679;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = Aring;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (340,0);
},
{
name = ogonek;
pos = (655,0);
},
{
name = top;
pos = (340,971);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (230,0);
ref = uni030A.case;
}
);
width = 679;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = Atilde;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (340,0);
},
{
name = ogonek;
pos = (655,0);
},
{
name = top;
pos = (340,868);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (176,0);
ref = tildecomb.case;
}
);
width = 679;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = AE;
kernLeft = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (461,0);
},
{
name = top;
pos = (536,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(140,0,l),
(222,148,l),
(482,148,l),
(482,0,l),
(868,0,l),
(868,88,l),
(588,88,l),
(588,327,l),
(823,327,l),
(823,415,l),
(588,415,l),
(588,612,l),
(868,612,l),
(868,700,l),
(414,700,l),
(25,0,l)
);
},
{
closed = 1;
nodes = (
(482,617,l),
(482,232,l),
(268,232,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
17 1 1 0 1 76 0 2 0 3 8 2 3 103 9 1 8 0 6 4 8 6 103 0 1 1 0 95 0 0 0 33 77 0 4 4 5 95 7 1 5 5 34 5 78 16 16 16 18 16 18 17 17 17 17 17 17 17 16 10 8 30
CALL[ ]	/* CallFunction */";
};
width = 921;
}
);
note = AE;
unicode = 198;
},
{
glyphname = AEacute;
kernLeft = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (461,0);
},
{
name = top;
pos = (536,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = AE;
},
{
alignment = -1;
pos = (427,0);
ref = acutecomb.case;
}
);
width = 921;
}
);
note = AEacute;
unicode = 508;
},
{
glyphname = B;
kernRight = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,0,ls),
(455,0,o),
(573,110,o),
(573,198,qs),
(573,260,o),
(500,355,o),
(438,376,q),
(484,393,o),
(541,471,o),
(541,527,qs),
(541,605,o),
(425,700,o),
(322,700,qs),
(69,700,l),
(69,0,l)
);
},
{
closed = 1;
nodes = (
(175,90,l),
(175,325,l),
(326,325,ls),
(392,325,o),
(466,266,o),
(466,207,qs),
(466,148,o),
(396,90,o),
(328,90,qs)
);
},
{
closed = 1;
nodes = (
(175,413,l),
(175,611,l),
(311,611,ls),
(433,611,o),
(433,512,qs),
(433,464,o),
(373,413,o),
(314,413,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
7 1 2 5 1 76 7 1 5 0 2 3 5 2 103 0 4 4 0 95 0 0 0 33 77 6 1 3 3 1 95 0 1 1 34 1 78 24 24 15 15 24 31 24 30 29 27 15 23 15 22 37 42 32 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = B;
unicode = 66;
},
{
glyphname = C;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (380,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(503,-12,o),
(660,105,o),
(681,211,q),
(564,211,l),
(549,150,o),
(456,83,o),
(380,83,qs),
(273,83,o),
(153,228,o),
(153,350,qs),
(153,471,o),
(272,617,o),
(380,617,qs),
(456,617,o),
(549,547,o),
(564,484,q),
(681,484,l),
(660,592,o),
(504,712,o),
(381,712,qs),
(275,712,o),
(123,618,o),
(44,454,o),
(44,350,qs),
(44,246,o),
(124,82,o),
(277,-12,o),
(381,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 39 77 0 3 3 5 97 6 1 5 5 40 5 78 0 0 0 27 0 26 18 36 34 18 38 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = C;
unicode = 67;
},
{
glyphname = Cacute;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (380,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (271,0);
ref = acutecomb.case;
}
);
width = 725;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = Ccaron;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (380,910);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (239,0);
ref = uni030C.case;
}
);
width = 725;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = Ccedilla;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (381,-261);
},
{
name = top;
pos = (380,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(418,-261,ls),
(473,-261,o),
(544,-206,o),
(544,-157,qs),
(544,-107,o),
(471,-55,o),
(414,-56,q),
(414,-11,l),
(522,-3,o),
(661,113,o),
(681,211,q),
(564,211,l),
(549,150,o),
(456,83,o),
(380,83,qs),
(273,83,o),
(153,228,o),
(153,350,qs),
(153,471,o),
(272,617,o),
(380,617,qs),
(456,617,o),
(549,547,o),
(564,484,q),
(681,484,l),
(660,592,o),
(504,712,o),
(381,712,qs),
(275,712,o),
(123,618,o),
(44,454,o),
(44,350,qs),
(44,252,o),
(116,94,o),
(252,-3,o),
(346,-11,q),
(346,-115,l),
(401,-115,ls),
(462,-115,o),
(462,-155,qs),
(462,-197,o),
(401,-197,qs),
(299,-197,l),
(299,-261,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
35 7 2 7 5 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 5 7 7 5 112 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 39 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 5 7 4 5 7 126 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 39 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 20 18 36 34 18 40 34 32 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = Cdotaccent;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (380,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (310,0);
ref = uni0307.case;
}
);
width = 725;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = D;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (344,0);
},
{
name = top;
pos = (344,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(296,0,ls),
(474,0,o),
(656,182,o),
(656,349,qs),
(656,515,o),
(477,700,o),
(296,700,qs),
(69,700,l),
(69,0,l)
);
},
{
closed = 1;
nodes = (
(175,90,l),
(175,611,l),
(292,611,ls),
(423,611,o),
(547,483,o),
(547,349,qs),
(547,222,o),
(428,90,o),
(292,90,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 2 2 0 95 0 0 0 33 77 4 1 3 3 1 95 0 1 1 34 1 78 9 9 9 17 9 16 37 36 32 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 700;
}
);
note = D;
unicode = 68;
},
{
glyphname = Dcaron;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (344,0);
},
{
name = top;
pos = (344,910);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = D;
},
{
alignment = -1;
pos = (203,0);
ref = uni030C.case;
}
);
width = 700;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = Dcroat;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(313,0,ls),
(491,0,o),
(673,182,o),
(673,349,qs),
(673,515,o),
(494,700,o),
(313,700,qs),
(86,700,l),
(86,396,l),
(5,396,l),
(5,303,l),
(86,303,l),
(86,0,l)
);
},
{
closed = 1;
nodes = (
(192,90,l),
(192,303,l),
(382,303,l),
(382,396,l),
(192,396,l),
(192,611,l),
(310,611,ls),
(440,611,o),
(564,483,o),
(564,349,qs),
(564,224,o),
(448,90,o),
(310,90,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
5 1 1 6 1 0 7 1 0 103 0 4 4 2 95 0 2 2 33 77 8 1 7 7 3 95 0 3 3 34 3 78 13 13 13 25 13 24 17 17 37 36 33 17 16 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 717;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = Eth;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(313,0,ls),
(491,0,o),
(673,182,o),
(673,349,qs),
(673,515,o),
(494,700,o),
(313,700,qs),
(86,700,l),
(86,396,l),
(5,396,l),
(5,303,l),
(86,303,l),
(86,0,l)
);
},
{
closed = 1;
nodes = (
(192,90,l),
(192,303,l),
(382,303,l),
(382,396,l),
(192,396,l),
(192,611,l),
(310,611,ls),
(440,611,o),
(564,483,o),
(564,349,qs),
(564,224,o),
(448,90,o),
(310,90,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
5 1 1 6 1 0 7 1 0 103 0 4 4 2 95 0 2 2 33 77 8 1 7 7 3 95 0 3 3 34 3 78 13 13 13 25 13 24 17 17 37 36 33 17 16 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 717;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = E;
kernRight = E;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(510,0,l),
(510,89,l),
(175,89,l),
(175,326,l),
(465,326,l),
(465,414,l),
(175,414,l),
(175,611,l),
(510,611,l),
(510,700,l),
(69,700,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 5 95 0 5 5 34 5 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = E;
unicode = 69;
},
{
glyphname = Eacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (173,0);
ref = acutecomb.case;
}
);
width = 563;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ebreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,909);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (133,0);
ref = uni0306.case;
}
);
width = 563;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = Ecaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,910);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (140,0);
ref = uni030C.case;
}
);
width = 563;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = Ecircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,911);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (140,0);
ref = uni0302.case;
}
);
width = 563;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (111,0);
ref = uni0308.case;
}
);
width = 563;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Edotaccent;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (211,0);
ref = uni0307.case;
}
);
width = 563;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = Egrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (173,0);
ref = gravecomb.case;
}
);
width = 563;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Emacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,867);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (106,0);
ref = uni0304.case;
}
);
width = 563;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = Eogonek;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(379,0,l),
(308,-45,o),
(308,-107,qs),
(308,-156,o),
(380,-206,o),
(434,-206,qs),
(474,-206,o),
(515,-193,q),
(515,-127,l),
(478,-142,o),
(447,-142,qs),
(421,-142,o),
(391,-118,o),
(391,-97,qs),
(391,-78,o),
(421,-44,o),
(456,-27,qs),
(511,0,l),
(510,2,l),
(510,89,l),
(175,89,l),
(175,326,l),
(465,326,l),
(465,414,l),
(175,414,l),
(175,611,l),
(510,611,l),
(510,700,l),
(69,700,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
10 1 7 4 20 1 5 7 21 1 6 5 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 7 95 0 7 7 34 77 0 5 5 6 97 0 6 6 38 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 2 0 3 4 2 3 103 0 5 0 6 5 6 101 0 1 1 0 95 0 0 0 33 77 0 4 4 7 95 0 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
20 35 40 17 17 17 17 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = uni018E;
kernRight = uni018E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(501,0,l),
(501,700,l),
(60,700,l),
(60,611,l),
(395,611,l),
(395,414,l),
(105,414,l),
(105,326,l),
(395,326,l),
(395,89,l),
(60,89,l),
(60,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 1 0 2 1 103 0 3 3 4 95 0 4 4 33 77 0 0 0 5 95 0 5 5 34 5 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = uni018E;
unicode = (398,477);
},
{
glyphname = uni1EBC;
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,868);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (118,0);
ref = tildecomb.case;
}
);
width = 563;
}
);
note = uni1EBC;
unicode = 7868;
},
{
glyphname = uni018F;
kernLeft = uni018F;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(476,-12,o),
(552,33,qs),
(629,78,o),
(713,241,o),
(713,347,qs),
(713,457,o),
(670,539,qs),
(628,621,o),
(476,712,o),
(376,712,qs),
(296,712,o),
(229,683,qs),
(163,653,o),
(71,547,o),
(51,477,q),
(169,477,l),
(190,542,o),
(302,616,o),
(377,616,qs),
(439,616,o),
(488,588,qs),
(538,560,o),
(597,453,o),
(600,381,q),
(48,381,l),
(44,353,o),
(44,321,qs),
(44,215,o),
(87,142,qs),
(128,68,o),
(277,-12,o),
(374,-12,qs)
);
},
{
closed = 1;
nodes = (
(308,85,o),
(258,112,qs),
(208,138,o),
(154,234,o),
(154,298,q),
(600,298,l),
(595,228,o),
(565,183,qs),
(535,135,o),
(434,85,o),
(373,85,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 2 1 0 1 2 0 128 0 0 0 5 6 0 5 103 0 1 1 3 97 0 3 3 39 77 8 1 6 6 4 97 7 1 4 4 40 4 78 32 32 0 0 32 42 32 41 37 36 0 31 0 30 36 18 36 22 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 757;
}
);
note = uni018F;
unicode = 399;
},
{
glyphname = F;
kernRight = F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,0,l),
(175,317,l),
(458,317,l),
(458,406,l),
(175,406,l),
(175,611,l),
(503,611,l),
(503,700,l),
(69,700,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 34 4 78 17 17 17 17 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 533;
}
);
note = F;
unicode = 70;
},
{
glyphname = G;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (381,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(455,-12,o),
(562,46,o),
(600,104,q),
(608,0,l),
(706,0,l),
(706,376,l),
(359,376,l),
(359,289,l),
(597,289,l),
(585,190,o),
(478,83,o),
(380,83,qs),
(274,83,o),
(153,226,o),
(153,347,qs),
(153,468,o),
(277,615,o),
(389,615,qs),
(462,615,o),
(558,551,o),
(573,494,q),
(693,494,l),
(669,597,o),
(509,712,o),
(389,712,qs),
(281,712,o),
(125,617,o),
(44,452,o),
(44,348,qs),
(44,243,o),
(125,79,o),
(274,-12,o),
(373,-12,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
29 1 3 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 1 2 5 2 1 5 128 0 5 0 4 3 5 4 103 0 2 2 0 97 0 0 0 39 77 0 3 3 6 97 8 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 1 2 5 2 1 5 128 0 5 0 4 3 5 4 103 0 2 2 0 97 0 0 0 39 77 0 6 6 34 77 0 3 3 7 97 8 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 32 0 31 17 17 18 36 34 18 38 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = G;
unicode = 71;
},
{
glyphname = Gbreve;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (381,909);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (233,0);
ref = uni0306.case;
}
);
width = 761;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = uni0122;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (381,-256);
},
{
name = top;
pos = (381,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (326,0);
ref = uni0326;
}
);
width = 761;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = Gdotaccent;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (381,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (311,0);
ref = uni0307.case;
}
);
width = 761;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = H;
kernRight = H;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,0,l),
(175,326,l),
(514,326,l),
(514,0,l),
(620,0,l),
(620,700,l),
(514,700,l),
(514,415,l),
(175,415,l),
(175,700,l),
(69,700,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 1 0 4 3 1 4 103 2 1 0 0 33 77 5 1 3 3 34 3 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = H;
unicode = 72;
},
{
glyphname = Hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,0,l),
(176,326,l),
(514,326,l),
(514,0,l),
(620,0,l),
(620,503,l),
(665,503,l),
(665,592,l),
(620,592,l),
(620,700,l),
(514,700,l),
(514,592,l),
(176,592,l),
(176,700,l),
(70,700,l),
(70,592,l),
(24,592,l),
(24,503,l),
(70,503,l),
(70,0,l)
);
},
{
closed = 1;
nodes = (
(176,503,l),
(514,503,l),
(514,415,l),
(176,415,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
5 3 2 1 10 6 2 0 11 1 0 103 12 1 11 0 8 7 11 8 103 4 1 2 2 33 77 9 1 7 7 34 7 78 20 20 20 23 20 23 22 21 19 18 17 17 17 17 17 17 17 17 16 13 8 31
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = I;
kernRight = I;
layers = (
{
anchors = (
{
name = bottom;
pos = (122,0);
},
{
name = ogonek;
pos = (175,0);
},
{
name = top;
pos = (122,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,0,l),
(175,700,l),
(69,700,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 244;
}
);
note = I;
unicode = 73;
},
{
glyphname = IJ;
layers = (
{
anchors = (
{
name = bottom;
pos = (500,0);
},
{
name = ogonek;
pos = (175,0);
},
{
name = top;
pos = (635,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (244,0);
ref = J;
}
);
width = 756;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = Iacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (122,0);
},
{
name = ogonek;
pos = (175,0);
},
{
name = top;
pos = (122,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (13,0);
ref = acutecomb.case;
}
);
width = 244;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (122,0);
},
{
name = ogonek;
pos = (175,0);
},
{
name = top;
pos = (122,909);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-27,0);
ref = uni0306.case;
}
);
width = 244;
}
);
note = Ibreve;
unicode = 300;
},
{
glyphname = Icircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (122,0);
},
{
name = ogonek;
pos = (175,0);
},
{
name = top;
pos = (122,911);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-20,0);
ref = uni0302.case;
}
);
width = 244;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (122,0);
},
{
name = ogonek;
pos = (175,0);
},
{
name = top;
pos = (122,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-49,0);
ref = uni0308.case;
}
);
width = 244;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Idotaccent;
layers = (
{
anchors = (
{
name = bottom;
pos = (122,0);
},
{
name = ogonek;
pos = (175,0);
},
{
name = top;
pos = (122,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (52,0);
ref = uni0307.case;
}
);
width = 244;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = Igrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (122,0);
},
{
name = ogonek;
pos = (175,0);
},
{
name = top;
pos = (122,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (13,0);
ref = gravecomb.case;
}
);
width = 244;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Imacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (122,0);
},
{
name = ogonek;
pos = (175,0);
},
{
name = top;
pos = (122,867);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-54,0);
ref = uni0304.case;
}
);
width = 244;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = Iogonek;
layers = (
{
anchors = (
{
name = bottom;
pos = (122,0);
},
{
name = ogonek;
pos = (175,0);
},
{
name = top;
pos = (122,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(139,-206,o),
(180,-193,q),
(180,-127,l),
(143,-142,o),
(112,-142,qs),
(86,-142,o),
(56,-118,o),
(56,-97,qs),
(56,-78,o),
(86,-44,o),
(121,-27,qs),
(176,0,l),
(175,2,l),
(175,700,l),
(69,700,l),
(69,15,l),
(18,-12,o),
(-27,-72,o),
(-27,-107,qs),
(-27,-156,o),
(45,-206,o),
(99,-206,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
18 8 5 3 1 0 19 1 2 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 33 77 0 1 1 2 98 3 1 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 1 3 1 2 1 2 102 0 0 0 33 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 21 0 20 40 22 4 8 24
CALL[ ]	/* CallFunction */";
};
width = 244;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = Itilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (122,0);
},
{
name = ogonek;
pos = (175,0);
},
{
name = top;
pos = (122,868);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-42,0);
ref = tildecomb.case;
}
);
width = 244;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = J;
kernLeft = J;
kernRight = J;
layers = (
{
anchors = (
{
name = bottom;
pos = (256,0);
},
{
name = top;
pos = (391,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,-12,o),
(443,96,o),
(443,194,qs),
(443,700,l),
(337,700,l),
(337,194,ls),
(337,142,o),
(289,83,o),
(237,83,qs),
(183,83,o),
(132,145,o),
(131,199,q),
(25,199,l),
(25,100,o),
(139,-12,o),
(239,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 0 2 1 2 0 1 128 0 2 2 33 77 0 1 1 3 97 4 1 3 3 40 3 78 0 0 0 15 0 14 19 34 18 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 512;
}
);
note = J;
unicode = 74;
},
{
glyphname = uni004A0301;
layers = (
{
anchors = (
{
name = bottom;
pos = (256,0);
},
{
name = top;
pos = (391,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = J;
},
{
alignment = -1;
pos = (282,0);
ref = acutecomb.case;
}
);
width = 512;
}
);
note = uni004A0301;
},
{
glyphname = K;
kernRight = K;
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = top;
pos = (302,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,0,l),
(177,329,l),
(454,0,l),
(601,0,l),
(287,359,l),
(586,700,l),
(450,700,l),
(177,374,l),
(177,700,l),
(71,700,l),
(71,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
8 5 2 3 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = K;
unicode = 75;
},
{
glyphname = uni0136;
kernRight = K;
layers = (
{
anchors = (
{
name = bottom;
pos = (303,-256);
},
{
name = top;
pos = (302,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = K;
},
{
alignment = -1;
pos = (247,0);
ref = uni0326;
}
);
width = 607;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = L;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (266,0);
},
{
name = top;
pos = (177,700);
},
{
name = topright;
pos = (271,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(489,0,l),
(489,88,l),
(175,88,l),
(175,700,l),
(69,700,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 17 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 530;
}
);
note = L;
unicode = 76;
},
{
glyphname = Lacute;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (266,0);
},
{
name = top;
pos = (177,942);
},
{
name = topright;
pos = (271,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (68,0);
ref = acutecomb.case;
}
);
width = 530;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = Lcaron;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (266,0);
},
{
name = top;
pos = (177,700);
},
{
name = topright;
pos = (271,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (269,0);
ref = uni030C.alt.case;
}
);
width = 530;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = uni013B;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (266,-256);
},
{
name = top;
pos = (177,700);
},
{
name = topright;
pos = (271,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (210,0);
ref = uni0326;
}
);
width = 530;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = Ldot;
kernRight = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(489,0,l),
(489,88,l),
(175,88,l),
(175,700,l),
(69,700,l),
(69,0,l)
);
},
{
closed = 1;
nodes = (
(392,280,o),
(433,321,o),
(433,350,qs),
(433,380,o),
(392,420,o),
(363,420,qs),
(333,420,o),
(293,380,o),
(293,350,qs),
(293,321,o),
(333,280,o),
(363,280,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 3 5 1 4 1 3 4 105 0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 6 6 6 17 6 16 37 17 17 16 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 530;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = Lslash;
kernRight = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,0,l),
(514,88,l),
(200,88,l),
(200,341,l),
(313,381,l),
(313,468,l),
(200,427,l),
(200,700,l),
(94,700,l),
(94,390,l),
(18,363,l),
(18,276,l),
(94,304,l),
(94,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
9 8 7 6 3 2 1 0 8 1 0 1 76 0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 17 21 20 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = M;
kernRight = M;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,0,l),
(175,510,l),
(373,95,l),
(455,95,l),
(652,510,l),
(652,0,l),
(758,0,l),
(758,700,l),
(633,700,l),
(415,231,l),
(194,700,l),
(69,700,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
10 7 2 3 3 0 1 76 0 3 0 2 0 3 2 128 1 1 0 0 33 77 4 1 2 2 34 2 78 18 18 17 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 827;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
kernLeft = N;
kernRight = N;
layers = (
{
anchors = (
{
name = bottom;
pos = (351,0);
},
{
name = top;
pos = (351,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,0,l),
(175,525,l),
(526,0,l),
(632,0,l),
(632,700,l),
(526,700,l),
(526,175,l),
(175,700,l),
(69,700,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
7 2 2 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 17 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = N;
unicode = 78;
},
{
glyphname = Nacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (351,0);
},
{
name = top;
pos = (351,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (242,0);
ref = acutecomb.case;
}
);
width = 701;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = Ncaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (351,0);
},
{
name = top;
pos = (351,910);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (210,0);
ref = uni030C.case;
}
);
width = 701;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = uni0145;
layers = (
{
anchors = (
{
name = bottom;
pos = (351,-256);
},
{
name = top;
pos = (351,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (296,0);
ref = uni0326;
}
);
width = 701;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = Ntilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (351,0);
},
{
name = top;
pos = (351,868);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (188,0);
ref = tildecomb.case;
}
);
width = 701;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,0,l),
(175,525,l),
(526,0,l),
(526,-67,ls),
(526,-100,o),
(495,-129,o),
(461,-129,qs),
(428,-129,l),
(428,-220,l),
(477,-220,ls),
(632,-220,o),
(632,-68,qs),
(632,700,l),
(526,700,l),
(526,175,l),
(175,700,l),
(69,700,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
15 2 2 4 0 1 76 14 1 4 1 75 1 1 0 0 33 77 0 4 4 34 77 0 3 3 2 98 0 2 2 38 2 78 21 33 34 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = O;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (396,0);
},
{
name = ogonek;
pos = (474,10);
},
{
name = top;
pos = (396,700);
},
{
name = topright;
pos = (771,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(495,-12,o),
(655,79,o),
(747,244,o),
(747,350,qs),
(747,457,o),
(655,622,o),
(495,712,o),
(395,712,qs),
(295,712,o),
(135,620,o),
(44,456,o),
(44,350,qs),
(44,244,o),
(135,80,o),
(295,-12,o),
(395,-12,qs)
);
},
{
closed = 1;
nodes = (
(326,83,o),
(216,147,o),
(153,268,o),
(153,350,qs),
(153,432,o),
(216,553,o),
(326,617,o),
(395,617,qs),
(465,617,o),
(575,554,o),
(638,433,o),
(638,350,qs),
(638,268,o),
(575,147,o),
(464,83,o),
(395,83,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 39 77 5 1 3 3 1 97 4 1 1 1 40 1 78 16 16 0 0 16 31 16 30 24 22 0 15 0 14 38 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 791;
}
);
note = O;
unicode = 79;
},
{
glyphname = Oacute;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (396,0);
},
{
name = ogonek;
pos = (474,10);
},
{
name = top;
pos = (396,942);
},
{
name = topright;
pos = (771,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (287,0);
ref = acutecomb.case;
}
);
width = 791;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Obreve;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (396,0);
},
{
name = ogonek;
pos = (474,10);
},
{
name = top;
pos = (396,909);
},
{
name = topright;
pos = (771,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (247,0);
ref = uni0306.case;
}
);
width = 791;
}
);
note = Obreve;
unicode = 334;
},
{
glyphname = Ocircumflex;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (396,0);
},
{
name = ogonek;
pos = (474,10);
},
{
name = top;
pos = (396,911);
},
{
name = topright;
pos = (771,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (254,0);
ref = uni0302.case;
}
);
width = 791;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Odieresis;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (396,0);
},
{
name = ogonek;
pos = (474,10);
},
{
name = top;
pos = (396,912);
},
{
name = topright;
pos = (771,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (225,0);
ref = uni0308.case;
}
);
width = 791;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = Ograve;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (396,0);
},
{
name = ogonek;
pos = (474,10);
},
{
name = top;
pos = (396,942);
},
{
name = topright;
pos = (771,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (287,0);
ref = gravecomb.case;
}
);
width = 791;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Ohungarumlaut;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (396,0);
},
{
name = ogonek;
pos = (474,10);
},
{
name = top;
pos = (396,915);
},
{
name = topright;
pos = (771,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (234,0);
ref = uni030B.case;
}
);
width = 791;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = Omacron;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (396,0);
},
{
name = ogonek;
pos = (474,10);
},
{
name = top;
pos = (396,867);
},
{
name = topright;
pos = (771,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (220,0);
ref = uni0304.case;
}
);
width = 791;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = Oslash;
kernLeft = Oslash;
kernRight = Oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(497,-12,o),
(654,81,o),
(739,245,o),
(739,350,qs),
(739,499,o),
(657,596,q),
(749,700,l),
(643,700,l),
(599,650,l),
(512,712,o),
(392,712,qs),
(287,712,o),
(129,619,o),
(44,454,o),
(44,350,qs),
(44,277,o),
(86,153,o),
(125,106,q),
(33,0,l),
(139,0,l),
(184,51,l),
(272,-12,o),
(392,-12,qs)
);
},
{
closed = 1;
nodes = (
(308,83,o),
(249,127,q),
(588,516,l),
(631,448,o),
(631,350,qs),
(631,270,o),
(573,149,o),
(465,83,o),
(392,83,qs)
);
},
{
closed = 1;
nodes = (
(194,186,l),
(152,254,o),
(152,350,qs),
(152,430,o),
(210,551,o),
(319,617,o),
(392,617,qs),
(475,617,o),
(533,574,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
13 1 5 1 40 39 29 28 16 4 6 4 5 1 1 0 4 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
13 1 5 2 40 39 29 28 16 4 6 4 5 1 1 0 4 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 39 77 7 1 4 4 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 33 77 0 5 5 1 97 0 1 1 39 77 0 0 0 34 77 7 1 4 4 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
23 23 0 0 34 32 23 31 23 30 0 22 0 21 18 39 18 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 781;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Otilde;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (396,0);
},
{
name = ogonek;
pos = (474,10);
},
{
name = top;
pos = (396,868);
},
{
name = topright;
pos = (771,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (232,0);
ref = tildecomb.case;
}
);
width = 791;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = OE;
kernLeft = C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(465,-12,o),
(598,52,o),
(639,110,q),
(639,0,l),
(1054,0,l),
(1054,89,l),
(745,89,l),
(745,326,l),
(1011,326,l),
(1011,414,l),
(745,414,l),
(745,611,l),
(1054,611,l),
(1054,700,l),
(639,700,l),
(639,588,l),
(598,648,o),
(465,712,o),
(389,712,qs),
(290,712,o),
(133,618,o),
(44,453,o),
(44,350,qs),
(44,248,o),
(132,83,o),
(289,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(331,83,o),
(220,145,o),
(153,266,o),
(153,350,qs),
(153,421,o),
(209,543,o),
(319,617,o),
(395,617,qs),
(463,617,o),
(573,553,o),
(638,432,o),
(638,350,qs),
(638,279,o),
(582,157,o),
(472,83,o),
(395,83,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
10 1 3 2 23 1 5 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 1 1 0 0 39 77 11 9 2 5 5 6 97 10 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 0 0 0 39 77 8 1 2 2 1 95 0 1 1 33 77 11 9 2 5 5 6 95 0 6 6 34 77 11 9 2 5 5 7 97 10 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 3 0 4 5 3 4 103 0 8 8 0 97 0 0 0 39 77 0 2 2 1 95 0 1 1 33 77 0 5 5 6 95 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
27 27 0 0 27 42 27 41 35 33 0 26 0 25 17 17 17 17 17 19 38 12 8 29
CALL[ ]	/* CallFunction */";
};
width = 1107;
}
);
note = OE;
unicode = 338;
},
{
glyphname = P;
kernRight = P;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,0,l),
(175,292,l),
(314,292,ls),
(424,292,o),
(557,397,o),
(557,496,qs),
(557,594,o),
(426,700,o),
(314,700,qs),
(69,700,l),
(69,0,l)
);
},
{
closed = 1;
nodes = (
(175,382,l),
(175,611,l),
(312,611,ls),
(384,611,o),
(449,552,o),
(449,496,qs),
(449,440,o),
(384,382,o),
(312,382,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 4 0 1 2 4 1 103 0 3 3 0 95 0 0 0 33 77 0 2 2 34 2 78 11 11 11 19 11 18 37 17 36 32 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = P;
unicode = 80;
},
{
glyphname = Thorn;
kernRight = Thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,0,l),
(175,142,l),
(314,142,ls),
(399,142,o),
(452,170,qs),
(505,198,o),
(557,291,o),
(557,350,qs),
(557,412,o),
(531,458,qs),
(504,507,o),
(395,560,o),
(314,560,qs),
(175,560,l),
(175,700,l),
(69,700,l),
(69,0,l)
);
},
{
closed = 1;
nodes = (
(175,228,l),
(175,472,l),
(309,472,ls),
(382,472,o),
(449,410,o),
(449,350,qs),
(449,228,o),
(309,228,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 0 4 5 1 4 103 6 1 5 0 2 3 5 2 103 0 0 0 33 77 0 3 3 34 3 78 17 17 17 24 17 23 36 17 40 33 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = Q;
kernLeft = C;
kernRight = Q;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(680,-11,l),
(747,59,l),
(677,125,l),
(747,217,o),
(747,350,qs),
(747,457,o),
(655,622,o),
(495,712,o),
(395,712,qs),
(295,712,o),
(135,620,o),
(44,456,o),
(44,350,qs),
(44,244,o),
(135,80,o),
(295,-12,o),
(395,-12,qs),
(456,-12,o),
(566,23,o),
(610,56,q)
);
},
{
closed = 1;
nodes = (
(153,432,o),
(216,553,o),
(326,617,o),
(395,617,qs),
(465,617,o),
(575,554,o),
(638,433,o),
(638,350,qs),
(638,258,o),
(603,197,q),
(499,299,l),
(431,229,l),
(540,125,l),
(482,83,o),
(395,83,qs),
(326,83,o),
(216,147,o),
(153,268,o),
(153,350,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
28 27 26 25 16 5 2 3 19 18 17 3 0 2 2 76 0 3 3 1 97 0 1 1 39 77 0 2 2 0 97 0 0 0 40 0 78 41 43 38 33 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 796;
}
);
note = Q;
unicode = 81;
},
{
glyphname = R;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (307,0);
},
{
name = top;
pos = (294,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,0,l),
(175,303,l),
(272,303,l),
(448,0,l),
(576,0,l),
(378,321,l),
(531,354,o),
(531,502,qs),
(531,598,o),
(405,700,o),
(294,700,qs),
(69,700,l),
(69,0,l)
);
},
{
closed = 1;
nodes = (
(175,393,l),
(175,611,l),
(292,611,ls),
(364,611,o),
(423,556,o),
(423,502,qs),
(423,447,o),
(364,393,o),
(292,393,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
6 1 2 5 1 76 6 1 5 0 2 1 5 2 103 0 4 4 0 95 0 0 0 33 77 3 1 1 1 34 1 78 13 13 13 21 13 20 37 17 17 21 32 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = R;
unicode = 82;
},
{
glyphname = Racute;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (307,0);
},
{
name = top;
pos = (294,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (185,0);
ref = acutecomb.case;
}
);
width = 604;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = Rcaron;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (307,0);
},
{
name = top;
pos = (294,910);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (153,0);
ref = uni030C.case;
}
);
width = 604;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = uni0156;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (307,-256);
},
{
name = top;
pos = (294,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (251,0);
ref = uni0326;
}
);
width = 604;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = S;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = top;
pos = (292,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(368,-12,o),
(477,36,o),
(541,127,o),
(541,189,qs),
(541,250,o),
(487,331,o),
(404,377,o),
(344,397,qs),
(276,420,o),
(209,450,o),
(173,492,o),
(173,525,qs),
(173,571,o),
(235,622,o),
(283,622,qs),
(339,622,o),
(408,561,o),
(408,514,q),
(521,514,l),
(520,576,o),
(458,666,o),
(354,712,o),
(290,712,qs),
(226,712,o),
(122,667,o),
(62,579,o),
(62,518,qs),
(62,449,o),
(146,356,o),
(237,326,qs),
(323,297,o),
(395,266,o),
(430,221,o),
(430,182,qs),
(430,133,o),
(358,78,o),
(300,78,qs),
(234,78,o),
(155,151,o),
(153,211,q),
(42,211,l),
(42,141,o),
(110,40,o),
(227,-12,o),
(300,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 39 77 0 1 1 5 97 6 1 5 5 40 5 78 0 0 0 44 0 43 34 19 44 34 19 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = S;
unicode = 83;
},
{
glyphname = Sacute;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = top;
pos = (292,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (183,0);
ref = acutecomb.case;
}
);
width = 584;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = Scaron;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = top;
pos = (292,910);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (151,0);
ref = uni030C.case;
}
);
width = 584;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = Scedilla;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (292,-261);
},
{
name = top;
pos = (292,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,-261,ls),
(384,-261,o),
(455,-206,o),
(455,-157,qs),
(455,-107,o),
(382,-55,o),
(325,-56,q),
(325,-11,l),
(420,-4,o),
(541,102,o),
(541,189,qs),
(541,250,o),
(487,331,o),
(404,377,o),
(344,397,qs),
(276,420,o),
(209,450,o),
(173,492,o),
(173,525,qs),
(173,571,o),
(235,622,o),
(283,622,qs),
(339,622,o),
(408,561,o),
(408,514,q),
(521,514,l),
(520,576,o),
(458,666,o),
(354,712,o),
(290,712,qs),
(226,712,o),
(122,667,o),
(62,579,o),
(62,518,qs),
(62,449,o),
(146,356,o),
(237,326,qs),
(323,297,o),
(395,266,o),
(430,221,o),
(430,182,qs),
(430,133,o),
(358,78,o),
(300,78,qs),
(234,78,o),
(155,151,o),
(153,211,q),
(42,211,l),
(43,117,o),
(161,2,o),
(257,-10,q),
(257,-115,l),
(312,-115,ls),
(373,-115,o),
(373,-155,qs),
(373,-197,o),
(312,-197,qs),
(210,-197,l),
(210,-261,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
50 7 2 7 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 3 7 7 3 112 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 6 6 4 97 0 4 4 39 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 3 7 6 3 7 126 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 6 6 4 97 0 4 4 39 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 30 34 19 44 34 20 34 32 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = uni0218;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (292,-256);
},
{
name = top;
pos = (292,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (237,0);
ref = uni0326;
}
);
width = 584;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni1E9E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(533,-10,o),
(641,78,o),
(641,155,qs),
(641,217,o),
(571,289,o),
(502,314,qs),
(443,335,o),
(394,363,o),
(394,388,qs),
(394,406,o),
(418,429,o),
(441,444,qs),
(482,469,o),
(527,519,o),
(527,563,qs),
(527,616,o),
(467,692,o),
(365,732,o),
(303,732,qs),
(193,732,o),
(59,618,o),
(59,515,qs),
(59,0,l),
(164,0,l),
(164,506,ls),
(164,570,o),
(230,643,o),
(300,643,qs),
(352,643,o),
(422,598,o),
(422,553,qs),
(422,530,o),
(398,497,o),
(375,481,qs),
(335,454,ls),
(287,423,o),
(287,373,qs),
(287,338,o),
(330,289,o),
(391,258,o),
(438,242,qs),
(487,226,o),
(536,187,o),
(536,148,qs),
(536,110,o),
(487,71,o),
(446,71,qs),
(399,71,o),
(344,127,o),
(339,172,q),
(237,172,l),
(247,85,o),
(361,-10,o),
(448,-10,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 1 1 3 97 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 2 1 2 0 1 128 0 4 0 2 0 4 2 105 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 53 0 52 35 33 30 29 26 24 34 18 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 666;
}
);
note = uni1E9E;
unicode = 7838;
},
{
glyphname = T;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = top;
pos = (286,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(339,0,l),
(339,611,l),
(546,611,l),
(546,700,l),
(26,700,l),
(26,611,l),
(233,611,l),
(233,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 1 95 0 1 1 33 77 0 3 3 34 3 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = T;
unicode = 84;
},
{
glyphname = Tcaron;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = top;
pos = (286,910);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (145,0);
ref = uni030C.case;
}
);
width = 571;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = uni0162;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (286,-261);
},
{
name = top;
pos = (286,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(251,0,l),
(251,-115,l),
(306,-115,ls),
(367,-115,o),
(367,-155,qs),
(367,-197,o),
(306,-197,qs),
(204,-197,l),
(204,-261,l),
(323,-261,ls),
(378,-261,o),
(449,-206,o),
(449,-157,qs),
(449,-107,o),
(376,-55,o),
(319,-56,q),
(319,0,l),
(339,0,l),
(339,611,l),
(546,611,l),
(546,700,l),
(26,700,l),
(26,611,l),
(233,611,l),
(233,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 0 7 6 4 7 105 0 6 0 5 6 5 99 2 1 0 0 1 95 0 1 1 33 77 8 1 3 3 34 3 78 17 34 33 36 17 17 17 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni021A;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (286,-256);
},
{
name = top;
pos = (286,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (231,0);
ref = uni0326;
}
);
width = 571;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = U;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (333,0);
},
{
name = ogonek;
pos = (411,10);
},
{
name = top;
pos = (333,700);
},
{
name = topright;
pos = (645,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(400,-12,o),
(522,42,o),
(601,165,o),
(601,263,qs),
(601,700,l),
(495,700,l),
(495,262,ls),
(495,173,o),
(410,84,o),
(333,84,qs),
(256,84,o),
(170,173,o),
(170,262,qs),
(170,700,l),
(64,700,l),
(64,263,ls),
(64,186,o),
(121,62,o),
(241,-12,o),
(331,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 0 0 33 77 0 1 1 3 97 4 1 3 3 40 3 78 0 0 0 19 0 18 19 35 20 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = U;
unicode = 85;
},
{
glyphname = Uacute;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (333,0);
},
{
name = ogonek;
pos = (411,10);
},
{
name = top;
pos = (333,942);
},
{
name = topright;
pos = (645,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (224,0);
ref = acutecomb.case;
}
);
width = 665;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ubreve;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (333,0);
},
{
name = ogonek;
pos = (411,10);
},
{
name = top;
pos = (333,909);
},
{
name = topright;
pos = (645,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (184,0);
ref = uni0306.case;
}
);
width = 665;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = Ucircumflex;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (333,0);
},
{
name = ogonek;
pos = (411,10);
},
{
name = top;
pos = (333,911);
},
{
name = topright;
pos = (645,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (191,0);
ref = uni0302.case;
}
);
width = 665;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (333,0);
},
{
name = ogonek;
pos = (411,10);
},
{
name = top;
pos = (333,912);
},
{
name = topright;
pos = (645,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (162,0);
ref = uni0308.case;
}
);
width = 665;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Ugrave;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (333,0);
},
{
name = ogonek;
pos = (411,10);
},
{
name = top;
pos = (333,942);
},
{
name = topright;
pos = (645,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (224,0);
ref = gravecomb.case;
}
);
width = 665;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uhungarumlaut;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (333,0);
},
{
name = ogonek;
pos = (411,10);
},
{
name = top;
pos = (333,915);
},
{
name = topright;
pos = (645,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (171,0);
ref = uni030B.case;
}
);
width = 665;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = Umacron;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (333,0);
},
{
name = ogonek;
pos = (411,10);
},
{
name = top;
pos = (333,867);
},
{
name = topright;
pos = (645,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (157,0);
ref = uni0304.case;
}
);
width = 665;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = Uogonek;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (333,0);
},
{
name = ogonek;
pos = (411,10);
},
{
name = top;
pos = (333,700);
},
{
name = topright;
pos = (645,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(374,-196,o),
(415,-183,q),
(415,-117,l),
(378,-132,o),
(347,-132,qs),
(321,-132,o),
(291,-108,o),
(291,-87,qs),
(291,-68,o),
(321,-34,o),
(356,-17,qs),
(371,-10,l),
(468,1,o),
(601,134,o),
(601,263,qs),
(601,700,l),
(495,700,l),
(495,262,ls),
(495,173,o),
(410,84,o),
(333,84,qs),
(256,84,o),
(170,173,o),
(170,262,qs),
(170,700,l),
(64,700,l),
(64,263,ls),
(64,162,o),
(161,16,o),
(258,-5,q),
(208,-45,o),
(208,-97,qs),
(208,-146,o),
(280,-196,o),
(334,-196,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
31 4 2 3 1 32 1 4 3 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 3 0 1 3 128 2 1 0 0 33 77 0 3 3 4 98 5 1 4 4 38 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 1 0 3 0 1 3 128 0 3 5 1 4 3 4 102 2 1 0 0 33 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 34 0 33 42 19 35 24 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = Uring;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (333,0);
},
{
name = ogonek;
pos = (411,10);
},
{
name = top;
pos = (333,971);
},
{
name = topright;
pos = (645,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (223,0);
ref = uni030A.case;
}
);
width = 665;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = Utilde;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (333,0);
},
{
name = ogonek;
pos = (411,10);
},
{
name = top;
pos = (333,868);
},
{
name = topright;
pos = (645,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (169,0);
ref = tildecomb.case;
}
);
width = 665;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = V;
kernLeft = V;
kernRight = V;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(404,0,l),
(663,700,l),
(551,700,l),
(340,110,l),
(131,700,l),
(17,700,l),
(276,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 2 0 1 76 1 1 0 0 33 77 0 2 2 34 2 78 17 18 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (506,0);
},
{
name = top;
pos = (506,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,560,l),
(658,0,l),
(787,0,l),
(981,700,l),
(866,700,l),
(722,124,l),
(569,700,l),
(446,700,l),
(289,129,l),
(146,700,l),
(32,700,l),
(221,0,l),
(349,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 33 77 5 4 2 3 3 34 3 78 0 0 0 12 0 12 17 18 18 17 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 1013;
}
);
note = W;
unicode = 87;
},
{
glyphname = Wacute;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (506,0);
},
{
name = top;
pos = (506,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (397,0);
ref = acutecomb.case;
}
);
width = 1013;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = Wcircumflex;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (506,0);
},
{
name = top;
pos = (506,911);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (365,0);
ref = uni0302.case;
}
);
width = 1013;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = Wdieresis;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (506,0);
},
{
name = top;
pos = (506,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (336,0);
ref = uni0308.case;
}
);
width = 1013;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = Wgrave;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (506,0);
},
{
name = top;
pos = (506,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (397,0);
ref = gravecomb.case;
}
);
width = 1013;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = X;
kernLeft = X;
kernRight = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(151,0,l),
(310,282,l),
(479,0,l),
(598,0,l),
(372,379,l),
(561,700,l),
(441,700,l),
(314,474,l),
(179,700,l),
(60,700,l),
(252,379,l),
(30,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(353,0,l),
(353,274,l),
(583,700,l),
(465,700,l),
(300,378,l),
(135,700,l),
(15,700,l),
(247,274,l),
(247,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
6 3 0 3 2 0 1 76 1 1 0 0 33 77 0 2 2 34 2 78 18 18 17 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Yacute;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (191,0);
ref = acutecomb.case;
}
);
width = 598;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Ycircumflex;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,911);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (158,0);
ref = uni0302.case;
}
);
width = 598;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = Ydieresis;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (129,0);
ref = uni0308.case;
}
);
width = 598;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Ygrave;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (191,0);
ref = gravecomb.case;
}
);
width = 598;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = uni1EF8;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,868);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (136,0);
ref = tildecomb.case;
}
);
width = 598;
}
);
note = uni1EF8;
unicode = 7928;
},
{
glyphname = Z;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (274,0);
},
{
name = top;
pos = (274,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(503,0,l),
(503,91,l),
(166,91,l),
(500,618,l),
(500,700,l),
(48,700,l),
(48,610,l),
(377,610,l),
(44,82,l),
(44,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 0 1 0 1 3 2 2 76 0 0 0 1 95 0 1 1 33 77 0 2 2 3 95 0 3 3 34 3 78 17 18 17 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 547;
}
);
note = Z;
unicode = 90;
},
{
glyphname = Zacute;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (274,0);
},
{
name = top;
pos = (274,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (165,0);
ref = acutecomb.case;
}
);
width = 547;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = Zcaron;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (274,0);
},
{
name = top;
pos = (274,910);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (132,0);
ref = uni030C.case;
}
);
width = 547;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = Zdotaccent;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (274,0);
},
{
name = top;
pos = (274,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (203,0);
ref = uni0307.case;
}
);
width = 547;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = uniA78B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(164,220,l),
(177,700,l),
(63,700,l),
(75,220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 239;
}
);
note = uniA78B;
unicode = 42891;
},
{
glyphname = a;
kernLeft = a;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (271,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(273,-12,o),
(361,38,o),
(385,77,q),
(388,0,l),
(485,0,l),
(485,301,ls),
(485,394,o),
(377,508,o),
(273,508,qs),
(217,508,o),
(118,467,o),
(54,390,o),
(50,338,q),
(157,338,l),
(164,378,o),
(225,419,o),
(270,419,qs),
(320,419,o),
(378,359,o),
(378,298,q),
(252,298,ls),
(158,298,o),
(40,219,o),
(40,139,qs),
(40,69,o),
(141,-12,o),
(216,-12,qs)
);
},
{
closed = 1;
nodes = (
(200,75,o),
(149,112,o),
(149,148,qs),
(149,188,o),
(211,224,o),
(260,224,qs),
(378,224,l),
(378,222,ls),
(378,182,o),
(343,115,o),
(281,75,o),
(241,75,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
23 1 7 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 2 1 0 1 2 0 128 0 0 0 6 7 0 6 103 0 1 1 3 97 0 3 3 42 77 9 1 7 7 4 97 8 5 2 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 2 1 0 1 2 0 128 0 0 0 6 7 0 6 103 0 1 1 3 97 0 3 3 42 77 0 4 4 34 77 9 1 7 7 5 97 8 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
27 27 0 0 27 38 27 37 33 30 0 26 0 25 19 35 18 34 36 10 8 27
CALL[ ]	/* CallFunction */";
};
width = 533;
}
);
note = a;
unicode = 97;
},
{
glyphname = aacute;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (271,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (162,0);
ref = acutecomb;
}
);
width = 533;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = abreve;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (271,722);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (122,0);
ref = uni0306;
}
);
width = 533;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = uni01CE;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (271,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (129,0);
ref = uni030C;
}
);
width = 533;
}
);
note = uni01CE;
unicode = 462;
},
{
glyphname = acircumflex;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (271,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (129,0);
ref = uni0302;
}
);
width = 533;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = adieresis;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (271,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (100,0);
ref = uni0308;
}
);
width = 533;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = agrave;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (271,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (162,0);
ref = gravecomb;
}
);
width = 533;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = amacron;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (271,693);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (95,0);
ref = uni0304;
}
);
width = 533;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = aogonek;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (271,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(273,-12,o),
(361,38,o),
(385,77,q),
(388,0,l),
(407,0,l),
(336,-45,o),
(336,-107,qs),
(336,-156,o),
(408,-206,o),
(462,-206,qs),
(502,-206,o),
(543,-193,q),
(543,-127,l),
(506,-142,o),
(475,-142,qs),
(449,-142,o),
(419,-118,o),
(419,-97,qs),
(419,-78,o),
(449,-44,o),
(484,-27,qs),
(539,0,l),
(514,52,l),
(485,39,l),
(485,301,ls),
(485,394,o),
(377,508,o),
(273,508,qs),
(217,508,o),
(118,467,o),
(54,390,o),
(50,338,q),
(157,338,l),
(164,378,o),
(225,419,o),
(270,419,qs),
(320,419,o),
(378,359,o),
(378,298,q),
(252,298,ls),
(158,298,o),
(40,219,o),
(40,139,qs),
(40,69,o),
(141,-12,o),
(216,-12,qs)
);
},
{
closed = 1;
nodes = (
(200,75,o),
(149,112,o),
(149,148,qs),
(149,188,o),
(211,224,o),
(260,224,qs),
(378,224,l),
(378,222,ls),
(378,182,o),
(343,115,o),
(281,75,o),
(241,75,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
42 1 9 8 22 21 2 6 9 32 1 4 6 33 1 5 4 4 76 23 1 6 1 75
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
42 1 9 8 22 21 2 6 9 32 1 4 7 33 1 5 4 4 76 23 1 6 1 75
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 2 1 0 1 2 0 128 0 0 0 8 9 0 8 103 0 1 1 3 97 0 3 3 42 77 11 1 9 9 6 97 10 7 2 6 6 34 77 0 4 4 5 97 0 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 2 1 0 1 2 0 128 0 0 0 8 9 0 8 103 0 1 1 3 97 0 3 3 42 77 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 77 0 4 4 5 97 0 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 2 1 0 1 2 0 128 0 0 0 8 9 0 8 103 0 4 0 5 4 5 101 0 1 1 3 97 0 3 3 42 77 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
46 46 0 0 46 57 46 56 52 49 0 45 0 44 20 35 43 35 18 34 36 12 8 29
CALL[ ]	/* CallFunction */";
};
width = 533;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = aring;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (271,766);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (161,0);
ref = uni030A;
}
);
width = 533;
}
);
note = aring;
unicode = 229;
},
{
glyphname = atilde;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (243,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (271,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (107,0);
ref = tildecomb;
}
);
width = 533;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = ae;
kernLeft = a;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (454,0);
},
{
name = top;
pos = (454,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,-12,o),
(431,98,q),
(464,46,o),
(572,-12,o),
(637,-12,qs),
(721,-12,o),
(840,80,o),
(862,151,q),
(756,151,l),
(740,116,o),
(679,76,o),
(636,76,qs),
(579,76,o),
(499,156,o),
(495,224,q),
(873,224,l),
(875,271,ls),
(875,338,o),
(814,446,o),
(705,508,o),
(637,508,qs),
(582,508,o),
(488,466,o),
(456,427,q),
(430,466,o),
(338,508,o),
(277,508,qs),
(224,508,o),
(129,469,o),
(66,392,o),
(60,337,q),
(166,337,l),
(173,377,o),
(235,421,o),
(277,421,qs),
(327,421,o),
(387,359,o),
(387,297,q),
(252,297,ls),
(151,297,o),
(40,213,o),
(40,140,qs),
(40,71,o),
(147,-12,o),
(231,-12,qs)
);
},
{
closed = 1;
nodes = (
(201,74,o),
(152,115,o),
(152,149,qs),
(152,184,o),
(207,224,o),
(264,224,qs),
(384,224,l),
(384,210,l),
(376,153,o),
(297,74,o),
(243,74,qs)
);
},
{
closed = 1;
nodes = (
(497,297,l),
(506,356,o),
(584,421,o),
(638,421,qs),
(692,421,o),
(765,354,o),
(769,297,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 97 values pushed */
20 1 1 3 47 1 7 5 42 1 6 7 3 76 0 2 1 0 1 2 0 128 0 7 5 6 5 7 6 128 13 1 0 10 1 5 7 0 5 103 12 1 1 1 3 97 4 1 3 3 42 77 15 11 2 6 6 8 97 14 9 2 8 8 40 8 78 45 45 0 0 62 61 59 57 45 55 45 54 50 48 0 44 0 43 34 18 34 20 36 35 18 34 36 16 8 31
CALL[ ]	/* CallFunction */";
};
width = 907;
}
);
note = ae;
unicode = 230;
},
{
glyphname = aeacute;
kernLeft = a;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (454,0);
},
{
name = top;
pos = (454,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = ae;
},
{
alignment = -1;
pos = (345,0);
ref = acutecomb;
}
);
width = 907;
}
);
note = aeacute;
unicode = 509;
},
{
glyphname = b;
kernLeft = b;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(408,-12,o),
(516,57,o),
(575,176,o),
(575,249,qs),
(575,323,o),
(516,440,o),
(408,508,o),
(337,508,qs),
(279,508,o),
(190,461,o),
(163,420,q),
(163,700,l),
(57,700,l),
(57,0,l),
(159,0,l),
(163,76,l),
(190,33,o),
(281,-12,o),
(337,-12,qs)
);
},
{
closed = 1;
nodes = (
(249,81,o),
(164,176,o),
(164,248,qs),
(164,322,o),
(248,416,o),
(315,416,qs),
(382,416,o),
(467,324,o),
(467,249,qs),
(467,176,o),
(383,81,o),
(315,81,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
7 1 4 2 2 1 0 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 1 33 77 0 4 4 2 97 0 2 2 42 77 7 1 5 5 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 33 77 0 4 4 2 97 0 2 2 42 77 0 0 0 34 77 7 1 5 5 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
19 19 0 0 19 30 19 29 25 23 0 18 0 17 35 17 19 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = b;
unicode = 98;
},
{
glyphname = c;
kernLeft = c;
kernRight = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (287,0);
},
{
name = top;
pos = (285,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(376,-12,o),
(501,82,o),
(519,162,q),
(407,162,l),
(397,121,o),
(333,78,o),
(287,78,qs),
(223,78,o),
(147,174,o),
(147,248,qs),
(147,321,o),
(220,418,o),
(287,418,qs),
(333,418,o),
(398,372,o),
(407,335,q),
(519,335,l),
(500,417,o),
(377,508,o),
(288,508,qs),
(214,508,o),
(101,442,o),
(39,323,o),
(39,248,qs),
(39,172,o),
(102,53,o),
(216,-12,o),
(288,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 42 77 0 3 3 5 97 6 1 5 5 40 5 78 0 0 0 27 0 26 18 36 34 18 38 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 557;
}
);
note = c;
unicode = 99;
},
{
glyphname = cacute;
kernLeft = c;
kernRight = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (287,0);
},
{
name = top;
pos = (285,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (176,0);
ref = acutecomb;
}
);
width = 557;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = ccaron;
kernLeft = c;
kernRight = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (287,0);
},
{
name = top;
pos = (285,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (143,0);
ref = uni030C;
}
);
width = 557;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = ccedilla;
layers = (
{
anchors = (
{
name = bottom;
pos = (287,-261);
},
{
name = top;
pos = (285,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(322,-261,ls),
(377,-261,o),
(448,-206,o),
(448,-157,qs),
(448,-107,o),
(375,-55,o),
(318,-56,q),
(318,-10,l),
(395,-2,o),
(503,89,o),
(519,162,q),
(407,162,l),
(397,121,o),
(333,78,o),
(287,78,qs),
(223,78,o),
(147,174,o),
(147,248,qs),
(147,321,o),
(220,418,o),
(287,418,qs),
(333,418,o),
(398,372,o),
(407,335,q),
(519,335,l),
(500,417,o),
(377,508,o),
(288,508,qs),
(214,508,o),
(101,442,o),
(39,323,o),
(39,248,qs),
(39,178,o),
(92,67,o),
(187,-2,o),
(250,-10,q),
(250,-115,l),
(305,-115,ls),
(366,-115,o),
(366,-155,qs),
(366,-197,o),
(305,-197,qs),
(203,-197,l),
(203,-261,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
35 7 2 7 5 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 5 7 7 5 112 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 42 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 5 7 4 5 7 126 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 42 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 20 18 36 34 18 40 34 32 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 557;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = cdotaccent;
kernLeft = c;
kernRight = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (287,0);
},
{
name = top;
pos = (285,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (214,0);
ref = uni0307;
}
);
width = 557;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = d;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (307,0);
},
{
name = top;
pos = (307,992);
},
{
name = topright;
pos = (593,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(334,-12,o),
(425,37,o),
(450,77,q),
(454,0,l),
(557,0,l),
(557,700,l),
(450,700,l),
(450,422,l),
(422,463,o),
(332,508,o),
(277,508,qs),
(205,508,o),
(97,440,o),
(39,322,o),
(39,250,qs),
(39,177,o),
(97,58,o),
(205,-12,o),
(277,-12,qs)
);
},
{
closed = 1;
nodes = (
(256,81,o),
(187,123,o),
(147,200,o),
(147,249,qs),
(147,323,o),
(232,416,o),
(297,416,qs),
(362,416,o),
(449,326,o),
(449,248,qs),
(449,175,o),
(367,81,o),
(298,81,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
10 1 4 0 15 1 2 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 1 33 77 0 4 4 0 97 0 0 0 42 77 7 1 5 5 2 97 6 3 2 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 33 77 0 4 4 0 97 0 0 0 42 77 0 2 2 34 77 7 1 5 5 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
19 19 0 0 19 31 19 30 25 23 0 18 0 17 17 19 38 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = d;
unicode = 100;
},
{
glyphname = dcaron;
kernLeft = c;
kernRight = dcaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (307,0);
},
{
name = top;
pos = (307,992);
},
{
name = topright;
pos = (593,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = d;
},
{
alignment = -1;
pos = (593,0);
ref = uni030C.alt;
}
);
width = 613;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = dcroat;
kernLeft = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(334,-12,o),
(425,37,o),
(450,77,q),
(454,0,l),
(557,0,l),
(557,565,l),
(600,565,l),
(600,641,l),
(557,641,l),
(557,700,l),
(450,700,l),
(450,641,l),
(287,641,l),
(287,565,l),
(450,565,l),
(450,422,l),
(422,463,o),
(332,508,o),
(277,508,qs),
(205,508,o),
(97,440,o),
(39,322,o),
(39,250,qs),
(39,177,o),
(97,58,o),
(205,-12,o),
(277,-12,qs)
);
},
{
closed = 1;
nodes = (
(147,323,o),
(232,416,o),
(297,416,qs),
(362,416,o),
(449,326,o),
(449,248,qs),
(449,175,o),
(367,81,o),
(298,81,qs),
(256,81,o),
(187,123,o),
(147,200,o),
(147,249,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
10 1 9 0 23 1 6 8 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
4 1 2 5 1 1 0 2 1 103 0 3 3 33 77 0 9 9 0 97 0 0 0 42 77 0 8 8 6 97 10 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
4 1 2 5 1 1 0 2 1 103 0 3 3 33 77 0 9 9 0 97 0 0 0 42 77 0 6 6 34 77 0 8 8 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 37 35 31 29 0 26 0 25 17 17 17 17 17 19 38 11 8 29
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = eth;
kernLeft = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(382,-12,o),
(443,25,qs),
(506,62,o),
(577,194,o),
(577,281,qs),
(577,371,o),
(517,540,o),
(457,614,q),
(537,642,l),
(537,709,l),
(411,666,l),
(394,684,o),
(374,700,q),
(271,700,l),
(306,672,o),
(334,640,q),
(248,611,l),
(248,544,l),
(378,588,l),
(432,517,o),
(459,443,q),
(397,505,o),
(298,505,qs),
(225,505,o),
(166,472,qs),
(107,438,o),
(39,320,o),
(39,247,qs),
(39,174,o),
(73,116,qs),
(108,57,o),
(229,-12,o),
(305,-12,qs)
);
},
{
closed = 1;
nodes = (
(264,79,o),
(191,122,o),
(148,199,o),
(148,249,qs),
(148,295,o),
(188,372,o),
(261,416,o),
(308,416,qs),
(348,416,o),
(422,377,o),
(469,301,o),
(469,248,qs),
(469,201,o),
(429,124,o),
(355,79,o),
(308,79,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
24 23 21 16 15 14 13 7 0 1 11 1 3 0 2 76 22 1 1 74 0 1 1 33 77 0 3 3 0 97 0 0 0 42 77 6 1 4 4 2 97 5 1 2 2 40 2 78 33 33 0 0 33 48 33 47 41 39 0 32 0 31 24 40 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = eth;
unicode = 240;
},
{
glyphname = e;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (285,0);
},
{
name = ogonek;
pos = (393,10);
},
{
name = top;
pos = (283,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(375,-12,o),
(493,79,o),
(515,151,q),
(405,151,l),
(390,115,o),
(329,76,o),
(286,76,qs),
(226,76,o),
(149,156,o),
(145,220,q),
(526,220,l),
(529,247,o),
(529,268,qs),
(529,336,o),
(468,446,o),
(358,508,o),
(288,508,qs),
(214,508,o),
(101,443,o),
(39,326,o),
(39,248,qs),
(39,172,o),
(102,54,o),
(214,-12,o),
(287,-12,qs)
);
},
{
closed = 1;
nodes = (
(146,295,l),
(153,355,o),
(232,420,o),
(285,420,qs),
(342,420,o),
(419,352,o),
(421,295,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
0 3 1 2 1 3 2 128 0 6 0 1 3 6 1 103 0 5 5 0 97 0 0 0 42 77 0 2 2 4 97 7 1 4 4 40 4 78 0 0 31 30 28 26 0 24 0 23 18 34 21 38 8 8 26
CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = e;
unicode = 101;
},
{
glyphname = eacute;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (285,0);
},
{
name = ogonek;
pos = (393,10);
},
{
name = top;
pos = (283,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (174,0);
ref = acutecomb;
}
);
width = 561;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ebreve;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (285,0);
},
{
name = ogonek;
pos = (393,10);
},
{
name = top;
pos = (283,722);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (135,0);
ref = uni0306;
}
);
width = 561;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = ecaron;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (285,0);
},
{
name = ogonek;
pos = (393,10);
},
{
name = top;
pos = (283,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (142,0);
ref = uni030C;
}
);
width = 561;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = ecircumflex;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (285,0);
},
{
name = ogonek;
pos = (393,10);
},
{
name = top;
pos = (283,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (142,0);
ref = uni0302;
}
);
width = 561;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (285,0);
},
{
name = ogonek;
pos = (393,10);
},
{
name = top;
pos = (283,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (113,0);
ref = uni0308;
}
);
width = 561;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = edotaccent;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (285,0);
},
{
name = ogonek;
pos = (393,10);
},
{
name = top;
pos = (283,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (213,0);
ref = uni0307;
}
);
width = 561;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = egrave;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (285,0);
},
{
name = ogonek;
pos = (393,10);
},
{
name = top;
pos = (283,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (174,0);
ref = gravecomb;
}
);
width = 561;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = emacron;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (285,0);
},
{
name = ogonek;
pos = (393,10);
},
{
name = top;
pos = (283,693);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (108,0);
ref = uni0304;
}
);
width = 561;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = eogonek;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (285,0);
},
{
name = ogonek;
pos = (393,10);
},
{
name = top;
pos = (283,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(146,295,l),
(153,355,o),
(232,420,o),
(285,420,qs),
(342,420,o),
(419,352,o),
(421,295,q)
);
},
{
closed = 1;
nodes = (
(356,-196,o),
(397,-183,q),
(397,-117,l),
(360,-132,o),
(329,-132,qs),
(303,-132,o),
(273,-108,o),
(273,-87,qs),
(273,-68,o),
(303,-34,o),
(338,-17,qs),
(385,6,ls),
(434,26,o),
(500,102,o),
(515,151,q),
(405,151,l),
(390,115,o),
(329,76,o),
(286,76,qs),
(226,76,o),
(149,156,o),
(145,220,q),
(526,220,l),
(529,247,o),
(529,268,qs),
(529,336,o),
(468,446,o),
(358,508,o),
(288,508,qs),
(214,508,o),
(101,443,o),
(39,326,o),
(39,248,qs),
(39,147,o),
(147,9,o),
(237,-8,q),
(190,-47,o),
(190,-97,qs),
(190,-146,o),
(262,-196,o),
(316,-196,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
44 11 2 6 4 45 1 7 6 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 5 3 4 3 5 4 128 0 4 6 3 4 6 126 0 1 0 3 5 1 3 103 0 0 0 2 97 0 2 2 42 77 0 6 6 7 98 8 1 7 7 38 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 5 3 4 3 5 4 128 0 4 6 3 4 6 126 0 1 0 3 5 1 3 103 0 6 8 1 7 6 7 102 0 0 0 2 97 0 2 2 42 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
7 7 7 47 7 46 41 18 34 21 43 18 33 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = uni1EBD;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (285,0);
},
{
name = ogonek;
pos = (393,10);
},
{
name = top;
pos = (283,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (120,0);
ref = tildecomb;
}
);
width = 561;
}
);
note = uni1EBD;
unicode = 7869;
},
{
glyphname = uni0259;
kernLeft = c;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,-12,o),
(460,53,o),
(523,171,o),
(523,248,qs),
(523,323,o),
(462,441,o),
(349,508,o),
(274,508,qs),
(187,508,o),
(68,417,o),
(46,345,q),
(156,345,l),
(172,381,o),
(233,420,o),
(276,420,qs),
(335,420,o),
(412,342,o),
(417,277,q),
(35,277,l),
(33,259,o),
(33,229,qs),
(33,160,o),
(94,51,o),
(203,-12,o),
(273,-12,qs)
);
},
{
closed = 1;
nodes = (
(219,76,o),
(142,145,o),
(140,202,q),
(416,202,l),
(409,141,o),
(330,76,o),
(276,76,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 2 1 0 1 2 0 128 0 0 0 5 6 0 5 103 0 1 1 3 97 0 3 3 42 77 8 1 6 6 4 97 7 1 4 4 40 4 78 25 25 0 0 25 31 25 30 28 27 0 24 0 23 34 18 34 21 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = uni0259;
unicode = 601;
},
{
glyphname = f;
kernLeft = f;
kernRight = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,0,l),
(183,407,l),
(289,407,l),
(289,496,l),
(183,496,l),
(183,547,ls),
(183,581,o),
(213,610,o),
(249,610,qs),
(278,610,l),
(278,700,l),
(232,700,ls),
(156,700,o),
(77,627,o),
(77,548,qs),
(77,496,l),
(11,496,l),
(11,407,l),
(77,407,l),
(77,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 3 3 2 97 0 2 2 33 77 5 1 0 0 1 95 4 1 1 1 36 77 0 6 6 34 6 78 17 17 19 33 35 17 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 321;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (254,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(328,-232,o),
(432,-192,o),
(494,-115,o),
(494,-62,qs),
(494,17,o),
(394,92,o),
(304,92,qs),
(217,92,ls),
(177,92,o),
(138,115,o),
(138,139,qs),
(138,150,o),
(151,171,o),
(162,176,q),
(204,155,o),
(254,155,qs),
(310,155,o),
(401,198,o),
(454,279,o),
(454,332,qs),
(454,371,o),
(434,413,q),
(507,413,l),
(507,496,l),
(333,496,l),
(297,508,o),
(254,508,qs),
(166,508,o),
(54,413,o),
(54,332,qs),
(54,265,o),
(99,217,q),
(41,180,o),
(41,118,qs),
(41,61,o),
(94,31,q),
(62,13,o),
(29,-39,o),
(29,-76,qs),
(29,-156,o),
(161,-232,o),
(265,-232,qs)
);
},
{
closed = 1;
nodes = (
(204,-147,o),
(128,-110,o),
(128,-70,qs),
(128,-35,o),
(177,2,o),
(222,2,qs),
(301,2,ls),
(394,2,o),
(394,-70,qs),
(394,-107,o),
(321,-147,o),
(264,-147,qs)
);
},
{
closed = 1;
nodes = (
(207,240,o),
(153,291,o),
(153,332,qs),
(153,372,o),
(208,423,o),
(253,423,qs),
(298,423,o),
(355,371,o),
(355,332,qs),
(355,291,o),
(298,240,o),
(253,240,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
27 9 2 3 9 5 1 6 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
12 1 9 0 3 4 9 3 105 8 1 2 2 0 97 1 1 0 0 42 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
12 1 9 0 3 4 9 3 105 8 1 2 2 0 97 0 0 0 42 77 8 1 2 2 1 95 0 1 1 36 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
12 1 9 0 3 4 9 3 105 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
12 1 9 0 3 4 9 3 105 11 1 7 10 1 5 7 5 101 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 77 0 4 4 6 95 0 6 6 34 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
54 54 42 42 0 0 54 65 54 64 60 58 42 53 42 52 48 45 0 41 0 40 54 37 17 17 45 13 8 27
CALL[ ]	/* CallFunction */";
};
width = 528;
}
);
note = g;
unicode = 103;
},
{
glyphname = gbreve;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (254,722);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (105,0);
ref = uni0306;
}
);
width = 528;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = uni0123;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (254,804);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (196,0);
ref = uni0312;
}
);
width = 528;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = gdotaccent;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (254,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (183,0);
ref = uni0307;
}
);
width = 528;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = h;
kernLeft = b;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,0,l),
(163,266,ls),
(163,337,o),
(235,418,o),
(296,418,qs),
(354,418,o),
(415,345,o),
(415,278,qs),
(415,0,l),
(520,0,l),
(520,291,ls),
(520,396,o),
(415,508,o),
(327,508,qs),
(276,508,o),
(187,465,o),
(163,425,q),
(163,700,l),
(57,700,l),
(57,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 1 3 1 1 76 0 0 0 33 77 0 3 3 1 97 0 1 1 42 77 4 1 2 2 34 2 78 19 35 19 35 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = h;
unicode = 104;
},
{
glyphname = hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,0,l),
(163,266,ls),
(163,337,o),
(235,418,o),
(296,418,qs),
(354,418,o),
(415,345,o),
(415,278,qs),
(415,0,l),
(520,0,l),
(520,291,ls),
(520,396,o),
(415,508,o),
(327,508,qs),
(276,508,o),
(187,465,o),
(163,425,q),
(163,565,l),
(327,565,l),
(327,641,l),
(163,641,l),
(163,700,l),
(57,700,l),
(57,641,l),
(14,641,l),
(14,565,l),
(57,565,l),
(57,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
10 1 7 5 1 76 3 1 1 4 1 0 5 1 0 103 0 2 2 33 77 0 7 7 5 97 0 5 5 42 77 8 1 6 6 34 6 78 19 35 19 35 17 17 17 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = i;
kernLeft = i;
kernRight = i;
layers = (
{
anchors = (
{
name = bottom;
pos = (117,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(147,583,o),
(188,624,o),
(188,654,qs),
(188,683,o),
(147,723,o),
(117,723,qs),
(88,723,o),
(47,683,o),
(47,654,qs),
(47,624,o),
(88,583,o),
(117,583,qs)
);
},
{
closed = 1;
nodes = (
(170,0,l),
(170,496,l),
(64,496,l),
(64,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 1 0 97 0 0 0 41 77 0 2 2 36 77 0 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 1 0 97 0 0 0 39 77 0 2 2 36 77 0 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 0 4 1 1 2 0 1 105 0 2 2 36 77 0 3 3 34 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 15 14 13 12 0 11 0 10 36 5 8 23
CALL[ ]	/* CallFunction */";
};
width = 233;
}
);
note = i;
unicode = 105;
},
{
glyphname = dotlessi;
kernLeft = dotlessi;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (163,0);
},
{
name = top;
pos = (111,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,0,l),
(163,496,l),
(57,496,l),
(57,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 36 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 221;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = iacute;
kernLeft = iacute;
kernRight = iacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (163,0);
},
{
name = top;
pos = (111,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (2,0);
ref = acutecomb;
}
);
width = 221;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = ibreve;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (163,0);
},
{
name = top;
pos = (111,722);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-38,0);
ref = uni0306;
}
);
width = 221;
}
);
note = ibreve;
unicode = 301;
},
{
glyphname = icircumflex;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (163,0);
},
{
name = top;
pos = (111,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-31,0);
ref = uni0302;
}
);
width = 221;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (163,0);
},
{
name = top;
pos = (111,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-60,0);
ref = uni0308.narrow;
}
);
width = 221;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = i.loclTRK;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (163,0);
},
{
name = top;
pos = (111,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (40,0);
ref = uni0307;
}
);
width = 221;
}
);
note = i.loclTRK;
},
{
glyphname = igrave;
kernRight = igrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (163,0);
},
{
name = top;
pos = (111,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (2,0);
ref = gravecomb;
}
);
width = 221;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = imacron;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (163,0);
},
{
name = top;
pos = (111,693);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-65,0);
ref = uni0304;
}
);
width = 221;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = iogonek;
kernLeft = dotlessi;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (163,0);
},
{
name = top;
pos = (111,723);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(140,583,o),
(181,624,o),
(181,654,qs),
(181,683,o),
(140,723,o),
(111,723,qs),
(81,723,o),
(40,683,o),
(40,654,qs),
(40,624,o),
(81,583,o),
(111,583,qs)
);
},
{
closed = 1;
nodes = (
(127,-206,o),
(168,-193,q),
(168,-127,l),
(131,-142,o),
(100,-142,qs),
(74,-142,o),
(44,-118,o),
(44,-97,qs),
(44,-78,o),
(74,-44,o),
(109,-27,qs),
(164,0,l),
(163,2,l),
(163,496,l),
(57,496,l),
(57,15,l),
(6,-12,o),
(-39,-72,o),
(-39,-107,qs),
(-39,-156,o),
(33,-206,o),
(87,-206,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
30 20 17 3 3 2 31 1 4 3 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
5 1 1 1 0 97 0 0 0 41 77 0 2 2 36 77 0 3 3 4 98 6 1 4 4 38 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
5 1 1 1 0 97 0 0 0 39 77 0 2 2 36 77 0 3 3 4 98 6 1 4 4 38 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 3 6 1 4 3 4 102 5 1 1 1 0 97 0 0 0 39 77 0 2 2 36 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 5 1 1 2 0 1 105 0 3 6 1 4 3 4 102 0 2 2 36 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
12 12 0 0 12 33 12 32 29 27 19 18 0 11 0 10 36 7 8 23
CALL[ ]	/* CallFunction */";
};
width = 221;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = itilde;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (163,0);
},
{
name = top;
pos = (111,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-53,0);
ref = tildecomb;
}
);
width = 221;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = ij;
layers = (
{
anchors = (
{
name = bottom;
pos = (117,0);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = i;
},
{
alignment = -1;
pos = (233,0);
ref = j;
}
);
width = 468;
}
);
note = ij;
unicode = 307;
},
{
glyphname = j;
kernLeft = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(17,-220,ls),
(172,-220,o),
(172,-68,qs),
(172,496,l),
(66,496,l),
(66,-67,ls),
(66,-100,o),
(35,-129,o),
(1,-129,qs),
(-32,-129,l),
(-32,-220,l)
);
},
{
closed = 1;
nodes = (
(149,583,o),
(190,624,o),
(190,654,qs),
(190,683,o),
(149,723,o),
(120,723,qs),
(91,723,o),
(50,683,o),
(50,654,qs),
(50,624,o),
(91,583,o),
(120,583,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
5 1 4 4 3 97 0 3 3 41 77 0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
5 1 4 4 3 97 0 3 3 39 77 0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 5 1 4 1 3 4 105 0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
11 11 11 22 11 21 37 34 19 32 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 235;
}
);
note = j;
unicode = 106;
},
{
glyphname = uni0237;
layers = (
{
anchors = (
{
name = bottom;
pos = (118,-310);
},
{
name = top;
pos = (118,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(17,-220,ls),
(172,-220,o),
(172,-68,qs),
(172,496,l),
(66,496,l),
(66,-67,ls),
(66,-100,o),
(35,-129,o),
(1,-129,qs),
(-32,-129,l),
(-32,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78 34 19 32 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 235;
}
);
note = uni0237;
unicode = 567;
},
{
glyphname = uni006A0301;
layers = (
{
anchors = (
{
name = bottom;
pos = (118,-310);
},
{
name = top;
pos = (118,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni0237;
},
{
alignment = -1;
pos = (9,0);
ref = acutecomb;
}
);
width = 235;
}
);
note = uni006A0301;
},
{
glyphname = k;
kernLeft = b;
kernRight = k;
layers = (
{
anchors = (
{
name = bottom;
pos = (257,0);
},
{
name = top;
pos = (257,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,0,l),
(163,234,l),
(361,0,l),
(497,0,l),
(262,260,l),
(481,496,l),
(347,496,l),
(163,287,l),
(163,700,l),
(57,700,l),
(57,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
8 5 2 3 2 1 1 76 0 0 0 33 77 0 1 1 36 77 3 1 2 2 34 2 78 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 514;
}
);
note = k;
unicode = 107;
},
{
glyphname = uni0137;
kernLeft = b;
kernRight = k;
layers = (
{
anchors = (
{
name = bottom;
pos = (257,-256);
},
{
name = top;
pos = (257,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = k;
},
{
alignment = -1;
pos = (202,0);
ref = uni0326;
}
);
width = 514;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = l;
kernLeft = b;
kernRight = l;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = top;
pos = (111,700);
},
{
name = topright;
pos = (202,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,0,l),
(163,700,l),
(57,700,l),
(57,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 221;
}
);
note = l;
unicode = 108;
},
{
glyphname = lacute;
kernLeft = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = top;
pos = (111,953);
},
{
name = topright;
pos = (202,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (2,204);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
204
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 221;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = lcaron;
kernLeft = b;
kernRight = dcaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = top;
pos = (111,700);
},
{
name = topright;
pos = (202,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (202,0);
ref = uni030C.alt;
}
);
width = 221;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = uni013C;
kernLeft = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (111,-256);
},
{
name = top;
pos = (111,700);
},
{
name = topright;
pos = (202,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (55,0);
ref = uni0326;
}
);
width = 221;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = ldot;
kernLeft = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,0,l),
(170,700,l),
(64,700,l),
(64,0,l)
);
},
{
closed = 1;
nodes = (
(312,311,o),
(344,343,o),
(344,366,qs),
(344,390,o),
(312,423,o),
(288,423,qs),
(265,423,o),
(232,390,o),
(232,366,qs),
(232,343,o),
(265,311,o),
(288,311,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 4 1 3 1 2 3 105 0 0 0 33 77 0 1 1 34 1 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 350;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = lslash;
kernLeft = b;
kernRight = lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,0,l),
(186,379,l),
(259,406,l),
(259,494,l),
(186,466,l),
(186,700,l),
(80,700,l),
(80,427,l),
(9,399,l),
(9,312,l),
(80,339,l),
(80,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
9 8 7 6 3 2 1 0 8 1 0 1 76 0 0 0 33 77 0 1 1 34 1 78 21 20 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 284;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = m;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,0,l),
(163,266,ls),
(163,339,o),
(233,417,o),
(288,417,qs),
(343,417,o),
(403,345,o),
(403,278,qs),
(403,0,l),
(508,0,l),
(508,266,ls),
(508,337,o),
(575,417,o),
(633,417,qs),
(690,417,o),
(748,345,o),
(748,278,qs),
(748,0,l),
(853,0,l),
(853,292,ls),
(853,398,o),
(744,508,o),
(654,508,qs),
(601,508,o),
(510,457,o),
(485,411,q),
(461,459,o),
(371,508,o),
(312,508,qs),
(264,508,o),
(186,469,o),
(162,432,q),
(159,496,l),
(57,496,l),
(57,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
2 1 4 0 8 1 3 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
6 1 4 4 0 97 2 1 2 0 0 36 77 7 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 0 36 77 6 1 4 4 1 97 2 1 1 1 42 77 7 5 2 3 3 34 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
19 35 19 35 19 36 35 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 901;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (295,0);
},
{
name = top;
pos = (296,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,0,l),
(163,266,ls),
(163,337,o),
(234,418,o),
(294,418,qs),
(353,418,o),
(414,345,o),
(414,278,qs),
(414,0,l),
(520,0,l),
(520,291,ls),
(520,396,o),
(415,508,o),
(325,508,qs),
(274,508,o),
(185,463,o),
(161,423,q),
(159,496,l),
(57,496,l),
(57,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 3 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 3 3 0 97 1 1 0 0 36 77 4 1 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 36 77 0 3 3 1 97 0 1 1 42 77 4 1 2 2 34 2 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
19 35 19 35 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = n;
unicode = 110;
},
{
glyphname = nacute;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (295,0);
},
{
name = top;
pos = (296,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (187,0);
ref = acutecomb;
}
);
width = 568;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = ncaron;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (295,0);
},
{
name = top;
pos = (296,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (155,0);
ref = uni030C;
}
);
width = 568;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = uni0146;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (295,-256);
},
{
name = top;
pos = (296,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (239,0);
ref = uni0326;
}
);
width = 568;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = ntilde;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (295,0);
},
{
name = top;
pos = (296,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (133,0);
ref = tildecomb;
}
);
width = 568;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = eng;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(365,-220,ls),
(520,-220,o),
(520,-68,qs),
(520,291,ls),
(520,396,o),
(415,508,o),
(325,508,qs),
(274,508,o),
(185,463,o),
(161,423,q),
(159,496,l),
(57,496,l),
(57,0,l),
(163,0,l),
(163,266,ls),
(163,337,o),
(234,418,o),
(294,418,qs),
(353,418,o),
(414,345,o),
(414,278,qs),
(414,-67,ls),
(414,-100,o),
(383,-129,o),
(349,-129,qs),
(315,-129,l),
(315,-220,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
16 1 1 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 3 97 4 1 3 3 36 77 0 2 2 34 77 0 0 0 5 97 0 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 3 3 36 77 0 1 1 4 97 0 4 4 42 77 0 2 2 34 77 0 0 0 5 97 0 5 5 38 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 35 17 19 37 32 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = eng;
unicode = 331;
},
{
glyphname = o;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (297,496);
},
{
name = topright;
pos = (572,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,-12,o),
(488,55,o),
(555,174,o),
(555,249,qs),
(555,327,o),
(487,445,o),
(369,508,o),
(297,508,qs),
(224,508,o),
(107,445,o),
(39,327,o),
(39,249,qs),
(39,170,o),
(105,52,o),
(221,-12,o),
(293,-12,qs)
);
},
{
closed = 1;
nodes = (
(254,80,o),
(186,119,o),
(146,196,o),
(146,249,qs),
(146,322,o),
(226,416,o),
(295,416,qs),
(362,416,o),
(447,325,o),
(447,250,qs),
(447,201,o),
(407,124,o),
(338,80,o),
(294,80,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 42 77 5 1 3 3 1 97 4 1 1 1 40 1 78 16 16 0 0 16 29 16 28 23 21 0 15 0 14 38 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = o;
unicode = 111;
},
{
glyphname = oacute;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (297,749);
},
{
name = topright;
pos = (572,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (188,0);
ref = acutecomb;
}
);
width = 593;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = obreve;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (297,722);
},
{
name = topright;
pos = (572,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (148,0);
ref = uni0306;
}
);
width = 593;
}
);
note = obreve;
unicode = 335;
},
{
glyphname = ocircumflex;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (297,730);
},
{
name = topright;
pos = (572,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (155,0);
ref = uni0302;
}
);
width = 593;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = odieresis;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (297,723);
},
{
name = topright;
pos = (572,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (126,0);
ref = uni0308;
}
);
width = 593;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = ograve;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (297,749);
},
{
name = topright;
pos = (572,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (188,0);
ref = gravecomb;
}
);
width = 593;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = ohungarumlaut;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (297,711);
},
{
name = topright;
pos = (572,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (165,0);
ref = uni030B;
}
);
width = 593;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = omacron;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (297,693);
},
{
name = topright;
pos = (572,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (121,0);
ref = uni0304;
}
);
width = 593;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(370,-12,o),
(487,54,o),
(552,173,o),
(552,248,qs),
(552,350,o),
(494,421,q),
(560,496,l),
(469,496,l),
(443,466,l),
(382,508,o),
(298,508,qs),
(227,508,o),
(110,444,o),
(42,326,o),
(42,248,qs),
(42,144,o),
(100,75,q),
(35,0,l),
(126,0,l),
(151,29,l),
(212,-12,o),
(295,-12,qs)
);
},
{
closed = 1;
nodes = (
(251,79,o),
(216,103,q),
(424,341,l),
(445,302,o),
(445,249,qs),
(445,177,o),
(363,79,o),
(296,79,qs)
);
},
{
closed = 1;
nodes = (
(170,155,l),
(149,195,o),
(149,248,qs),
(149,322,o),
(228,418,o),
(297,418,qs),
(342,418,o),
(378,393,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
15 12 2 5 1 37 36 27 26 4 4 5 4 1 2 0 4 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
15 12 2 5 2 37 36 27 26 4 4 5 4 1 2 0 4 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 42 77 7 1 4 4 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 36 77 0 5 5 1 97 0 1 1 42 77 0 0 0 34 77 7 1 4 4 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
22 22 0 0 32 30 22 29 22 28 0 21 0 20 18 38 18 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 592;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = otilde;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (297,0);
},
{
name = ogonek;
pos = (405,10);
},
{
name = top;
pos = (297,705);
},
{
name = topright;
pos = (572,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (133,0);
ref = tildecomb;
}
);
width = 593;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = oe;
kernLeft = c;
kernRight = ae;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(352,-12,o),
(452,41,o),
(482,90,q),
(515,41,o),
(618,-12,o),
(683,-12,qs),
(769,-12,o),
(889,79,o),
(912,151,q),
(806,151,l),
(789,116,o),
(726,76,o),
(683,76,qs),
(622,76,o),
(541,156,o),
(537,223,q),
(923,223,l),
(925,271,ls),
(925,336,o),
(895,390,qs),
(864,445,o),
(756,508,o),
(684,508,qs),
(619,508,o),
(514,454,o),
(482,406,q),
(452,455,o),
(354,508,o),
(291,508,qs),
(221,508,o),
(163,476,qs),
(105,442,o),
(39,325,o),
(39,248,qs),
(39,171,o),
(72,112,qs),
(105,53,o),
(219,-12,o),
(289,-12,qs)
);
},
{
closed = 1;
nodes = (
(227,80,o),
(147,171,o),
(147,248,qs),
(147,324,o),
(225,417,o),
(291,417,qs),
(352,417,o),
(433,325,o),
(433,248,qs),
(433,173,o),
(354,80,o),
(289,80,qs)
);
},
{
closed = 1;
nodes = (
(540,296,l),
(547,355,o),
(627,421,o),
(683,421,qs),
(740,421,o),
(816,353,o),
(819,296,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 80 values pushed */
12 1 10 7 35 1 3 4 2 76 0 4 2 3 2 4 3 128 0 10 0 2 4 10 2 103 9 1 7 7 0 97 1 1 0 0 42 77 12 8 2 3 3 5 97 11 6 2 5 5 40 5 78 39 39 0 0 57 56 54 52 39 50 39 49 45 43 0 38 0 37 34 18 34 21 36 40 13 8 28
CALL[ ]	/* CallFunction */";
};
width = 957;
}
);
note = oe;
unicode = 339;
},
{
glyphname = p;
kernLeft = p;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,-220,l),
(163,76,l),
(187,37,o),
(278,-12,o),
(337,-12,qs),
(408,-12,o),
(516,57,o),
(575,176,o),
(575,249,qs),
(575,322,o),
(517,440,o),
(409,508,o),
(337,508,qs),
(280,508,o),
(191,461,o),
(163,421,q),
(159,496,l),
(57,496,l),
(57,-220,l)
);
},
{
closed = 1;
nodes = (
(248,81,o),
(164,176,o),
(164,248,qs),
(164,322,o),
(249,416,o),
(315,416,qs),
(382,416,o),
(467,324,o),
(467,249,qs),
(467,176,o),
(383,81,o),
(315,81,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
2 1 4 0 16 1 2 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 0 97 1 1 0 0 36 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 0 36 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 19 19 30 19 29 37 19 38 35 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = p;
unicode = 112;
},
{
glyphname = thorn;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,-220,l),
(163,76,l),
(189,34,o),
(279,-12,o),
(337,-12,qs),
(409,-12,o),
(520,56,o),
(582,174,o),
(582,247,qs),
(582,320,o),
(521,439,o),
(410,508,o),
(337,508,qs),
(224,508,o),
(163,420,q),
(163,700,l),
(57,700,l),
(57,-220,l)
);
},
{
closed = 1;
nodes = (
(249,81,o),
(163,175,o),
(163,248,qs),
(163,322,o),
(250,416,o),
(319,416,qs),
(388,416,o),
(474,321,o),
(474,248,qs),
(474,174,o),
(387,81,o),
(319,81,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
2 1 4 1 15 1 2 5 2 76 0 0 0 33 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78 18 18 18 29 18 28 37 19 38 34 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = q;
kernLeft = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(451,-220,l),
(557,-220,l),
(557,496,l),
(455,496,l),
(451,424,l),
(424,464,o),
(334,508,o),
(280,508,qs),
(208,508,o),
(99,439,o),
(39,321,o),
(39,249,qs),
(39,176,o),
(100,57,o),
(208,-11,o),
(278,-11,qs),
(338,-11,o),
(426,38,o),
(451,74,q)
);
},
{
closed = 1;
nodes = (
(256,81,o),
(187,123,o),
(147,200,o),
(147,249,qs),
(147,297,o),
(186,373,o),
(255,416,o),
(298,416,qs),
(366,416,o),
(450,321,o),
(450,248,qs),
(450,173,o),
(365,81,o),
(298,81,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
13 1 4 1 18 1 0 5 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
13 1 4 2 18 1 0 5 2 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 1 97 2 1 1 1 42 77 6 1 5 5 0 97 0 0 0 40 77 0 3 3 38 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 2 36 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 0 97 0 0 0 40 77 0 3 3 38 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 19 19 32 19 31 38 17 19 38 33 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = q;
unicode = 113;
},
{
glyphname = r;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = top;
pos = (177,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,0,l),
(163,249,ls),
(163,324,o),
(233,397,o),
(304,397,qs),
(333,397,l),
(333,508,l),
(275,508,o),
(187,458,o),
(162,412,q),
(159,496,l),
(57,496,l),
(57,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 2 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 2 2 0 97 1 1 0 0 36 77 0 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 36 77 0 2 2 1 97 0 1 1 42 77 0 3 3 34 3 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 33 19 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 353;
}
);
note = r;
unicode = 114;
},
{
glyphname = racute;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = top;
pos = (177,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (68,0);
ref = acutecomb;
}
);
width = 353;
}
);
note = racute;
unicode = 341;
},
{
glyphname = rcaron;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = top;
pos = (177,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (35,0);
ref = uni030C;
}
);
width = 353;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = uni0157;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (116,-256);
},
{
name = top;
pos = (177,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (61,0);
ref = uni0326;
}
);
width = 353;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = s;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (251,0);
},
{
name = top;
pos = (244,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(339,-12,o),
(448,72,o),
(448,141,qs),
(447,189,o),
(402,248,o),
(327,280,o),
(268,293,qs),
(217,305,o),
(157,337,o),
(157,364,qs),
(157,392,o),
(202,422,o),
(240,422,qs),
(280,422,o),
(331,384,o),
(335,349,q),
(437,349,l),
(430,425,o),
(325,508,o),
(242,508,qs),
(160,508,o),
(53,426,o),
(53,359,qs),
(53,295,o),
(146,232,o),
(230,213,qs),
(288,200,o),
(344,171,o),
(344,138,qs),
(344,109,o),
(295,74,o),
(254,74,qs),
(210,74,o),
(149,119,o),
(142,156,q),
(35,156,l),
(42,80,o),
(166,-12,o),
(254,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 42 77 0 1 1 5 97 6 1 5 5 40 5 78 0 0 0 38 0 37 34 18 42 34 18 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 487;
}
);
note = s;
unicode = 115;
},
{
glyphname = sacute;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (251,0);
},
{
name = top;
pos = (244,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (135,0);
ref = acutecomb;
}
);
width = 487;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = scaron;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (251,0);
},
{
name = top;
pos = (244,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (102,0);
ref = uni030C;
}
);
width = 487;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = scedilla;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (251,-261);
},
{
name = top;
pos = (244,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(286,-261,ls),
(341,-261,o),
(412,-206,o),
(412,-157,qs),
(412,-107,o),
(339,-55,o),
(282,-56,q),
(282,-11,l),
(356,-4,o),
(448,78,o),
(448,141,qs),
(447,189,o),
(402,248,o),
(327,280,o),
(268,293,qs),
(217,305,o),
(157,337,o),
(157,364,qs),
(157,392,o),
(202,422,o),
(240,422,qs),
(280,422,o),
(331,384,o),
(335,349,q),
(437,349,l),
(430,425,o),
(325,508,o),
(242,508,qs),
(160,508,o),
(53,426,o),
(53,359,qs),
(53,295,o),
(146,232,o),
(230,213,qs),
(288,200,o),
(344,171,o),
(344,138,qs),
(344,109,o),
(295,74,o),
(254,74,qs),
(210,74,o),
(149,119,o),
(142,156,q),
(35,156,l),
(42,89,o),
(140,1,o),
(214,-9,q),
(214,-115,l),
(269,-115,ls),
(330,-115,o),
(330,-155,qs),
(330,-197,o),
(269,-197,qs),
(167,-197,l),
(167,-261,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
46 7 2 7 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 3 7 7 3 112 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 6 6 4 97 0 4 4 42 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 3 7 6 3 7 126 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 6 6 4 97 0 4 4 42 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 29 34 18 42 34 20 34 32 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 487;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = uni0219;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (251,-256);
},
{
name = top;
pos = (244,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (195,0);
ref = uni0326;
}
);
width = 487;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = germandbls;
kernLeft = b;
kernRight = germandbls;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(533,-10,o),
(641,78,o),
(641,155,qs),
(641,217,o),
(571,289,o),
(502,314,qs),
(443,335,o),
(394,363,o),
(394,388,qs),
(394,406,o),
(418,429,o),
(441,444,qs),
(482,469,o),
(527,519,o),
(527,563,qs),
(527,616,o),
(467,692,o),
(365,732,o),
(303,732,qs),
(193,732,o),
(59,618,o),
(59,515,qs),
(59,0,l),
(164,0,l),
(164,506,ls),
(164,570,o),
(230,643,o),
(300,643,qs),
(352,643,o),
(422,598,o),
(422,553,qs),
(422,530,o),
(398,497,o),
(375,481,qs),
(335,454,ls),
(287,423,o),
(287,373,qs),
(287,338,o),
(330,289,o),
(391,258,o),
(438,242,qs),
(487,226,o),
(536,187,o),
(536,148,qs),
(536,110,o),
(487,71,o),
(446,71,qs),
(399,71,o),
(344,127,o),
(339,172,q),
(237,172,l),
(247,85,o),
(361,-10,o),
(448,-10,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 1 1 3 97 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 2 1 2 0 1 128 0 4 0 2 0 4 2 105 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 53 0 52 35 33 30 29 26 24 34 18 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 666;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = t;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = top;
pos = (185,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(331,0,l),
(331,90,l),
(275,90,ls),
(238,90,o),
(205,118,o),
(205,154,qs),
(205,407,l),
(331,407,l),
(331,496,l),
(205,496,l),
(205,616,l),
(99,616,l),
(99,496,l),
(24,496,l),
(24,407,l),
(99,407,l),
(99,154,ls),
(99,74,o),
(177,0,o),
(253,0,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 2 1 2 133 4 1 0 0 1 95 3 1 1 1 36 77 0 5 5 6 96 7 1 6 6 34 6 78 0 0 0 19 0 18 35 17 17 17 17 19 8 8 28
CALL[ ]	/* CallFunction */";
};
width = 369;
}
);
note = t;
unicode = 116;
},
{
glyphname = tcaron;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = top;
pos = (185,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (253,0);
ref = uni030C.alt;
}
);
width = 369;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = uni0163;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,-261);
},
{
name = top;
pos = (185,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(264,-261,ls),
(319,-261,o),
(390,-206,o),
(390,-157,qs),
(390,-107,o),
(317,-55,o),
(260,-56,q),
(260,0,l),
(331,0,l),
(331,90,l),
(275,90,ls),
(238,90,o),
(205,118,o),
(205,154,qs),
(205,407,l),
(331,407,l),
(331,496,l),
(205,496,l),
(205,616,l),
(99,616,l),
(99,496,l),
(24,496,l),
(24,407,l),
(99,407,l),
(99,154,ls),
(99,33,o),
(192,7,q),
(192,-115,l),
(247,-115,ls),
(308,-115,o),
(308,-155,qs),
(308,-197,o),
(247,-197,qs),
(145,-197,l),
(145,-261,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
7 1 8 7 1 76 0 4 3 4 133 0 9 0 1 0 9 1 106 0 0 0 10 0 10 99 6 1 2 2 3 95 5 1 3 3 36 77 0 7 7 8 95 0 8 8 34 8 78 34 32 28 27 17 35 17 17 17 17 20 34 32 11 8 31
CALL[ ]	/* CallFunction */";
};
width = 369;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = uni021B;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,-256);
},
{
name = top;
pos = (185,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (173,0);
ref = uni0326;
}
);
width = 369;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = u;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (284,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,496);
},
{
name = topright;
pos = (547,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(295,-12,o),
(381,34,o),
(406,74,q),
(408,0,l),
(510,0,l),
(510,496,l),
(404,496,l),
(404,230,ls),
(404,159,o),
(334,78,o),
(273,78,qs),
(214,78,o),
(153,151,o),
(153,218,qs),
(153,496,l),
(48,496,l),
(48,204,ls),
(48,102,o),
(153,-12,o),
(245,-12,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
16 1 3 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
2 1 0 0 36 77 0 1 1 3 97 5 4 2 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 36 77 0 3 3 34 77 0 1 1 4 97 5 1 4 4 40 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 19 0 18 17 19 35 19 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = u;
unicode = 117;
},
{
glyphname = uacute;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (284,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,749);
},
{
name = topright;
pos = (547,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (173,0);
ref = acutecomb;
}
);
width = 567;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ubreve;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (284,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,722);
},
{
name = topright;
pos = (547,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (134,0);
ref = uni0306;
}
);
width = 567;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = ucircumflex;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (284,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,730);
},
{
name = topright;
pos = (547,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (141,0);
ref = uni0302;
}
);
width = 567;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (284,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,723);
},
{
name = topright;
pos = (547,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (112,0);
ref = uni0308;
}
);
width = 567;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = ugrave;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (284,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,749);
},
{
name = topright;
pos = (547,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (173,0);
ref = gravecomb;
}
);
width = 567;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uhungarumlaut;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (284,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,711);
},
{
name = topright;
pos = (547,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (150,0);
ref = uni030B;
}
);
width = 567;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = umacron;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (284,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,693);
},
{
name = topright;
pos = (547,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (107,0);
ref = uni0304;
}
);
width = 567;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = uogonek;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (284,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,496);
},
{
name = topright;
pos = (547,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(295,-12,o),
(381,34,o),
(406,74,q),
(408,17,l),
(354,-11,o),
(308,-72,o),
(308,-107,qs),
(308,-156,o),
(380,-206,o),
(434,-206,qs),
(474,-206,o),
(515,-193,q),
(515,-127,l),
(478,-142,o),
(447,-142,qs),
(421,-142,o),
(391,-118,o),
(391,-97,qs),
(391,-78,o),
(421,-44,o),
(456,-27,qs),
(511,0,l),
(510,2,l),
(510,496,l),
(404,496,l),
(404,230,ls),
(404,159,o),
(334,78,o),
(273,78,qs),
(214,78,o),
(153,151,o),
(153,218,qs),
(153,496,l),
(48,496,l),
(48,204,ls),
(48,102,o),
(153,-12,o),
(245,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
34 33 14 3 5 1 24 1 3 5 25 1 4 3 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
2 1 0 0 36 77 0 1 1 5 97 6 1 5 5 40 77 0 3 3 4 98 0 4 4 38 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 0 4 3 4 102 2 1 0 0 36 77 0 1 1 5 97 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 37 0 36 35 40 19 35 19 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = uring;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (284,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,766);
},
{
name = topright;
pos = (547,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (173,0);
ref = uni030A;
}
);
width = 567;
}
);
note = uring;
unicode = 367;
},
{
glyphname = utilde;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (284,0);
},
{
name = ogonek;
pos = (510,0);
},
{
name = top;
pos = (282,705);
},
{
name = topright;
pos = (547,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (119,0);
ref = tildecomb;
}
);
width = 567;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = v;
kernLeft = v;
kernRight = v;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(324,0,l),
(511,496,l),
(401,496,l),
(262,98,l),
(124,496,l),
(12,496,l),
(199,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 2 0 1 76 1 1 0 0 36 77 0 2 2 34 2 78 17 18 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 523;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (376,0);
},
{
name = top;
pos = (376,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(269,0,l),
(376,378,l),
(483,1,l),
(595,1,l),
(741,496,l),
(637,496,l),
(541,114,l),
(435,496,l),
(320,496,l),
(214,113,l),
(117,496,l),
(11,496,l),
(157,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
10 5 2 3 3 0 1 76 2 1 2 0 0 36 77 4 1 3 3 34 3 78 18 17 18 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 751;
}
);
note = w;
unicode = 119;
},
{
glyphname = wacute;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (376,0);
},
{
name = top;
pos = (376,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (267,0);
ref = acutecomb;
}
);
width = 751;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = wcircumflex;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (376,0);
},
{
name = top;
pos = (376,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (235,0);
ref = uni0302;
}
);
width = 751;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = wdieresis;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (376,0);
},
{
name = top;
pos = (376,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (206,0);
ref = uni0308;
}
);
width = 751;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = wgrave;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (376,0);
},
{
name = top;
pos = (376,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (267,0);
ref = gravecomb;
}
);
width = 751;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = x;
kernLeft = x;
kernRight = x;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,0,l),
(239,180,l),
(361,0,l),
(477,0,l),
(308,249,l),
(476,496,l),
(363,496,l),
(247,317,l),
(126,496,l),
(9,496,l),
(178,249,l),
(10,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 36 77 3 1 2 2 34 2 78 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 485;
}
);
note = x;
unicode = 120;
},
{
glyphname = y;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (273,0);
},
{
name = top;
pos = (273,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,-220,l),
(536,496,l),
(425,496,l),
(273,134,l),
(127,496,l),
(10,496,l),
(217,22,l),
(107,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
3 1 2 0 1 76 1 1 0 0 36 77 0 2 2 38 2 78 17 18 17 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 546;
}
);
note = y;
unicode = 121;
},
{
glyphname = yacute;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (273,0);
},
{
name = top;
pos = (273,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (164,0);
ref = acutecomb;
}
);
width = 546;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = ycircumflex;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (273,0);
},
{
name = top;
pos = (273,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (132,0);
ref = uni0302;
}
);
width = 546;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = ydieresis;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (273,0);
},
{
name = top;
pos = (273,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (103,0);
ref = uni0308;
}
);
width = 546;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = ygrave;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (273,0);
},
{
name = top;
pos = (273,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (164,0);
ref = gravecomb;
}
);
width = 546;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = uni1EF9;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (273,0);
},
{
name = top;
pos = (273,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (110,0);
ref = tildecomb;
}
);
width = 546;
}
);
note = uni1EF9;
unicode = 7929;
},
{
glyphname = z;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (217,0);
},
{
name = top;
pos = (217,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(401,0,l),
(401,88,l),
(148,88,l),
(397,411,l),
(397,496,l),
(32,496,l),
(32,409,l),
(277,409,l),
(29,86,l),
(29,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 0 1 0 1 3 2 2 76 0 0 0 1 95 0 1 1 36 77 0 2 2 3 95 0 3 3 34 3 78 17 18 17 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 433;
}
);
note = z;
unicode = 122;
},
{
glyphname = zacute;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (217,0);
},
{
name = top;
pos = (217,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (108,0);
ref = acutecomb;
}
);
width = 433;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = zcaron;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (217,0);
},
{
name = top;
pos = (217,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (75,0);
ref = uni030C;
}
);
width = 433;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = zdotaccent;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (217,0);
},
{
name = top;
pos = (217,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (146,0);
ref = uni0307;
}
);
width = 433;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = uniA78C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,335,l),
(177,700,l),
(63,700,l),
(80,335,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 239;
}
);
note = uniA78C;
unicode = 42892;
},
{
glyphname = fi;
layers = (
{
anchors = (
{
name = caret_1;
pos = (275,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,0,l),
(183,407,l),
(289,407,l),
(289,496,l),
(183,496,l),
(183,547,ls),
(183,581,o),
(213,610,o),
(249,610,qs),
(278,610,l),
(278,700,l),
(232,700,ls),
(156,700,o),
(77,627,o),
(77,548,qs),
(77,496,l),
(11,496,l),
(11,407,l),
(77,407,l),
(77,0,l)
);
},
{
closed = 1;
nodes = (
(486,0,l),
(486,496,l),
(380,496,l),
(380,0,l)
);
},
{
closed = 1;
nodes = (
(464,576,o),
(504,617,o),
(504,646,qs),
(504,675,o),
(464,716,o),
(434,716,qs),
(405,716,o),
(363,675,o),
(363,646,qs),
(363,617,o),
(405,576,o),
(434,576,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 3 3 2 97 9 1 2 2 33 77 11 1 10 10 2 97 9 1 2 2 33 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 3 3 2 97 0 2 2 33 77 11 1 10 10 9 97 0 9 9 39 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
24 24 24 35 24 34 30 28 17 17 17 17 19 33 35 17 16 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = fi;
unicode = 64257;
},
{
glyphname = fl;
kernRight = fl;
layers = (
{
anchors = (
{
name = caret_1;
pos = (271,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,0,l),
(183,407,l),
(289,407,l),
(289,496,l),
(183,496,l),
(183,547,ls),
(183,581,o),
(213,610,o),
(249,610,qs),
(278,610,l),
(278,700,l),
(232,700,ls),
(156,700,o),
(77,627,o),
(77,548,qs),
(77,496,l),
(11,496,l),
(11,407,l),
(77,407,l),
(77,0,l)
);
},
{
closed = 1;
nodes = (
(484,0,l),
(484,700,l),
(378,700,l),
(378,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 2 97 7 1 2 2 33 77 5 1 0 0 1 95 4 1 1 1 36 77 8 1 6 6 34 6 78 17 17 17 17 19 33 35 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = fl;
unicode = 64258;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,347,o),
(258,381,o),
(277,412,q),
(287,383,o),
(335,354,o),
(369,354,qs),
(381,354,l),
(381,418,l),
(344,418,o),
(344,455,qs),
(344,564,ls),
(344,633,o),
(263,710,o),
(194,710,qs),
(135,710,o),
(50,647,o),
(42,591,q),
(116,591,l),
(123,618,o),
(164,648,o),
(193,648,qs),
(228,648,o),
(268,604,o),
(269,563,q),
(181,563,ls),
(116,563,o),
(33,508,o),
(33,452,qs),
(33,403,o),
(104,347,o),
(156,347,qs)
);
},
{
closed = 1;
nodes = (
(145,407,o),
(109,433,o),
(109,458,qs),
(109,486,o),
(153,511,o),
(187,511,qs),
(269,511,l),
(269,468,o),
(215,407,o),
(173,407,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
27 1 5 4 1 76
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
27 1 8 4 1 76
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
27 1 5 4 1 76
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
27 1 8 4 1 76
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 10 8 2 4 4 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 9 6 2 5 5 58 77 10 1 8 8 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 10 8 2 4 4 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 9 6 2 5 5 58 77 10 1 8 8 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 0 5 5 58 77 10 1 8 8 6 97 9 1 6 6 58 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
31 31 0 0 31 40 31 39 35 33 0 30 0 29 33 20 34 18 34 36 11 10 28
CALL[ ]	/* CallFunction */";
};
width = 406;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(265,349,o),
(348,395,o),
(395,478,o),
(395,531,qs),
(395,587,o),
(347,669,o),
(265,712,o),
(214,712,qs),
(162,712,o),
(79,667,o),
(32,585,o),
(32,531,qs),
(32,476,o),
(80,393,o),
(162,349,o),
(212,349,qs)
);
},
{
closed = 1;
nodes = (
(167,415,o),
(111,478,o),
(111,531,qs),
(111,583,o),
(168,647,o),
(213,647,qs),
(259,647,o),
(315,584,o),
(315,531,qs),
(315,479,o),
(257,415,o),
(212,415,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 59 77 5 1 3 3 1 97 4 1 1 1 58 1 78 16 16 0 0 16 27 16 26 22 20 0 15 0 14 38 6 10 23
CALL[ ]	/* CallFunction */";
};
width = 426;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = uni042F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(29,0,l),
(156,0,l),
(332,303,l),
(429,303,l),
(429,0,l),
(535,0,l),
(535,700,l),
(310,700,ls),
(199,700,o),
(73,598,o),
(73,502,qs),
(73,353,o),
(227,321,q)
);
},
{
closed = 1;
nodes = (
(240,393,o),
(181,447,o),
(181,502,qs),
(181,556,o),
(241,611,o),
(313,611,qs),
(429,611,l),
(429,393,l),
(313,393,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
12 1 2 5 1 76 3 1 1 2 1 134 0 0 0 4 5 0 4 103 6 1 5 2 2 5 87 6 1 5 5 2 95 0 2 5 2 79 13 13 13 21 13 20 35 17 17 17 35 7 6 27
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = uni042F;
unicode = (1071,1103);
},
{
glyphname = uni0394;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(677,0,l),
(677,82,l),
(395,700,l),
(308,700,l),
(27,82,l),
(27,0,l)
);
},
{
closed = 1;
nodes = (
(351,580,l),
(569,82,l),
(135,82,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
7 1 2 0 1 76 3 0 2 2 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 23 77 3 1 2 2 1 95 0 1 1 24 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 2 0 133 3 1 2 2 1 95 0 1 1 24 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
6 6 6 8 6 8 18 17 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = uni0394;
unicode = 916;
},
{
glyphname = Pi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(222,0,l),
(222,414,l),
(424,414,l),
(424,0,l),
(530,0,l),
(530,414,l),
(607,414,l),
(607,496,l),
(40,496,l),
(40,414,l),
(116,414,l),
(116,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 1 4 2 2 0 3 1 0 103 5 1 3 3 24 3 78 17 17 17 17 17 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
note = Pi;
unicode = 928;
},
{
glyphname = uni03A9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(326,0,l),
(326,86,l),
(245,113,o),
(148,255,o),
(148,351,qs),
(148,419,o),
(202,540,o),
(313,616,o),
(394,616,qs),
(462,616,o),
(574,555,o),
(641,435,o),
(641,351,qs),
(641,256,o),
(546,113,o),
(463,86,q),
(463,0,l),
(736,0,l),
(736,82,l),
(607,82,l),
(677,125,o),
(749,271,o),
(749,360,qs),
(749,463,o),
(656,623,o),
(494,712,o),
(394,712,qs),
(295,712,o),
(134,623,o),
(41,462,o),
(41,360,qs),
(41,271,o),
(113,125,o),
(182,82,q),
(52,82,l),
(52,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
33 19 2 0 4 1 76 0 4 4 1 97 0 1 1 23 77 2 1 0 0 3 95 5 1 3 3 24 3 78 23 39 17 22 38 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 789;
}
);
note = uni03A9;
unicode = 937;
},
{
glyphname = uni03BC;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,-220,l),
(173,12,l),
(208,-12,o),
(261,-12,qs),
(318,-12,o),
(407,40,o),
(431,86,q),
(439,0,l),
(533,0,l),
(533,496,l),
(427,496,l),
(427,240,ls),
(427,164,o),
(352,78,o),
(291,78,qs),
(232,78,o),
(173,151,o),
(173,222,qs),
(173,496,l),
(67,496,l),
(67,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
13 1 1 0 18 1 3 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
2 1 0 1 0 133 0 3 3 24 77 0 1 1 4 97 0 4 4 24 77 0 5 5 25 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
2 1 0 1 0 133 0 1 0 4 5 1 4 105 0 3 3 24 77 0 5 5 25 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 35 17 19 35 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni03BC;
unicode = 956;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(433,-12,o),
(559,183,o),
(559,350,qs),
(559,517,o),
(433,712,o),
(296,712,qs),
(160,712,o),
(32,514,o),
(32,350,qs),
(32,186,o),
(160,-12,o),
(296,-12,qs)
);
},
{
closed = 1;
nodes = (
(218,83,o),
(140,223,o),
(140,350,qs),
(140,477,o),
(218,618,o),
(296,618,qs),
(374,618,o),
(451,478,o),
(451,350,qs),
(451,223,o),
(374,83,o),
(296,83,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 39 77 5 1 3 3 1 97 4 1 1 1 40 1 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(558,0,l),
(558,89,l),
(387,89,l),
(387,700,l),
(331,700,l),
(89,611,l),
(89,522,l),
(286,588,l),
(286,89,l),
(84,89,l),
(84,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 1 33 77 2 1 0 0 3 96 0 3 3 34 3 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(63,0,l),
(535,0,l),
(535,90,l),
(198,90,l),
(366,262,ls),
(421,318,o),
(474,377,o),
(515,458,o),
(515,503,qs),
(515,599,o),
(401,712,o),
(296,712,qs),
(192,712,o),
(67,592,o),
(66,487,q),
(169,487,l),
(169,546,o),
(235,622,o),
(294,622,qs),
(350,622,o),
(410,556,o),
(410,500,qs),
(410,461,o),
(352,383,o),
(285,314,qs),
(262,290,l),
(63,83,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
26 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 39 77 0 3 3 4 95 0 4 4 34 4 78 17 23 34 18 38 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(371,-12,o),
(481,43,o),
(543,146,o),
(543,217,qs),
(543,279,o),
(486,374,o),
(386,426,o),
(322,426,q),
(520,614,l),
(520,700,l),
(73,700,l),
(73,611,l),
(390,611,l),
(163,397,l),
(224,327,l),
(259,347,o),
(299,347,qs),
(364,347,o),
(441,278,o),
(441,216,qs),
(441,153,o),
(365,79,o),
(298,79,qs),
(235,79,o),
(158,148,o),
(151,203,q),
(48,203,l),
(55,102,o),
(190,-12,o),
(298,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
20 1 3 4 15 1 2 5 14 1 0 2 3 76 0 0 2 1 2 0 1 128 0 5 0 2 0 5 2 105 0 3 3 4 95 0 4 4 33 77 0 1 1 6 97 7 1 6 6 40 6 78 0 0 0 29 0 28 18 17 19 36 34 18 8 8 28
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(475,0,l),
(475,140,l),
(566,140,l),
(566,233,l),
(475,233,l),
(475,423,l),
(375,423,l),
(375,233,l),
(149,233,l),
(381,700,l),
(276,700,l),
(37,224,l),
(37,140,l),
(369,140,l),
(369,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
2 1 0 2 1 76 0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 33 77 0 6 6 34 6 78 17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(374,-12,o),
(486,53,o),
(548,167,o),
(548,239,qs),
(548,303,o),
(520,361,qs),
(491,417,o),
(389,481,o),
(319,481,qs),
(269,481,o),
(188,448,o),
(165,420,q),
(201,608,l),
(498,608,l),
(498,700,l),
(121,700,l),
(61,308,l),
(162,308,l),
(179,347,o),
(254,394,o),
(304,394,qs),
(367,394,o),
(446,308,o),
(446,238,qs),
(446,169,o),
(366,79,o),
(302,79,qs),
(244,79,o),
(164,142,o),
(153,193,q),
(49,193,l),
(59,100,o),
(196,-12,o),
(301,-12,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 5 5 4 95 0 4 4 33 77 0 2 2 6 97 0 6 6 36 77 0 1 1 7 97 8 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 33 77 0 1 1 7 97 8 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 0 32 35 17 17 18 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(386,-12,o),
(436,22,qs),
(488,55,o),
(545,162,o),
(545,224,qs),
(545,294,o),
(515,343,qs),
(484,394,o),
(387,450,o),
(330,450,qs),
(271,450,o),
(177,394,o),
(154,349,q),
(157,486,o),
(241,623,o),
(311,623,qs),
(360,623,o),
(421,567,o),
(431,515,q),
(528,515,l),
(522,569,o),
(497,613,qs),
(469,659,o),
(376,712,o),
(312,712,qs),
(228,712,o),
(172,663,qs),
(114,615,o),
(52,441,o),
(52,325,qs),
(52,188,o),
(110,94,qs),
(178,-12,o),
(315,-12,qs)
);
},
{
closed = 1;
nodes = (
(250,80,o),
(174,160,o),
(174,220,qs),
(174,258,o),
(209,322,o),
(270,360,o),
(308,360,qs),
(366,360,o),
(441,283,o),
(441,220,qs),
(441,160,o),
(368,80,o),
(309,80,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
20 1 6 5 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 39 77 8 1 6 6 4 97 7 1 4 4 40 4 78 34 34 0 0 34 46 34 45 40 38 0 33 0 32 36 34 20 39 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(260,0,l),
(547,623,l),
(547,700,l),
(45,700,l),
(45,610,l),
(437,610,l),
(149,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 0 0 1 95 0 1 1 33 77 0 2 2 34 2 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(361,-12,o),
(470,38,o),
(535,131,o),
(535,193,qs),
(535,256,o),
(469,356,o),
(411,375,q),
(460,393,o),
(518,476,o),
(518,526,qs),
(518,582,o),
(459,667,o),
(358,712,o),
(296,712,qs),
(235,712,o),
(133,668,o),
(73,584,o),
(73,526,qs),
(73,476,o),
(130,395,o),
(180,375,q),
(122,355,o),
(56,256,o),
(56,193,qs),
(56,132,o),
(120,39,o),
(230,-12,o),
(296,-12,qs)
);
},
{
closed = 1;
nodes = (
(232,79,o),
(161,145,o),
(161,201,qs),
(161,261,o),
(235,326,o),
(296,326,qs),
(357,326,o),
(431,261,o),
(431,201,qs),
(431,144,o),
(358,79,o),
(296,79,qs)
);
},
{
closed = 1;
nodes = (
(244,409,o),
(179,467,o),
(179,516,qs),
(179,568,o),
(243,624,o),
(296,624,qs),
(348,624,o),
(413,567,o),
(413,516,qs),
(413,467,o),
(347,409,o),
(296,409,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
20 6 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 39 77 7 1 3 3 1 97 6 1 1 1 40 1 78 40 40 28 28 0 0 40 51 40 50 46 44 28 39 28 38 34 32 0 27 0 26 44 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(361,-12,o),
(421,37,qs),
(479,86,o),
(541,260,o),
(541,376,qs),
(541,440,o),
(512,559,o),
(483,606,qs),
(416,712,o),
(278,712,qs),
(209,712,o),
(156,679,qs),
(105,646,o),
(48,538,o),
(48,476,qs),
(48,408,o),
(78,357,qs),
(108,306,o),
(206,250,o),
(262,250,qs),
(322,250,o),
(416,305,o),
(439,351,q),
(436,214,o),
(352,78,o),
(282,78,qs),
(234,78,o),
(172,134,o),
(162,185,q),
(65,185,l),
(69,135,o),
(96,88,qs),
(123,41,o),
(217,-12,o),
(281,-12,qs)
);
},
{
closed = 1;
nodes = (
(227,341,o),
(152,418,o),
(152,481,qs),
(152,541,o),
(225,620,o),
(284,620,qs),
(342,620,o),
(419,541,o),
(419,480,qs),
(419,443,o),
(384,379,o),
(323,341,o),
(285,341,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
11 1 6 5 1 76 0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 39 77 0 1 1 4 97 7 1 4 4 40 4 78 35 35 0 0 35 47 35 46 42 40 0 34 0 33 40 36 34 20 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = nine;
unicode = 57;
},
{
glyphname = uni24EA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(307,51,o),
(170,130,o),
(91,267,o),
(91,350,qs),
(91,433,o),
(170,570,o),
(307,649,o),
(389,649,qs),
(472,649,o),
(609,570,o),
(688,433,o),
(688,350,qs),
(688,267,o),
(609,130,o),
(472,51,o),
(389,51,qs)
);
},
{
closed = 1;
nodes = (
(460,165,o),
(492,215,qs),
(524,265,o),
(524,350,qs),
(524,435,o),
(492,485,qs),
(460,535,o),
(390,535,qs),
(320,535,o),
(288,484,qs),
(255,435,o),
(255,350,qs),
(255,266,o),
(288,216,qs),
(320,165,o),
(390,165,qs)
);
},
{
closed = 1;
nodes = (
(359,230,o),
(344,261,qs),
(329,294,o),
(329,350,qs),
(329,408,o),
(344,439,qs),
(359,470,o),
(390,470,qs),
(421,470,o),
(436,439,qs),
(451,404,o),
(451,350,qs),
(451,298,o),
(436,261,qs),
(421,230,o),
(390,230,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
0 4 0 6 7 4 6 105 11 1 7 10 1 5 3 7 5 105 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 48 48 32 32 16 16 0 0 48 63 48 62 56 54 32 47 32 46 40 38 16 31 16 30 24 22 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni24EA;
unicode = 9450;
},
{
glyphname = uni2780;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(307,51,o),
(170,130,o),
(91,267,o),
(91,350,qs),
(91,433,o),
(170,570,o),
(307,649,o),
(389,649,qs),
(472,649,o),
(609,570,o),
(688,433,o),
(688,350,qs),
(688,267,o),
(609,130,o),
(472,51,o),
(389,51,qs)
);
},
{
closed = 1;
nodes = (
(517,176,l),
(517,239,l),
(437,239,l),
(437,533,l),
(398,533,l),
(280,491,l),
(280,434,l),
(368,452,l),
(368,239,l),
(277,239,l),
(277,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
36 35 34 3 4 5 1 76 0 5 2 4 2 5 4 128 6 1 4 0 7 3 4 7 104 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 16 16 0 0 42 41 40 39 38 37 33 32 16 31 16 30 24 22 0 15 0 14 38 10 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2780;
unicode = 10112;
},
{
glyphname = uni2781;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(306,51,o),
(170,131,o),
(91,268,o),
(91,350,qs),
(91,432,o),
(170,569,o),
(306,649,o),
(389,649,qs),
(472,649,o),
(609,570,o),
(688,433,o),
(688,350,qs),
(688,267,o),
(609,130,o),
(472,51,o),
(389,51,qs)
);
},
{
closed = 1;
nodes = (
(516,176,l),
(516,239,l),
(366,239,l),
(426,300,ls),
(465,337,o),
(509,397,o),
(509,432,qs),
(509,480,o),
(446,540,o),
(391,540,qs),
(336,540,o),
(267,479,o),
(266,420,q),
(337,420,l),
(337,445,o),
(363,478,o),
(389,478,qs),
(412,478,o),
(438,453,o),
(438,430,qs),
(438,415,o),
(417,382,o),
(385,349,o),
(372,336,qs),
(266,227,l),
(266,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 81 values pushed */
32 1 8 7 1 76 0 5 4 7 4 5 7 128 0 6 0 4 5 6 4 105 0 7 0 8 3 7 8 103 0 2 2 0 97 0 0 0 39 77 10 1 3 3 1 97 9 1 1 1 40 1 78 16 16 0 0 57 56 55 54 48 46 44 43 41 39 16 31 16 30 24 22 0 15 0 14 38 11 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2781;
unicode = 10113;
},
{
glyphname = uni2782;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(307,51,o),
(170,130,o),
(91,267,o),
(91,350,qs),
(91,433,o),
(170,570,o),
(307,649,o),
(389,649,qs),
(472,649,o),
(609,570,o),
(688,433,o),
(688,350,qs),
(688,267,o),
(609,130,o),
(472,51,o),
(389,51,qs)
);
},
{
closed = 1;
nodes = (
(448,158,o),
(519,225,o),
(519,279,qs),
(519,321,o),
(472,382,o),
(423,388,q),
(508,461,l),
(508,522,l),
(270,522,l),
(270,460,l),
(417,460,l),
(314,369,l),
(353,323,l),
(372,334,o),
(391,334,qs),
(415,334,o),
(449,305,o),
(449,278,qs),
(449,250,o),
(419,221,o),
(390,221,qs),
(365,221,o),
(331,251,o),
(331,279,q),
(260,279,l),
(261,220,o),
(332,158,o),
(390,158,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
52 1 7 8 53 47 2 6 7 46 1 4 6 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 6 7 4 7 6 114 0 4 5 7 4 5 126 0 8 0 7 6 8 7 103 0 5 12 1 9 3 5 9 105 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 98 10 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 6 7 4 7 6 4 128 0 4 5 7 4 5 126 0 8 0 7 6 8 7 103 0 5 12 1 9 3 5 9 105 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 98 10 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
32 32 16 16 0 0 32 59 32 58 51 50 49 48 45 43 39 37 35 34 16 31 16 30 24 22 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2782;
unicode = 10114;
},
{
glyphname = uni2783;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(476,176,l),
(476,239,l),
(514,239,l),
(514,302,l),
(476,302,l),
(476,392,l),
(408,392,l),
(408,302,l),
(316,302,l),
(430,533,l),
(359,533,l),
(239,298,l),
(239,239,l),
(403,239,l),
(403,176,l)
);
},
{
closed = 1;
nodes = (
(307,51,o),
(170,130,o),
(91,267,o),
(91,350,qs),
(91,433,o),
(170,570,o),
(307,649,o),
(389,649,qs),
(472,649,o),
(609,570,o),
(688,433,o),
(688,350,qs),
(688,267,o),
(609,130,o),
(472,51,o),
(389,51,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
18 1 2 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 3 9 5 9 3 5 128 0 5 4 4 5 112 0 8 2 10 2 8 114 6 1 4 7 1 2 8 4 2 104 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 3 9 5 9 3 5 128 0 5 4 9 5 4 126 0 8 2 10 2 8 114 6 1 4 7 1 2 8 4 2 104 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 3 9 5 9 3 5 128 0 5 4 9 5 4 126 0 8 2 10 2 8 10 128 6 1 4 7 1 2 8 4 2 104 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
31 31 0 0 31 46 31 45 39 37 30 29 28 27 26 25 24 23 22 21 20 19 17 16 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2783;
unicode = 10115;
},
{
glyphname = uni2784;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(307,51,o),
(170,130,o),
(91,267,o),
(91,350,qs),
(91,433,o),
(170,570,o),
(307,649,o),
(389,649,qs),
(472,649,o),
(609,570,o),
(688,433,o),
(688,350,qs),
(688,267,o),
(609,130,o),
(472,51,o),
(389,51,qs)
);
},
{
closed = 1;
nodes = (
(449,160,o),
(521,233,o),
(521,291,qs),
(521,343,o),
(462,413,o),
(406,413,qs),
(385,413,o),
(347,400,o),
(335,386,q),
(350,461,l),
(498,461,l),
(498,524,l),
(295,524,l),
(265,317,l),
(335,317,l),
(342,334,o),
(374,354,o),
(394,354,qs),
(420,354,o),
(451,318,o),
(451,290,qs),
(451,262,o),
(419,223,o),
(393,223,qs),
(370,223,o),
(337,247,o),
(332,269,q),
(261,269,l),
(263,220,o),
(337,160,o),
(393,160,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
53 1 6 10 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
0 7 6 4 9 7 114 0 4 5 6 4 5 126 0 8 0 9 10 8 9 103 0 10 0 6 7 10 6 105 0 5 14 1 11 3 5 11 105 0 2 2 0 97 0 0 0 39 77 13 1 3 3 1 98 12 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 63 values pushed */
0 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 8 0 9 10 8 9 103 0 10 0 6 7 10 6 105 0 5 14 1 11 3 5 11 105 0 2 2 0 97 0 0 0 39 77 13 1 3 3 1 98 12 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 38 values pushed */
32 32 16 16 0 0 32 62 32 61 57 55 52 51 50 49 48 47 45 43 39 37 35 34 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2784;
unicode = 10116;
},
{
glyphname = uni2785;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(307,51,o),
(170,130,o),
(91,267,o),
(91,350,qs),
(91,433,o),
(170,570,o),
(307,649,o),
(389,649,qs),
(472,649,o),
(609,570,o),
(688,433,o),
(688,350,qs),
(688,267,o),
(609,130,o),
(472,51,o),
(389,51,qs)
);
},
{
closed = 1;
nodes = (
(367,227,o),
(336,260,o),
(336,286,qs),
(336,310,o),
(368,342,o),
(391,342,qs),
(415,342,o),
(447,311,o),
(447,284,qs),
(447,257,o),
(414,227,o),
(392,227,qs)
);
},
{
closed = 1;
nodes = (
(450,165,o),
(516,237,o),
(516,287,qs),
(516,334,o),
(457,403,o),
(410,403,qs),
(383,403,o),
(339,377,o),
(328,357,q),
(330,476,o),
(393,476,qs),
(414,476,o),
(439,452,o),
(443,430,q),
(510,430,l),
(508,473,o),
(444,535,o),
(393,535,qs),
(323,535,o),
(256,421,o),
(256,339,qs),
(256,265,o),
(325,165,o),
(396,165,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 103 values pushed */
58 1 4 9 1 76 0 7 8 9 8 7 9 128 0 6 0 8 7 6 8 105 0 9 0 4 5 9 4 105 13 1 5 14 1 10 3 5 10 105 0 2 2 0 97 0 0 0 39 77 12 1 3 3 1 97 11 1 1 1 40 1 78 44 44 32 32 16 16 0 0 44 67 44 66 62 60 57 55 53 52 50 48 32 43 32 42 38 36 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2785;
unicode = 10117;
},
{
glyphname = uni2786;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(384,167,l),
(525,473,l),
(525,524,l),
(259,524,l),
(259,463,l),
(447,463,l),
(309,167,l)
);
},
{
closed = 1;
nodes = (
(307,51,o),
(170,130,o),
(91,267,o),
(91,350,qs),
(91,433,o),
(170,570,o),
(307,649,o),
(389,649,qs),
(472,649,o),
(609,570,o),
(688,433,o),
(688,350,qs),
(688,267,o),
(609,130,o),
(472,51,o),
(389,51,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
20 1 2 3 1 76 0 4 2 6 2 4 6 128 0 3 0 2 4 3 2 103 0 5 5 0 97 0 0 0 39 77 8 1 6 6 1 97 7 1 1 1 40 1 78 23 23 0 0 23 38 23 37 31 29 22 21 19 18 17 16 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2786;
unicode = 10118;
},
{
glyphname = uni2787;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(125,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(125,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(335,226,o),
(335,278,qs),
(335,305,o),
(366,332,o),
(391,332,qs),
(416,332,o),
(445,304,o),
(445,278,qs),
(445,253,o),
(416,226,o),
(391,226,qs)
);
},
{
closed = 1;
nodes = (
(307,51,o),
(170,131,o),
(91,268,o),
(91,350,qs),
(91,433,o),
(170,570,o),
(307,649,o),
(389,649,qs),
(472,649,o),
(609,569,o),
(688,432,o),
(688,350,qs),
(688,268,o),
(609,131,o),
(472,51,o),
(389,51,qs)
);
},
{
closed = 1;
nodes = (
(443,165,o),
(516,221,o),
(516,272,qs),
(516,304,o),
(488,352,o),
(460,364,q),
(482,374,o),
(508,415,o),
(508,439,qs),
(508,485,o),
(440,535,o),
(390,535,qs),
(337,535,o),
(271,484,o),
(271,439,qs),
(271,389,o),
(320,364,q),
(292,352,o),
(263,303,o),
(263,272,qs),
(263,223,o),
(338,165,o),
(390,165,qs)
);
},
{
closed = 1;
nodes = (
(369,385,o),
(344,410,o),
(344,430,qs),
(344,477,o),
(390,477,qs),
(412,477,o),
(436,452,o),
(436,430,qs),
(436,409,o),
(412,385,o),
(390,385,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 99 values pushed */
59 48 2 2 9 1 76 0 6 0 8 9 6 8 105 14 1 9 0 2 3 9 2 105 11 1 3 13 1 7 5 3 7 105 0 4 4 0 97 0 0 0 39 77 12 1 5 5 1 97 10 1 1 1 40 1 78 66 66 43 43 27 27 16 16 0 0 66 76 66 75 72 70 43 65 43 64 54 52 27 42 27 41 35 33 16 26 16 25 22 20 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2787;
unicode = 10119;
},
{
glyphname = uni2788;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(307,51,o),
(170,130,o),
(91,267,o),
(91,350,qs),
(91,433,o),
(170,570,o),
(307,649,o),
(389,649,qs),
(472,649,o),
(609,570,o),
(688,433,o),
(688,350,qs),
(688,267,o),
(609,130,o),
(472,51,o),
(389,51,qs)
);
},
{
closed = 1;
nodes = (
(454,165,o),
(522,277,o),
(522,361,qs),
(522,434,o),
(455,535,o),
(382,535,qs),
(330,535,o),
(263,464,o),
(263,414,qs),
(263,378,o),
(294,325,o),
(343,297,o),
(369,297,qs),
(396,297,o),
(438,324,o),
(451,344,q),
(450,296,o),
(421,225,o),
(386,225,qs),
(346,225,o),
(335,270,q),
(269,270,l),
(271,226,o),
(333,165,o),
(385,165,qs)
);
},
{
closed = 1;
nodes = (
(363,359,o),
(332,391,o),
(332,416,qs),
(332,441,o),
(363,473,o),
(386,473,qs),
(411,473,o),
(443,440,o),
(443,415,qs),
(443,391,o),
(411,359,o),
(388,359,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 103 values pushed */
40 1 6 10 1 76 0 4 6 5 6 4 5 128 0 7 0 9 10 7 9 105 14 1 10 0 6 4 10 6 105 0 5 13 1 8 3 5 8 105 0 2 2 0 97 0 0 0 39 77 12 1 3 3 1 98 11 1 1 1 40 1 78 57 57 32 32 16 16 0 0 57 68 57 67 63 61 32 56 32 55 51 49 44 42 38 36 35 34 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2788;
unicode = 10120;
},
{
glyphname = uni278A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(276,239,l),
(368,239,l),
(368,452,l),
(280,434,l),
(280,491,l),
(398,533,l),
(436,533,l),
(436,239,l),
(517,239,l),
(517,176,l),
(276,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
23 22 21 3 2 3 1 76 4 1 2 3 5 3 2 5 128 0 3 3 0 97 0 0 0 39 77 7 1 5 5 1 97 6 1 1 1 40 1 78 16 16 0 0 16 26 16 26 25 24 20 19 18 17 0 15 0 14 38 8 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278A;
unicode = 10122;
},
{
glyphname = uni278B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(266,227,l),
(372,336,ls),
(385,349,o),
(417,382,o),
(438,415,o),
(438,430,qs),
(438,453,o),
(412,478,o),
(389,478,qs),
(363,478,o),
(337,445,o),
(337,420,q),
(266,420,l),
(267,479,o),
(336,540,o),
(391,540,qs),
(446,540,o),
(509,480,o),
(509,432,qs),
(509,397,o),
(465,337,o),
(426,300,qs),
(366,239,l),
(516,239,l),
(516,176,l),
(266,176,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
40 1 6 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 5 2 5 4 2 128 0 3 3 0 97 0 0 0 39 77 0 2 2 5 97 0 5 5 36 77 8 1 6 6 1 98 7 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 5 2 5 4 2 128 0 5 0 2 6 5 2 103 0 3 3 0 97 0 0 0 39 77 8 1 6 6 1 98 7 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
16 16 0 0 16 41 16 41 33 31 29 28 26 24 18 17 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278B;
unicode = 10123;
},
{
glyphname = uni278C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(332,158,o),
(261,220,o),
(260,279,q),
(331,279,l),
(331,251,o),
(365,221,o),
(390,221,qs),
(419,221,o),
(449,250,o),
(449,278,qs),
(449,305,o),
(415,334,o),
(391,334,qs),
(372,334,o),
(353,323,q),
(314,369,l),
(417,460,l),
(270,460,l),
(270,522,l),
(508,522,l),
(508,461,l),
(423,388,l),
(472,382,o),
(519,321,o),
(519,279,qs),
(519,225,o),
(448,158,o),
(390,158,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 80 values pushed */
22 1 3 2 27 21 2 4 3 28 1 6 4 3 76 0 3 0 6 5 3 6 103 0 4 0 5 7 4 5 105 0 2 2 0 97 0 0 0 39 77 9 1 7 7 1 97 8 1 1 1 40 1 78 16 16 0 0 16 43 16 42 40 39 37 35 31 29 26 25 24 23 0 15 0 14 38 10 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278C;
unicode = 10124;
},
{
glyphname = uni278D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(403,239,l),
(240,239,l),
(240,298,l),
(359,533,l),
(430,533,l),
(317,302,l),
(409,302,l),
(409,392,l),
(477,392,l),
(477,302,l),
(514,302,l),
(514,239,l),
(477,239,l),
(477,176,l),
(403,176,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
27 1 2 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 4 6 3 6 4 114 5 1 3 2 6 3 2 126 7 1 2 8 8 2 112 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 4 6 3 6 4 3 128 5 1 3 2 6 3 2 126 7 1 2 8 8 2 112 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 4 6 3 6 4 3 128 5 1 3 2 6 3 2 126 7 1 2 8 6 2 8 126 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
16 16 0 0 16 30 16 30 29 28 26 25 24 23 22 21 20 19 18 17 0 15 0 14 38 11 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278D;
unicode = 10125;
},
{
glyphname = uni278E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(125,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(125,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(337,160,o),
(263,220,o),
(261,269,q),
(332,269,l),
(337,247,o),
(370,223,o),
(393,223,qs),
(419,223,o),
(451,262,o),
(451,290,qs),
(451,318,o),
(420,354,o),
(394,354,qs),
(374,354,o),
(342,334,o),
(335,317,q),
(265,317,l),
(295,524,l),
(498,524,l),
(498,461,l),
(350,461,l),
(335,386,l),
(347,400,o),
(385,413,o),
(406,413,qs),
(462,413,o),
(521,343,o),
(521,291,qs),
(521,233,o),
(449,160,o),
(393,160,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
24 1 6 2 1 76 0 3 0 2 6 3 2 105 0 5 0 8 7 5 8 103 0 6 0 7 9 6 7 105 0 4 4 0 97 0 0 0 39 77 11 1 9 9 1 97 10 1 1 1 40 1 78 16 16 0 0 16 46 16 45 43 42 40 38 34 32 30 29 28 27 26 25 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278E;
unicode = 10126;
},
{
glyphname = uni278F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(414,227,o),
(447,257,o),
(447,284,qs),
(447,311,o),
(415,342,o),
(391,342,qs),
(368,342,o),
(336,310,o),
(336,286,qs),
(336,260,o),
(367,227,o),
(392,227,qs)
);
},
{
closed = 1;
nodes = (
(325,165,o),
(256,265,o),
(256,339,qs),
(256,421,o),
(323,535,o),
(393,535,qs),
(444,535,o),
(508,473,o),
(510,430,q),
(443,430,l),
(439,452,o),
(414,476,o),
(393,476,qs),
(330,476,o),
(328,357,q),
(339,377,o),
(383,403,o),
(410,403,qs),
(457,403,o),
(516,334,o),
(516,287,qs),
(516,237,o),
(450,165,o),
(396,165,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
36 1 2 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 6 5 4 5 6 114 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 0 4 4 5 97 0 5 5 36 77 11 1 8 8 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 6 5 4 5 6 114 0 5 0 4 2 5 4 105 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 11 1 8 8 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 6 5 4 5 6 4 128 0 5 0 4 2 5 4 105 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 11 1 8 8 1 97 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
28 28 16 16 0 0 28 51 28 50 46 44 42 41 39 37 34 32 16 27 16 26 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278F;
unicode = 10127;
},
{
glyphname = uni2790;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(447,463,l),
(259,463,l),
(259,524,l),
(524,524,l),
(524,473,l),
(384,167,l),
(308,167,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
17 1 3 2 1 76 0 3 2 4 2 3 4 128 0 2 2 0 97 0 0 0 39 77 6 1 4 4 1 98 5 1 1 1 40 1 78 16 16 0 0 16 22 16 22 21 20 19 18 0 15 0 14 38 7 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2790;
unicode = 10128;
},
{
glyphname = uni2791;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(338,165,o),
(263,223,o),
(263,272,qs),
(263,303,o),
(292,352,o),
(320,364,q),
(271,389,o),
(271,439,qs),
(271,484,o),
(337,535,o),
(390,535,qs),
(440,535,o),
(508,485,o),
(508,439,qs),
(508,415,o),
(482,374,o),
(460,364,q),
(488,352,o),
(516,304,o),
(516,272,qs),
(516,221,o),
(443,165,o),
(390,165,qs)
);
},
{
closed = 1;
nodes = (
(416,226,o),
(445,253,o),
(445,278,qs),
(445,304,o),
(416,332,o),
(391,332,qs),
(366,332,o),
(335,305,o),
(335,278,qs),
(335,226,o),
(391,226,qs)
);
},
{
closed = 1;
nodes = (
(412,385,o),
(436,409,o),
(436,430,qs),
(436,452,o),
(412,477,o),
(390,477,qs),
(344,477,o),
(344,430,qs),
(344,410,o),
(369,385,o),
(390,385,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
32 21 2 4 7 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 4 10 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 11 1 7 7 6 97 0 6 6 36 77 9 1 3 3 1 97 8 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 6 11 1 7 4 6 7 105 0 4 10 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
50 50 39 39 16 16 0 0 50 60 50 59 55 53 39 49 39 48 44 42 16 38 16 37 28 26 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2791;
unicode = 10129;
},
{
glyphname = uni2792;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(333,165,o),
(271,226,o),
(269,270,q),
(335,270,l),
(346,225,o),
(386,225,qs),
(421,225,o),
(450,296,o),
(451,344,q),
(438,324,o),
(396,297,o),
(369,297,qs),
(343,297,o),
(294,325,o),
(263,378,o),
(263,414,qs),
(263,464,o),
(330,535,o),
(382,535,qs),
(455,535,o),
(522,434,o),
(522,361,qs),
(522,277,o),
(454,165,o),
(385,165,qs)
);
},
{
closed = 1;
nodes = (
(411,359,o),
(443,391,o),
(443,415,qs),
(443,440,o),
(411,473,o),
(386,473,qs),
(363,473,o),
(332,441,o),
(332,416,qs),
(332,391,o),
(363,359,o),
(388,359,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
31 1 3 8 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 5 3 4 3 5 4 128 0 3 0 4 6 3 4 105 0 2 2 0 97 0 0 0 39 77 11 1 8 8 7 97 0 7 7 36 77 10 1 6 6 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 5 3 4 3 5 4 128 0 7 11 1 8 3 7 8 105 0 3 0 4 6 3 4 105 0 2 2 0 97 0 0 0 39 77 10 1 6 6 1 97 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
41 41 16 16 0 0 41 52 41 51 47 45 16 40 16 39 37 36 35 33 29 27 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2792;
unicode = 10130;
},
{
glyphname = uni24EA.solid;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,-12,o),
(654,85,o),
(751,252,o),
(751,350,qs),
(751,448,o),
(654,615,o),
(487,712,o),
(389,712,qs),
(291,712,o),
(124,615,o),
(27,448,o),
(27,350,qs),
(27,252,o),
(124,85,o),
(291,-12,o),
(389,-12,qs)
);
},
{
closed = 1;
nodes = (
(320,165,o),
(287,216,qs),
(255,264,o),
(255,350,qs),
(255,436,o),
(287,484,qs),
(320,535,o),
(390,535,qs),
(459,535,o),
(492,485,qs),
(524,435,o),
(524,350,qs),
(524,265,o),
(492,215,qs),
(459,165,o),
(390,165,qs)
);
},
{
closed = 1;
nodes = (
(420,230,o),
(435,261,qs),
(450,294,o),
(450,350,qs),
(450,408,o),
(435,439,qs),
(420,470,o),
(390,470,qs),
(359,470,o),
(344,439,qs),
(329,410,o),
(329,350,qs),
(329,291,o),
(344,261,qs),
(359,230,o),
(390,230,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 4 8 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 7 1 3 3 1 97 6 1 1 1 40 1 78 32 32 16 16 0 0 32 47 32 46 40 38 16 31 16 30 24 22 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni24EA.solid;
},
{
glyphname = zero.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,-5,o),
(295,94,o),
(295,177,qs),
(295,260,o),
(231,358,o),
(162,358,qs),
(93,358,o),
(29,258,o),
(29,177,qs),
(29,96,o),
(93,-5,o),
(162,-5,qs)
);
},
{
closed = 1;
nodes = (
(133,59,o),
(100,116,o),
(100,177,qs),
(100,237,o),
(133,295,o),
(162,295,qs),
(195,295,o),
(224,229,o),
(224,177,qs),
(224,125,o),
(195,59,o),
(162,59,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 0 0 2 3 0 2 105 5 1 3 3 1 97 4 1 1 1 34 1 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = zero.dnom;
},
{
glyphname = one.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,0,l),
(283,62,l),
(201,62,l),
(201,353,l),
(164,353,l),
(44,309,l),
(44,254,l),
(134,274,l),
(134,62,l),
(41,62,l),
(41,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 0 1 133 2 1 0 0 3 96 0 3 3 34 3 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = one.dnom;
},
{
glyphname = two.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(32,0,l),
(277,0,l),
(277,62,l),
(128,62,l),
(192,126,ls),
(233,168,o),
(268,218,o),
(268,251,qs),
(268,300,o),
(208,358,o),
(153,358,qs),
(99,358,o),
(33,297,o),
(32,241,q),
(101,241,l),
(101,265,o),
(127,298,o),
(152,298,qs),
(174,298,o),
(199,272,o),
(199,250,qs),
(199,231,o),
(168,194,o),
(128,152,qs),
(32,51,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
24 1 4 3 1 76 0 1 0 3 0 1 3 128 0 2 0 0 1 2 0 105 0 3 3 4 95 0 4 4 34 4 78 17 22 34 18 37 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = two.dnom;
},
{
glyphname = three.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,-5,o),
(286,59,o),
(286,114,qs),
(286,156,o),
(237,214,o),
(193,221,q),
(275,296,l),
(275,353,l),
(43,353,l),
(43,292,l),
(184,292,l),
(84,202,l),
(123,156,l),
(143,167,o),
(160,167,qs),
(186,167,o),
(218,139,o),
(218,113,qs),
(218,86,o),
(187,57,o),
(160,57,qs),
(133,57,o),
(101,87,o),
(101,111,q),
(32,111,l),
(33,56,o),
(103,-5,o),
(160,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 3 0 3 2 114 0 0 1 3 0 1 126 0 4 0 3 2 4 3 103 0 1 1 5 97 6 1 5 5 34 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 4 0 3 2 4 3 103 0 1 1 5 97 6 1 5 5 34 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = three.dnom;
},
{
glyphname = four.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(249,0,l),
(249,65,l),
(289,65,l),
(289,127,l),
(249,127,l),
(249,217,l),
(182,217,l),
(182,127,l),
(97,127,l),
(209,353,l),
(138,353,l),
(20,120,l),
(20,65,l),
(178,65,l),
(178,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
2 1 0 2 1 76 0 1 3 1 133 4 1 2 5 1 0 6 2 0 104 0 3 3 6 95 0 6 6 34 6 78 17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = four.dnom;
},
{
glyphname = five.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,-5,o),
(283,67,o),
(283,123,qs),
(283,175,o),
(221,245,o),
(168,245,qs),
(128,245,o),
(102,224,q),
(115,291,l),
(260,291,l),
(260,353,l),
(62,353,l),
(31,149,l),
(99,149,l),
(107,167,o),
(137,187,o),
(157,187,qs),
(183,187,o),
(215,152,o),
(215,123,qs),
(215,94,o),
(182,57,o),
(156,57,qs),
(133,57,o),
(101,82,o),
(96,103,q),
(27,103,l),
(30,55,o),
(99,-5,o),
(156,-5,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 4 0 5 6 4 5 103 0 6 0 2 3 6 2 105 0 1 1 7 97 8 1 7 7 34 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 4 0 5 6 4 5 103 0 6 0 2 3 6 2 105 0 1 1 7 97 8 1 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 29 0 28 34 17 17 18 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = five.dnom;
},
{
glyphname = six.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,-5,o),
(283,66,o),
(283,115,qs),
(283,166,o),
(220,231,o),
(176,231,qs),
(153,231,o),
(112,210,o),
(99,192,q),
(101,242,o),
(133,299,o),
(163,299,qs),
(203,299,o),
(211,256,q),
(277,256,l),
(272,302,o),
(211,358,o),
(163,358,qs),
(95,358,o),
(29,245,o),
(29,165,qs),
(29,91,o),
(98,-5,o),
(165,-5,qs)
);
},
{
closed = 1;
nodes = (
(138,57,o),
(107,89,o),
(107,114,qs),
(107,137,o),
(138,170,o),
(161,170,qs),
(185,170,o),
(215,138,o),
(215,113,qs),
(215,88,o),
(185,57,o),
(162,57,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
14 1 5 3 1 76 0 1 2 3 2 1 3 128 0 0 0 2 1 0 2 105 0 3 0 5 6 3 5 105 8 1 6 6 4 97 7 1 4 4 34 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 33 18 36 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = six.dnom;
},
{
glyphname = seven.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,0,l),
(289,303,l),
(289,353,l),
(29,353,l),
(29,291,l),
(213,291,l),
(76,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
4 1 0 1 1 76 0 1 0 0 2 1 0 103 0 2 2 34 2 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = seven.dnom;
},
{
glyphname = eight.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(204,-5,o),
(276,52,o),
(276,101,qs),
(276,131,o),
(249,178,o),
(224,190,q),
(244,201,o),
(268,240,o),
(268,263,qs),
(268,307,o),
(202,358,o),
(153,358,qs),
(104,358,o),
(37,307,o),
(37,263,qs),
(37,240,o),
(60,201,o),
(81,190,q),
(56,177,o),
(29,131,o),
(29,101,qs),
(29,54,o),
(100,-5,o),
(153,-5,qs)
);
},
{
closed = 1;
nodes = (
(126,56,o),
(98,82,o),
(98,106,qs),
(98,131,o),
(127,158,o),
(153,158,qs),
(179,158,o),
(207,131,o),
(207,106,qs),
(207,82,o),
(178,56,o),
(153,56,qs)
);
},
{
closed = 1;
nodes = (
(132,212,o),
(107,235,o),
(107,255,qs),
(107,277,o),
(131,300,o),
(153,300,qs),
(174,300,o),
(199,276,o),
(199,255,qs),
(199,236,o),
(173,212,o),
(153,212,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
17 5 2 2 5 1 76 0 0 0 4 5 0 4 105 8 1 5 0 2 3 5 2 105 7 1 3 3 1 97 6 1 1 1 34 1 78 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 42 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 305;
}
);
note = eight.dnom;
},
{
glyphname = nine.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,-5,o),
(284,108,o),
(284,188,qs),
(284,262,o),
(215,358,o),
(148,358,qs),
(96,358,o),
(29,287,o),
(29,238,qs),
(29,191,o),
(91,123,o),
(137,123,qs),
(160,123,o),
(201,144,o),
(214,161,q),
(212,111,o),
(180,55,o),
(150,55,qs),
(110,55,o),
(102,99,q),
(36,99,l),
(41,52,o),
(102,-5,o),
(150,-5,qs)
);
},
{
closed = 1;
nodes = (
(128,184,o),
(98,215,o),
(98,241,qs),
(98,265,o),
(128,297,o),
(151,297,qs),
(175,297,o),
(206,265,o),
(206,240,qs),
(206,216,o),
(175,184,o),
(152,184,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
8 1 2 6 1 76 0 0 2 1 2 0 1 128 0 3 0 5 6 3 5 105 8 1 6 0 2 0 6 2 105 0 1 1 4 97 7 1 4 4 34 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 36 33 18 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
note = nine.dnom;
},
{
glyphname = zero.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,342,o),
(295,441,o),
(295,524,qs),
(295,607,o),
(231,705,o),
(162,705,qs),
(93,705,o),
(29,605,o),
(29,524,qs),
(29,443,o),
(93,342,o),
(162,342,qs)
);
},
{
closed = 1;
nodes = (
(133,406,o),
(100,463,o),
(100,524,qs),
(100,584,o),
(133,642,o),
(162,642,qs),
(195,642,o),
(224,576,o),
(224,524,qs),
(224,472,o),
(195,406,o),
(162,406,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 3 4 1 1 3 1 101 0 2 2 0 97 0 0 0 33 2 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = zero.numr;
},
{
glyphname = one.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,347,l),
(283,409,l),
(201,409,l),
(201,700,l),
(164,700,l),
(44,656,l),
(44,601,l),
(134,621,l),
(134,409,l),
(41,409,l),
(41,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
4 3 2 3 0 1 1 76 2 1 0 0 3 0 3 100 0 1 1 33 1 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = one.numr;
},
{
glyphname = two.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(32,347,l),
(277,347,l),
(277,409,l),
(128,409,l),
(192,473,ls),
(233,515,o),
(268,565,o),
(268,598,qs),
(268,647,o),
(208,705,o),
(153,705,qs),
(99,705,o),
(33,644,o),
(32,588,q),
(101,588,l),
(101,612,o),
(127,645,o),
(152,645,qs),
(174,645,o),
(199,619,o),
(199,597,qs),
(199,578,o),
(168,541,o),
(128,499,qs),
(32,398,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
24 1 4 3 1 76 0 1 0 3 0 1 3 128 0 3 0 4 3 4 99 0 0 0 2 97 0 2 2 33 0 78 17 22 34 18 37 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = two.numr;
},
{
glyphname = three.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,342,o),
(286,406,o),
(286,461,qs),
(286,503,o),
(237,561,o),
(193,568,q),
(275,643,l),
(275,700,l),
(43,700,l),
(43,639,l),
(184,639,l),
(84,549,l),
(123,503,l),
(143,514,o),
(160,514,qs),
(186,514,o),
(218,486,o),
(218,460,qs),
(218,433,o),
(187,404,o),
(160,404,qs),
(133,404,o),
(101,434,o),
(101,458,q),
(32,458,l),
(33,403,o),
(103,342,o),
(160,342,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 2 3 0 3 2 114 0 0 1 3 0 1 126 0 1 6 1 5 1 5 101 0 3 3 4 95 0 4 4 33 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 1 6 1 5 1 5 101 0 3 3 4 95 0 4 4 33 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = three.numr;
},
{
glyphname = four.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(249,347,l),
(249,412,l),
(289,412,l),
(289,474,l),
(249,474,l),
(249,564,l),
(182,564,l),
(182,474,l),
(97,474,l),
(209,700,l),
(138,700,l),
(20,467,l),
(20,412,l),
(178,412,l),
(178,347,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 3 0 6 3 6 99 0 1 1 33 77 5 1 0 0 2 95 4 1 2 2 36 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
4 1 2 5 1 0 6 2 0 104 0 3 0 6 3 6 99 0 1 1 33 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = four.numr;
},
{
glyphname = five.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,342,o),
(283,414,o),
(283,470,qs),
(283,522,o),
(221,592,o),
(168,592,qs),
(128,592,o),
(102,571,q),
(115,638,l),
(260,638,l),
(260,700,l),
(62,700,l),
(31,496,l),
(99,496,l),
(107,514,o),
(137,534,o),
(157,534,qs),
(183,534,o),
(215,499,o),
(215,470,qs),
(215,441,o),
(182,404,o),
(156,404,qs),
(133,404,o),
(101,429,o),
(96,450,q),
(27,450,l),
(30,402,o),
(99,342,o),
(156,342,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 1 8 1 7 1 7 101 0 5 5 4 95 0 4 4 33 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 1 8 1 7 1 7 101 0 5 5 4 95 0 4 4 33 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 29 0 28 34 17 17 18 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = five.numr;
},
{
glyphname = six.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,342,o),
(283,413,o),
(283,462,qs),
(283,513,o),
(220,578,o),
(176,578,qs),
(153,578,o),
(112,557,o),
(99,539,q),
(101,589,o),
(133,646,o),
(163,646,qs),
(203,646,o),
(211,603,q),
(277,603,l),
(272,649,o),
(211,705,o),
(163,705,qs),
(95,705,o),
(29,592,o),
(29,512,qs),
(29,438,o),
(98,342,o),
(165,342,qs)
);
},
{
closed = 1;
nodes = (
(138,404,o),
(107,436,o),
(107,461,qs),
(107,484,o),
(138,517,o),
(161,517,qs),
(185,517,o),
(215,485,o),
(215,460,qs),
(215,435,o),
(185,404,o),
(162,404,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
14 1 5 3 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 8 1 6 7 1 4 6 4 101 0 2 2 0 97 0 0 0 33 2 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 33 18 36 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = six.numr;
},
{
glyphname = seven.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,347,l),
(289,650,l),
(289,700,l),
(29,700,l),
(29,638,l),
(213,638,l),
(76,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 2 0 2 134 0 0 0 1 95 0 1 1 33 0 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = seven.numr;
},
{
glyphname = eight.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(204,342,o),
(276,399,o),
(276,448,qs),
(276,478,o),
(249,525,o),
(224,537,q),
(244,548,o),
(268,587,o),
(268,610,qs),
(268,654,o),
(202,705,o),
(153,705,qs),
(104,705,o),
(37,654,o),
(37,610,qs),
(37,587,o),
(60,548,o),
(81,537,q),
(56,524,o),
(29,478,o),
(29,448,qs),
(29,401,o),
(100,342,o),
(153,342,qs)
);
},
{
closed = 1;
nodes = (
(126,403,o),
(98,429,o),
(98,453,qs),
(98,478,o),
(127,505,o),
(153,505,qs),
(179,505,o),
(207,478,o),
(207,453,qs),
(207,429,o),
(178,403,o),
(153,403,qs)
);
},
{
closed = 1;
nodes = (
(132,559,o),
(107,582,o),
(107,602,qs),
(107,624,o),
(131,647,o),
(153,647,qs),
(174,647,o),
(199,623,o),
(199,602,qs),
(199,583,o),
(173,559,o),
(153,559,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
17 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 7 1 3 6 1 1 3 1 101 0 4 4 0 97 0 0 0 33 4 78 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 42 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 305;
}
);
note = eight.numr;
},
{
glyphname = nine.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,342,o),
(284,455,o),
(284,535,qs),
(284,609,o),
(215,705,o),
(148,705,qs),
(96,705,o),
(29,634,o),
(29,585,qs),
(29,538,o),
(91,470,o),
(137,470,qs),
(160,470,o),
(201,491,o),
(214,508,q),
(212,458,o),
(180,402,o),
(150,402,qs),
(110,402,o),
(102,446,q),
(36,446,l),
(41,399,o),
(102,342,o),
(150,342,qs)
);
},
{
closed = 1;
nodes = (
(128,531,o),
(98,562,o),
(98,588,qs),
(98,612,o),
(128,644,o),
(151,644,qs),
(175,644,o),
(206,612,o),
(206,587,qs),
(206,563,o),
(175,531,o),
(152,531,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 0 2 1 2 0 1 128 0 1 7 1 4 1 4 101 0 5 5 3 97 0 3 3 33 77 0 2 2 6 97 8 1 6 6 42 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 1 7 1 4 1 4 101 0 5 5 3 97 0 3 3 33 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 36 33 18 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
note = nine.numr;
},
{
glyphname = fraction;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(597,700,l),
(513,700,l),
(-7,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 585;
}
);
note = fraction;
unicode = 8260;
},
{
glyphname = onehalf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(279,347,l),
(279,409,l),
(198,409,l),
(198,700,l),
(160,700,l),
(41,657,l),
(41,601,l),
(130,621,l),
(130,409,l),
(38,409,l),
(38,347,l)
);
},
{
closed = 1;
nodes = (
(176,0,l),
(696,700,l),
(612,700,l),
(92,0,l)
);
},
{
closed = 1;
nodes = (
(723,0,l),
(723,62,l),
(574,62,l),
(638,126,ls),
(679,168,o),
(714,218,o),
(714,251,qs),
(714,300,o),
(654,358,o),
(599,358,qs),
(545,358,o),
(479,296,o),
(478,241,q),
(547,241,l),
(547,265,o),
(573,298,o),
(598,298,qs),
(620,298,o),
(645,272,o),
(645,250,qs),
(645,231,o),
(614,194,o),
(574,152,qs),
(478,51,l),
(478,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 76 values pushed */
4 3 2 3 0 1 15 1 5 9 2 76 4 1 1 0 1 133 0 7 6 9 6 7 9 128 2 1 0 0 3 6 0 3 104 0 8 0 6 7 8 6 105 0 9 5 5 9 87 0 9 9 5 95 10 1 5 9 5 79 39 38 37 36 34 18 39 17 17 17 17 20 16 11 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 768;
}
);
note = onehalf;
unicode = 189;
},
{
glyphname = onequarter;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,0,l),
(693,700,l),
(609,700,l),
(89,0,l)
);
},
{
closed = 1;
nodes = (
(279,347,l),
(279,409,l),
(198,409,l),
(198,700,l),
(160,700,l),
(41,657,l),
(41,601,l),
(130,621,l),
(130,409,l),
(38,409,l),
(38,347,l)
);
},
{
closed = 1;
nodes = (
(682,0,l),
(682,65,l),
(722,65,l),
(722,127,l),
(682,127,l),
(682,217,l),
(615,217,l),
(615,127,l),
(525,127,l),
(637,353,l),
(566,353,l),
(448,120,l),
(448,65,l),
(611,65,l),
(611,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 82 values pushed */
8 7 6 3 2 0 17 1 6 8 2 76 3 1 0 2 0 133 0 7 2 5 2 7 5 128 4 1 2 0 5 9 2 5 104 0 9 8 1 9 87 10 1 8 11 1 6 1 8 6 104 0 9 9 1 95 12 1 1 9 1 79 29 28 27 26 25 24 23 22 17 18 17 17 17 20 17 17 16 13 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 762;
}
);
note = onequarter;
unicode = 188;
},
{
glyphname = threequarters;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(178,0,l),
(698,700,l),
(613,700,l),
(94,0,l)
);
},
{
closed = 1;
nodes = (
(686,0,l),
(686,65,l),
(726,65,l),
(726,127,l),
(686,127,l),
(686,217,l),
(620,217,l),
(620,127,l),
(530,127,l),
(641,353,l),
(570,353,l),
(453,120,l),
(453,65,l),
(616,65,l),
(616,0,l)
);
},
{
closed = 1;
nodes = (
(225,342,o),
(294,406,o),
(294,461,qs),
(294,503,o),
(245,561,o),
(201,568,q),
(283,643,l),
(283,700,l),
(51,700,l),
(51,639,l),
(192,639,l),
(92,549,l),
(131,503,l),
(151,514,o),
(168,514,qs),
(194,514,o),
(226,486,o),
(226,460,qs),
(226,433,o),
(195,404,o),
(168,404,qs),
(141,404,o),
(109,434,o),
(109,458,q),
(40,458,l),
(41,403,o),
(111,342,o),
(168,342,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 19 values pushed */
39 1 12 0 40 34 2 11 12 33 1 9 11 6 1 2 4 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
0 11 12 9 12 11 114 0 9 10 12 9 10 126 0 3 10 14 10 3 14 128 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 105 0 5 4 1 5 87 6 1 4 7 1 2 1 4 2 104 0 5 5 1 95 8 1 1 5 1 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 68 values pushed */
0 11 12 9 12 11 9 128 0 9 10 12 9 10 126 0 3 10 14 10 3 14 128 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 105 0 5 4 1 5 87 6 1 4 7 1 2 1 4 2 104 0 5 5 1 95 8 1 1 5 1 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
19 19 19 46 19 45 38 37 36 35 32 30 26 24 22 21 17 17 17 17 17 18 17 17 16 16 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 767;
}
);
note = threequarters;
unicode = 190;
},
{
glyphname = oneeighth;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,0,l),
(694,700,l),
(609,700,l),
(90,0,l)
);
},
{
closed = 1;
nodes = (
(279,347,l),
(279,409,l),
(198,409,l),
(198,700,l),
(160,700,l),
(41,657,l),
(41,601,l),
(130,621,l),
(130,409,l),
(38,409,l),
(38,347,l)
);
},
{
closed = 1;
nodes = (
(568,56,o),
(540,82,o),
(540,106,qs),
(540,131,o),
(569,158,o),
(595,158,qs),
(621,158,o),
(649,131,o),
(649,106,qs),
(649,82,o),
(620,56,o),
(595,56,qs)
);
},
{
closed = 1;
nodes = (
(645,-5,o),
(718,52,o),
(718,101,qs),
(718,130,o),
(691,178,o),
(665,190,q),
(685,201,o),
(710,240,o),
(710,263,qs),
(710,307,o),
(643,358,o),
(594,358,qs),
(545,358,o),
(479,307,o),
(479,263,qs),
(479,240,o),
(502,201,o),
(523,190,q),
(498,177,o),
(470,130,o),
(470,101,qs),
(470,54,o),
(541,-5,o),
(594,-5,qs)
);
},
{
closed = 1;
nodes = (
(574,212,o),
(548,236,o),
(548,255,qs),
(548,277,o),
(572,300,o),
(594,300,qs),
(616,300,o),
(640,276,o),
(640,255,qs),
(640,235,o),
(615,212,o),
(594,212,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
8 7 6 3 2 0 44 32 2 6 11 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
4 1 2 0 5 10 2 5 104 0 8 0 10 11 8 10 106 14 1 11 0 6 7 11 6 105 3 1 0 0 33 77 12 1 7 7 1 97 13 9 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
4 1 2 0 5 10 2 5 104 0 8 0 10 11 8 10 106 14 1 11 0 6 7 11 6 105 3 1 0 0 33 77 0 1 1 34 77 12 1 7 7 9 97 13 1 9 9 34 9 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
51 51 27 27 15 15 51 62 51 61 57 55 27 50 27 49 39 37 15 26 15 25 37 17 17 20 17 17 16 15 8 29
CALL[ ]	/* CallFunction */";
};
width = 764;
}
);
note = oneeighth;
unicode = 8539;
},
{
glyphname = threeeighths;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,0,l),
(693,700,l),
(608,700,l),
(89,0,l)
);
},
{
closed = 1;
nodes = (
(225,342,o),
(294,406,o),
(294,461,qs),
(294,502,o),
(244,561,o),
(200,568,q),
(283,643,l),
(283,700,l),
(50,700,l),
(50,639,l),
(192,639,l),
(91,549,l),
(131,503,l),
(151,514,o),
(168,514,qs),
(194,514,o),
(226,486,o),
(226,460,qs),
(226,433,o),
(195,404,o),
(168,404,qs),
(141,404,o),
(109,434,o),
(109,458,q),
(40,458,l),
(41,403,o),
(110,342,o),
(168,342,qs)
);
},
{
closed = 1;
nodes = (
(568,56,o),
(540,82,o),
(540,106,qs),
(540,131,o),
(569,158,o),
(595,158,qs),
(621,158,o),
(649,131,o),
(649,106,qs),
(649,82,o),
(620,56,o),
(595,56,qs)
);
},
{
closed = 1;
nodes = (
(645,-5,o),
(718,52,o),
(718,101,qs),
(718,130,o),
(691,178,o),
(665,190,q),
(685,201,o),
(710,240,o),
(710,263,qs),
(710,307,o),
(643,358,o),
(594,358,qs),
(545,358,o),
(479,307,o),
(479,263,qs),
(479,240,o),
(502,201,o),
(523,190,q),
(498,177,o),
(470,130,o),
(470,101,qs),
(470,54,o),
(541,-5,o),
(594,-5,qs)
);
},
{
closed = 1;
nodes = (
(574,212,o),
(548,236,o),
(548,255,qs),
(548,277,o),
(572,300,o),
(594,300,qs),
(616,300,o),
(640,276,o),
(640,255,qs),
(640,235,o),
(615,212,o),
(594,212,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
24 1 5 0 25 19 2 4 5 18 1 2 4 61 49 2 8 13 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
0 4 5 2 5 4 114 0 2 3 5 2 3 126 0 3 14 1 7 12 3 7 105 0 10 0 12 13 10 12 106 17 1 13 0 8 9 13 8 105 0 5 5 0 95 6 1 0 0 33 77 15 1 9 9 1 97 16 11 2 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
0 4 5 2 5 4 2 128 0 2 3 5 2 3 126 0 3 14 1 7 12 3 7 105 0 10 0 12 13 10 12 106 17 1 13 0 8 9 13 8 105 0 5 5 0 95 6 1 0 0 33 77 15 1 9 9 1 97 16 11 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 70 values pushed */
0 4 5 2 5 4 2 128 0 2 3 5 2 3 126 0 3 14 1 7 12 3 7 105 0 10 0 12 13 10 12 106 17 1 13 0 8 9 13 8 105 0 5 5 0 95 6 1 0 0 33 77 0 1 1 34 77 15 1 9 9 11 97 16 1 11 11 34 11 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 40 values pushed */
68 68 44 44 32 32 4 4 68 79 68 78 74 72 44 67 44 66 56 54 32 43 32 42 38 36 4 31 4 30 17 19 36 34 19 17 16 18 8 29
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = threeeighths;
unicode = 8540;
},
{
glyphname = fiveeighths;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,0,l),
(697,700,l),
(612,700,l),
(92,0,l)
);
},
{
closed = 1;
nodes = (
(227,342,o),
(298,414,o),
(298,470,qs),
(298,522,o),
(236,592,o),
(183,592,qs),
(143,592,o),
(117,571,q),
(130,638,l),
(275,638,l),
(275,700,l),
(77,700,l),
(46,496,l),
(114,496,l),
(122,514,o),
(152,534,o),
(172,534,qs),
(198,534,o),
(230,499,o),
(230,470,qs),
(230,441,o),
(197,404,o),
(171,404,qs),
(148,404,o),
(116,429,o),
(111,450,q),
(42,450,l),
(45,402,o),
(114,342,o),
(171,342,qs)
);
},
{
closed = 1;
nodes = (
(572,56,o),
(544,82,o),
(544,106,qs),
(544,131,o),
(573,158,o),
(599,158,qs),
(625,158,o),
(653,131,o),
(653,106,qs),
(653,82,o),
(624,56,o),
(599,56,qs)
);
},
{
closed = 1;
nodes = (
(649,-5,o),
(722,53,o),
(722,101,qs),
(722,130,o),
(695,178,o),
(669,190,q),
(689,201,o),
(714,240,o),
(714,263,qs),
(714,307,o),
(647,358,o),
(598,358,qs),
(549,358,o),
(483,307,o),
(483,263,qs),
(483,240,o),
(506,201,o),
(527,190,q),
(502,177,o),
(474,130,o),
(474,101,qs),
(474,54,o),
(545,-5,o),
(598,-5,qs)
);
},
{
closed = 1;
nodes = (
(578,212,o),
(552,236,o),
(552,255,qs),
(552,277,o),
(576,300,o),
(598,300,qs),
(620,300,o),
(644,276,o),
(644,255,qs),
(644,235,o),
(619,212,o),
(598,212,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
25 1 4 8 63 51 2 10 15 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
0 5 4 2 7 5 114 0 2 3 4 2 3 126 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 105 0 12 0 14 15 12 14 106 19 1 15 0 10 11 15 10 105 0 7 7 0 95 6 1 0 0 33 77 17 1 11 11 1 97 18 13 2 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 74 values pushed */
0 5 4 2 4 5 2 128 0 2 3 4 2 3 126 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 105 0 12 0 14 15 12 14 106 19 1 15 0 10 11 15 10 105 0 7 7 0 95 6 1 0 0 33 77 17 1 11 11 1 97 18 13 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 78 values pushed */
0 5 4 2 4 5 2 128 0 2 3 4 2 3 126 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 105 0 12 0 14 15 12 14 106 19 1 15 0 10 11 15 10 105 0 7 7 0 95 6 1 0 0 33 77 0 1 1 34 77 17 1 11 11 13 97 18 1 13 13 34 13 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 42 values pushed */
70 70 46 46 34 34 4 4 70 81 70 80 76 74 46 69 46 68 58 56 34 45 34 44 40 38 4 33 4 32 34 17 17 18 36 34 19 17 16 20 8 31
CALL[ ]	/* CallFunction */";
};
width = 765;
}
);
note = fiveeighths;
unicode = 8541;
},
{
glyphname = seveneighths;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(144,0,l),
(664,700,l),
(579,700,l),
(59,0,l)
);
},
{
closed = 1;
nodes = (
(550,56,o),
(522,82,o),
(522,106,qs),
(522,131,o),
(551,158,o),
(577,158,qs),
(603,158,o),
(631,131,o),
(631,106,qs),
(631,82,o),
(602,56,o),
(577,56,qs)
);
},
{
closed = 1;
nodes = (
(176,347,l),
(315,650,l),
(315,700,l),
(55,700,l),
(55,638,l),
(239,638,l),
(102,347,l)
);
},
{
closed = 1;
nodes = (
(627,-5,o),
(700,52,o),
(700,101,qs),
(700,130,o),
(673,178,o),
(647,190,q),
(667,201,o),
(692,240,o),
(692,263,qs),
(692,307,o),
(625,358,o),
(576,358,qs),
(527,358,o),
(461,307,o),
(461,263,qs),
(461,240,o),
(484,201,o),
(505,190,q),
(480,177,o),
(452,130,o),
(452,101,qs),
(452,54,o),
(523,-5,o),
(576,-5,qs)
);
},
{
closed = 1;
nodes = (
(556,212,o),
(530,236,o),
(530,255,qs),
(530,277,o),
(554,300,o),
(576,300,qs),
(598,300,o),
(622,276,o),
(622,255,qs),
(622,235,o),
(597,212,o),
(576,212,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
20 1 4 0 40 28 2 2 10 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 6 7 9 7 6 9 128 0 7 0 9 10 7 9 106 13 1 10 0 2 3 10 2 105 0 4 4 0 95 5 1 0 0 33 77 11 1 3 3 1 97 12 8 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 6 7 9 7 6 9 128 0 7 0 9 10 7 9 106 13 1 10 0 2 3 10 2 105 0 4 4 0 95 5 1 0 0 33 77 0 1 1 34 77 11 1 3 3 8 97 12 1 8 8 34 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
47 47 23 23 4 4 47 58 47 57 53 51 23 46 23 45 35 33 22 21 19 18 17 16 4 15 4 14 37 17 16 14 8 25
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = seveneighths;
unicode = 8542;
},
{
glyphname = uni2080;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,-5,o),
(295,94,o),
(295,177,qs),
(295,260,o),
(231,358,o),
(162,358,qs),
(93,358,o),
(29,258,o),
(29,177,qs),
(29,96,o),
(93,-5,o),
(162,-5,qs)
);
},
{
closed = 1;
nodes = (
(133,59,o),
(100,116,o),
(100,177,qs),
(100,237,o),
(133,295,o),
(162,295,qs),
(195,295,o),
(224,229,o),
(224,177,qs),
(224,125,o),
(195,59,o),
(162,59,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 51 77 5 1 3 3 1 97 4 1 1 1 52 1 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 9 23
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = uni2080;
unicode = 8320;
},
{
glyphname = uni2081;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,0,l),
(283,62,l),
(201,62,l),
(201,353,l),
(164,353,l),
(44,309,l),
(44,254,l),
(134,274,l),
(134,62,l),
(41,62,l),
(41,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 1 49 77 2 1 0 0 3 96 0 3 3 50 3 78 17 17 20 16 4 9 26
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = uni2081;
unicode = 8321;
},
{
glyphname = uni2082;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(32,0,l),
(277,0,l),
(277,62,l),
(128,62,l),
(192,126,ls),
(233,168,o),
(268,218,o),
(268,251,qs),
(268,300,o),
(208,358,o),
(153,358,qs),
(99,358,o),
(33,297,o),
(32,241,q),
(101,241,l),
(101,265,o),
(127,298,o),
(152,298,qs),
(174,298,o),
(199,272,o),
(199,250,qs),
(199,231,o),
(168,194,o),
(128,152,qs),
(32,51,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
24 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 51 77 0 3 3 4 95 0 4 4 50 4 78 17 22 34 18 37 5 9 27
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = uni2082;
unicode = 8322;
},
{
glyphname = uni2083;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,-5,o),
(286,59,o),
(286,114,qs),
(286,156,o),
(237,214,o),
(193,221,q),
(275,296,l),
(275,353,l),
(43,353,l),
(43,292,l),
(184,292,l),
(84,202,l),
(123,156,l),
(143,167,o),
(160,167,qs),
(186,167,o),
(218,139,o),
(218,113,qs),
(218,86,o),
(187,57,o),
(160,57,qs),
(133,57,o),
(101,87,o),
(101,111,q),
(32,111,l),
(33,56,o),
(103,-5,o),
(160,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 3 0 3 2 114 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 49 77 0 1 1 5 97 6 1 5 5 52 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 49 77 0 1 1 5 97 6 1 5 5 52 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 9 27
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = uni2083;
unicode = 8323;
},
{
glyphname = uni2084;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(249,0,l),
(249,65,l),
(289,65,l),
(289,127,l),
(249,127,l),
(249,217,l),
(182,217,l),
(182,127,l),
(97,127,l),
(209,353,l),
(138,353,l),
(20,120,l),
(20,65,l),
(178,65,l),
(178,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 1 2 2 3 114 4 1 2 5 1 0 6 2 0 104 0 1 1 49 77 0 6 6 50 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 49 77 0 6 6 50 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 9 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = uni2084;
unicode = 8324;
},
{
glyphname = uni2085;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,-5,o),
(283,67,o),
(283,123,qs),
(283,175,o),
(221,245,o),
(168,245,qs),
(128,245,o),
(102,224,q),
(115,291,l),
(260,291,l),
(260,353,l),
(62,353,l),
(31,149,l),
(99,149,l),
(107,167,o),
(137,187,o),
(157,187,qs),
(183,187,o),
(215,152,o),
(215,123,qs),
(215,94,o),
(182,57,o),
(156,57,qs),
(133,57,o),
(101,82,o),
(96,103,q),
(27,103,l),
(30,55,o),
(99,-5,o),
(156,-5,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 49 77 0 1 1 7 97 8 1 7 7 52 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 49 77 0 1 1 7 97 8 1 7 7 52 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 29 0 28 34 17 17 18 36 34 18 9 9 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2085;
unicode = 8325;
},
{
glyphname = uni2086;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,-5,o),
(283,66,o),
(283,115,qs),
(283,166,o),
(220,231,o),
(176,231,qs),
(153,231,o),
(112,210,o),
(99,192,q),
(101,242,o),
(133,299,o),
(163,299,qs),
(203,299,o),
(211,256,q),
(277,256,l),
(272,302,o),
(211,358,o),
(163,358,qs),
(95,358,o),
(29,245,o),
(29,165,qs),
(29,91,o),
(98,-5,o),
(165,-5,qs)
);
},
{
closed = 1;
nodes = (
(138,57,o),
(107,89,o),
(107,114,qs),
(107,137,o),
(138,170,o),
(161,170,qs),
(185,170,o),
(215,138,o),
(215,113,qs),
(215,88,o),
(185,57,o),
(162,57,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
14 1 5 3 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 51 77 8 1 6 6 4 97 7 1 4 4 52 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 33 18 36 9 9 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2086;
unicode = 8326;
},
{
glyphname = uni2087;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,0,l),
(289,303,l),
(289,353,l),
(29,353,l),
(29,291,l),
(213,291,l),
(76,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 0 0 1 95 0 1 1 49 77 0 2 2 50 2 78 18 17 16 3 9 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = uni2087;
unicode = 8327;
},
{
glyphname = uni2088;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(204,-5,o),
(276,52,o),
(276,101,qs),
(276,131,o),
(249,178,o),
(224,190,q),
(244,201,o),
(268,240,o),
(268,263,qs),
(268,307,o),
(202,358,o),
(153,358,qs),
(104,358,o),
(37,307,o),
(37,263,qs),
(37,240,o),
(60,201,o),
(81,190,q),
(56,177,o),
(29,131,o),
(29,101,qs),
(29,54,o),
(100,-5,o),
(153,-5,qs)
);
},
{
closed = 1;
nodes = (
(126,56,o),
(98,82,o),
(98,106,qs),
(98,131,o),
(127,158,o),
(153,158,qs),
(179,158,o),
(207,131,o),
(207,106,qs),
(207,82,o),
(178,56,o),
(153,56,qs)
);
},
{
closed = 1;
nodes = (
(132,212,o),
(107,235,o),
(107,255,qs),
(107,277,o),
(131,300,o),
(153,300,qs),
(174,300,o),
(199,276,o),
(199,255,qs),
(199,236,o),
(173,212,o),
(153,212,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
17 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 51 77 7 1 3 3 1 97 6 1 1 1 52 1 78 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 42 9 9 23
CALL[ ]	/* CallFunction */";
};
width = 305;
}
);
note = uni2088;
unicode = 8328;
},
{
glyphname = uni2089;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,-5,o),
(284,108,o),
(284,188,qs),
(284,262,o),
(215,358,o),
(148,358,qs),
(96,358,o),
(29,287,o),
(29,238,qs),
(29,191,o),
(91,123,o),
(137,123,qs),
(160,123,o),
(201,144,o),
(214,161,q),
(212,111,o),
(180,55,o),
(150,55,qs),
(110,55,o),
(102,99,q),
(36,99,l),
(41,52,o),
(102,-5,o),
(150,-5,qs)
);
},
{
closed = 1;
nodes = (
(128,184,o),
(98,215,o),
(98,241,qs),
(98,265,o),
(128,297,o),
(151,297,qs),
(175,297,o),
(206,265,o),
(206,240,qs),
(206,216,o),
(175,184,o),
(152,184,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
8 1 2 6 1 76 0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 51 77 0 1 1 4 97 7 1 4 4 52 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 36 33 18 9 9 26
CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
note = uni2089;
unicode = 8329;
},
{
glyphname = uni2070;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,342,o),
(295,441,o),
(295,524,qs),
(295,607,o),
(231,705,o),
(162,705,qs),
(93,705,o),
(29,605,o),
(29,524,qs),
(29,443,o),
(93,342,o),
(162,342,qs)
);
},
{
closed = 1;
nodes = (
(133,406,o),
(100,463,o),
(100,524,qs),
(100,584,o),
(133,642,o),
(162,642,qs),
(195,642,o),
(224,576,o),
(224,524,qs),
(224,472,o),
(195,406,o),
(162,406,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 59 77 5 1 3 3 1 97 4 1 1 1 60 1 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 10 23
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = uni2070;
unicode = 8304;
},
{
glyphname = uni00B9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,347,l),
(283,409,l),
(201,409,l),
(201,700,l),
(164,700,l),
(44,656,l),
(44,601,l),
(134,621,l),
(134,409,l),
(41,409,l),
(41,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 1 57 77 2 1 0 0 3 96 0 3 3 58 3 78 17 17 20 16 4 10 26
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = uni00B9;
unicode = 185;
},
{
glyphname = uni00B2;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(32,347,l),
(277,347,l),
(277,409,l),
(128,409,l),
(192,473,ls),
(233,515,o),
(268,565,o),
(268,598,qs),
(268,647,o),
(208,705,o),
(153,705,qs),
(99,705,o),
(33,644,o),
(32,588,q),
(101,588,l),
(101,612,o),
(127,645,o),
(152,645,qs),
(174,645,o),
(199,619,o),
(199,597,qs),
(199,578,o),
(168,541,o),
(128,499,qs),
(32,398,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
24 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 59 77 0 3 3 4 95 0 4 4 58 4 78 17 22 34 18 37 5 10 27
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = uni00B2;
unicode = 178;
},
{
glyphname = uni00B3;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,342,o),
(286,406,o),
(286,461,qs),
(286,503,o),
(237,561,o),
(193,568,q),
(275,643,l),
(275,700,l),
(43,700,l),
(43,639,l),
(184,639,l),
(84,549,l),
(123,503,l),
(143,514,o),
(160,514,qs),
(186,514,o),
(218,486,o),
(218,460,qs),
(218,433,o),
(187,404,o),
(160,404,qs),
(133,404,o),
(101,434,o),
(101,458,q),
(32,458,l),
(33,403,o),
(103,342,o),
(160,342,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 3 0 3 2 114 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 57 77 0 1 1 5 97 6 1 5 5 60 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 57 77 0 1 1 5 97 6 1 5 5 60 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 10 27
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = uni00B3;
unicode = 179;
},
{
glyphname = uni2074;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(248,347,l),
(248,412,l),
(289,412,l),
(289,474,l),
(248,474,l),
(248,563,l),
(183,563,l),
(183,474,l),
(96,474,l),
(208,700,l),
(138,700,l),
(20,466,l),
(20,412,l),
(179,412,l),
(179,347,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 1 2 2 3 114 4 1 2 5 1 0 6 2 0 104 0 1 1 57 77 0 6 6 58 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 57 77 0 6 6 58 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 10 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = uni2074;
unicode = 8308;
},
{
glyphname = uni2075;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,342,o),
(283,414,o),
(283,470,qs),
(283,522,o),
(221,592,o),
(168,592,qs),
(128,592,o),
(102,571,q),
(115,638,l),
(260,638,l),
(260,700,l),
(62,700,l),
(31,496,l),
(99,496,l),
(107,514,o),
(137,534,o),
(157,534,qs),
(183,534,o),
(215,499,o),
(215,470,qs),
(215,441,o),
(182,404,o),
(156,404,qs),
(133,404,o),
(101,429,o),
(96,450,q),
(27,450,l),
(30,402,o),
(99,342,o),
(156,342,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 57 77 0 1 1 7 97 8 1 7 7 60 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 57 77 0 1 1 7 97 8 1 7 7 60 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 29 0 28 34 17 17 18 36 34 18 9 10 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2075;
unicode = 8309;
},
{
glyphname = uni2076;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,342,o),
(283,413,o),
(283,462,qs),
(283,513,o),
(220,578,o),
(176,578,qs),
(153,578,o),
(112,557,o),
(99,539,q),
(101,589,o),
(133,646,o),
(163,646,qs),
(203,646,o),
(211,603,q),
(277,603,l),
(272,649,o),
(211,705,o),
(163,705,qs),
(95,705,o),
(29,592,o),
(29,512,qs),
(29,438,o),
(98,342,o),
(165,342,qs)
);
},
{
closed = 1;
nodes = (
(138,404,o),
(107,436,o),
(107,461,qs),
(107,484,o),
(138,517,o),
(161,517,qs),
(185,517,o),
(215,485,o),
(215,460,qs),
(215,435,o),
(185,404,o),
(162,404,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
14 1 5 3 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 59 77 8 1 6 6 4 97 7 1 4 4 60 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 33 18 36 9 10 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2076;
unicode = 8310;
},
{
glyphname = uni2077;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,347,l),
(289,650,l),
(289,700,l),
(29,700,l),
(29,638,l),
(213,638,l),
(76,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 0 0 1 95 0 1 1 57 77 0 2 2 58 2 78 18 17 16 3 10 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = uni2077;
unicode = 8311;
},
{
glyphname = uni2078;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(204,342,o),
(276,399,o),
(276,448,qs),
(276,478,o),
(249,525,o),
(224,537,q),
(244,548,o),
(268,587,o),
(268,610,qs),
(268,654,o),
(202,705,o),
(153,705,qs),
(104,705,o),
(37,654,o),
(37,610,qs),
(37,587,o),
(60,548,o),
(81,537,q),
(56,524,o),
(29,478,o),
(29,448,qs),
(29,401,o),
(100,342,o),
(153,342,qs)
);
},
{
closed = 1;
nodes = (
(126,403,o),
(98,429,o),
(98,453,qs),
(98,478,o),
(127,505,o),
(153,505,qs),
(179,505,o),
(207,478,o),
(207,453,qs),
(207,429,o),
(178,403,o),
(153,403,qs)
);
},
{
closed = 1;
nodes = (
(132,559,o),
(107,582,o),
(107,602,qs),
(107,624,o),
(131,647,o),
(153,647,qs),
(174,647,o),
(199,623,o),
(199,602,qs),
(199,583,o),
(173,559,o),
(153,559,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
17 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 59 77 7 1 3 3 1 97 6 1 1 1 60 1 78 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 42 9 10 23
CALL[ ]	/* CallFunction */";
};
width = 305;
}
);
note = uni2078;
unicode = 8312;
},
{
glyphname = uni2079;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,342,o),
(284,455,o),
(284,535,qs),
(284,609,o),
(215,705,o),
(148,705,qs),
(96,705,o),
(29,634,o),
(29,585,qs),
(29,538,o),
(91,470,o),
(137,470,qs),
(160,470,o),
(201,491,o),
(214,508,q),
(212,458,o),
(180,402,o),
(150,402,qs),
(110,402,o),
(102,446,q),
(36,446,l),
(41,399,o),
(102,342,o),
(150,342,qs)
);
},
{
closed = 1;
nodes = (
(128,531,o),
(98,562,o),
(98,588,qs),
(98,612,o),
(128,644,o),
(151,644,qs),
(175,644,o),
(206,612,o),
(206,587,qs),
(206,563,o),
(175,531,o),
(152,531,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
8 1 2 6 1 76 0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 59 77 0 1 1 4 97 7 1 4 4 60 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 36 33 18 9 10 26
CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
note = uni2079;
unicode = 8313;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 252;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = period;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,-8,o),
(176,33,o),
(176,62,qs),
(176,91,o),
(135,132,o),
(106,132,qs),
(76,132,o),
(35,91,o),
(35,62,qs),
(35,33,o),
(76,-8,o),
(106,-8,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 97 2 1 1 1 40 1 78 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 211;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
kernLeft = comma;
kernRight = comma;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(79,-117,l),
(171,118,l),
(66,118,l),
(8,-117,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 204;
}
);
note = comma;
unicode = 44;
},
{
glyphname = colon;
kernLeft = colon;
kernRight = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,370,o),
(179,411,o),
(179,440,qs),
(179,469,o),
(138,510,o),
(109,510,qs),
(79,510,o),
(39,469,o),
(39,440,qs),
(39,411,o),
(79,370,o),
(109,370,qs)
);
},
{
closed = 1;
nodes = (
(138,-8,o),
(179,33,o),
(179,62,qs),
(179,91,o),
(138,132,o),
(109,132,qs),
(79,132,o),
(39,91,o),
(39,62,qs),
(39,33,o),
(79,-8,o),
(109,-8,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
4 1 1 1 0 97 0 0 0 42 77 0 2 2 3 97 5 1 3 3 40 3 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 221;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
kernLeft = semicolon;
kernRight = semicolon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(95,-117,l),
(187,118,l),
(81,118,l),
(24,-117,l)
);
},
{
closed = 1;
nodes = (
(163,370,o),
(204,411,o),
(204,440,qs),
(204,469,o),
(163,510,o),
(134,510,qs),
(104,510,o),
(63,469,o),
(63,440,qs),
(63,411,o),
(104,370,o),
(134,370,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 0 1 99 4 1 3 3 2 97 0 2 2 42 3 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 245;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = ellipsis;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(545,-8,o),
(586,33,o),
(586,62,qs),
(586,91,o),
(545,132,o),
(516,132,qs),
(486,132,o),
(445,91,o),
(445,62,qs),
(445,33,o),
(486,-8,o),
(516,-8,qs)
);
},
{
closed = 1;
nodes = (
(140,-8,o),
(181,33,o),
(181,62,qs),
(181,91,o),
(140,132,o),
(111,132,qs),
(81,132,o),
(40,91,o),
(40,62,qs),
(40,33,o),
(81,-8,o),
(111,-8,qs)
);
},
{
closed = 1;
nodes = (
(342,-8,o),
(383,33,o),
(383,62,qs),
(383,91,o),
(342,132,o),
(313,132,qs),
(283,132,o),
(243,91,o),
(243,62,qs),
(243,33,o),
(283,-8,o),
(313,-8,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
4 2 2 0 0 1 97 8 5 7 3 6 5 1 1 40 1 78 24 24 12 12 0 0 24 35 24 34 30 28 12 23 12 22 18 16 0 11 0 10 36 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 625;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,208,l),
(189,700,l),
(75,700,l),
(87,208,l)
);
},
{
closed = 1;
nodes = (
(163,-8,o),
(204,33,o),
(204,62,qs),
(204,91,o),
(163,132,o),
(134,132,qs),
(104,132,o),
(64,91,o),
(64,62,qs),
(64,33,o),
(104,-8,o),
(134,-8,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 1 0 95 0 0 0 33 77 0 2 2 3 97 4 1 3 3 40 3 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 267;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = exclamdown;
kernLeft = exclamdown;
kernRight = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(192,-141,l),
(179,352,l),
(90,352,l),
(78,-141,l)
);
},
{
closed = 1;
nodes = (
(166,428,o),
(207,469,o),
(207,498,qs),
(207,527,o),
(166,568,o),
(137,568,qs),
(107,568,o),
(66,527,o),
(66,498,qs),
(66,469,o),
(107,428,o),
(137,428,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 2 4 1 3 0 2 3 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 272;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = question;
kernLeft = question;
kernRight = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,207,l),
(240,299,l),
(312,299,o),
(365,321,qs),
(420,343,o),
(480,435,o),
(480,505,qs),
(480,570,o),
(452,616,qs),
(423,662,o),
(321,712,o),
(255,712,qs),
(185,712,o),
(137,686,qs),
(87,660,o),
(32,568,o),
(32,508,q),
(133,508,l),
(133,561,o),
(198,624,o),
(255,624,qs),
(311,624,o),
(378,560,o),
(378,505,qs),
(378,447,o),
(350,419,qs),
(325,392,o),
(238,370,o),
(179,370,qs),
(140,370,l),
(144,207,l)
);
},
{
closed = 1;
nodes = (
(220,-8,o),
(261,33,o),
(261,62,qs),
(261,91,o),
(220,132,o),
(191,132,qs),
(161,132,o),
(120,91,o),
(120,62,qs),
(120,33,o),
(161,-8,o),
(191,-8,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
0 2 1 0 1 2 0 128 0 4 0 5 0 4 5 128 0 0 0 5 6 0 5 103 0 1 1 3 97 0 3 3 39 77 0 6 6 7 97 8 1 7 7 40 7 78 31 31 31 42 31 41 37 17 24 36 18 38 32 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = question;
unicode = 63;
},
{
glyphname = questiondown;
kernLeft = questiondown;
kernRight = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,-160,o),
(385,-134,qs),
(435,-108,o),
(490,-16,o),
(490,44,q),
(389,44,l),
(389,-9,o),
(324,-71,o),
(267,-71,qs),
(211,-71,o),
(144,-7,o),
(144,47,qs),
(144,105,o),
(172,133,qs),
(197,160,o),
(284,182,o),
(343,182,qs),
(382,182,l),
(378,345,l),
(285,345,l),
(282,254,l),
(210,252,o),
(157,232,qs),
(102,210,o),
(42,118,o),
(42,48,qs),
(42,-17,o),
(70,-64,qs),
(99,-110,o),
(201,-160,o),
(267,-160,qs)
);
},
{
closed = 1;
nodes = (
(361,421,o),
(402,462,o),
(402,491,qs),
(402,520,o),
(361,561,o),
(331,561,qs),
(302,561,o),
(261,520,o),
(261,491,qs),
(261,462,o),
(302,421,o),
(331,421,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
0 0 1 2 1 0 2 128 0 4 2 3 2 4 3 128 0 6 9 1 7 1 6 7 105 0 1 0 2 4 1 2 105 0 3 5 5 3 89 0 3 3 5 98 8 1 5 3 5 82 31 31 0 0 31 42 31 41 37 35 0 30 0 29 18 38 33 17 24 10 8 27
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,270,o),
(179,311,o),
(179,340,qs),
(179,370,o),
(138,410,o),
(109,410,qs),
(79,410,o),
(39,370,o),
(39,340,qs),
(39,311,o),
(79,270,o),
(109,270,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 218;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(238,206,o),
(312,280,o),
(312,333,qs),
(312,387,o),
(238,462,o),
(184,462,qs),
(150,462,o),
(91,428,o),
(57,368,o),
(57,333,qs),
(57,280,o),
(131,206,o),
(184,206,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 12 0 11 37 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 369;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = asterisk;
kernLeft = asterisk;
kernRight = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(280,358,l),
(280,487,l),
(392,423,l),
(427,483,l),
(315,547,l),
(427,611,l),
(392,671,l),
(280,607,l),
(280,735,l),
(211,735,l),
(211,607,l),
(100,671,l),
(66,611,l),
(176,547,l),
(66,483,l),
(100,423,l),
(211,487,l),
(211,358,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
15 14 13 12 11 10 9 6 5 4 3 2 1 0 14 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 24 23 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 489;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(243,0,l),
(283,186,l),
(485,186,l),
(445,0,l),
(545,0,l),
(585,186,l),
(745,186,l),
(745,281,l),
(606,281,l),
(638,436,l),
(793,436,l),
(793,530,l),
(659,530,l),
(698,715,l),
(598,715,l),
(559,530,l),
(356,530,l),
(396,715,l),
(296,715,l),
(256,530,l),
(87,530,l),
(87,436,l),
(236,436,l),
(203,281,l),
(40,281,l),
(40,186,l),
(183,186,l),
(143,0,l)
);
},
{
closed = 1;
nodes = (
(336,436,l),
(539,436,l),
(505,281,l),
(303,281,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 5 2 3 14 8 2 2 1 3 2 104 16 15 9 3 1 12 10 2 0 11 1 0 103 6 1 4 4 33 77 13 1 11 11 34 11 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
6 1 4 3 4 133 7 5 2 3 14 8 2 2 1 3 2 104 16 15 9 3 1 12 10 2 0 11 1 0 103 13 1 11 11 34 11 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
28 28 28 31 28 31 30 29 27 26 25 24 23 22 21 20 19 18 17 17 17 17 17 17 17 17 16 17 8 31
CALL[ ]	/* CallFunction */";
};
width = 837;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = slash;
kernLeft = slash;
kernRight = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,-103,l),
(380,771,l),
(276,771,l),
(26,-103,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 406;
}
);
note = slash;
unicode = 47;
},
{
glyphname = backslash;
kernLeft = backslash;
kernRight = backslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(380,-103,l),
(130,771,l),
(26,771,l),
(277,-103,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 406;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = periodcentered.loclCAT;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,270,o),
(141,311,o),
(141,340,qs),
(141,370,o),
(100,410,o),
(71,410,qs),
(41,410,o),
(0,370,o),
(0,340,qs),
(0,311,o),
(41,270,o),
(71,270,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 141;
}
);
note = periodcentered.loclCAT;
},
{
glyphname = periodcentered.loclCAT.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-110,280,o),
(-69,321,o),
(-69,350,qs),
(-69,380,o),
(-110,420,o),
(-139,420,qs),
(-169,420,o),
(-210,380,o),
(-210,350,qs),
(-210,321,o),
(-169,280,o),
(-139,280,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = periodcentered.loclCAT.case;
},
{
glyphname = hyphen;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(417,246,l),
(417,335,l),
(57,335,l),
(57,246,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 473;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = endash;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,246,l),
(589,335,l),
(57,335,l),
(57,246,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 645;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(801,246,l),
(801,335,l),
(57,335,l),
(57,246,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 857;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = underscore;
kernLeft = underscore;
kernRight = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(605,-137,l),
(605,-37,l),
(57,-37,l),
(57,-137,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 662;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = parenleft;
kernRight = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(351,-145,l),
(351,-135,l),
(257,-39,o),
(151,202,o),
(151,333,qs),
(151,465,o),
(257,706,o),
(351,801,q),
(351,811,l),
(244,811,l),
(190,758,o),
(144,685,qs),
(46,524,o),
(46,333,qs),
(46,232,o),
(73,143,qs),
(99,57,o),
(187,-89,o),
(244,-145,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
16 10 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 24 24 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 386;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
kernLeft = parenright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(35,-145,l),
(142,-145,l),
(199,-89,o),
(288,57,o),
(314,143,qs),
(340,233,o),
(340,333,qs),
(340,527,o),
(242,685,qs),
(196,758,o),
(142,811,q),
(35,811,l),
(35,801,l),
(129,706,o),
(235,465,o),
(235,333,qs),
(235,202,o),
(129,-39,o),
(35,-135,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
18 5 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 25 22 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 386;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = braceleft;
kernLeft = braceleft;
kernRight = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(387,-162,l),
(387,-73,l),
(349,-73,ls),
(270,-73,o),
(270,5,qs),
(270,40,o),
(281,91,qs),
(290,138,o),
(290,182,qs),
(290,237,o),
(236,311,o),
(180,324,q),
(180,326,l),
(236,338,o),
(290,412,o),
(290,467,qs),
(290,511,o),
(281,560,q),
(270,602,o),
(270,644,qs),
(270,722,o),
(349,722,qs),
(387,722,l),
(387,811,l),
(329,811,ls),
(254,811,o),
(168,730,o),
(168,654,qs),
(168,617,o),
(178,563,qs),
(189,514,o),
(189,471,qs),
(189,385,o),
(88,368,q),
(88,282,l),
(189,265,o),
(189,179,qs),
(189,137,o),
(178,86,qs),
(168,32,o),
(168,-4,qs),
(168,-81,o),
(254,-162,o),
(329,-162,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
30 9 8 3 2 1 1 76 0 0 0 1 2 0 1 105 0 2 3 3 2 89 0 2 2 3 97 4 1 3 2 3 81 0 0 0 43 0 42 41 39 22 20 19 17 5 8 22
CALL[ ]	/* CallFunction */";
};
width = 444;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = braceright;
kernLeft = braceright;
kernRight = braceright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,-162,ls),
(190,-162,o),
(276,-81,o),
(276,-4,qs),
(276,32,o),
(266,86,qs),
(255,137,o),
(255,179,qs),
(255,265,o),
(356,282,q),
(356,368,l),
(255,385,o),
(255,471,qs),
(255,514,o),
(266,563,qs),
(276,617,o),
(276,654,qs),
(276,730,o),
(190,811,o),
(115,811,qs),
(57,811,l),
(57,722,l),
(95,722,ls),
(174,722,o),
(174,644,qs),
(174,609,o),
(165,564,qs),
(154,520,o),
(154,467,qs),
(154,412,o),
(208,338,o),
(264,326,q),
(264,324,l),
(208,311,o),
(154,237,o),
(154,182,qs),
(154,129,o),
(166,78,qs),
(174,41,o),
(174,5,qs),
(174,-73,o),
(95,-73,qs),
(57,-73,l),
(57,-162,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
33 32 10 3 0 1 1 76 0 2 0 1 0 2 1 105 0 0 3 3 0 89 0 0 0 3 97 0 3 0 3 81 43 41 24 22 21 19 32 4 8 23
CALL[ ]	/* CallFunction */";
};
width = 444;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,-160,l),
(277,-73,l),
(171,-73,l),
(171,725,l),
(277,725,l),
(277,811,l),
(71,811,l),
(71,-160,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 334;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(263,-160,l),
(263,811,l),
(57,811,l),
(57,725,l),
(163,725,l),
(163,-73,l),
(57,-73,l),
(57,-160,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 2 0 1 0 2 1 103 0 0 3 3 0 87 0 0 0 3 95 0 3 0 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 334;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,-117,l),
(179,118,l),
(64,118,l),
(8,-117,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 212;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,-117,l),
(179,118,l),
(64,118,l),
(8,-117,l)
);
},
{
closed = 1;
nodes = (
(258,-117,l),
(354,118,l),
(240,118,l),
(184,-117,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 387;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(320,466,l),
(376,700,l),
(302,700,l),
(206,466,l)
);
},
{
closed = 1;
nodes = (
(146,466,l),
(201,700,l),
(127,700,l),
(31,466,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 413;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quotedblright;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(286,466,l),
(382,701,l),
(268,701,l),
(212,466,l)
);
},
{
closed = 1;
nodes = (
(111,466,l),
(208,701,l),
(94,701,l),
(37,466,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 413;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(146,466,l),
(201,700,l),
(127,700,l),
(31,466,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 238;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = quoteright;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(111,466,l),
(208,700,l),
(94,700,l),
(37,466,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 239;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = guillemotleft;
kernLeft = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(429,120,l),
(332,295,l),
(429,470,l),
(327,470,l),
(233,295,l),
(327,120,l)
);
},
{
closed = 1;
nodes = (
(239,120,l),
(142,295,l),
(239,470,l),
(137,470,l),
(43,295,l),
(137,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 3 2 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 479;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(342,120,l),
(436,295,l),
(342,470,l),
(240,470,l),
(337,295,l),
(240,120,l)
);
},
{
closed = 1;
nodes = (
(152,120,l),
(246,295,l),
(152,470,l),
(50,470,l),
(147,295,l),
(50,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 3 2 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 479;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = guilsinglleft;
kernLeft = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(239,120,l),
(142,295,l),
(239,470,l),
(137,470,l),
(43,295,l),
(137,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 289;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,120,l),
(246,295,l),
(152,470,l),
(50,470,l),
(147,295,l),
(50,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 289;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = quotedbl;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(286,466,l),
(382,701,l),
(268,701,l),
(212,466,l)
);
},
{
closed = 1;
nodes = (
(111,466,l),
(208,701,l),
(94,701,l),
(37,466,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 413;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
kernLeft = quotesingle;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(106,466,l),
(203,700,l),
(89,700,l),
(32,466,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 227;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = florin;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-23,-210,ls),
(54,-210,o),
(138,-140,o),
(147,-61,qs),
(202,463,l),
(313,463,l),
(321,551,l),
(212,551,l),
(216,592,ls),
(220,640,o),
(274,681,o),
(328,681,q),
(337,770,l),
(230,770,o),
(119,684,o),
(110,592,qs),
(106,551,l),
(37,551,l),
(29,463,l),
(96,463,l),
(41,-61,ls),
(37,-94,o),
(10,-121,o),
(-17,-121,qs),
(-40,-121,l),
(-49,-210,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 3 0 4 2 3 4 105 5 1 2 6 1 1 0 2 1 103 0 0 0 7 97 0 7 7 38 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 3 0 4 2 3 4 105 5 1 2 6 1 1 0 2 1 103 0 0 7 7 0 89 0 0 0 7 97 0 7 0 7 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
35 17 19 17 19 17 19 32 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 334;
}
);
note = florin;
unicode = 402;
},
{
glyphname = at;
kernLeft = at;
kernRight = at;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,-212,o),
(633,-200,qs),
(687,-188,o),
(726,-170,q),
(701,-97,l),
(620,-136,o),
(518,-136,qs),
(413,-136,o),
(247,-45,o),
(153,116,o),
(153,218,qs),
(153,322,o),
(250,487,o),
(419,579,o),
(522,579,qs),
(626,579,o),
(790,498,o),
(882,347,o),
(882,246,qs),
(882,181,o),
(836,83,o),
(786,83,qs),
(758,83,o),
(727,118,o),
(727,149,qs),
(727,429,l),
(634,429,l),
(634,372,l),
(609,406,o),
(536,439,o),
(492,439,qs),
(431,439,o),
(336,382,o),
(284,281,o),
(284,219,qs),
(284,157,o),
(336,56,o),
(430,-3,o),
(491,-3,qs),
(586,-3,o),
(645,80,q),
(662,41,o),
(727,-1,o),
(772,-1,qs),
(863,-1,o),
(963,140,o),
(963,248,qs),
(963,368,o),
(847,553,o),
(645,654,o),
(522,654,qs),
(395,654,o),
(189,544,o),
(71,345,o),
(71,218,qs),
(71,94,o),
(183,-101,o),
(387,-212,o),
(518,-212,qs)
);
},
{
closed = 1;
nodes = (
(451,81,o),
(380,158,o),
(380,219,qs),
(380,279,o),
(452,356,o),
(509,356,qs),
(567,356,o),
(638,278,o),
(638,218,qs),
(638,159,o),
(568,81,o),
(509,81,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
30 1 9 3 17 1 1 5 53 1 7 1 54 1 8 7 4 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
30 1 9 4 17 1 1 5 53 1 7 1 54 1 8 7 4 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 0 0 6 3 0 6 105 4 1 3 0 9 5 3 9 105 12 10 2 5 5 1 97 2 1 1 1 34 77 0 7 7 8 97 11 1 8 8 38 8 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 4 3 9 3 4 9 128 0 0 0 6 3 0 6 105 0 3 0 9 5 3 9 105 12 10 2 5 5 1 97 2 1 1 1 34 77 0 7 7 8 97 11 1 8 8 38 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
59 59 0 0 59 70 59 69 65 63 0 58 0 57 38 37 35 19 38 35 37 38 13 8 30
CALL[ ]	/* CallFunction */";
};
width = 1028;
}
);
note = at;
unicode = 64;
},
{
glyphname = ampersand;
kernLeft = ampersand;
kernRight = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(379,-12,o),
(456,73,qs),
(463,82,l),
(545,0,l),
(678,0,l),
(519,158,l),
(667,405,l),
(555,405,l),
(451,226,l),
(318,358,ls),
(257,418,o),
(205,488,o),
(205,526,qs),
(205,565,o),
(257,619,o),
(303,619,qs),
(352,619,o),
(406,562,o),
(406,516,q),
(510,516,l),
(510,606,o),
(397,712,o),
(304,712,qs),
(244,712,o),
(151,664,o),
(100,580,o),
(100,527,qs),
(100,461,o),
(149,398,qs),
(156,388,l),
(149,382,ls),
(102,347,o),
(44,251,o),
(44,195,qs),
(44,136,o),
(102,41,o),
(204,-12,o),
(268,-12,qs)
);
},
{
closed = 1;
nodes = (
(220,83,o),
(149,153,o),
(149,202,qs),
(149,270,o),
(221,321,q),
(398,147,l),
(368,114,o),
(310,83,o),
(274,83,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
41 40 31 28 7 5 6 3 34 1 4 6 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 1 2 3 2 1 3 128 0 2 2 0 97 0 0 0 39 77 0 3 3 4 97 7 5 2 4 4 34 77 8 1 6 6 4 97 7 5 2 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 1 2 3 2 1 3 128 0 2 2 0 97 0 0 0 39 77 0 3 3 4 95 0 4 4 34 77 8 1 6 6 5 97 7 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
38 38 0 0 38 46 38 45 0 37 0 36 18 23 34 18 45 9 8 27
CALL[ ]	/* CallFunction */";
};
width = 702;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(375,-100,l),
(375,618,l),
(452,618,l),
(452,-100,l),
(543,-100,l),
(543,700,l),
(270,700,ls),
(189,700,o),
(137,672,qs),
(86,645,o),
(34,553,o),
(34,494,qs),
(34,436,o),
(59,392,qs),
(85,343,o),
(190,289,o),
(270,289,qs),
(284,289,l),
(284,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 0 3 2 3 0 2 128 4 1 2 2 132 0 3 3 1 95 0 1 1 33 3 78 17 17 17 40 32 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(359,-232,o),
(463,-186,o),
(523,-98,o),
(523,-38,qs),
(523,19,o),
(496,58,q),
(524,85,o),
(538,120,qs),
(552,152,o),
(552,193,qs),
(552,251,o),
(528,290,qs),
(503,331,o),
(462,354,qs),
(422,379,o),
(370,396,qs),
(273,429,ls),
(230,443,o),
(208,464,qs),
(184,485,o),
(184,525,qs),
(184,572,o),
(248,624,o),
(298,622,qs),
(354,622,o),
(418,560,o),
(419,514,q),
(532,514,l),
(531,572,o),
(473,662,o),
(369,712,o),
(301,712,qs),
(236,712,o),
(132,666,o),
(73,579,o),
(73,520,qs),
(73,460,o),
(100,423,q),
(44,367,o),
(44,288,qs),
(44,207,o),
(139,115,o),
(226,84,qs),
(323,53,ls),
(368,38,o),
(412,-4,o),
(412,-44,qs),
(412,-92,o),
(348,-142,o),
(298,-142,qs),
(240,-142,o),
(178,-75,o),
(177,-34,q),
(64,-34,l),
(65,-93,o),
(126,-183,o),
(230,-232,o),
(295,-232,qs)
);
},
{
closed = 1;
nodes = (
(395,132,o),
(262,179,qs),
(212,197,o),
(155,249,o),
(155,295,qs),
(155,335,o),
(181,361,q),
(211,346,ls),
(218,342,o),
(273,323,o),
(300,314,qs),
(334,302,ls),
(386,283,o),
(441,232,o),
(441,186,qs),
(441,147,o),
(415,119,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
74 67 51 19 4 0 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 39 77 0 1 1 5 97 6 1 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 1 6 1 5 1 5 101 0 4 4 2 97 0 2 2 39 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 57 0 56 34 32 30 29 26 24 34 19 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = section;
unicode = 167;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,-5,o),
(577,41,qs),
(656,87,o),
(743,248,o),
(743,351,qs),
(743,454,o),
(699,536,qs),
(655,617,o),
(498,706,o),
(395,706,qs),
(292,706,o),
(214,661,qs),
(135,616,o),
(48,454,o),
(48,351,qs),
(48,247,o),
(92,167,qs),
(137,86,o),
(294,-5,o),
(395,-5,qs)
);
},
{
closed = 1;
nodes = (
(472,121,o),
(584,205,o),
(602,276,q),
(507,276,l),
(479,195,o),
(394,195,qs),
(339,195,o),
(268,277,o),
(268,351,qs),
(268,426,o),
(339,507,o),
(394,507,qs),
(435,507,o),
(494,465,o),
(507,426,q),
(602,426,l),
(584,500,o),
(473,582,o),
(396,582,qs),
(335,582,o),
(285,555,qs),
(234,527,o),
(178,423,o),
(178,352,qs),
(178,281,o),
(207,228,qs),
(236,176,o),
(334,121,o),
(396,121,qs)
);
},
{
closed = 1;
nodes = (
(302,37,o),
(234,77,qs),
(166,116,o),
(92,258,o),
(92,351,qs),
(92,445,o),
(130,516,qs),
(167,587,o),
(303,665,o),
(395,665,qs),
(488,665,o),
(557,626,qs),
(625,587,o),
(699,445,o),
(699,351,qs),
(699,258,o),
(662,187,qs),
(625,116,o),
(488,37,o),
(395,37,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 93 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 0 0 8 2 0 8 105 0 2 0 4 3 2 4 105 0 5 11 1 7 9 5 7 105 12 1 9 1 1 9 89 12 1 9 9 1 97 10 1 1 9 1 81 49 49 20 20 0 0 49 68 49 67 59 57 20 48 20 47 45 44 43 41 37 35 33 32 30 28 0 19 0 18 40 13 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 790;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = registered;
kernLeft = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,425,o),
(292,463,o),
(330,529,o),
(330,568,qs),
(330,607,o),
(292,673,o),
(226,712,o),
(187,712,qs),
(148,712,o),
(82,673,o),
(43,607,o),
(43,568,qs),
(43,529,o),
(82,463,o),
(148,425,o),
(187,425,qs)
);
},
{
closed = 1;
nodes = (
(138,448,o),
(67,519,o),
(67,568,qs),
(67,618,o),
(138,688,o),
(187,688,qs),
(237,688,o),
(307,618,o),
(307,568,qs),
(307,519,o),
(237,448,o),
(187,448,qs)
);
},
{
closed = 1;
nodes = (
(166,496,l),
(166,561,l),
(184,561,l),
(219,496,l),
(252,496,l),
(211,568,l),
(240,578,o),
(240,607,qs),
(240,625,o),
(218,651,o),
(192,651,qs),
(138,651,l),
(138,496,l)
);
},
{
closed = 1;
nodes = (
(166,585,l),
(166,628,l),
(188,628,ls),
(200,628,o),
(213,617,o),
(213,607,qs),
(213,596,o),
(198,585,o),
(185,585,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 6 values pushed */
34 1 6 9 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 63 values pushed */
0 4 2 8 0 4 114 0 8 9 2 8 112 12 1 9 6 2 9 6 126 0 6 5 2 6 5 126 7 1 5 3 2 5 3 126 0 0 0 2 4 0 2 105 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
0 4 2 8 2 4 8 128 0 8 9 2 8 9 126 12 1 9 6 2 9 6 126 0 6 5 2 6 5 126 7 1 5 3 2 5 3 126 0 0 0 2 4 0 2 105 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
41 41 16 16 0 0 41 49 41 48 47 45 40 39 38 37 36 35 30 28 16 27 16 26 22 20 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 372;
}
);
note = registered;
unicode = 174;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(407,350,l),
(407,581,l),
(488,395,l),
(541,395,l),
(623,579,l),
(623,350,l),
(693,350,l),
(693,700,l),
(610,700,l),
(516,484,l),
(424,700,l),
(339,700,l),
(339,350,l)
);
},
{
closed = 1;
nodes = (
(192,350,l),
(192,641,l),
(286,641,l),
(286,700,l),
(27,700,l),
(27,641,l),
(121,641,l),
(121,350,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
10 7 2 3 3 5 1 76 0 3 5 2 5 3 2 128 8 4 2 2 2 132 6 1 2 0 5 5 0 87 6 1 2 0 0 5 95 7 1 5 0 5 79 17 17 17 17 18 18 17 18 16 9 6 31
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(235,435,o),
(314,512,o),
(314,573,qs),
(314,636,o),
(235,712,o),
(176,712,qs),
(118,712,o),
(38,635,o),
(38,573,qs),
(38,512,o),
(118,435,o),
(176,435,qs)
);
},
{
closed = 1;
nodes = (
(150,507,o),
(114,544,o),
(114,574,qs),
(114,604,o),
(151,640,o),
(176,640,qs),
(202,640,o),
(239,604,o),
(239,574,qs),
(239,544,o),
(201,507,o),
(176,507,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 352;
}
);
note = degree;
unicode = 176;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,-100,l),
(177,720,l),
(71,720,l),
(71,-100,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 95 0 0 0 33 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 248;
}
);
note = bar;
unicode = 124;
},
{
glyphname = brokenbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,391,l),
(177,720,l),
(71,720,l),
(71,391,l)
);
},
{
closed = 1;
nodes = (
(177,-100,l),
(177,230,l),
(71,230,l),
(71,-100,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 2 0 3 2 3 99 0 1 1 0 95 0 0 0 33 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 248;
}
);
note = brokenbar;
unicode = 166;
},
{
glyphname = dagger;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(334,-261,l),
(323,476,l),
(518,468,l),
(518,551,l),
(323,541,l),
(334,783,l),
(228,783,l),
(239,541,l),
(44,551,l),
(44,468,l),
(239,476,l),
(228,-261,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 1 2 133 0 5 0 5 134 3 1 1 0 0 1 87 3 1 1 1 0 96 4 1 0 1 0 80 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = dagger;
unicode = 8224;
},
{
glyphname = uni2113;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,-100,l),
(177,720,l),
(71,720,l),
(71,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 248;
}
);
note = uni2113;
unicode = 8467;
},
{
glyphname = daggerdbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(334,-261,l),
(324,-19,l),
(519,-28,l),
(519,55,l),
(324,46,l),
(324,476,l),
(519,468,l),
(519,551,l),
(324,541,l),
(334,783,l),
(228,783,l),
(240,541,l),
(44,551,l),
(44,468,l),
(240,476,l),
(240,46,l),
(44,55,l),
(44,-28,l),
(240,-19,l),
(228,-261,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 1 0 95 8 1 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 18 17 17 17 17 17 17 17 17 16 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = daggerdbl;
unicode = 8225;
},
{
glyphname = estimated;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(556,-12,o),
(692,134,q),
(647,184,l),
(583,120,o),
(462,57,o),
(388,57,qs),
(323,57,o),
(225,101,o),
(186,145,q),
(186,317,l),
(720,317,l),
(720,380,ls),
(720,445,o),
(675,564,o),
(633,610,qs),
(588,659,o),
(460,712,o),
(379,712,qs),
(268,712,o),
(193,662,qs),
(118,612,o),
(38,441,o),
(38,334,qs),
(38,221,o),
(85,146,qs),
(130,69,o),
(287,-12,o),
(388,-12,qs)
);
},
{
closed = 1;
nodes = (
(186,555,l),
(254,644,o),
(379,644,qs),
(439,644,o),
(533,603,o),
(565,565,q),
(565,387,l),
(186,387,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
34 29 2 5 4 25 24 18 3 2 1 2 76 0 0 0 4 5 0 4 105 7 1 5 0 1 2 5 1 103 0 2 3 3 2 89 0 2 2 3 97 6 1 3 2 3 81 28 28 0 0 28 35 28 35 33 31 0 27 0 26 35 22 40 8 6 25
CALL[ ]	/* CallFunction */";
};
width = 759;
}
);
note = estimated;
unicode = 8494;
},
{
glyphname = at.case;
kernRight = at.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,-84,o),
(633,-72,qs),
(687,-60,o),
(726,-42,q),
(701,31,l),
(620,-8,o),
(518,-8,qs),
(413,-8,o),
(247,83,o),
(153,244,o),
(153,346,qs),
(153,450,o),
(250,615,o),
(419,707,o),
(522,707,qs),
(626,707,o),
(790,626,o),
(882,475,o),
(882,374,qs),
(882,309,o),
(836,211,o),
(786,211,qs),
(758,211,o),
(727,246,o),
(727,277,qs),
(727,557,l),
(634,557,l),
(634,500,l),
(609,534,o),
(536,567,o),
(492,567,qs),
(431,567,o),
(336,510,o),
(284,409,o),
(284,347,qs),
(284,285,o),
(336,184,o),
(430,125,o),
(491,125,qs),
(586,125,o),
(645,208,q),
(662,169,o),
(727,127,o),
(772,127,qs),
(863,127,o),
(963,268,o),
(963,376,qs),
(963,496,o),
(847,681,o),
(645,782,o),
(522,782,qs),
(395,782,o),
(189,672,o),
(71,473,o),
(71,346,qs),
(71,222,o),
(183,27,o),
(387,-84,o),
(518,-84,qs)
);
},
{
closed = 1;
nodes = (
(451,209,o),
(380,286,o),
(380,347,qs),
(380,407,o),
(452,484,o),
(509,484,qs),
(567,484,o),
(638,406,o),
(638,346,qs),
(638,287,o),
(568,209,o),
(509,209,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
30 1 9 3 17 1 1 5 53 1 7 1 54 1 8 7 4 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
30 1 9 4 17 1 1 5 53 1 7 1 54 1 8 7 4 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 6 3 0 6 105 4 1 3 0 9 5 3 9 105 12 10 2 5 2 1 1 7 5 1 105 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 4 3 9 3 4 9 128 0 0 0 6 3 0 6 105 0 3 0 9 5 3 9 105 12 10 2 5 2 1 1 7 5 1 105 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
59 59 0 0 59 70 59 69 65 63 0 58 0 57 38 37 35 19 38 35 37 38 13 8 30
CALL[ ]	/* CallFunction */";
};
width = 1025;
}
);
note = at.case;
},
{
glyphname = registered.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(228,629,o),
(294,667,o),
(332,733,o),
(332,772,qs),
(332,811,o),
(294,877,o),
(228,916,o),
(189,916,qs),
(150,916,o),
(84,877,o),
(45,811,o),
(45,772,qs),
(45,733,o),
(84,667,o),
(150,629,o),
(189,629,qs)
);
},
{
closed = 1;
nodes = (
(140,652,o),
(69,723,o),
(69,772,qs),
(69,822,o),
(140,892,o),
(189,892,qs),
(239,892,o),
(309,822,o),
(309,772,qs),
(309,723,o),
(239,652,o),
(189,652,qs)
);
},
{
closed = 1;
nodes = (
(168,700,l),
(168,765,l),
(186,765,l),
(221,700,l),
(254,700,l),
(213,772,l),
(242,782,o),
(242,811,qs),
(242,829,o),
(220,855,o),
(194,855,qs),
(140,855,l),
(140,700,l)
);
},
{
closed = 1;
nodes = (
(168,789,l),
(168,832,l),
(190,832,ls),
(202,832,o),
(215,821,o),
(215,811,qs),
(215,800,o),
(200,789,o),
(187,789,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
34 1 6 9 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 63 values pushed */
0 4 2 8 0 4 114 0 8 9 2 8 112 12 1 9 6 2 9 6 126 0 6 5 2 6 5 126 7 1 5 3 2 5 3 126 0 0 0 2 4 0 2 105 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
0 4 2 8 2 4 8 128 0 8 9 2 8 9 126 12 1 9 6 2 9 6 126 0 6 5 2 6 5 126 7 1 5 3 2 5 3 126 0 0 0 2 4 0 2 105 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
41 41 16 16 0 0 41 49 41 48 47 45 40 39 38 37 36 35 30 28 16 27 16 26 22 20 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 377;
}
);
note = registered.case;
},
{
glyphname = uni20BF;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(188,0,l),
(188,-86,l),
(257,-86,l),
(257,0,l),
(321,0,l),
(321,-86,l),
(390,-86,l),
(390,3,l),
(478,13,o),
(573,119,o),
(573,198,qs),
(573,260,o),
(500,355,o),
(438,376,q),
(484,393,o),
(541,471,o),
(541,527,qs),
(541,591,o),
(462,679,o),
(390,694,q),
(390,791,l),
(321,791,l),
(321,700,l),
(257,700,l),
(257,791,l),
(188,791,l),
(188,700,l),
(69,700,l),
(69,0,l)
);
},
{
closed = 1;
nodes = (
(175,90,l),
(175,325,l),
(326,325,ls),
(392,325,o),
(466,266,o),
(466,207,qs),
(466,148,o),
(396,90,o),
(328,90,qs)
);
},
{
closed = 1;
nodes = (
(175,413,l),
(175,611,l),
(311,611,ls),
(433,611,o),
(433,512,qs),
(433,464,o),
(373,413,o),
(314,413,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
8 1 10 0 14 1 8 11 20 1 5 9 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
3 1 1 0 0 1 112 6 1 4 5 5 4 113 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
3 1 1 0 1 133 6 1 4 5 5 4 113 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
3 1 1 0 1 133 6 1 4 5 4 134 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
38 38 29 29 38 45 38 44 43 41 29 37 29 36 37 17 17 17 30 17 17 17 16 14 8 31
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = uni20BF;
unicode = 8383;
},
{
glyphname = cent;
layers = (
{
anchors = (
{
name = bottom;
pos = (380,6);
},
{
name = top;
pos = (379,694);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(381,-86,l),
(395,-6,l),
(509,-2,o),
(655,113,o),
(675,213,q),
(560,213,l),
(547,161,o),
(472,97,o),
(412,90,q),
(498,580,l),
(545,545,o),
(560,482,q),
(675,482,l),
(662,554,o),
(580,656,o),
(516,682,q),
(535,791,l),
(466,791,l),
(450,700,l),
(431,704,o),
(390,706,q),
(405,791,l),
(336,791,l),
(320,702,l),
(234,689,o),
(112,592,o),
(49,442,o),
(49,350,qs),
(49,247,o),
(129,84,o),
(204,39,q),
(182,-86,l),
(251,-86,l),
(268,11,l),
(297,1,o),
(327,-3,q),
(312,-86,l)
);
},
{
closed = 1;
nodes = (
(156,445,o),
(232,577,o),
(303,601,q),
(223,150,l),
(190,185,o),
(156,287,o),
(156,350,qs)
);
},
{
closed = 1;
nodes = (
(374,613,l),
(379,613,ls),
(409,613,o),
(434,607,q),
(343,90,l),
(314,94,o),
(285,107,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
20 17 2 8 2 46 40 26 3 4 8 50 39 27 5 2 5 6 5 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
3 1 1 2 2 1 112 0 4 8 5 8 4 5 128 0 5 6 8 5 6 126 7 1 0 6 0 134 0 8 8 2 97 0 2 2 33 77 0 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
3 1 1 2 1 133 0 4 8 5 8 4 5 128 0 5 6 8 5 6 126 7 1 0 6 0 134 0 8 8 2 97 0 2 2 33 77 0 6 6 34 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
27 17 18 22 20 18 17 25 19 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 724;
}
);
note = cent;
unicode = 162;
},
{
glyphname = currency;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,147,l),
(213,120,o),
(272,120,qs),
(330,120,o),
(375,147,q),
(435,87,l),
(480,132,l),
(422,190,l),
(456,235,o),
(456,298,qs),
(456,360,o),
(421,406,q),
(480,465,l),
(435,510,l),
(374,448,l),
(332,474,o),
(273,474,qs),
(213,474,o),
(171,448,q),
(109,510,l),
(64,465,l),
(124,406,l),
(90,361,o),
(90,298,qs),
(90,236,o),
(122,190,q),
(64,132,l),
(109,87,l)
);
},
{
closed = 1;
nodes = (
(234,194,o),
(183,246,o),
(183,297,qs),
(183,349,o),
(234,402,o),
(272,402,qs),
(309,402,o),
(363,349,o),
(363,297,qs),
(363,247,o),
(310,194,o),
(272,194,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
15 14 12 8 6 5 6 2 0 26 22 20 19 1 5 1 3 2 76 13 7 2 0 74 27 21 2 1 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
4 1 3 0 1 3 1 101 0 2 2 0 97 0 0 0 36 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 2 3 0 2 105 4 1 3 1 1 3 89 4 1 3 3 1 97 0 1 3 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
28 28 28 39 28 38 39 44 41 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 544;
}
);
note = currency;
unicode = 164;
},
{
glyphname = dollar;
kernLeft = S;
kernRight = S;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(255,-86,l),
(324,-86,l),
(324,-11,l),
(419,-5,o),
(541,102,o),
(541,189,qs),
(541,250,o),
(487,331,o),
(404,377,o),
(344,397,qs),
(324,404,l),
(324,618,l),
(363,608,o),
(408,551,o),
(408,514,q),
(521,514,l),
(519,598,o),
(410,701,o),
(324,710,q),
(324,791,l),
(255,791,l),
(255,710,l),
(169,701,o),
(62,601,o),
(62,518,qs),
(62,449,o),
(146,357,o),
(237,326,qs),
(255,320,l),
(255,83,l),
(208,95,o),
(154,163,o),
(153,211,q),
(42,211,l),
(43,117,o),
(160,3,o),
(255,-9,q)
);
},
{
closed = 1;
nodes = (
(324,296,l),
(384,274,o),
(430,227,o),
(430,182,qs),
(430,139,o),
(372,84,o),
(324,79,q)
);
},
{
closed = 1;
nodes = (
(255,431,l),
(210,450,o),
(173,491,o),
(173,525,qs),
(173,564,o),
(218,613,o),
(255,619,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
50 24 17 14 4 2 1 49 42 25 7 4 0 2 43 6 2 3 0 36 1 4 3 4 76 0 2 1 0 1 2 0 128 0 0 3 1 0 3 126 0 1 0 4 1 4 99 0 3 3 40 3 78 17 27 20 28 18 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = Euro;
kernRight = C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(559,-12,o),
(715,105,o),
(736,211,q),
(619,211,l),
(604,150,o),
(511,83,o),
(436,83,qs),
(357,83,o),
(246,165,o),
(223,240,q),
(454,240,l),
(454,309,l),
(210,309,l),
(208,335,o),
(208,350,qs),
(208,365,o),
(210,391,q),
(454,391,l),
(454,461,l),
(224,461,l),
(247,536,o),
(357,617,o),
(436,617,qs),
(511,617,o),
(604,547,o),
(619,484,q),
(736,484,l),
(715,593,o),
(559,712,o),
(436,712,qs),
(310,712,o),
(140,577,o),
(113,461,q),
(22,461,l),
(22,391,l),
(102,391,l),
(100,365,o),
(100,350,qs),
(100,337,o),
(102,309,q),
(22,309,l),
(22,240,l),
(112,240,l),
(139,123,o),
(310,-12,o),
(436,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
0 5 6 3 6 5 3 128 0 12 0 11 0 12 11 128 7 1 3 8 1 2 1 3 2 103 9 1 1 10 1 0 12 1 0 103 0 6 6 4 97 0 4 4 39 77 0 11 11 13 97 14 1 13 13 40 13 78 0 0 0 45 0 44 42 41 39 37 35 34 33 32 17 18 34 18 34 17 20 17 18 15 8 31
CALL[ ]	/* CallFunction */";
};
width = 783;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = uni20BD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(229,0,l),
(229,114,l),
(435,114,l),
(435,202,l),
(229,202,l),
(229,287,l),
(363,287,ls),
(473,287,o),
(606,394,o),
(606,493,qs),
(606,591,o),
(474,700,o),
(363,700,qs),
(123,700,l),
(123,376,l),
(35,376,l),
(35,287,l),
(123,287,l),
(123,202,l),
(35,202,l),
(35,114,l),
(123,114,l),
(123,0,l)
);
},
{
closed = 1;
nodes = (
(229,376,l),
(229,612,l),
(361,612,ls),
(499,612,o),
(499,493,qs),
(499,376,o),
(361,376,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
11 10 2 3 5 1 2 1 3 2 103 6 1 1 7 1 0 8 1 0 103 0 9 9 4 95 0 4 4 33 77 0 8 8 34 8 78 23 23 23 29 23 28 27 25 17 17 17 36 33 17 17 17 16 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 639;
}
);
note = uni20BD;
unicode = 8381;
},
{
glyphname = uni20A8;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (826,0);
},
{
name = top;
pos = (819,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (576,0);
ref = s;
}
);
width = 1063;
}
);
note = uni20A8;
unicode = 8360;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,0,l),
(553,0,l),
(553,86,l),
(193,86,l),
(264,157,o),
(264,253,qs),
(264,276,o),
(257,304,q),
(425,304,l),
(425,378,l),
(236,378,l),
(222,418,o),
(207,472,o),
(207,499,qs),
(207,563,o),
(277,624,o),
(328,624,qs),
(387,624,o),
(451,556,o),
(453,502,q),
(551,502,l),
(546,597,o),
(430,712,o),
(327,712,qs),
(263,712,o),
(164,663,o),
(107,568,o),
(107,503,qs),
(107,471,o),
(120,413,o),
(132,378,q),
(43,378,l),
(43,304,l),
(157,304,l),
(164,271,o),
(164,252,qs),
(164,192,o),
(125,111,o),
(82,65,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
38 1 8 7 1 76 0 3 4 1 4 3 1 128 5 1 1 6 1 0 7 1 0 103 0 4 4 2 97 0 2 2 39 77 0 7 7 8 95 0 8 8 34 8 78 17 20 17 21 34 18 38 17 20 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 611;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = yen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(364,0,l),
(364,159,l),
(564,159,l),
(564,233,l),
(364,233,l),
(364,258,l),
(395,316,l),
(564,316,l),
(564,391,l),
(434,391,l),
(595,700,l),
(476,700,l),
(311,355,l),
(146,700,l),
(26,700,l),
(189,391,l),
(58,391,l),
(58,316,l),
(228,316,l),
(258,258,l),
(258,233,l),
(58,233,l),
(58,159,l),
(258,159,l),
(258,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
11 1 2 3 18 4 2 1 2 2 76 6 1 3 7 1 2 1 3 2 104 8 1 1 9 1 0 10 1 0 103 5 1 4 4 33 77 0 10 10 34 10 78 24 23 22 21 18 17 17 18 17 17 18 17 16 11 8 31
CALL[ ]	/* CallFunction */";
};
width = 621;
}
);
note = yen;
unicode = 165;
},
{
glyphname = cent.001;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(251,-104,l),
(351,-104,l),
(351,-8,l),
(424,4,o),
(522,96,o),
(537,166,q),
(426,166,l),
(416,125,o),
(349,78,o),
(302,78,qs),
(263,78,o),
(197,117,o),
(157,194,o),
(157,248,qs),
(157,323,o),
(236,418,o),
(302,418,qs),
(348,418,o),
(416,371,o),
(426,331,q),
(537,331,l),
(522,401,o),
(424,493,o),
(351,504,q),
(351,600,l),
(251,600,l),
(251,504,l),
(190,492,o),
(146,458,qs),
(100,423,o),
(49,315,o),
(49,248,qs),
(49,179,o),
(75,127,qs),
(101,73,o),
(192,3,o),
(251,-7,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
12 9 2 2 0 36 33 2 5 3 2 76 0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 3 5 5 3 89 0 3 3 5 95 0 5 3 5 79 20 18 37 34 20 26 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 585;
}
);
note = cent.001;
},
{
glyphname = uni2215;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,-103,l),
(380,771,l),
(276,771,l),
(26,-103,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 406;
}
);
note = uni2215;
unicode = 8725;
},
{
glyphname = plus;
kernLeft = plus;
kernRight = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,63,l),
(347,246,l),
(536,246,l),
(536,335,l),
(347,335,l),
(347,517,l),
(255,517,l),
(255,335,l),
(65,335,l),
(65,246,l),
(255,246,l),
(255,63,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
3 1 1 4 1 0 5 1 0 103 0 5 5 2 95 0 2 2 36 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 2 1 5 2 87 3 1 1 4 1 0 5 1 0 103 0 2 2 5 95 0 5 2 5 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = plus;
unicode = 43;
},
{
glyphname = minus;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(504,246,l),
(504,335,l),
(97,335,l),
(97,246,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = multiply;
kernLeft = multiply;
kernRight = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(301,228,l),
(426,102,l),
(490,165,l),
(364,291,l),
(493,421,l),
(431,484,l),
(301,353,l),
(176,479,l),
(112,416,l),
(238,291,l),
(108,160,l),
(171,98,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
11 5 1 50
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(512,246,l),
(512,335,l),
(88,335,l),
(88,246,l)
);
},
{
closed = 1;
nodes = (
(330,56,o),
(370,96,o),
(370,125,qs),
(370,155,o),
(330,196,o),
(300,196,qs),
(270,196,o),
(230,155,o),
(230,125,qs),
(230,96,o),
(270,56,o),
(300,56,qs)
);
},
{
closed = 1;
nodes = (
(330,385,o),
(370,426,o),
(370,456,qs),
(370,486,o),
(331,526,o),
(300,526,qs),
(269,526,o),
(230,486,o),
(230,456,qs),
(230,426,o),
(270,385,o),
(300,385,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 0 0 1 2 0 1 103 0 2 6 1 3 2 3 101 7 1 5 5 4 97 0 4 4 42 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 7 1 5 0 4 5 105 0 0 0 1 2 0 1 103 0 2 3 3 2 89 0 2 2 3 97 6 1 3 2 3 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
16 16 4 4 16 27 16 26 22 20 4 15 4 14 37 17 16 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = divide;
unicode = 247;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,352,l),
(506,444,l),
(95,444,l),
(95,352,l)
);
},
{
closed = 1;
nodes = (
(506,137,l),
(506,229,l),
(95,229,l),
(95,137,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = equal;
unicode = 61;
},
{
glyphname = notequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(228,70,l),
(264,137,l),
(506,137,l),
(506,229,l),
(312,229,l),
(377,351,l),
(506,351,l),
(506,444,l),
(426,444,l),
(461,510,l),
(373,510,l),
(337,444,l),
(95,444,l),
(95,351,l),
(289,351,l),
(224,229,l),
(95,229,l),
(95,137,l),
(176,137,l),
(140,70,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 3 3 4 112 0 9 0 0 9 113 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 18 17 17 17 17 17 17 17 17 16 10 6 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = greater;
kernRight = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(251,135,l),
(485,363,l),
(251,591,l),
(117,591,l),
(351,363,l),
(117,135,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = greater;
unicode = 62;
},
{
glyphname = less;
kernLeft = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(485,135,l),
(250,363,l),
(485,591,l),
(350,591,l),
(117,363,l),
(350,135,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = less;
unicode = 60;
},
{
glyphname = greaterequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(251,210,l),
(486,400,l),
(251,591,l),
(115,591,l),
(347,401,l),
(115,210,l)
);
},
{
closed = 1;
nodes = (
(477,67,l),
(477,148,l),
(115,148,l),
(115,67,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lessequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(486,210,l),
(253,401,l),
(486,591,l),
(350,591,l),
(115,400,l),
(350,210,l)
);
},
{
closed = 1;
nodes = (
(485,67,l),
(485,148,l),
(124,148,l),
(124,67,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = plusminus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,140,l),
(347,274,l),
(543,274,l),
(543,363,l),
(347,363,l),
(347,497,l),
(255,497,l),
(255,363,l),
(59,363,l),
(59,274,l),
(255,274,l),
(255,140,l)
);
},
{
closed = 1;
nodes = (
(543,0,l),
(543,93,l),
(59,93,l),
(59,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
3 1 1 4 1 0 5 1 0 103 0 5 5 2 95 0 2 2 36 77 0 6 6 7 95 0 7 7 34 7 78 17 17 17 17 17 17 17 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = approxequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(446,317,o),
(523,397,o),
(536,478,q),
(457,478,l),
(453,447,o),
(418,412,o),
(392,412,qs),
(373,412,o),
(340,427,o),
(314,442,qs),
(286,460,o),
(242,478,o),
(215,478,qs),
(156,478,o),
(78,399,o),
(65,318,q),
(144,318,l),
(149,350,o),
(182,384,o),
(209,384,qs),
(229,384,o),
(264,369,o),
(288,353,qs),
(316,335,o),
(358,317,o),
(385,317,qs)
);
},
{
closed = 1;
nodes = (
(511,100,o),
(536,261,q),
(457,261,l),
(453,230,o),
(419,195,o),
(392,195,qs),
(373,195,o),
(340,210,o),
(314,225,qs),
(286,243,o),
(242,261,o),
(215,261,qs),
(156,261,o),
(78,182,o),
(65,101,q),
(144,101,l),
(149,132,o),
(182,167,o),
(209,167,qs),
(229,167,o),
(264,152,o),
(288,136,qs),
(316,118,o),
(358,100,o),
(385,100,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
4 1 2 0 0 1 2 0 105 0 3 12 5 2 1 8 3 1 105 0 9 6 7 9 89 10 1 8 0 6 7 8 6 105 0 9 9 7 98 13 11 2 7 9 7 82 26 26 0 0 26 50 26 49 48 47 45 43 39 37 35 34 32 30 0 25 0 24 18 36 34 18 36 14 6 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,239,o),
(536,400,q),
(457,400,l),
(453,369,o),
(419,334,o),
(392,334,qs),
(373,334,o),
(340,349,o),
(314,364,qs),
(286,382,o),
(242,400,o),
(215,400,qs),
(156,400,o),
(78,321,o),
(65,240,q),
(144,240,l),
(149,271,o),
(182,306,o),
(209,306,qs),
(229,306,o),
(264,291,o),
(288,275,qs),
(316,257,o),
(358,239,o),
(385,239,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 98 6 5 2 1 3 1 82 0 0 0 24 0 23 18 36 34 18 36 7 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = logicalnot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(551,212,l),
(551,435,l),
(45,435,l),
(45,352,l),
(445,352,l),
(445,212,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 0 0 2 113 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 2 134 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
17 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = logicalnot;
unicode = 172;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,174,l),
(322,573,l),
(500,174,l),
(608,174,l),
(372,700,l),
(272,700,l),
(35,174,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 0 1 76 0 0 1 0 133 2 1 1 1 118 18 17 16 3 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 643;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = infinity;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(246,135,o),
(328,187,o),
(356,230,q),
(393,186,o),
(473,135,o),
(526,135,qs),
(595,135,o),
(687,218,o),
(687,290,qs),
(687,360,o),
(599,441,o),
(531,441,qs),
(476,441,o),
(391,386,o),
(364,341,q),
(327,388,o),
(248,441,o),
(193,441,qs),
(125,441,o),
(35,357,o),
(35,286,qs),
(35,215,o),
(124,135,o),
(194,135,qs)
);
},
{
closed = 1;
nodes = (
(163,209,o),
(122,251,o),
(122,287,qs),
(122,323,o),
(164,367,o),
(197,367,qs),
(229,367,o),
(281,326,o),
(314,284,q),
(292,249,o),
(232,209,o),
(198,209,qs)
);
},
{
closed = 1;
nodes = (
(487,208,o),
(435,248,o),
(405,286,q),
(426,323,o),
(489,366,o),
(524,366,qs),
(558,366,o),
(600,324,o),
(600,288,qs),
(600,252,o),
(557,208,o),
(520,208,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
44 26 20 8 4 5 4 1 76 1 1 0 6 1 4 5 0 4 105 10 7 9 3 5 2 2 5 89 10 7 9 3 5 5 2 97 8 3 2 2 5 2 81 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 36 36 36 11 6 25
CALL[ ]	/* CallFunction */";
};
width = 722;
}
);
note = infinity;
unicode = 8734;
},
{
glyphname = integral;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-19,-210,ls),
(55,-210,o),
(135,-140,o),
(144,-61,qs),
(236,776,ls),
(239,807,o),
(264,832,o),
(287,832,qs),
(306,832,l),
(315,922,l),
(294,922,ls),
(221,922,o),
(138,854,o),
(130,776,qs),
(38,-61,ls),
(35,-95,o),
(13,-121,o),
(-12,-121,qs),
(-32,-121,l),
(-41,-210,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 1 0 2 0 1 2 105 0 0 3 3 0 89 0 0 0 3 97 0 3 0 3 81 37 33 37 32 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 267;
}
);
note = integral;
unicode = 8747;
},
{
glyphname = uni2126;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(326,0,l),
(326,86,l),
(245,113,o),
(148,255,o),
(148,351,qs),
(148,419,o),
(202,540,o),
(313,616,o),
(394,616,qs),
(462,616,o),
(574,555,o),
(641,435,o),
(641,351,qs),
(641,256,o),
(546,113,o),
(463,86,q),
(463,0,l),
(736,0,l),
(736,82,l),
(607,82,l),
(677,125,o),
(749,271,o),
(749,360,qs),
(749,463,o),
(656,623,o),
(494,712,o),
(394,712,qs),
(295,712,o),
(134,623,o),
(41,462,o),
(41,360,qs),
(41,271,o),
(113,125,o),
(182,82,q),
(52,82,l),
(52,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
33 19 2 0 4 1 76 0 1 0 4 0 1 4 105 2 1 0 3 3 0 87 2 1 0 0 3 95 5 1 3 0 3 79 23 39 17 22 38 16 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 789;
}
);
note = uni2126;
unicode = 8486;
},
{
glyphname = uni2206;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(677,0,l),
(677,82,l),
(395,700,l),
(308,700,l),
(27,82,l),
(27,0,l)
);
},
{
closed = 1;
nodes = (
(351,580,l),
(569,82,l),
(135,82,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 1 2 0 1 76 3 0 2 2 1 75 0 0 2 0 133 3 1 2 1 1 2 87 3 1 2 2 1 95 0 1 2 1 79 6 6 6 8 6 8 18 17 4 6 24
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = uni2206;
unicode = 8710;
},
{
glyphname = product;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,0,l),
(216,618,l),
(515,618,l),
(515,0,l),
(621,0,l),
(621,618,l),
(698,618,l),
(698,700,l),
(33,700,l),
(33,618,l),
(110,618,l),
(110,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
5 1 3 0 3 134 0 1 0 0 1 87 0 1 1 0 95 4 2 2 0 1 0 79 17 17 17 17 17 16 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 731;
}
);
note = product;
unicode = 8719;
},
{
glyphname = summation;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(449,-49,l),
(449,32,l),
(132,32,l),
(396,290,l),
(396,369,l),
(128,619,l),
(450,619,l),
(450,700,l),
(43,700,l),
(43,578,l),
(298,328,l),
(42,73,l),
(42,-49,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
8 7 2 1 0 5 2 1 1 76 0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 19 17 19 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 472;
}
);
note = summation;
unicode = 8721;
},
{
glyphname = radical;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(299,-43,l),
(797,875,l),
(726,875,l),
(297,82,l),
(179,292,l),
(19,199,l),
(50,146,l),
(119,185,l),
(248,-43,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
4 3 2 1 4 1 0 1 76 0 0 1 0 133 0 1 1 118 17 21 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 747;
}
);
note = radical;
unicode = 8730;
},
{
glyphname = uni00B5;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,-220,l),
(173,12,l),
(208,-12,o),
(261,-12,qs),
(318,-12,o),
(407,40,o),
(431,86,q),
(439,0,l),
(533,0,l),
(533,496,l),
(427,496,l),
(427,240,ls),
(427,164,o),
(352,78,o),
(291,78,qs),
(232,78,o),
(173,151,o),
(173,222,qs),
(173,496,l),
(67,496,l),
(67,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
13 1 1 0 18 1 3 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 36 77 0 1 1 3 97 4 1 3 3 34 77 0 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
2 1 0 0 36 77 0 3 3 34 77 0 1 1 4 97 0 4 4 40 77 0 5 5 38 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 35 17 19 35 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni00B5;
unicode = 181;
},
{
glyphname = partialdiff;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(330,-9,o),
(397,42,qs),
(466,94,o),
(542,283,o),
(542,411,qs),
(542,568,o),
(417,740,o),
(302,740,qs),
(252,740,o),
(202,726,q),
(202,666,l),
(244,678,o),
(278,678,qs),
(334,678,o),
(368,650,qs),
(430,598,o),
(437,463,q),
(407,558,o),
(306,558,qs),
(228,558,o),
(105,466,o),
(38,314,o),
(38,228,qs),
(38,149,o),
(66,95,qs),
(93,44,o),
(185,-9,o),
(243,-9,qs)
);
},
{
closed = 1;
nodes = (
(205,82,o),
(145,155,o),
(145,229,qs),
(145,297,o),
(167,351,qs),
(188,407,o),
(264,469,o),
(313,469,qs),
(364,469,o),
(423,396,o),
(423,324,qs),
(423,258,o),
(402,204,qs),
(380,147,o),
(303,82,o),
(253,82,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
17 1 1 2 16 1 0 1 10 1 5 4 3 76 0 2 0 1 0 2 1 105 0 0 0 4 5 0 4 105 7 1 5 3 3 5 89 7 1 5 5 3 97 6 1 3 5 3 81 28 28 0 0 28 43 28 42 36 34 0 27 0 26 35 36 39 8 6 25
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = partialdiff;
unicode = 8706;
},
{
glyphname = percent;
kernLeft = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(261,0,l),
(662,700,l),
(557,700,l),
(156,0,l)
);
},
{
closed = 1;
nodes = (
(253,366,o),
(290,387,qs),
(328,409,o),
(372,487,o),
(372,539,qs),
(372,593,o),
(350,631,qs),
(328,670,o),
(254,712,o),
(207,712,qs),
(161,712,o),
(123,691,qs),
(84,670,o),
(40,591,o),
(40,539,qs),
(40,488,o),
(62,447,qs),
(84,408,o),
(159,366,o),
(206,366,qs)
);
},
{
closed = 1;
nodes = (
(172,443,o),
(126,493,o),
(126,539,qs),
(126,585,o),
(172,636,o),
(207,636,qs),
(241,636,o),
(286,585,o),
(286,539,qs),
(286,493,o),
(240,443,o),
(206,443,qs)
);
},
{
closed = 1;
nodes = (
(665,-12,o),
(702,10,qs),
(740,31,o),
(783,109,o),
(783,161,qs),
(783,213,o),
(761,254,qs),
(738,292,o),
(664,334,o),
(618,334,qs),
(571,334,o),
(533,313,qs),
(495,291,o),
(451,213,o),
(451,161,qs),
(451,110,o),
(473,69,qs),
(496,31,o),
(571,-12,o),
(617,-12,qs)
);
},
{
closed = 1;
nodes = (
(582,65,o),
(537,116,o),
(537,161,qs),
(537,207,o),
(583,258,o),
(617,258,qs),
(652,258,o),
(697,207,o),
(697,161,qs),
(697,116,o),
(652,65,o),
(617,65,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 106 0 4 4 0 97 2 1 0 0 33 77 13 1 9 9 1 97 12 7 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 106 0 0 0 33 77 0 4 4 2 97 0 2 2 39 77 0 1 1 34 77 13 1 9 9 7 97 12 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 36 values pushed */
56 56 36 36 24 24 4 4 56 67 56 66 62 60 36 55 36 54 46 44 24 35 24 34 30 28 4 23 4 22 41 17 16 14 8 25
CALL[ ]	/* CallFunction */";
};
width = 823;
}
);
note = percent;
unicode = 37;
},
{
glyphname = perthousand;
kernLeft = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(261,0,l),
(662,700,l),
(557,700,l),
(156,0,l)
);
},
{
closed = 1;
nodes = (
(253,366,o),
(290,387,qs),
(328,409,o),
(372,487,o),
(372,539,qs),
(372,593,o),
(350,631,qs),
(328,670,o),
(254,712,o),
(207,712,qs),
(161,712,o),
(123,691,qs),
(84,670,o),
(40,591,o),
(40,539,qs),
(40,488,o),
(62,447,qs),
(84,408,o),
(159,366,o),
(206,366,qs)
);
},
{
closed = 1;
nodes = (
(171,441,o),
(125,493,o),
(125,539,qs),
(125,586,o),
(172,637,o),
(207,637,qs),
(241,637,o),
(287,586,o),
(287,539,qs),
(287,493,o),
(241,441,o),
(206,441,qs)
);
},
{
closed = 1;
nodes = (
(665,-12,o),
(702,10,qs),
(740,31,o),
(783,109,o),
(783,161,qs),
(783,213,o),
(761,254,qs),
(738,292,o),
(664,334,o),
(618,334,qs),
(571,334,o),
(533,313,qs),
(495,291,o),
(451,213,o),
(451,161,qs),
(451,110,o),
(473,69,qs),
(496,31,o),
(571,-12,o),
(617,-12,qs)
);
},
{
closed = 1;
nodes = (
(582,64,o),
(536,115,o),
(536,161,qs),
(536,208,o),
(583,260,o),
(617,260,qs),
(652,260,o),
(698,208,o),
(698,161,qs),
(698,115,o),
(652,64,o),
(617,64,qs)
);
},
{
closed = 1;
nodes = (
(1026,-12,o),
(1064,10,qs),
(1102,31,o),
(1145,109,o),
(1145,161,qs),
(1145,216,o),
(1123,254,qs),
(1101,292,o),
(1027,334,o),
(980,334,qs),
(934,334,o),
(896,313,qs),
(857,292,o),
(813,213,o),
(813,161,qs),
(813,107,o),
(835,69,qs),
(858,31,o),
(933,-12,o),
(979,-12,qs)
);
},
{
closed = 1;
nodes = (
(944,64,o),
(898,115,o),
(898,161,qs),
(898,208,o),
(944,260,o),
(979,260,qs),
(1014,260,o),
(1060,208,o),
(1060,161,qs),
(1060,115,o),
(1014,64,o),
(979,64,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
15 1 5 14 1 3 6 5 3 105 10 1 6 12 1 8 9 6 8 106 0 4 4 0 97 2 1 0 0 33 77 19 13 17 3 9 9 1 97 18 11 16 7 4 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
15 1 5 14 1 3 6 5 3 105 10 1 6 12 1 8 9 6 8 106 0 0 0 33 77 0 4 4 2 97 0 2 2 39 77 0 1 1 34 77 19 13 17 3 9 9 7 97 18 11 16 3 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 52 values pushed */
88 88 68 68 56 56 36 36 24 24 4 4 88 99 88 98 94 92 68 87 68 86 78 76 56 67 56 66 62 60 36 55 36 54 46 44 24 35 24 34 30 28 4 23 4 22 41 17 16 20 8 25
CALL[ ]	/* CallFunction */";
};
width = 1185;
}
);
note = perthousand;
unicode = 8240;
},
{
glyphname = plus.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(341,116,l),
(341,299,l),
(530,299,l),
(530,388,l),
(341,388,l),
(341,570,l),
(249,570,l),
(249,388,l),
(60,388,l),
(60,299,l),
(249,299,l),
(249,116,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
0 2 1 5 2 87 3 1 1 4 1 0 5 1 0 103 0 2 2 5 95 0 5 2 5 79 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = plus.case;
},
{
glyphname = arrowup;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(301,0,l),
(301,549,l),
(339,504,l),
(422,420,l),
(484,483,l),
(255,712,l),
(26,483,l),
(88,420,l),
(171,504,l),
(209,549,l),
(209,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
8 6 5 4 3 2 0 7 0 74 0 0 0 34 0 78 25 1 8 23
CALL[ ]	/* CallFunction */";
};
width = 509;
}
);
note = arrowup;
unicode = 8593;
},
{
glyphname = arrowright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(777,350,l),
(548,580,l),
(485,517,l),
(569,435,l),
(614,396,l),
(64,396,l),
(64,305,l),
(614,305,l),
(569,266,l),
(485,184,l),
(548,121,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
9 1 0 1 1 76 8 7 2 1 74 10 1 0 73 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 18 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 821;
}
);
note = arrowright;
unicode = 8594;
},
{
glyphname = arrowdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(484,217,l),
(421,280,l),
(339,197,l),
(300,152,l),
(300,700,l),
(209,700,l),
(209,152,l),
(170,197,l),
(88,280,l),
(25,217,l),
(254,-12,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
10 9 8 6 3 1 6 0 73 0 0 0 33 0 78 20 1 8 23
CALL[ ]	/* CallFunction */";
};
width = 509;
}
);
note = arrowdown;
unicode = 8595;
},
{
glyphname = arrowleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(336,184,l),
(253,266,l),
(208,305,l),
(757,305,l),
(757,396,l),
(208,396,l),
(253,435,l),
(336,517,l),
(273,580,l),
(44,350,l),
(273,121,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
2 1 2 0 74 10 9 2 1 73 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 20 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 821;
}
);
note = arrowleft;
unicode = 8592;
},
{
glyphname = lozenge;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(524,351,l),
(279,596,l),
(33,351,l),
(278,105,l)
);
},
{
closed = 1;
nodes = (
(143,351,l),
(279,488,l),
(415,351,l),
(278,213,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 5 3 1 2 50
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = lozenge;
unicode = 9674;
},
{
glyphname = uni0308;
layers = (
{
anchors = (
{
name = _top;
pos = (171,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,583,o),
(141,624,o),
(141,654,qs),
(141,683,o),
(100,723,o),
(71,723,qs),
(41,723,o),
(0,683,o),
(0,654,qs),
(0,624,o),
(41,583,o),
(71,583,qs)
);
},
{
closed = 1;
nodes = (
(300,583,o),
(341,624,o),
(341,654,qs),
(341,683,o),
(300,723,o),
(270,723,qs),
(240,723,o),
(200,683,o),
(200,654,qs),
(200,624,o),
(240,583,o),
(270,583,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0308;
unicode = 776;
},
{
glyphname = uni0307;
layers = (
{
anchors = (
{
name = _top;
pos = (71,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,583,o),
(141,624,o),
(141,654,qs),
(141,683,o),
(100,723,o),
(71,723,qs),
(41,723,o),
(0,683,o),
(0,654,qs),
(0,624,o),
(41,583,o),
(71,583,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0307;
unicode = 775;
},
{
glyphname = gravecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (109,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,625,l),
(0,749,l),
(0,661,l),
(218,548,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = gravecomb;
unicode = 768;
},
{
glyphname = acutecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (109,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,659,l),
(218,749,l),
(0,625,l),
(0,546,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = acutecomb;
unicode = 769;
},
{
glyphname = uni030B;
layers = (
{
anchors = (
{
name = _top;
pos = (132,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,547,l),
(324,711,l),
(235,711,l),
(158,547,l)
);
},
{
closed = 1;
nodes = (
(69,547,l),
(157,711,l),
(69,711,l),
(0,547,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 18 values pushed */
2 1 0 1 0 133 3 1 1 1 118 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030B;
unicode = 779;
},
{
glyphname = uni030C.alt;
layers = (
{
anchors = (
{
name = _topright;
pos = (0,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,546,l),
(155,700,l),
(48,700,l),
(0,546,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.alt;
},
{
glyphname = uni0302;
layers = (
{
anchors = (
{
name = _top;
pos = (142,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(142,651,l),
(283,568,l),
(283,649,l),
(142,730,l),
(0,649,l),
(0,568,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0302;
unicode = 770;
},
{
glyphname = uni030C;
layers = (
{
anchors = (
{
name = _top;
pos = (142,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,651,l),
(283,730,l),
(142,645,l),
(0,730,l),
(0,651,l),
(142,570,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C;
unicode = 780;
},
{
glyphname = uni0306;
layers = (
{
anchors = (
{
name = _top;
pos = (149,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,566,o),
(296,644,o),
(296,707,qs),
(296,722,l),
(237,722,l),
(237,647,o),
(148,647,qs),
(59,647,o),
(59,722,q),
(0,722,l),
(0,707,ls),
(0,644,o),
(79,566,o),
(148,566,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 35 values pushed */
2 1 0 1 0 133 0 1 3 3 1 89 0 1 1 3 97 4 1 3 1 3 81 0 0 0 13 0 12 17 33 19 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0306;
unicode = 774;
},
{
glyphname = uni030A;
layers = (
{
anchors = (
{
name = _top;
pos = (110,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,551,o),
(219,610,o),
(219,659,qs),
(219,708,o),
(157,766,o),
(109,766,qs),
(63,766,o),
(0,707,o),
(0,659,qs),
(0,610,o),
(63,551,o),
(109,551,qs)
);
},
{
closed = 1;
nodes = (
(86,602,o),
(55,634,o),
(55,659,qs),
(55,684,o),
(86,715,o),
(109,715,qs),
(133,715,o),
(164,684,o),
(164,659,qs),
(164,634,o),
(133,602,o),
(109,602,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030A;
unicode = 778;
},
{
glyphname = tildecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (164,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(263,591,o),
(320,648,o),
(327,703,q),
(268,703,l),
(262,660,o),
(225,660,qs),
(210,660,o),
(186,671,o),
(171,681,qs),
(153,693,o),
(125,705,o),
(106,705,qs),
(63,705,o),
(8,649,o),
(0,592,q),
(59,592,l),
(65,635,o),
(101,635,qs),
(116,635,o),
(139,625,o),
(156,614,qs),
(174,603,o),
(201,591,o),
(220,591,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 23 0 22 17 36 34 17 36 7 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = tildecomb;
unicode = 771;
},
{
glyphname = uni0304;
layers = (
{
anchors = (
{
name = _top;
pos = (176,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(351,616,l),
(351,693,l),
(0,693,l),
(0,616,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0304;
unicode = 772;
},
{
glyphname = uni0312;
layers = (
{
anchors = (
{
name = _top;
pos = (58,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(108,804,l),
(0,804,o),
(0,680,qs),
(0,642,o),
(12,595,q),
(110,595,l),
(110,684,l),
(60,684,l),
(60,698,ls),
(60,758,o),
(108,758,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 37 values pushed */
0 2 4 1 3 0 2 3 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 0 0 0 10 0 10 19 17 18 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0312;
unicode = 786;
},
{
glyphname = uni0326;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = _bottom;
pos = (56,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(3,-256,l),
(111,-256,o),
(111,-132,qs),
(111,-94,o),
(99,-47,q),
(1,-47,l),
(1,-136,l),
(51,-136,l),
(51,-150,ls),
(51,-210,o),
(3,-210,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 38 values pushed */
0 1 0 0 3 1 0 103 4 1 3 2 2 3 89 4 1 3 3 2 97 0 2 3 2 81 0 0 0 10 0 10 19 17 18 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0326;
unicode = 806;
},
{
glyphname = uni0327;
layers = (
{
anchors = (
{
name = _bottom;
pos = (84,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(119,-261,ls),
(174,-261,o),
(245,-206,o),
(245,-157,qs),
(245,-107,o),
(172,-55,o),
(115,-56,q),
(115,17,l),
(47,17,l),
(47,-115,l),
(102,-115,ls),
(163,-115,o),
(163,-155,qs),
(163,-197,o),
(102,-197,qs),
(0,-197,l),
(0,-261,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 3 3 2 112 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 3 2 133 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 17 17 34 32 5 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0327;
unicode = 807;
},
{
glyphname = uni0328;
layers = (
{
anchors = (
{
name = _ogonek;
pos = (203,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(166,-206,o),
(207,-193,q),
(207,-127,l),
(170,-142,o),
(139,-142,qs),
(113,-142,o),
(83,-118,o),
(83,-97,qs),
(83,-78,o),
(113,-44,o),
(148,-27,qs),
(203,0,l),
(178,52,l),
(128,30,ls),
(59,0,o),
(0,-67,o),
(0,-107,qs),
(0,-156,o),
(72,-206,o),
(126,-206,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
17 1 1 0 1 76 16 7 6 3 0 74 0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 19 0 18 45 3 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0328;
unicode = 808;
},
{
glyphname = uni0308.case;
layers = (
{
anchors = (
{
name = _top;
pos = (171,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,772,o),
(141,812,o),
(141,842,qs),
(141,872,o),
(100,912,o),
(71,912,qs),
(41,912,o),
(0,872,o),
(0,842,qs),
(0,812,o),
(41,772,o),
(71,772,qs)
);
},
{
closed = 1;
nodes = (
(300,772,o),
(341,812,o),
(341,842,qs),
(341,872,o),
(300,912,o),
(270,912,qs),
(240,912,o),
(200,872,o),
(200,842,qs),
(200,812,o),
(240,772,o),
(270,772,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0308.case;
},
{
glyphname = uni0307.case;
layers = (
{
anchors = (
{
name = _top;
pos = (71,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,772,o),
(141,812,o),
(141,842,qs),
(141,872,o),
(100,912,o),
(71,912,qs),
(41,912,o),
(0,872,o),
(0,842,qs),
(0,812,o),
(41,772,o),
(71,772,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0307.case;
},
{
glyphname = gravecomb.case;
layers = (
{
anchors = (
{
name = _top;
pos = (109,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,817,l),
(0,942,l),
(0,853,l),
(218,741,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = gravecomb.case;
},
{
glyphname = acutecomb.case;
layers = (
{
anchors = (
{
name = _top;
pos = (109,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,853,l),
(218,942,l),
(0,817,l),
(0,741,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = acutecomb.case;
},
{
glyphname = uni030B.case;
layers = (
{
anchors = (
{
name = _top;
pos = (162,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,751,l),
(324,915,l),
(235,915,l),
(158,751,l)
);
},
{
closed = 1;
nodes = (
(69,751,l),
(157,915,l),
(69,915,l),
(0,751,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
2 1 0 1 0 133 3 1 1 1 118 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030B.case;
},
{
glyphname = uni030C.alt.case;
layers = (
{
anchors = (
{
name = _topright;
pos = (2,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,546,l),
(155,700,l),
(48,700,l),
(0,546,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.alt.case;
},
{
glyphname = uni0302.case;
layers = (
{
anchors = (
{
name = _top;
pos = (142,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(142,834,l),
(283,751,l),
(283,830,l),
(142,911,l),
(0,830,l),
(0,751,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0302.case;
},
{
glyphname = uni030C.case;
layers = (
{
anchors = (
{
name = _top;
pos = (142,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,831,l),
(283,910,l),
(142,825,l),
(0,910,l),
(0,831,l),
(142,750,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.case;
},
{
glyphname = uni0306.case;
layers = (
{
anchors = (
{
name = _top;
pos = (149,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,753,o),
(296,831,o),
(296,894,qs),
(296,909,l),
(237,909,l),
(237,834,o),
(148,834,qs),
(59,834,o),
(59,909,q),
(0,909,l),
(0,894,ls),
(0,831,o),
(79,753,o),
(148,753,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
2 1 0 1 0 133 0 1 3 3 1 89 0 1 1 3 97 4 1 3 1 3 81 0 0 0 13 0 12 17 33 19 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0306.case;
},
{
glyphname = uni030A.case;
layers = (
{
anchors = (
{
name = _top;
pos = (110,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,756,o),
(219,815,o),
(219,864,qs),
(219,913,o),
(157,971,o),
(109,971,qs),
(63,971,o),
(0,912,o),
(0,864,qs),
(0,815,o),
(63,756,o),
(109,756,qs)
);
},
{
closed = 1;
nodes = (
(86,807,o),
(55,839,o),
(55,864,qs),
(55,889,o),
(86,920,o),
(109,920,qs),
(133,920,o),
(164,889,o),
(164,864,qs),
(164,839,o),
(133,807,o),
(109,807,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030A.case;
},
{
glyphname = tildecomb.case;
layers = (
{
anchors = (
{
name = _top;
pos = (164,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(263,754,o),
(320,812,o),
(327,867,q),
(268,867,l),
(265,845,o),
(242,822,o),
(225,822,qs),
(210,822,o),
(186,833,o),
(171,843,qs),
(152,856,o),
(125,868,o),
(106,868,qs),
(63,868,o),
(8,812,o),
(0,756,q),
(59,756,l),
(65,801,o),
(101,801,qs),
(116,801,o),
(138,791,o),
(156,779,qs),
(174,767,o),
(201,754,o),
(220,754,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 24 0 23 18 36 34 17 36 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = tildecomb.case;
},
{
glyphname = uni0304.case;
layers = (
{
anchors = (
{
name = _top;
pos = (176,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(351,790,l),
(351,867,l),
(0,867,l),
(0,790,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0304.case;
},
{
glyphname = uni0327.case;
layers = (
{
anchors = (
{
name = _bottom;
pos = (82,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(119,-261,ls),
(174,-261,o),
(245,-206,o),
(245,-157,qs),
(245,-107,o),
(172,-55,o),
(115,-56,q),
(115,17,l),
(47,17,l),
(47,-115,l),
(102,-115,ls),
(163,-115,o),
(163,-155,qs),
(163,-197,o),
(102,-197,qs),
(0,-197,l),
(0,-261,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 3 3 2 112 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 3 2 133 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 17 17 34 32 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0327.case;
},
{
glyphname = uni0328.case;
layers = (
{
anchors = (
{
name = _ogonek;
pos = (203,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(166,-206,o),
(207,-193,q),
(207,-127,l),
(170,-142,o),
(139,-142,qs),
(113,-142,o),
(83,-118,o),
(83,-97,qs),
(83,-78,o),
(113,-44,o),
(148,-27,qs),
(203,0,l),
(178,52,l),
(128,30,ls),
(59,0,o),
(0,-67,o),
(0,-107,qs),
(0,-156,o),
(72,-206,o),
(126,-206,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
17 1 1 0 1 76 16 7 6 3 0 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 1 97 2 1 1 1 38 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 19 0 18 45 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0328.case;
},
{
glyphname = uni0308.narrow;
layers = (
{
anchors = (
{
name = _top;
pos = (171,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(110,583,o),
(151,624,o),
(151,654,qs),
(151,683,o),
(110,723,o),
(81,723,qs),
(51,723,o),
(10,683,o),
(10,654,qs),
(10,624,o),
(51,583,o),
(81,583,qs)
);
},
{
closed = 1;
nodes = (
(290,583,o),
(331,624,o),
(331,654,qs),
(331,683,o),
(290,723,o),
(260,723,qs),
(230,723,o),
(190,683,o),
(190,654,qs),
(190,624,o),
(230,583,o),
(260,583,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 1 0 97 2 1 0 0 41 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 1 0 97 2 1 0 0 39 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0308.narrow;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-35,0);
ref = uni0308;
}
);
width = 250;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (57,0);
ref = uni0307;
}
);
width = 250;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (8,0);
ref = gravecomb;
}
);
width = 250;
}
);
note = grave;
unicode = 96;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (16,0);
ref = acutecomb;
}
);
width = 250;
}
);
note = acute;
unicode = 180;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-37,0);
ref = uni030B;
}
);
width = 250;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-17,0);
ref = uni0302;
}
);
width = 250;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-17,0);
ref = uni030C;
}
);
width = 250;
}
);
note = caron;
unicode = 711;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-23,0);
ref = uni0306;
}
);
width = 250;
}
);
note = breve;
unicode = 728;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (16,0);
ref = uni030A;
}
);
width = 250;
}
);
note = ring;
unicode = 730;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-38,0);
ref = tildecomb;
}
);
width = 250;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-50,0);
ref = uni0304;
}
);
width = 250;
}
);
note = macron;
unicode = 175;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (3,0);
ref = uni0327;
}
);
width = 250;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (22,0);
ref = uni0328;
}
);
width = 250;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = uni02BA;
kernLeft = uni02BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(268,552,l),
(278,755,l),
(183,755,l),
(195,552,l)
);
},
{
closed = 1;
nodes = (
(122,552,l),
(133,755,l),
(38,755,l),
(49,552,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 316;
}
);
note = uni02BA;
unicode = 698;
},
{
glyphname = uni02B9;
kernLeft = uni02BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,552,l),
(136,755,l),
(38,755,l),
(51,552,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 173;
}
);
note = uni02B9;
unicode = 697;
},
{
glyphname = uniE000;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(214,0,l),
(214,214,l),
(419,0,l),
(565,0,l),
(321,260,l),
(550,511,l),
(406,511,l),
(214,309,l),
(214,700,l),
(100,700,l),
(100,0,l)
);
},
{
closed = 1;
nodes = (
(886,-12,o),
(1011,57,o),
(1082,179,o),
(1082,254,qs),
(1082,329,o),
(1011,452,o),
(886,523,o),
(808,523,qs),
(730,523,o),
(606,452,o),
(535,329,o),
(535,254,qs),
(535,179,o),
(606,57,o),
(730,-12,o),
(808,-12,qs)
);
},
{
closed = 1;
nodes = (
(759,95,o),
(688,137,o),
(649,210,o),
(649,254,qs),
(649,298,o),
(688,371,o),
(759,413,o),
(806,413,qs),
(853,413,o),
(925,371,o),
(965,298,o),
(965,254,qs),
(965,210,o),
(925,137,o),
(853,95,o),
(806,95,qs)
);
},
{
closed = 1;
nodes = (
(732,566,o),
(773,607,o),
(773,637,qs),
(773,667,o),
(733,707,o),
(702,707,qs),
(672,707,o),
(631,665,o),
(631,636,qs),
(631,607,o),
(672,566,o),
(702,566,qs)
);
},
{
closed = 1;
nodes = (
(943,566,o),
(984,607,o),
(984,637,qs),
(984,667,o),
(944,707,o),
(913,707,qs),
(883,707,o),
(842,665,o),
(842,636,qs),
(842,607,o),
(883,566,o),
(913,566,qs)
);
},
{
closed = 1;
nodes = (
(1262,0,l),
(1262,700,l),
(1152,700,l),
(1152,0,l)
);
},
{
closed = 1;
nodes = (
(1577,95,o),
(1505,140,o),
(1467,213,o),
(1467,254,qs),
(1467,297,o),
(1508,370,o),
(1580,413,o),
(1626,413,qs),
(1694,413,o),
(1782,323,o),
(1782,254,qs),
(1782,209,o),
(1742,136,o),
(1671,95,o),
(1626,95,qs)
);
},
{
closed = 1;
nodes = (
(1722,-12,o),
(1836,60,o),
(1898,182,o),
(1898,254,qs),
(1898,331,o),
(1832,454,o),
(1718,523,o),
(1647,523,qs),
(1590,523,o),
(1502,478,o),
(1467,431,q),
(1467,700,l),
(1357,700,l),
(1357,0,l),
(1467,0,l),
(1467,80,l),
(1502,33,o),
(1590,-12,o),
(1647,-12,qs)
);
},
{
closed = 1;
nodes = (
(2081,0,l),
(2081,511,l),
(1968,511,l),
(1968,0,l)
);
},
{
closed = 1;
nodes = (
(2054,566,o),
(2095,607,o),
(2095,637,qs),
(2095,667,o),
(2055,707,o),
(2024,707,qs),
(1994,707,o),
(1953,665,o),
(1953,636,qs),
(1953,607,o),
(1994,566,o),
(2024,566,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 171 values pushed */
93 1 6 1 8 5 2 3 7 6 88 1 2 7 3 76 17 12 2 0 8 9 8 0 9 128 20 1 1 4 6 4 1 6 128 21 16 13 3 4 2 7 5 7 2 5 128 22 10 2 8 30 23 27 11 26 5 9 4 8 9 105 18 1 4 14 1 6 7 4 6 105 28 15 25 3 7 2 5 7 89 28 15 25 3 7 7 5 97 29 19 24 3 5 7 5 81 109 109 86 86 71 71 55 55 43 43 27 27 11 11 109 120 109 119 115 113 108 107 106 105 86 104 86 103 97 95 92 91 90 89 71 85 71 84 78 76 70 69 68 67 55 66 55 65 61 59 43 54 43 53 49 47 27 42 27 41 35 33 11 26 11 25 39 18 18 18 16 31 6 27
CALL[ ]	/* CallFunction */";
};
width = 2195;
}
);
note = uniE000;
unicode = 57344;
},
{
glyphname = uniE001;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(211,225,l),
(233,173,o),
(306,118,o),
(353,118,qs),
(405,118,o),
(472,177,o),
(472,227,qs),
(472,278,o),
(404,339,o),
(349,339,qs),
(278,339,o),
(227,288,q),
(133,330,l),
(174,700,l),
(581,700,l),
(581,579,l),
(288,579,l),
(271,426,l),
(288,440,o),
(349,458,o),
(384,458,qs),
(456,458,o),
(561,400,o),
(617,296,o),
(617,229,qs),
(617,160,o),
(550,52,o),
(431,-8,o),
(355,-8,qs),
(266,-8,o),
(135,82,o),
(100,166,q)
);
},
{
closed = 1;
nodes = (
(936,-8,o),
(770,88,o),
(674,253,o),
(674,352,qs),
(674,449,o),
(764,614,o),
(928,711,o),
(1033,711,qs),
(1129,711,o),
(1290,620,o),
(1339,546,q),
(1229,468,l),
(1156,581,o),
(1033,581,qs),
(933,581,o),
(818,456,o),
(818,352,qs),
(818,283,o),
(876,177,o),
(975,120,o),
(1035,120,qs),
(1118,120,o),
(1220,203,o),
(1234,265,q),
(1021,265,l),
(1021,383,l),
(1373,383,l),
(1375,369,o),
(1375,328,qs),
(1375,238,o),
(1292,84,o),
(1137,-8,o),
(1035,-8,qs)
);
},
{
closed = 1;
nodes = (
(855,949,o),
(812,904,o),
(812,873,qs),
(812,843,o),
(855,798,o),
(888,798,qs),
(921,798,o),
(964,843,o),
(964,874,qs),
(964,904,o),
(921,949,o),
(888,949,qs)
);
},
{
closed = 1;
nodes = (
(1667,107,l),
(1714,157,o),
(1763,278,o),
(1763,342,qs),
(1763,405,o),
(1716,525,o),
(1670,575,q),
(1755,663,l),
(1818,597,o),
(1884,430,o),
(1884,342,qs),
(1884,254,o),
(1818,89,o),
(1755,23,q)
);
},
{
closed = 1;
nodes = (
(1839,-59,l),
(1919,23,o),
(2001,231,o),
(2001,342,qs),
(2001,453,o),
(1919,661,o),
(1839,742,q),
(1925,831,l),
(2023,731,o),
(2125,477,o),
(2125,342,qs),
(2125,208,o),
(2023,-47,o),
(1925,-148,q)
);
},
{
closed = 1;
nodes = (
(1088,949,o),
(1045,904,o),
(1045,873,qs),
(1045,843,o),
(1088,798,o),
(1121,798,qs),
(1154,798,o),
(1197,843,o),
(1197,874,qs),
(1197,904,o),
(1154,949,o),
(1121,949,qs)
);
},
{
closed = 1;
nodes = (
(1597,248,o),
(1652,303,o),
(1652,342,qs),
(1652,381,o),
(1597,436,o),
(1558,436,qs),
(1519,436,o),
(1464,381,o),
(1464,342,qs),
(1464,303,o),
(1519,248,o),
(1558,248,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
96 1 12 13 97 1 10 12 82 1 2 3 83 53 52 3 1 2 13 1 6 16 19 18 2 7 4 31 30 2 5 17 90 89 2 0 5 8 76 104 103 2 0 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
20 15 19 3 13 12 13 133 14 1 12 10 10 12 112 0 16 1 6 1 16 6 128 21 1 17 7 5 7 17 5 128 0 10 3 2 10 89 0 3 9 1 2 1 3 2 105 0 1 0 4 7 1 4 105 0 6 0 7 17 6 7 103 8 1 5 0 0 5 89 8 1 5 5 0 97 18 11 2 0 5 0 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 82 values pushed */
20 15 19 3 13 12 13 133 14 1 12 10 12 133 0 16 1 6 1 16 6 128 21 1 17 7 5 7 17 5 128 0 10 3 2 10 89 0 3 9 1 2 1 3 2 105 0 1 0 4 7 1 4 105 0 6 0 7 17 6 7 103 8 1 5 0 0 5 89 8 1 5 5 0 97 18 11 2 0 5 0 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 46 values pushed */
117 117 105 105 65 65 32 32 117 128 117 127 123 121 105 116 105 115 111 109 65 76 65 75 71 69 32 64 32 63 57 55 51 49 34 17 25 36 35 17 19 38 33 22 6 31
CALL[ ]	/* CallFunction */";
};
width = 2224;
}
);
note = uniE001;
unicode = 57345;
},
{
glyphname = uniE002;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,48,o),
(552,48,qs),
(559,48,o),
(564,53,qs),
(741,229,ls),
(800,288,o),
(800,367,qs),
(800,386,ls),
(800,393,o),
(803,399,o),
(809,401,qs),
(857,418,o),
(919,499,o),
(919,550,qs),
(919,594,o),
(877,667,o),
(805,710,o),
(760,710,qs),
(707,710,o),
(630,653,o),
(610,603,qs),
(606,592,o),
(594,584,o),
(585,584,qs),
(520,584,ls),
(509,584,o),
(497,592,o),
(493,603,qs),
(473,653,o),
(396,710,o),
(343,710,qs),
(298,710,o),
(226,667,o),
(184,594,o),
(184,550,qs),
(184,499,o),
(246,418,o),
(294,401,qs),
(300,399,o),
(303,393,o),
(303,386,qs),
(303,367,ls),
(303,294,o),
(362,229,q),
(539,53,l)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(521,0,o),
(528,7,o),
(528,12,qs),
(528,17,o),
(524,21,qs),
(321,222,ls),
(285,258,o),
(232,258,qs),
(198,258,o),
(138,227,o),
(100,168,o),
(100,130,qs),
(100,97,o),
(133,37,o),
(193,0,o),
(232,0,qs)
);
},
{
closed = 1;
nodes = (
(294,435,o),
(224,505,o),
(224,554,qs),
(224,603,o),
(294,672,o),
(343,672,qs),
(392,672,o),
(461,603,o),
(461,554,qs),
(461,505,o),
(392,435,o),
(343,435,qs)
);
},
{
closed = 1;
nodes = (
(383,456,o),
(440,514,o),
(440,554,qs),
(440,594,o),
(383,651,o),
(343,651,qs),
(303,651,o),
(245,594,o),
(245,554,qs),
(245,514,o),
(303,456,o),
(343,456,qs)
);
},
{
closed = 1;
nodes = (
(314,484,o),
(273,525,o),
(273,554,qs),
(273,583,o),
(314,623,o),
(343,623,qs),
(357,623,o),
(373,616,q),
(365,614,o),
(355,600,o),
(355,592,qs),
(355,581,o),
(370,566,o),
(381,566,qs),
(389,566,o),
(403,576,o),
(405,584,q),
(412,568,o),
(412,554,qs),
(412,525,o),
(372,484,o),
(343,484,qs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(910,0,o),
(970,37,o),
(1003,97,o),
(1003,130,qs),
(1003,168,o),
(965,227,o),
(905,258,o),
(871,258,qs),
(818,258,o),
(782,222,qs),
(579,21,ls),
(575,17,o),
(575,12,qs),
(575,7,o),
(582,0,o),
(588,0,qs)
);
},
{
closed = 1;
nodes = (
(712,435,o),
(642,505,o),
(642,554,qs),
(642,603,o),
(712,672,o),
(761,672,qs),
(810,672,o),
(879,603,o),
(879,554,qs),
(879,505,o),
(810,435,o),
(761,435,qs)
);
},
{
closed = 1;
nodes = (
(801,456,o),
(858,514,o),
(858,554,qs),
(858,594,o),
(801,651,o),
(761,651,qs),
(721,651,o),
(663,594,o),
(663,554,qs),
(663,514,o),
(721,456,o),
(761,456,qs)
);
},
{
closed = 1;
nodes = (
(732,484,o),
(691,525,o),
(691,554,qs),
(691,583,o),
(732,623,o),
(761,623,qs),
(775,623,o),
(791,616,q),
(783,614,o),
(773,600,o),
(773,592,qs),
(773,581,o),
(788,566,o),
(799,566,qs),
(807,566,o),
(821,576,o),
(823,584,q),
(830,568,o),
(830,554,qs),
(830,525,o),
(790,484,o),
(761,484,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
162 159 99 96 4 1 11 3 1 4 7 2 76 153 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
0 1 11 10 11 1 10 128 19 1 10 12 11 10 112 26 16 23 3 7 9 4 9 7 4 128 13 1 4 3 9 4 3 126 0 3 5 9 3 5 126 14 22 2 5 5 132 2 1 0 15 1 6 8 0 6 105 17 1 8 20 1 11 1 8 11 105 28 21 25 3 12 9 9 12 89 28 21 25 3 12 12 9 97 27 18 24 3 9 12 9 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 93 values pushed */
0 1 11 10 11 1 10 128 19 1 10 12 11 10 12 126 26 16 23 3 7 9 4 9 7 4 128 13 1 4 3 9 4 3 126 0 3 5 9 3 5 126 14 22 2 5 5 132 2 1 0 15 1 6 8 0 6 105 17 1 8 20 1 11 1 8 11 105 28 21 25 3 12 9 9 12 89 28 21 25 3 12 12 9 97 27 18 24 3 9 12 9 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 70 values pushed */
149 149 137 137 125 125 86 86 74 74 62 62 45 45 149 170 149 169 165 163 157 155 137 148 137 147 143 141 125 136 125 135 131 129 124 122 116 114 86 107 86 106 102 100 94 92 74 85 74 84 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 29 6 27
CALL[ ]	/* CallFunction */";
};
width = 1103;
}
);
note = uniE002;
unicode = 57346;
},
{
glyphname = uniE003;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,48,o),
(552,48,qs),
(559,48,o),
(564,53,qs),
(741,229,ls),
(800,288,o),
(800,367,qs),
(800,386,ls),
(800,393,o),
(803,399,o),
(809,401,qs),
(857,418,o),
(919,499,o),
(919,550,qs),
(919,594,o),
(877,667,o),
(805,710,o),
(760,710,qs),
(707,710,o),
(630,653,o),
(610,603,qs),
(606,592,o),
(594,584,o),
(585,584,qs),
(520,584,ls),
(509,584,o),
(497,592,o),
(493,603,qs),
(473,653,o),
(396,710,o),
(343,710,qs),
(298,710,o),
(226,667,o),
(184,594,o),
(184,550,qs),
(184,499,o),
(246,418,o),
(294,401,qs),
(300,399,o),
(303,393,o),
(303,386,qs),
(303,367,ls),
(303,294,o),
(362,229,q),
(539,53,l)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(521,0,o),
(528,7,o),
(528,12,qs),
(528,17,o),
(524,21,qs),
(321,222,ls),
(285,258,o),
(232,258,qs),
(198,258,o),
(138,227,o),
(100,168,o),
(100,130,qs),
(100,97,o),
(133,37,o),
(193,0,o),
(232,0,qs)
);
},
{
closed = 1;
nodes = (
(303,456,o),
(245,514,o),
(245,554,qs),
(245,594,o),
(303,651,o),
(343,651,qs),
(383,651,o),
(440,594,o),
(440,554,qs),
(440,514,o),
(383,456,o),
(343,456,qs)
);
},
{
closed = 1;
nodes = (
(372,484,o),
(412,525,o),
(412,554,qs),
(412,568,o),
(405,584,q),
(403,576,o),
(389,566,o),
(381,566,qs),
(370,566,o),
(355,581,o),
(355,592,qs),
(355,600,o),
(365,614,o),
(373,616,q),
(357,623,o),
(343,623,qs),
(314,623,o),
(273,583,o),
(273,554,qs),
(273,525,o),
(314,484,o),
(343,484,qs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(910,0,o),
(970,37,o),
(1003,97,o),
(1003,130,qs),
(1003,168,o),
(965,227,o),
(905,258,o),
(871,258,qs),
(818,258,o),
(782,222,qs),
(579,21,ls),
(575,17,o),
(575,12,qs),
(575,7,o),
(582,0,o),
(588,0,qs)
);
},
{
closed = 1;
nodes = (
(721,456,o),
(663,514,o),
(663,554,qs),
(663,594,o),
(721,651,o),
(761,651,qs),
(801,651,o),
(858,594,o),
(858,554,qs),
(858,514,o),
(801,456,o),
(761,456,qs)
);
},
{
closed = 1;
nodes = (
(790,484,o),
(830,525,o),
(830,554,qs),
(830,568,o),
(823,584,q),
(821,576,o),
(807,566,o),
(799,566,qs),
(788,566,o),
(773,581,o),
(773,592,qs),
(773,600,o),
(783,614,o),
(791,616,q),
(775,623,o),
(761,623,qs),
(732,623,o),
(691,583,o),
(691,554,qs),
(691,525,o),
(732,484,o),
(761,484,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 150 values pushed */
132 81 2 1 8 3 1 4 7 2 76 141 90 2 1 1 75 0 1 8 9 8 1 9 128 16 1 9 10 8 9 10 126 21 14 19 3 7 10 4 10 7 4 128 11 1 4 3 10 4 3 126 0 3 5 10 3 5 126 12 18 2 5 5 132 2 1 0 13 1 6 8 0 6 105 15 1 8 1 10 8 89 15 1 8 8 10 97 22 17 20 3 10 8 10 81 125 125 113 113 74 74 62 62 45 45 125 146 125 145 138 137 131 129 113 124 113 123 119 117 112 110 104 102 74 95 74 94 87 86 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 23 6 27
CALL[ ]	/* CallFunction */";
};
width = 1103;
}
);
note = uniE003;
unicode = 57347;
},
{
glyphname = uniE004;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,48,o),
(552,48,qs),
(559,48,o),
(564,53,qs),
(741,229,ls),
(800,288,o),
(800,367,qs),
(800,386,ls),
(800,393,o),
(803,399,o),
(809,401,qs),
(857,418,o),
(919,499,o),
(919,550,qs),
(919,594,o),
(877,667,o),
(805,710,o),
(760,710,qs),
(707,710,o),
(630,653,o),
(610,603,qs),
(606,592,o),
(594,584,o),
(585,584,qs),
(520,584,ls),
(509,584,o),
(497,592,o),
(493,603,qs),
(473,653,o),
(396,710,o),
(343,710,qs),
(298,710,o),
(226,667,o),
(184,594,o),
(184,550,qs),
(184,499,o),
(246,418,o),
(294,401,qs),
(300,399,o),
(303,393,o),
(303,386,qs),
(303,367,ls),
(303,294,o),
(362,229,q),
(539,53,l)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(521,0,o),
(528,7,o),
(528,12,qs),
(528,17,o),
(524,21,qs),
(321,222,ls),
(285,258,o),
(232,258,qs),
(198,258,o),
(138,227,o),
(100,168,o),
(100,130,qs),
(100,97,o),
(133,37,o),
(193,0,o),
(232,0,qs)
);
},
{
closed = 1;
nodes = (
(294,435,o),
(224,505,o),
(224,554,qs),
(224,603,o),
(294,672,o),
(343,672,qs),
(392,672,o),
(461,603,o),
(461,554,qs),
(461,505,o),
(392,435,o),
(343,435,qs)
);
},
{
closed = 1;
nodes = (
(383,456,o),
(440,514,o),
(440,554,qs),
(440,594,o),
(383,651,o),
(343,651,qs),
(303,651,o),
(245,594,o),
(245,554,qs),
(245,514,o),
(303,456,o),
(343,456,qs)
);
},
{
closed = 1;
nodes = (
(314,484,o),
(273,525,o),
(273,554,qs),
(273,583,o),
(314,623,o),
(343,623,qs),
(357,623,o),
(373,616,q),
(365,614,o),
(355,600,o),
(355,592,qs),
(355,581,o),
(370,566,o),
(381,566,qs),
(389,566,o),
(403,576,o),
(405,584,q),
(412,568,o),
(412,554,qs),
(412,525,o),
(372,484,o),
(343,484,qs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(910,0,o),
(970,37,o),
(1003,97,o),
(1003,130,qs),
(1003,168,o),
(965,227,o),
(905,258,o),
(871,258,qs),
(818,258,o),
(782,222,qs),
(579,21,ls),
(575,17,o),
(575,12,qs),
(575,7,o),
(582,0,o),
(588,0,qs)
);
},
{
closed = 1;
nodes = (
(1255,0,l),
(1255,214,l),
(1460,0,l),
(1606,0,l),
(1362,260,l),
(1591,511,l),
(1447,511,l),
(1255,309,l),
(1255,700,l),
(1141,700,l),
(1141,0,l)
);
},
{
closed = 1;
nodes = (
(1927,-12,o),
(2052,57,o),
(2123,179,o),
(2123,254,qs),
(2123,329,o),
(2052,452,o),
(1927,523,o),
(1849,523,qs),
(1771,523,o),
(1647,452,o),
(1576,329,o),
(1576,254,qs),
(1576,179,o),
(1647,57,o),
(1771,-12,o),
(1849,-12,qs)
);
},
{
closed = 1;
nodes = (
(1800,95,o),
(1729,137,o),
(1690,210,o),
(1690,254,qs),
(1690,298,o),
(1729,371,o),
(1800,413,o),
(1847,413,qs),
(1894,413,o),
(1966,371,o),
(2006,298,o),
(2006,254,qs),
(2006,210,o),
(1966,137,o),
(1894,95,o),
(1847,95,qs)
);
},
{
closed = 1;
nodes = (
(1773,566,o),
(1814,607,o),
(1814,637,qs),
(1814,667,o),
(1774,707,o),
(1743,707,qs),
(1713,707,o),
(1672,665,o),
(1672,636,qs),
(1672,607,o),
(1713,566,o),
(1743,566,qs)
);
},
{
closed = 1;
nodes = (
(1984,566,o),
(2025,607,o),
(2025,637,qs),
(2025,667,o),
(1985,707,o),
(1954,707,qs),
(1924,707,o),
(1883,665,o),
(1883,636,qs),
(1883,607,o),
(1924,566,o),
(1954,566,qs)
);
},
{
closed = 1;
nodes = (
(2303,0,l),
(2303,700,l),
(2193,700,l),
(2193,0,l)
);
},
{
closed = 1;
nodes = (
(2618,95,o),
(2546,140,o),
(2508,213,o),
(2508,254,qs),
(2508,297,o),
(2549,370,o),
(2621,413,o),
(2667,413,qs),
(2735,413,o),
(2823,323,o),
(2823,254,qs),
(2823,209,o),
(2783,136,o),
(2712,95,o),
(2667,95,qs)
);
},
{
closed = 1;
nodes = (
(2763,-12,o),
(2877,60,o),
(2939,182,o),
(2939,254,qs),
(2939,331,o),
(2873,454,o),
(2759,523,o),
(2688,523,qs),
(2631,523,o),
(2543,478,o),
(2508,431,q),
(2508,700,l),
(2398,700,l),
(2398,0,l),
(2508,0,l),
(2508,80,l),
(2543,33,o),
(2631,-12,o),
(2688,-12,qs)
);
},
{
closed = 1;
nodes = (
(3122,0,l),
(3122,511,l),
(3009,511,l),
(3009,0,l)
);
},
{
closed = 1;
nodes = (
(3095,566,o),
(3136,607,o),
(3136,637,qs),
(3136,667,o),
(3096,707,o),
(3065,707,qs),
(3035,707,o),
(2994,665,o),
(2994,636,qs),
(2994,607,o),
(3035,566,o),
(3065,566,qs)
);
},
{
closed = 1;
nodes = (
(712,435,o),
(642,505,o),
(642,554,qs),
(642,603,o),
(712,672,o),
(761,672,qs),
(810,672,o),
(879,603,o),
(879,554,qs),
(879,505,o),
(810,435,o),
(761,435,qs)
);
},
{
closed = 1;
nodes = (
(801,456,o),
(858,514,o),
(858,554,qs),
(858,594,o),
(801,651,o),
(761,651,qs),
(721,651,o),
(663,594,o),
(663,554,qs),
(663,514,o),
(721,456,o),
(761,456,qs)
);
},
{
closed = 1;
nodes = (
(732,484,o),
(691,525,o),
(691,554,qs),
(691,583,o),
(732,623,o),
(761,623,qs),
(775,623,o),
(791,616,q),
(783,614,o),
(773,600,o),
(773,592,qs),
(773,581,o),
(788,566,o),
(799,566,qs),
(807,566,o),
(821,576,o),
(823,584,q),
(830,568,o),
(830,554,qs),
(830,525,o),
(790,484,o),
(761,484,qs)
);
}
);
userData = {
assembly = "NPUSHW[ ]	/* 33 values pushed */
283 280 99 96 4 1 11 218 1 21 7 130 127 3 3 4 21 133 1 22 4 213 1 3 22 5 76 274 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 154 values pushed */
32 27 2 15 0 6 0 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 39 1 6 8 0 6 89 41 1 8 44 1 11 1 8 11 105 37 25 23 2 4 0 43 56 38 53 26 52 24 7 10 19 0 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 155 values pushed */
32 27 2 15 23 6 23 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 2 1 0 39 1 6 8 0 6 105 41 1 8 44 1 11 1 8 11 105 37 25 2 23 43 56 38 53 26 52 24 7 10 19 23 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 154 values pushed */
32 27 2 15 0 6 0 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 39 1 6 8 0 6 89 41 1 8 44 1 11 1 8 11 105 37 25 23 2 4 0 43 56 38 53 26 52 24 7 10 19 0 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 146 values pushed */
270 270 258 258 246 246 234 234 211 211 196 196 180 180 168 168 152 152 136 136 86 86 74 74 62 62 45 45 270 291 270 290 286 284 278 276 258 269 258 268 264 262 246 257 246 256 252 250 234 245 234 244 240 238 233 232 231 230 211 229 211 228 222 220 217 216 215 214 196 210 196 209 203 201 195 194 193 192 180 191 180 190 186 184 168 179 168 178 174 172 152 167 152 166 160 158 136 151 136 150 144 142 135 134 132 131 129 128 126 125 124 122 116 114 86 107 86 106 102 100 94 92 74 85 74 84 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 60 6 27
CALL[ ]	/* CallFunction */";
};
width = 3236;
}
);
note = uniE004;
},
{
glyphname = uniE005;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,48,o),
(552,48,qs),
(559,48,o),
(564,53,qs),
(741,229,ls),
(800,288,o),
(800,367,qs),
(800,386,ls),
(800,393,o),
(803,399,o),
(809,401,qs),
(857,418,o),
(919,499,o),
(919,550,qs),
(919,594,o),
(877,667,o),
(805,710,o),
(760,710,qs),
(707,710,o),
(630,653,o),
(610,603,qs),
(606,592,o),
(594,584,o),
(585,584,qs),
(520,584,ls),
(509,584,o),
(497,592,o),
(493,603,qs),
(473,653,o),
(396,710,o),
(343,710,qs),
(298,710,o),
(226,667,o),
(184,594,o),
(184,550,qs),
(184,499,o),
(246,418,o),
(294,401,qs),
(300,399,o),
(303,393,o),
(303,386,qs),
(303,367,ls),
(303,294,o),
(362,229,q),
(539,53,l)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(521,0,o),
(528,7,o),
(528,12,qs),
(528,17,o),
(524,21,qs),
(321,222,ls),
(285,258,o),
(232,258,qs),
(198,258,o),
(138,227,o),
(100,168,o),
(100,130,qs),
(100,97,o),
(133,37,o),
(193,0,o),
(232,0,qs)
);
},
{
closed = 1;
nodes = (
(303,456,o),
(245,514,o),
(245,554,qs),
(245,594,o),
(303,651,o),
(343,651,qs),
(383,651,o),
(440,594,o),
(440,554,qs),
(440,514,o),
(383,456,o),
(343,456,qs)
);
},
{
closed = 1;
nodes = (
(372,484,o),
(412,525,o),
(412,554,qs),
(412,568,o),
(405,584,q),
(403,576,o),
(389,566,o),
(381,566,qs),
(370,566,o),
(355,581,o),
(355,592,qs),
(355,600,o),
(365,614,o),
(373,616,q),
(357,623,o),
(343,623,qs),
(314,623,o),
(273,583,o),
(273,554,qs),
(273,525,o),
(314,484,o),
(343,484,qs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(910,0,o),
(970,37,o),
(1003,97,o),
(1003,130,qs),
(1003,168,o),
(965,227,o),
(905,258,o),
(871,258,qs),
(818,258,o),
(782,222,qs),
(579,21,ls),
(575,17,o),
(575,12,qs),
(575,7,o),
(582,0,o),
(588,0,qs)
);
},
{
closed = 1;
nodes = (
(721,456,o),
(663,514,o),
(663,554,qs),
(663,594,o),
(721,651,o),
(761,651,qs),
(801,651,o),
(858,594,o),
(858,554,qs),
(858,514,o),
(801,456,o),
(761,456,qs)
);
},
{
closed = 1;
nodes = (
(790,484,o),
(830,525,o),
(830,554,qs),
(830,568,o),
(823,584,q),
(821,576,o),
(807,566,o),
(799,566,qs),
(788,566,o),
(773,581,o),
(773,592,qs),
(773,600,o),
(783,614,o),
(791,616,q),
(775,623,o),
(761,623,qs),
(732,623,o),
(691,583,o),
(691,554,qs),
(691,525,o),
(732,484,o),
(761,484,qs)
);
},
{
closed = 1;
nodes = (
(1255,0,l),
(1255,214,l),
(1460,0,l),
(1606,0,l),
(1362,260,l),
(1591,511,l),
(1447,511,l),
(1255,309,l),
(1255,700,l),
(1141,700,l),
(1141,0,l)
);
},
{
closed = 1;
nodes = (
(1927,-12,o),
(2052,57,o),
(2123,179,o),
(2123,254,qs),
(2123,329,o),
(2052,452,o),
(1927,523,o),
(1849,523,qs),
(1771,523,o),
(1647,452,o),
(1576,329,o),
(1576,254,qs),
(1576,179,o),
(1647,57,o),
(1771,-12,o),
(1849,-12,qs)
);
},
{
closed = 1;
nodes = (
(1800,95,o),
(1729,137,o),
(1690,210,o),
(1690,254,qs),
(1690,298,o),
(1729,371,o),
(1800,413,o),
(1847,413,qs),
(1894,413,o),
(1966,371,o),
(2006,298,o),
(2006,254,qs),
(2006,210,o),
(1966,137,o),
(1894,95,o),
(1847,95,qs)
);
},
{
closed = 1;
nodes = (
(1773,566,o),
(1814,607,o),
(1814,637,qs),
(1814,667,o),
(1774,707,o),
(1743,707,qs),
(1713,707,o),
(1672,665,o),
(1672,636,qs),
(1672,607,o),
(1713,566,o),
(1743,566,qs)
);
},
{
closed = 1;
nodes = (
(1984,566,o),
(2025,607,o),
(2025,637,qs),
(2025,667,o),
(1985,707,o),
(1954,707,qs),
(1924,707,o),
(1883,665,o),
(1883,636,qs),
(1883,607,o),
(1924,566,o),
(1954,566,qs)
);
},
{
closed = 1;
nodes = (
(2303,0,l),
(2303,700,l),
(2193,700,l),
(2193,0,l)
);
},
{
closed = 1;
nodes = (
(2618,95,o),
(2546,140,o),
(2508,213,o),
(2508,254,qs),
(2508,297,o),
(2549,370,o),
(2621,413,o),
(2667,413,qs),
(2735,413,o),
(2823,323,o),
(2823,254,qs),
(2823,209,o),
(2783,136,o),
(2712,95,o),
(2667,95,qs)
);
},
{
closed = 1;
nodes = (
(2763,-12,o),
(2877,60,o),
(2939,182,o),
(2939,254,qs),
(2939,331,o),
(2873,454,o),
(2759,523,o),
(2688,523,qs),
(2631,523,o),
(2543,478,o),
(2508,431,q),
(2508,700,l),
(2398,700,l),
(2398,0,l),
(2508,0,l),
(2508,80,l),
(2543,33,o),
(2631,-12,o),
(2688,-12,qs)
);
},
{
closed = 1;
nodes = (
(3122,0,l),
(3122,511,l),
(3009,511,l),
(3009,0,l)
);
},
{
closed = 1;
nodes = (
(3095,566,o),
(3136,607,o),
(3136,637,qs),
(3136,667,o),
(3096,707,o),
(3065,707,qs),
(3035,707,o),
(2994,665,o),
(2994,636,qs),
(2994,607,o),
(3035,566,o),
(3065,566,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
132 81 2 1 8 240 1 24 7 152 149 3 3 4 24 155 1 25 4 235 1 3 25 5 76 141 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 149 values pushed */
35 30 2 18 0 6 0 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 13 1 6 8 0 6 89 40 28 26 2 4 0 53 41 50 29 49 5 27 9 0 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 150 values pushed */
35 30 2 18 26 6 26 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 2 1 0 13 1 6 8 0 6 105 40 28 2 26 53 41 50 29 49 5 27 9 26 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 149 values pushed */
35 30 2 18 0 6 0 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 13 1 6 8 0 6 89 40 28 26 2 4 0 53 41 50 29 49 5 27 9 0 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 130 values pushed */
256 256 233 233 218 218 202 202 190 190 174 174 158 158 125 125 113 113 74 74 62 62 45 45 256 267 256 266 262 260 255 254 253 252 233 251 233 250 244 242 239 238 237 236 218 232 218 231 225 223 217 216 215 214 202 213 202 212 208 206 190 201 190 200 196 194 174 189 174 188 182 180 158 173 158 172 166 164 157 156 154 153 151 150 148 147 125 146 125 145 138 137 131 129 113 124 113 123 119 117 112 110 104 102 74 95 74 94 87 86 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 54 6 27
CALL[ ]	/* CallFunction */";
};
width = 3236;
}
);
note = uniE005;
},
{
glyphname = REbackwards;
kernRight = REbackwards;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(29,0,l),
(156,0,l),
(332,303,l),
(429,303,l),
(429,0,l),
(535,0,l),
(535,700,l),
(310,700,ls),
(199,700,o),
(73,598,o),
(73,502,qs),
(73,353,o),
(227,321,q)
);
},
{
closed = 1;
nodes = (
(240,393,o),
(181,447,o),
(181,502,qs),
(181,556,o),
(241,611,o),
(313,611,qs),
(429,611,l),
(429,393,l),
(313,393,ls)
);
},
{
closed = 1;
nodes = (
(1105,0,l),
(1105,700,l),
(664,700,l),
(664,611,l),
(999,611,l),
(999,414,l),
(709,414,l),
(709,326,l),
(999,326,l),
(999,89,l),
(664,89,l),
(664,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
12 1 2 7 1 76 0 8 0 7 2 8 7 103 12 1 5 0 2 6 5 2 103 9 1 4 4 0 95 10 1 0 0 33 77 0 6 6 1 95 11 3 2 1 1 34 1 78 13 13 33 32 31 30 29 28 27 26 25 24 23 22 13 21 13 20 35 17 17 17 35 13 8 27
CALL[ ]	/* CallFunction */";
};
width = 1184;
}
);
note = REbackwards;
},
{
glyphname = RethinkWordmark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(3258,0,l),
(3258,488,l),
(3587,0,l),
(3715,0,l),
(3715,700,l),
(3587,700,l),
(3587,211,l),
(3258,700,l),
(3130,700,l),
(3130,0,l)
);
},
{
closed = 1;
nodes = (
(22,0,l),
(173,0,l),
(345,295,l),
(423,295,l),
(423,0,l),
(551,0,l),
(551,700,l),
(308,700,ls),
(200,700,o),
(133,647,qs),
(68,594,o),
(68,498,qs),
(68,426,o),
(107,379,qs),
(146,333,o),
(217,316,q)
);
},
{
closed = 1;
nodes = (
(249,404,o),
(223,428,qs),
(198,455,o),
(198,498,qs),
(198,542,o),
(224,566,qs),
(249,591,o),
(311,591,qs),
(423,591,l),
(423,404,l),
(311,404,ls)
);
},
{
closed = 1;
nodes = (
(1185,0,l),
(1185,700,l),
(736,700,l),
(736,591,l),
(1057,591,l),
(1057,424,l),
(782,424,l),
(782,315,l),
(1057,315,l),
(1057,109,l),
(736,109,l),
(736,0,l)
);
},
{
closed = 1;
nodes = (
(1680,0,l),
(1680,591,l),
(1885,591,l),
(1885,700,l),
(1348,700,l),
(1348,591,l),
(1552,591,l),
(1552,0,l)
);
},
{
closed = 1;
nodes = (
(2170,0,l),
(2170,316,l),
(2484,316,l),
(2484,0,l),
(2612,0,l),
(2612,700,l),
(2484,700,l),
(2484,425,l),
(2170,425,l),
(2170,700,l),
(2042,700,l),
(2042,0,l)
);
},
{
closed = 1;
nodes = (
(2935,0,l),
(2935,700,l),
(2807,700,l),
(2807,0,l)
);
},
{
closed = 1;
nodes = (
(4037,0,l),
(4037,261,l),
(4108,339,l),
(4310,0,l),
(4461,0,l),
(4194,433,l),
(4438,700,l),
(4277,700,l),
(4037,431,l),
(4037,700,l),
(3909,700,l),
(3909,0,l)
);
},
{
closed = 1;
nodes = (
(4611,700,l),
(4644,700,l),
(4679,765,l),
(4697,765,l),
(4697,700,l),
(4725,700,l),
(4725,855,l),
(4671,855,ls),
(4645,855,o),
(4623,830,o),
(4623,811,qs),
(4623,783,o),
(4652,772,q)
);
},
{
closed = 1;
nodes = (
(4718,629,o),
(4783,667,o),
(4821,733,o),
(4821,772,qs),
(4821,811,o),
(4783,877,o),
(4717,916,o),
(4678,916,qs),
(4635,916,o),
(4570,874,o),
(4534,808,o),
(4534,772,qs),
(4534,734,o),
(4572,668,o),
(4638,629,o),
(4678,629,qs)
);
},
{
closed = 1;
nodes = (
(4646,652,o),
(4591,685,o),
(4558,740,o),
(4558,772,qs),
(4558,822,o),
(4629,892,o),
(4678,892,qs),
(4728,892,o),
(4798,822,o),
(4798,772,qs),
(4798,723,o),
(4728,652,o),
(4678,652,qs)
);
},
{
closed = 1;
nodes = (
(4666,789,o),
(4650,800,o),
(4650,811,qs),
(4650,832,o),
(4675,832,qs),
(4697,832,l),
(4697,789,l),
(4678,789,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
97 1 34 41 78 75 7 3 12 8 81 25 2 11 9 82 2 2 10 6 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 110 values pushed */
45 1 41 40 34 40 41 34 128 0 34 33 40 34 112 35 1 33 0 40 33 112 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 44 1 39 43 1 37 8 39 37 105 21 1 12 24 1 11 6 12 11 103 42 1 9 0 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 111 values pushed */
45 1 41 40 34 40 41 34 128 0 34 33 40 34 112 35 1 33 0 40 33 0 126 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 44 1 39 43 1 37 8 39 37 105 21 1 12 24 1 11 6 12 11 103 42 1 9 0 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 112 values pushed */
45 1 41 40 34 40 41 34 128 0 34 33 40 34 33 126 35 1 33 0 40 33 0 126 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 44 1 39 43 1 37 8 39 37 105 21 1 12 24 1 11 6 12 11 103 42 1 9 0 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 94 values pushed */
127 127 114 114 98 98 26 26 127 134 127 133 130 128 114 126 114 125 120 118 98 113 98 112 106 104 96 95 94 93 92 91 90 88 84 83 80 79 77 76 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 26 36 26 35 35 17 17 17 39 18 17 18 16 46 8 31
CALL[ ]	/* CallFunction */";
};
width = 4877;
}
);
note = RethinkWordmark;
},
{
glyphname = Rlogobig;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(501,-12,o),
(668,85,o),
(765,252,o),
(765,350,qs),
(765,448,o),
(668,615,o),
(501,712,o),
(403,712,qs),
(305,712,o),
(138,615,o),
(41,448,o),
(41,350,qs),
(41,252,o),
(138,85,o),
(305,-12,o),
(403,-12,qs)
);
},
{
closed = 1;
nodes = (
(318,168,l),
(332,196,o),
(392,308,o),
(405,333,q),
(450,333,l),
(450,168,l),
(523,168,l),
(523,559,l),
(386,559,ls),
(320,559,o),
(263,493,o),
(263,447,qs),
(263,411,o),
(303,361,o),
(337,349,q),
(234,168,l)
);
},
{
closed = 1;
nodes = (
(321,47,o),
(182,129,o),
(100,268,o),
(100,350,qs),
(100,432,o),
(182,571,o),
(321,652,o),
(403,652,qs),
(485,652,o),
(624,571,o),
(705,432,o),
(705,350,qs),
(705,268,o),
(624,129,o),
(485,47,o),
(403,47,qs)
);
},
{
closed = 1;
nodes = (
(371,392,o),
(332,420,o),
(332,447,qs),
(332,473,o),
(367,501,o),
(395,501,qs),
(450,501,l),
(450,392,l),
(404,392,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
5 1 3 4 7 4 3 7 128 0 2 0 8 9 2 8 105 12 1 9 0 4 3 9 4 103 0 6 6 0 97 0 0 0 39 77 11 1 7 7 1 97 10 1 1 1 40 1 78 48 48 32 32 0 0 48 56 48 55 51 49 32 47 32 46 40 38 31 30 27 26 25 24 23 21 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 806;
}
);
note = Rlogobig;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = Medium;
properties = (
{
key = postscriptFontName;
value = "KolbiSans-Medium";
},
{
key = postscriptFullNames;
values = (
{
language = ENG;
value = "Kolbi Sans Medium";
}
);
}
);
weightClass = 500;
}
);
kerningLTR = {
m01 = {
"@MMK_L_A" = {
"@MMK_R_C" = -40;
"@MMK_R_N" = -8;
"@MMK_R_S" = -10;
"@MMK_R_T" = -77;
"@MMK_R_U" = -30;
"@MMK_R_V" = -93;
"@MMK_R_W" = -70;
"@MMK_R_X" = -10;
"@MMK_R_Y" = -82;
"@MMK_R_a" = -20;
"@MMK_R_ampersand" = -13;
"@MMK_R_asterisk" = -94;
"@MMK_R_at" = -13;
"@MMK_R_backslash" = -60;
"@MMK_R_braceleft" = -53;
"@MMK_R_c" = -25;
"@MMK_R_f" = -13;
"@MMK_R_g" = -14;
"@MMK_R_hyphen" = -30;
"@MMK_R_multiply" = -24;
"@MMK_R_parenright" = -26;
"@MMK_R_plus" = -33;
"@MMK_R_question" = -37;
"@MMK_R_space" = -13;
"@MMK_R_t" = -46;
"@MMK_R_u" = -11;
"@MMK_R_v" = -54;
"@MMK_R_w" = -37;
"@MMK_R_y" = -60;
};
"@MMK_L_B" = {
"@MMK_R_A" = -14;
"@MMK_R_AE" = -33;
"@MMK_R_T" = -13;
"@MMK_R_V" = -21;
"@MMK_R_W" = -20;
"@MMK_R_Y" = -30;
"@MMK_R_a" = -5;
"@MMK_R_c" = -5;
"@MMK_R_y" = -20;
};
"@MMK_L_C" = {
"@MMK_R_A" = -13;
"@MMK_R_AE" = -20;
"@MMK_R_T" = -13;
"@MMK_R_W" = -10;
"@MMK_R_X" = -20;
"@MMK_R_Y" = -34;
"@MMK_R_a" = -8;
"@MMK_R_ampersand" = -3;
"@MMK_R_parenright" = -30;
};
"@MMK_L_D" = {
"@MMK_R_A" = -43;
"@MMK_R_AE" = -47;
"@MMK_R_T" = -31;
"@MMK_R_V" = -25;
"@MMK_R_W" = -40;
"@MMK_R_X" = -49;
"@MMK_R_Y" = -50;
"@MMK_R_a" = -8;
"@MMK_R_ampersand" = -8;
"@MMK_R_backslash" = -20;
"@MMK_R_braceright" = -34;
"@MMK_R_comma" = -40;
"@MMK_R_g" = -15;
"@MMK_R_parenright" = -63;
"@MMK_R_period" = -30;
"@MMK_R_slash" = -44;
"@MMK_R_underscore" = -32;
};
"@MMK_L_E" = {
"@MMK_R_a" = -5;
};
"@MMK_L_F" = {
"@MMK_R_A" = -74;
"@MMK_R_a" = -38;
"@MMK_R_c" = -24;
"@MMK_R_period" = -60;
"@MMK_R_s" = -20;
};
"@MMK_L_G" = {
"@MMK_R_T" = -3;
"@MMK_R_W" = -15;
"@MMK_R_Y" = -40;
};
"@MMK_L_H" = {
"@MMK_R_a" = -9;
"@MMK_R_c" = -8;
};
"@MMK_L_I" = {
"@MMK_R_a" = -5;
};
"@MMK_L_J" = {
"@MMK_R_A" = -30;
"@MMK_R_a" = -10;
"@MMK_R_c" = -8;
"@MMK_R_period" = -20;
};
"@MMK_L_K" = {
"@MMK_R_C" = -46;
"@MMK_R_Y" = -10;
"@MMK_R_a" = -28;
"@MMK_R_ampersand" = -20;
"@MMK_R_c" = -42;
"@MMK_R_guillemotleft" = -40;
"@MMK_R_hyphen" = -60;
"@MMK_R_plus" = -50;
"@MMK_R_question" = -15;
"@MMK_R_registered" = -20;
"@MMK_R_s" = -8;
"@MMK_R_t" = -24;
"@MMK_R_u" = -13;
"@MMK_R_v" = -30;
"@MMK_R_w" = -30;
"@MMK_R_y" = -60;
};
"@MMK_L_L" = {
"@MMK_R_C" = -64;
"@MMK_R_S" = -30;
"@MMK_R_T" = -114;
"@MMK_R_U" = -30;
"@MMK_R_V" = -120;
"@MMK_R_W" = -75;
"@MMK_R_X" = -10;
"@MMK_R_Y" = -100;
"@MMK_R_a" = -10;
"@MMK_R_ampersand" = -5;
"@MMK_R_asterisk" = -97;
"@MMK_R_backslash" = -40;
"@MMK_R_c" = -26;
"@MMK_R_hyphen" = -67;
"@MMK_R_i" = -8;
"@MMK_R_percent" = -55;
"@MMK_R_plus" = -53;
"@MMK_R_question" = -27;
"@MMK_R_t" = -50;
"@MMK_R_u" = -10;
"@MMK_R_uni018F" = -30;
"@MMK_R_uni02BA" = -60;
"@MMK_R_v" = -63;
"@MMK_R_w" = -30;
"@MMK_R_y" = -64;
};
"@MMK_L_M" = {
"@MMK_R_A" = -5;
"@MMK_R_a" = -5;
"@MMK_R_c" = -8;
};
"@MMK_L_N" = {
"@MMK_R_a" = -5;
"@MMK_R_c" = -8;
};
"@MMK_L_Oslash" = {
"@MMK_R_period" = -26;
};
"@MMK_L_P" = {
"@MMK_R_A" = -82;
"@MMK_R_AE" = -126;
"@MMK_R_Y" = -9;
"@MMK_R_a" = -32;
"@MMK_R_c" = -27;
"@MMK_R_dotlessi" = -5;
"@MMK_R_g" = -32;
"@MMK_R_period" = -70;
};
"@MMK_L_Q" = {
"@MMK_R_A" = -20;
"@MMK_R_T" = -30;
"@MMK_R_V" = -25;
"@MMK_R_W" = -29;
"@MMK_R_Y" = -43;
"@MMK_R_a" = -3;
"@MMK_R_g" = -10;
"@MMK_R_u" = 7;
"@MMK_R_w" = 7;
};
"@MMK_L_R" = {
"@MMK_R_C" = -20;
"@MMK_R_S" = -5;
"@MMK_R_T" = -23;
"@MMK_R_U" = -5;
"@MMK_R_V" = -33;
"@MMK_R_W" = -33;
"@MMK_R_X" = -20;
"@MMK_R_Y" = -33;
"@MMK_R_a" = -25;
"@MMK_R_ampersand" = -8;
"@MMK_R_c" = -43;
"@MMK_R_g" = -8;
"@MMK_R_i" = -10;
"@MMK_R_plus" = -13;
"@MMK_R_s" = -29;
"@MMK_R_u" = -10;
};
"@MMK_L_REbackwards" = {
"@MMK_R_T" = 3;
};
"@MMK_L_S" = {
"@MMK_R_A" = -5;
"@MMK_R_T" = -19;
"@MMK_R_V" = -20;
"@MMK_R_W" = -17;
"@MMK_R_Y" = -30;
"@MMK_R_a" = -8;
"@MMK_R_c" = -5;
};
"@MMK_L_T" = {
"@MMK_R_A" = -77;
"@MMK_R_AE" = -97;
"@MMK_R_C" = -30;
"@MMK_R_J" = -87;
"@MMK_R_S" = -18;
"@MMK_R_a" = -93;
"@MMK_R_ampersand" = -25;
"@MMK_R_at" = -93;
"@MMK_R_backslash" = 11;
"@MMK_R_braceleft" = -30;
"@MMK_R_c" = -100;
"@MMK_R_comma" = -80;
"@MMK_R_dotlessi" = -79;
"@MMK_R_exclamdown" = -43;
"@MMK_R_g" = -90;
"@MMK_R_hyphen" = -50;
"@MMK_R_iacute" = 8;
"@MMK_R_ibreve" = 53;
"@MMK_R_multiply" = -60;
"@MMK_R_p" = -48;
"@MMK_R_period" = -80;
"@MMK_R_plus" = -57;
"@MMK_R_question" = 20;
"@MMK_R_questiondown" = -93;
"@MMK_R_s" = -100;
"@MMK_R_semicolon" = -54;
"@MMK_R_slash" = -64;
"@MMK_R_t" = -26;
"@MMK_R_u" = -70;
"@MMK_R_underscore" = -60;
"@MMK_R_v" = -60;
"@MMK_R_w" = -55;
"@MMK_R_x" = -43;
"@MMK_R_y" = -75;
"@MMK_R_z" = -75;
};
"@MMK_L_Thorn" = {
"@MMK_R_A" = -47;
"@MMK_R_T" = -66;
"@MMK_R_V" = -47;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -67;
"@MMK_R_period" = -53;
};
"@MMK_L_U" = {
"@MMK_R_A" = -30;
"@MMK_R_AE" = -47;
"@MMK_R_a" = -8;
"@MMK_R_g" = -18;
"@MMK_R_period" = -20;
"@MMK_R_slash" = -30;
"@MMK_R_underscore" = -40;
};
"@MMK_L_V" = {
"@MMK_R_A" = -85;
"@MMK_R_AE" = -120;
"@MMK_R_C" = -25;
"@MMK_R_J" = -60;
"@MMK_R_S" = -30;
"@MMK_R_a" = -70;
"@MMK_R_ampersand" = -60;
"@MMK_R_at" = -94;
"@MMK_R_backslash" = 15;
"@MMK_R_c" = -85;
"@MMK_R_colon" = -30;
"@MMK_R_comma" = -74;
"@MMK_R_dotlessi" = -27;
"@MMK_R_exclamdown" = -34;
"@MMK_R_g" = -73;
"@MMK_R_hyphen" = -37;
"@MMK_R_multiply" = -67;
"@MMK_R_period" = -80;
"@MMK_R_plus" = -53;
"@MMK_R_s" = -59;
"@MMK_R_slash" = -77;
"@MMK_R_t" = -20;
"@MMK_R_u" = -9;
"@MMK_R_underscore" = -97;
"@MMK_R_v" = -13;
"@MMK_R_y" = -10;
};
"@MMK_L_W" = {
"@MMK_R_A" = -90;
"@MMK_R_AE" = -93;
"@MMK_R_C" = -41;
"@MMK_R_J" = -40;
"@MMK_R_Oslash" = -20;
"@MMK_R_S" = -17;
"@MMK_R_a" = -78;
"@MMK_R_ampersand" = -50;
"@MMK_R_at" = -80;
"@MMK_R_braceleft" = -30;
"@MMK_R_c" = -93;
"@MMK_R_comma" = -60;
"@MMK_R_dotlessi" = -31;
"@MMK_R_exclamdown" = -30;
"@MMK_R_g" = -70;
"@MMK_R_hyphen" = -37;
"@MMK_R_i" = -19;
"@MMK_R_multiply" = -32;
"@MMK_R_period" = -70;
"@MMK_R_plus" = -53;
"@MMK_R_s" = -55;
"@MMK_R_semicolon" = -34;
"@MMK_R_slash" = -60;
"@MMK_R_u" = -38;
"@MMK_R_underscore" = -70;
"@MMK_R_v" = -13;
};
"@MMK_L_X" = {
"@MMK_R_A" = -10;
"@MMK_R_C" = -49;
"@MMK_R_a" = -28;
"@MMK_R_c" = -34;
"@MMK_R_s" = -18;
"@MMK_R_u" = -27;
"@MMK_R_w" = -30;
"@MMK_R_y" = -50;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -80;
"@MMK_R_AE" = -127;
"@MMK_R_C" = -50;
"@MMK_R_J" = -84;
"@MMK_R_Oslash" = -47;
"@MMK_R_S" = -40;
"@MMK_R_a" = -94;
"@MMK_R_ampersand" = -40;
"@MMK_R_at" = -110;
"@MMK_R_braceleft" = -50;
"@MMK_R_c" = -101;
"@MMK_R_colon" = -34;
"@MMK_R_comma" = -71;
"@MMK_R_dotlessi" = -37;
"@MMK_R_exclamdown" = -34;
"@MMK_R_g" = -84;
"@MMK_R_hyphen" = -57;
"@MMK_R_multiply" = -60;
"@MMK_R_period" = -87;
"@MMK_R_plus" = -74;
"@MMK_R_questiondown" = -87;
"@MMK_R_s" = -70;
"@MMK_R_semicolon" = -45;
"@MMK_R_slash" = -64;
"@MMK_R_t" = -30;
"@MMK_R_u" = -28;
"@MMK_R_underscore" = -70;
"@MMK_R_uni02BA" = 37;
"@MMK_R_v" = -39;
"@MMK_R_w" = -13;
"@MMK_R_y" = -20;
"@MMK_R_z" = -20;
};
"@MMK_L_Z" = {
"@MMK_R_C" = -20;
"@MMK_R_a" = -5;
"@MMK_R_c" = -10;
};
"@MMK_L_a" = {
"@MMK_R_asterisk" = -27;
"@MMK_R_backslash" = -40;
"@MMK_R_g" = -4;
"@MMK_R_registered" = -43;
"@MMK_R_uni02BA" = -50;
"@MMK_R_v" = -8;
"@MMK_R_y" = -16;
};
"@MMK_L_aacute" = {
"@MMK_R_asterisk" = -37;
"@MMK_R_backslash" = -44;
"@MMK_R_c" = -10;
"@MMK_R_g" = -3;
"@MMK_R_i" = -3;
"@MMK_R_quotesingle" = -15;
"@MMK_R_registered" = -43;
"@MMK_R_s" = -4;
"@MMK_R_t" = -20;
"@MMK_R_v" = -33;
"@MMK_R_w" = -18;
"@MMK_R_y" = -16;
"@MMK_R_z" = 12;
};
"@MMK_L_ae" = {
"@MMK_R_Y" = -98;
"@MMK_R_asterisk" = -27;
"@MMK_R_backslash" = -54;
"@MMK_R_g" = -5;
"@MMK_R_question" = -20;
"@MMK_R_registered" = -43;
"@MMK_R_t" = -13;
"@MMK_R_uni02BA" = -47;
"@MMK_R_v" = -20;
"@MMK_R_w" = -20;
"@MMK_R_x" = -25;
"@MMK_R_y" = -22;
};
"@MMK_L_ampersand" = {
"@MMK_R_C" = -7;
"@MMK_R_T" = -47;
"@MMK_R_V" = -54;
"@MMK_R_W" = -44;
"@MMK_R_Y" = -64;
"@MMK_R_percent" = -27;
"@MMK_R_uni02BA" = -23;
"@MMK_R_w" = -7;
"@MMK_R_y" = -7;
};
"@MMK_L_asterisk" = {
"@MMK_R_A" = -94;
"@MMK_R_AE" = -117;
"@MMK_R_a" = -21;
"@MMK_R_c" = -27;
"@MMK_R_s" = -27;
};
"@MMK_L_at" = {
"@MMK_R_A" = -44;
"@MMK_R_AE" = -60;
"@MMK_R_T" = -53;
"@MMK_R_V" = -60;
"@MMK_R_W" = -44;
"@MMK_R_Y" = -87;
"@MMK_R_percent" = -40;
"@MMK_R_period" = -30;
"@MMK_R_uni02BA" = -25;
"@MMK_R_w" = -13;
"@MMK_R_y" = -20;
};
"@MMK_L_at.case" = {
"@MMK_R_A" = -13;
};
"@MMK_L_b" = {
"@MMK_R_T" = -100;
"@MMK_R_V" = -85;
"@MMK_R_asterisk" = -41;
"@MMK_R_backslash" = -77;
"@MMK_R_braceright" = -50;
"@MMK_R_g" = -8;
"@MMK_R_i" = -3;
"@MMK_R_parenright" = -44;
"@MMK_R_question" = -30;
"@MMK_R_registered" = -43;
"@MMK_R_slash" = -14;
"@MMK_R_t" = -20;
"@MMK_R_uni02BA" = -47;
"@MMK_R_v" = -25;
"@MMK_R_w" = -19;
"@MMK_R_x" = -24;
"@MMK_R_y" = -38;
};
"@MMK_L_backslash" = {
"@MMK_R_C" = -13;
"@MMK_R_T" = -18;
"@MMK_R_V" = -60;
"@MMK_R_W" = -53;
"@MMK_R_Y" = -70;
"@MMK_R_c" = -21;
"@MMK_R_hyphen" = -30;
"@MMK_R_uni02BA" = -46;
};
"@MMK_L_braceleft" = {
"@MMK_R_C" = -34;
"@MMK_R_c" = -50;
};
"@MMK_L_braceright" = {
"@MMK_R_A" = -53;
"@MMK_R_AE" = -63;
"@MMK_R_T" = -30;
"@MMK_R_W" = -30;
"@MMK_R_Y" = -50;
"@MMK_R_period" = -50;
};
"@MMK_L_c" = {
"@MMK_R_asterisk" = -27;
"@MMK_R_backslash" = -47;
"@MMK_R_parenright" = -11;
"@MMK_R_question" = -30;
"@MMK_R_registered" = -43;
"@MMK_R_t" = -9;
"@MMK_R_v" = -17;
};
"@MMK_L_colon" = {
"@MMK_R_V" = -30;
"@MMK_R_Y" = -34;
};
"@MMK_L_comma" = {
"@MMK_R_C" = -20;
"@MMK_R_T" = -80;
"@MMK_R_V" = -74;
"@MMK_R_W" = -54;
"@MMK_R_Y" = -81;
"@MMK_R_percent" = -51;
"@MMK_R_t" = -30;
"@MMK_R_w" = -30;
"@MMK_R_y" = -54;
};
"@MMK_L_dcaron" = {
"@MMK_R_b" = 100;
};
"@MMK_L_exclamdown" = {
"@MMK_R_T" = -43;
"@MMK_R_V" = -34;
"@MMK_R_W" = -30;
"@MMK_R_Y" = -34;
};
"@MMK_L_f" = {
"@MMK_R_a" = -20;
"@MMK_R_c" = -20;
"@MMK_R_g" = -40;
"@MMK_R_period" = -30;
"@MMK_R_s" = -18;
};
"@MMK_L_fl" = {
"@MMK_R_c" = -3;
};
"@MMK_L_g" = {
"@MMK_R_a" = -5;
"@MMK_R_c" = -12;
"@MMK_R_f" = 15;
"@MMK_R_j" = 20;
"@MMK_R_v" = 7;
};
"@MMK_L_germandbls" = {
"@MMK_R_c" = -9;
"@MMK_R_y" = -40;
};
"@MMK_L_greater" = {
"@MMK_R_period" = -60;
};
"@MMK_L_hyphen" = {
"@MMK_R_A" = -30;
"@MMK_R_T" = -53;
"@MMK_R_V" = -38;
"@MMK_R_W" = -45;
"@MMK_R_X" = -38;
"@MMK_R_Y" = -63;
"@MMK_R_backslash" = -47;
"@MMK_R_slash" = -47;
};
"@MMK_L_i" = {
"@MMK_R_g" = -3;
"@MMK_R_z" = 13;
};
"@MMK_L_iacute" = {
"@MMK_R_T" = 8;
"@MMK_R_b" = 10;
"@MMK_R_uni02BA" = 9;
};
"@MMK_L_ibreve" = {
"@MMK_R_T" = 53;
"@MMK_R_b" = 30;
};
"@MMK_L_igrave" = {
"@MMK_R_T" = 8;
};
"@MMK_L_k" = {
"@MMK_R_a" = -26;
"@MMK_R_c" = -39;
"@MMK_R_g" = -20;
"@MMK_R_quotesingle" = -5;
"@MMK_R_s" = -27;
"@MMK_R_y" = -5;
};
"@MMK_L_l" = {
"@MMK_R_c" = -3;
"@MMK_R_ibreve" = 20;
};
"@MMK_L_lslash" = {
"@MMK_R_c" = 3;
"@MMK_R_t" = 15;
"@MMK_R_u" = 10;
"@MMK_R_y" = 10;
"@MMK_R_z" = 18;
};
"@MMK_L_multiply" = {
"@MMK_R_A" = -24;
"@MMK_R_AE" = -39;
"@MMK_R_T" = -60;
"@MMK_R_V" = -67;
"@MMK_R_W" = -32;
"@MMK_R_Y" = -60;
"@MMK_R_y" = -13;
};
"@MMK_L_parenleft" = {
"@MMK_R_A" = -26;
"@MMK_R_C" = -63;
"@MMK_R_a" = -44;
"@MMK_R_c" = -44;
"@MMK_R_s" = -20;
"@MMK_R_t" = -13;
};
"@MMK_L_period" = {
"@MMK_R_C" = -30;
"@MMK_R_T" = -80;
"@MMK_R_U" = -20;
"@MMK_R_V" = -80;
"@MMK_R_W" = -70;
"@MMK_R_Y" = -87;
"@MMK_R_backslash" = -60;
"@MMK_R_braceleft" = -50;
"@MMK_R_less" = -60;
"@MMK_R_question" = -37;
"@MMK_R_v" = -40;
"@MMK_R_w" = -26;
"@MMK_R_y" = -40;
};
"@MMK_L_plus" = {
"@MMK_R_A" = -33;
"@MMK_R_T" = -57;
"@MMK_R_V" = -53;
"@MMK_R_W" = -53;
"@MMK_R_Y" = -74;
};
"@MMK_L_question" = {
"@MMK_R_A" = -70;
"@MMK_R_AE" = -97;
"@MMK_R_period" = -94;
};
"@MMK_L_questiondown" = {
"@MMK_R_T" = -57;
"@MMK_R_Y" = -57;
"@MMK_R_c" = -20;
"@MMK_R_percent" = -25;
"@MMK_R_z" = 20;
};
"@MMK_L_quotedblright" = {
"@MMK_R_J" = -75;
"@MMK_R_ampersand" = -54;
"@MMK_R_at" = -100;
"@MMK_R_c" = -35;
"@MMK_R_s" = -67;
"@MMK_R_slash" = -117;
};
"@MMK_L_r" = {
"@MMK_R_a" = -5;
"@MMK_R_c" = -15;
"@MMK_R_colon" = 13;
"@MMK_R_comma" = -34;
"@MMK_R_f" = 13;
"@MMK_R_g" = -8;
"@MMK_R_period" = -40;
"@MMK_R_t" = 5;
"@MMK_R_u" = 10;
};
"@MMK_L_s" = {
"@MMK_R_asterisk" = -38;
"@MMK_R_backslash" = -50;
"@MMK_R_parenright" = -7;
"@MMK_R_question" = -27;
"@MMK_R_registered" = -43;
"@MMK_R_t" = -14;
"@MMK_R_v" = -25;
"@MMK_R_w" = -17;
"@MMK_R_y" = -24;
};
"@MMK_L_semicolon" = {
"@MMK_R_T" = -47;
"@MMK_R_Y" = -7;
};
"@MMK_L_slash" = {
"@MMK_R_C" = -30;
"@MMK_R_T" = 20;
"@MMK_R_V" = 30;
"@MMK_R_W" = 7;
"@MMK_R_Y" = 24;
"@MMK_R_a" = -54;
"@MMK_R_c" = -48;
"@MMK_R_dotlessi" = -19;
"@MMK_R_g" = -37;
"@MMK_R_hyphen" = -61;
"@MMK_R_period" = -119;
"@MMK_R_s" = -30;
};
"@MMK_L_space" = {
"@MMK_R_A" = -3;
"@MMK_R_T" = -35;
"@MMK_R_V" = -13;
"@MMK_R_W" = -15;
};
"@MMK_L_t" = {
"@MMK_R_c" = -14;
"@MMK_R_comma" = 39;
"@MMK_R_f" = 10;
"@MMK_R_space" = 8;
};
"@MMK_L_underscore" = {
"@MMK_R_C" = -32;
"@MMK_R_T" = -60;
"@MMK_R_U" = -40;
"@MMK_R_V" = -97;
"@MMK_R_W" = -70;
"@MMK_R_Y" = -70;
};
"@MMK_L_uni018E" = {
"@MMK_R_T" = 3;
};
"@MMK_L_v" = {
"@MMK_R_A" = -53;
"@MMK_R_a" = -25;
"@MMK_R_c" = -25;
"@MMK_R_g" = -24;
"@MMK_R_period" = -40;
"@MMK_R_s" = -23;
"@MMK_R_t" = 7;
};
"@MMK_L_w" = {
"@MMK_R_a" = -22;
"@MMK_R_at" = -40;
"@MMK_R_c" = -19;
"@MMK_R_comma" = -30;
"@MMK_R_g" = -20;
"@MMK_R_period" = -26;
"@MMK_R_questiondown" = -20;
"@MMK_R_t" = 5;
};
"@MMK_L_x" = {
"@MMK_R_a" = -7;
"@MMK_R_c" = -24;
"@MMK_R_t" = 8;
};
"@MMK_L_y" = {
"@MMK_R_T" = -65;
"@MMK_R_a" = -35;
"@MMK_R_ampersand" = -7;
"@MMK_R_at" = -57;
"@MMK_R_c" = -41;
"@MMK_R_comma" = -64;
"@MMK_R_g" = -34;
"@MMK_R_multiply" = -13;
"@MMK_R_period" = -74;
"@MMK_R_questiondown" = -57;
"@MMK_R_quotesingle" = 8;
"@MMK_R_s" = -22;
"@MMK_R_slash" = -40;
};
A = {
T = -75;
Tcaron = -75;
W = -88;
Wacute = -88;
Wcircumflex = -88;
Wdieresis = -88;
Wgrave = -88;
uni0162 = -75;
uni021A = -75;
};
AE = {
ibreve = 37;
imacron = 54;
itilde = 37;
};
AEacute = {
ibreve = 37;
imacron = 54;
itilde = 37;
};
Aacute = {
asterisk = -94;
at = -13;
backslash = -60;
braceleft = -53;
f = -13;
multiply = -24;
parenright = -26;
plus = -33;
question = -37;
v = -54;
};
Abreve = {
asterisk = -94;
at = -13;
backslash = -60;
braceleft = -53;
f = -13;
multiply = -24;
parenright = -26;
plus = -33;
question = -37;
v = -54;
};
Acircumflex = {
asterisk = -94;
at = -13;
backslash = -60;
braceleft = -53;
f = -13;
multiply = -24;
parenright = -26;
plus = -33;
question = -37;
v = -54;
};
Adieresis = {
asterisk = -94;
at = -13;
backslash = -60;
braceleft = -53;
f = -13;
multiply = -24;
parenright = -26;
plus = -33;
question = -37;
v = -54;
};
Agrave = {
asterisk = -94;
at = -13;
backslash = -60;
braceleft = -53;
f = -13;
multiply = -24;
parenright = -26;
plus = -33;
question = -37;
v = -54;
};
Amacron = {
asterisk = -94;
at = -13;
backslash = -60;
braceleft = -53;
f = -13;
multiply = -24;
parenright = -26;
plus = -33;
question = -37;
v = -54;
};
Aogonek = {
asterisk = -94;
at = -13;
backslash = -60;
braceleft = -53;
f = -13;
multiply = -24;
parenright = -26;
plus = -33;
question = -37;
v = -54;
};
Aring = {
asterisk = -94;
at = -13;
backslash = -60;
braceleft = -53;
f = -13;
multiply = -24;
parenright = -26;
plus = -33;
question = -37;
v = -54;
};
Atilde = {
asterisk = -94;
at = -13;
backslash = -60;
braceleft = -53;
f = -13;
multiply = -24;
parenright = -26;
plus = -33;
question = -37;
v = -54;
};
B = {
Aacute = -9;
Abreve = -9;
Acircumflex = -9;
Adieresis = -9;
Agrave = -9;
Amacron = -9;
Aogonek = -9;
Aring = -9;
Atilde = -9;
X = -23;
imacron = 20;
};
C = {
imacron = 30;
itilde = 30;
};
Cacute = {
imacron = 30;
itilde = 30;
};
Ccaron = {
imacron = 30;
itilde = 30;
};
Ccedilla = {
imacron = 30;
itilde = 30;
};
Cdotaccent = {
imacron = 30;
itilde = 30;
};
E = {
imacron = 54;
itilde = 37;
};
Eacute = {
ibreve = 37;
imacron = 54;
itilde = 37;
};
Ebreve = {
ibreve = 37;
imacron = 54;
itilde = 37;
};
Ecaron = {
ibreve = 37;
imacron = 54;
itilde = 37;
};
Ecircumflex = {
ibreve = 37;
imacron = 54;
itilde = 37;
};
Edieresis = {
ibreve = 37;
imacron = 54;
itilde = 37;
};
Edotaccent = {
ibreve = 37;
imacron = 54;
itilde = 37;
};
Egrave = {
ibreve = 37;
imacron = 54;
itilde = 37;
};
Emacron = {
ibreve = 37;
imacron = 54;
itilde = 37;
};
Eogonek = {
ibreve = 37;
imacron = 54;
itilde = 37;
};
Euro = {
imacron = 30;
itilde = 30;
};
F = {
J = -53;
ampersand = -20;
at = -40;
comma = -60;
i = 0;
imacron = 70;
multiply = -20;
underscore = -40;
};
G = {
imacron = 20;
};
Gbreve = {
imacron = 20;
};
Gdotaccent = {
imacron = 20;
};
H = {
imacron = 40;
itilde = 15;
};
I = {
imacron = 40;
itilde = 15;
};
Iacute = {
imacron = 40;
itilde = 11;
};
Ibreve = {
imacron = 40;
itilde = 11;
};
Icircumflex = {
imacron = 40;
itilde = 11;
};
Idieresis = {
imacron = 40;
itilde = 11;
};
Idotaccent = {
imacron = 40;
itilde = 11;
};
Igrave = {
imacron = 40;
itilde = 11;
};
Imacron = {
imacron = 40;
itilde = 11;
};
Iogonek = {
imacron = 40;
itilde = 11;
};
Itilde = {
imacron = 40;
itilde = 11;
};
J = {
igrave = 0;
imacron = 64;
};
K = {
ibreve = 15;
icircumflex = 0;
imacron = 60;
};
L = {
V = -80;
};
Lacute = {
V = -80;
};
Lcaron = {
V = -80;
};
Ldot = {
V = -80;
};
Lslash = {
V = -80;
};
M = {
imacron = 40;
itilde = 15;
};
N = {
i = -3;
imacron = 40;
itilde = 11;
};
Nacute = {
imacron = 40;
itilde = 11;
};
Ncaron = {
imacron = 40;
itilde = 11;
};
Ntilde = {
imacron = 40;
itilde = 11;
};
OE = {
ibreve = 37;
imacron = 54;
itilde = 37;
};
Oslash = {
igrave = 57;
imacron = 57;
slash = -44;
underscore = -40;
};
P = {
J = -73;
X = -30;
Z = -20;
Zacute = -20;
Zcaron = -20;
Zdotaccent = -20;
aacute = -27;
abreve = -27;
acircumflex = -27;
adieresis = -27;
ae = -27;
agrave = -27;
amacron = -27;
ampersand = -37;
aogonek = -27;
aring = -27;
at = -43;
atilde = -27;
comma = -87;
e = -32;
icircumflex = 10;
itilde = 40;
parenright = -30;
plus = -13;
slash = -77;
underscore = -73;
};
Q = {
Wacute = -26;
Wcircumflex = -26;
Wdieresis = -26;
Wgrave = -26;
X = -26;
at = -20;
};
R = {
imacron = 18;
itilde = 18;
};
Racute = {
imacron = 18;
itilde = 18;
};
Rcaron = {
imacron = 18;
itilde = 18;
};
S = {
imacron = 40;
itilde = 20;
};
Sacute = {
imacron = 40;
itilde = 20;
};
Scaron = {
imacron = 40;
itilde = 20;
};
Scedilla = {
imacron = 40;
itilde = 20;
};
T = {
adieresis = -68;
amacron = -78;
atilde = -85;
edieresis = -85;
emacron = -90;
odieresis = -90;
omacron = -95;
racute = -59;
rcaron = -44;
scaron = -90;
udieresis = -60;
uni1EBD = -95;
ydieresis = -65;
};
Tcaron = {
adieresis = -68;
amacron = -78;
atilde = -85;
edieresis = -85;
emacron = -90;
odieresis = -90;
omacron = -95;
racute = -59;
rcaron = -44;
scaron = -90;
udieresis = -60;
uni1EBD = -95;
ydieresis = -65;
};
Thorn = {
X = -70;
parenright = -37;
};
U = {
imacron = 45;
itilde = 23;
};
Uacute = {
imacron = 45;
itilde = 23;
};
Ubreve = {
imacron = 45;
itilde = 23;
};
Ucircumflex = {
imacron = 45;
itilde = 23;
};
Udieresis = {
imacron = 45;
itilde = 23;
};
Ugrave = {
imacron = 45;
itilde = 23;
};
Uhungarumlaut = {
imacron = 45;
itilde = 23;
};
Umacron = {
imacron = 45;
itilde = 23;
};
Uogonek = {
imacron = 45;
itilde = 23;
};
Uring = {
imacron = 45;
itilde = 23;
};
Utilde = {
imacron = 45;
itilde = 23;
};
V = {
adieresis = -58;
edieresis = -78;
emacron = -80;
ibreve = 25;
imacron = 64;
rcaron = -25;
};
W = {
edieresis = -85;
ibreve = 20;
icircumflex = 10;
imacron = 66;
itilde = 35;
rcaron = -21;
uni1EF9 = -15;
y = -15;
yacute = -15;
ycircumflex = -15;
ydieresis = -15;
ygrave = -15;
};
Wacute = {
edieresis = -85;
ibreve = 20;
icircumflex = 10;
imacron = 66;
itilde = 35;
rcaron = -21;
};
Wcircumflex = {
edieresis = -85;
ibreve = 20;
icircumflex = 10;
imacron = 66;
itilde = 35;
rcaron = -21;
};
Wdieresis = {
edieresis = -85;
ibreve = 20;
icircumflex = 10;
imacron = 66;
itilde = 35;
rcaron = -21;
};
Wgrave = {
edieresis = -85;
ibreve = 20;
icircumflex = 10;
imacron = 66;
itilde = 35;
rcaron = -21;
};
X = {
X = -5;
aacute = -24;
abreve = -24;
acircumflex = -24;
adieresis = -24;
ae = -24;
agrave = -24;
amacron = -24;
ampersand = -23;
aogonek = -24;
aring = -24;
at = -20;
atilde = -24;
ibreve = 30;
imacron = 50;
itilde = 20;
multiply = -37;
question = -24;
v = -30;
};
Y = {
ibreve = 40;
imacron = 67;
itilde = 20;
};
Yacute = {
ibreve = 40;
imacron = 67;
itilde = 20;
};
Ycircumflex = {
ibreve = 40;
imacron = 67;
itilde = 20;
};
Ydieresis = {
ibreve = 40;
imacron = 67;
itilde = 20;
};
Ygrave = {
ibreve = 40;
imacron = 67;
itilde = 20;
};
Z = {
imacron = 64;
itilde = 34;
};
Zacute = {
imacron = 64;
itilde = 34;
};
Zcaron = {
imacron = 64;
itilde = 34;
};
Zdotaccent = {
imacron = 64;
itilde = 34;
};
a = {
uni1EF9 = -25;
y = -25;
yacute = -25;
ycircumflex = -25;
ydieresis = -25;
ygrave = -25;
};
aacute = {
v = -18;
};
abreve = {
v = -18;
};
acircumflex = {
v = -18;
};
adieresis = {
v = -18;
};
ae = {
lslash = 5;
};
aeacute = {
lslash = 5;
};
agrave = {
v = -18;
};
amacron = {
v = -18;
};
ampersand = {
Wacute = -34;
Wcircumflex = -34;
Wdieresis = -34;
Wgrave = -34;
asterisk = -51;
backslash = -47;
question = -40;
quotedblright = -21;
quoteright = -21;
v = -7;
};
aogonek = {
v = -18;
};
aring = {
v = -18;
};
asterisk = {
J = -67;
ampersand = -44;
at = -54;
exclam = -15;
imacron = 73;
itilde = 15;
questiondown = -90;
slash = -111;
underscore = -90;
};
at = {
X = -53;
asterisk = -37;
backslash = -50;
comma = -37;
greater = -47;
less = -30;
parenright = -67;
question = -30;
slash = -50;
underscore = -60;
};
atilde = {
v = -18;
};
b = {
l = -3;
lslash = 8;
};
backslash = {
backslash = -133;
comma = 53;
question = -30;
quotedblbase = 43;
quotedblleft = -73;
quotedblright = -70;
quoteleft = -73;
quoteright = -70;
quotesinglbase = 43;
underscore = 44;
};
bar = {
imacron = 40;
itilde = 11;
};
braceright = {
comma = -34;
};
bracketleft = {
imacron = 21;
};
bracketright = {
imacron = 60;
itilde = 27;
};
brokenbar = {
imacron = 40;
itilde = 11;
};
comma = {
backslash = -57;
v = -47;
};
d = {
imacron = 47;
};
dcaron = {
questiondown = -51;
};
dcroat = {
imacron = 84;
};
dollar = {
imacron = 40;
itilde = 20;
};
e = {
T = -100;
Tcaron = -100;
lslash = 5;
uni0162 = -100;
uni021A = -100;
};
eacute = {
lslash = 5;
};
ebreve = {
lslash = 5;
};
ecaron = {
lslash = 5;
};
ecircumflex = {
lslash = 5;
};
edieresis = {
lslash = 5;
};
edotaccent = {
lslash = 5;
};
egrave = {
lslash = 5;
};
emacron = {
lslash = 5;
};
eogonek = {
lslash = 5;
};
eth = {
imacron = 30;
};
exclam = {
asterisk = -15;
igrave = 47;
imacron = 60;
};
f = {
at = -33;
e = -23;
f = 5;
i = -3;
ibreve = 30;
igrave = 40;
imacron = 60;
itilde = 37;
};
fl = {
imacron = 47;
};
g = {
lslash = 8;
};
gbreve = {
lslash = 8;
};
gdotaccent = {
lslash = 8;
};
germandbls = {
asterisk = -60;
v = -47;
};
greater = {
at = -63;
parenright = -57;
};
i = {
lslash = 10;
};
iacute = {
asterisk = 39;
b = 60;
backslash = 74;
braceright = 11;
bracketleft = 60;
bracketright = 21;
exclam = 47;
f = 40;
idieresis = 80;
imacron = 60;
itilde = 44;
k = 60;
lacute = 60;
lcaron = 60;
ldot = 60;
lslash = 53;
parenright = 21;
question = 63;
quotedblleft = 43;
quotedblright = 66;
quoteleft = 43;
quoteright = 66;
uni0137 = 60;
uni013C = 60;
};
ibreve = {
backslash = 60;
l = 20;
question = 34;
};
icircumflex = {
l = 20;
};
idieresis = {
b = 45;
f = 30;
h = 45;
i = 60;
j = 65;
k = 45;
l = 20;
t = 15;
tcaron = 15;
uni0163 = 15;
uni021B = 15;
};
imacron = {
B = 40;
D = 40;
Dcaron = 40;
E = 40;
Eacute = 40;
Ebreve = 40;
Ecaron = 40;
Ecircumflex = 40;
Edieresis = 40;
Edotaccent = 40;
Egrave = 40;
Emacron = 40;
Eogonek = 40;
F = 40;
H = 40;
I = 40;
Iacute = 40;
Ibreve = 40;
Icircumflex = 40;
Idieresis = 40;
Idotaccent = 40;
Igrave = 40;
Imacron = 40;
Itilde = 40;
K = 40;
L = 40;
Lacute = 40;
Lcaron = 40;
Ldot = 40;
M = 40;
N = 40;
Nacute = 40;
Ncaron = 40;
Ntilde = 40;
P = 40;
R = 40;
Racute = 40;
Rcaron = 40;
Thorn = 40;
asterisk = 73;
b = 60;
backslash = 77;
bar = 40;
bracketleft = 60;
bracketright = 21;
brokenbar = 40;
exclam = 60;
f = 11;
germandbls = 60;
k = 60;
l = 60;
lacute = 60;
lcaron = 60;
ldot = 60;
lslash = 60;
question = 67;
quotedblleft = 67;
quotedblright = 53;
quoteleft = 67;
quoteright = 53;
thorn = 60;
uni0136 = 40;
uni0137 = 60;
uni013B = 40;
uni013C = 60;
uni0145 = 40;
uni0156 = 40;
uni02B9 = 50;
uni02BA = 50;
uni1EBC = 40;
z = 44;
zacute = 44;
zcaron = 44;
zdotaccent = 44;
};
itilde = {
asterisk = 11;
b = 15;
bracketleft = 27;
f = 30;
j = 34;
k = 15;
l = 15;
lacute = 15;
lcaron = 15;
ldot = 15;
question = 40;
quotedblleft = 13;
quotedblright = 33;
quoteleft = 13;
quoteright = 33;
uni0137 = 15;
uni013C = 15;
uni02B9 = 31;
uni02BA = 31;
};
j = {
itilde = 34;
};
l = {
f = 3;
imacron = 47;
};
lacute = {
imacron = 47;
};
lcaron = {
questiondown = -51;
};
less = {
at = -40;
parenright = -40;
};
lslash = {
imacron = 60;
};
multiply = {
X = -37;
};
n = {
T = -80;
Tcaron = -80;
uni0162 = -80;
uni021A = -80;
};
o = {
l = -3;
lslash = 8;
};
oacute = {
l = -3;
lslash = 8;
};
obreve = {
l = -3;
lslash = 8;
};
ocircumflex = {
l = -3;
lslash = 8;
};
odieresis = {
l = -3;
lslash = 8;
};
oe = {
lslash = 5;
};
ograve = {
l = -3;
lslash = 8;
};
ohungarumlaut = {
l = -3;
lslash = 8;
};
omacron = {
l = -3;
lslash = 8;
};
otilde = {
l = -3;
lslash = 8;
};
p = {
l = -3;
lslash = 8;
};
parenleft = {
ampersand = -40;
at = -37;
};
plus = {
slash = -43;
};
q = {
backslash = -37;
j = 29;
};
question = {
J = -47;
X = -20;
at = -53;
comma = -70;
ibreve = 34;
igrave = 40;
imacron = 60;
itilde = 44;
parenright = -61;
questiondown = -110;
quotedblbase = -40;
quotesinglbase = -40;
slash = -74;
underscore = -90;
};
questiondown = {
backslash = -34;
question = -37;
quotedblbase = 37;
quotesinglbase = 37;
v = -20;
};
quotedbl = {
ibreve = 33;
imacron = 53;
itilde = 27;
};
quotedblbase = {
backslash = -84;
question = -7;
};
quotedblleft = {
J = -80;
at = -87;
ibreve = 20;
imacron = 67;
itilde = 24;
questiondown = -84;
slash = -100;
};
quotedblright = {
ibreve = 33;
imacron = 53;
itilde = 27;
};
quoteleft = {
J = -80;
at = -87;
ibreve = 20;
imacron = 67;
itilde = 24;
questiondown = -84;
slash = -100;
};
quoteright = {
ibreve = 33;
imacron = 53;
itilde = 27;
};
quotesinglbase = {
backslash = -84;
question = -7;
};
quotesingle = {
ibreve = 33;
imacron = 53;
itilde = 27;
};
s = {
lslash = 5;
};
sacute = {
lslash = 5;
};
scaron = {
lslash = 5;
};
scedilla = {
lslash = 5;
};
slash = {
B = 53;
D = 53;
Dcaron = 53;
E = 53;
Eacute = 53;
Ebreve = 53;
Ecaron = 53;
Ecircumflex = 53;
Edieresis = 53;
Edotaccent = 53;
Egrave = 53;
Emacron = 53;
Eogonek = 53;
F = 53;
H = 53;
I = 53;
Iacute = 53;
Ibreve = 53;
Icircumflex = 60;
Idieresis = 47;
Idotaccent = 53;
Igrave = 53;
Imacron = 67;
Itilde = 53;
J = -40;
K = 53;
L = 53;
Lacute = 53;
Lcaron = 53;
Ldot = 53;
M = 53;
N = 53;
Nacute = 53;
Ncaron = 53;
Ntilde = 53;
Oslash = -30;
P = 53;
R = 53;
Racute = 53;
Rcaron = 53;
Thorn = 53;
ampersand = -50;
asterisk = -15;
at = -90;
bar = 53;
brokenbar = 53;
comma = -60;
ibreve = 40;
icircumflex = 38;
idieresis = 35;
igrave = 70;
imacron = 77;
plus = -53;
questiondown = -64;
quotedblbase = -87;
quotesinglbase = -87;
slash = -120;
underscore = -147;
uni0136 = 53;
uni013B = 53;
uni0145 = 53;
uni0156 = 53;
uni1EBC = 53;
};
space = {
X = -18;
};
thorn = {
l = -3;
lslash = 8;
};
underscore = {
ampersand = -40;
asterisk = -90;
backslash = -160;
j = 21;
question = -47;
underscore = -115;
};
uni0122 = {
imacron = 20;
};
uni0123 = {
lslash = 8;
};
uni0136 = {
ibreve = 15;
icircumflex = 0;
imacron = 60;
};
uni013B = {
V = -80;
};
uni013C = {
imacron = 47;
};
uni0145 = {
imacron = 40;
itilde = 11;
};
uni0156 = {
imacron = 18;
itilde = 18;
};
uni0162 = {
adieresis = -68;
amacron = -78;
atilde = -85;
edieresis = -85;
emacron = -90;
odieresis = -90;
omacron = -95;
racute = -59;
rcaron = -44;
scaron = -90;
udieresis = -60;
uni1EBD = -95;
ydieresis = -65;
};
uni0218 = {
imacron = 40;
itilde = 20;
};
uni0219 = {
lslash = 5;
};
uni021A = {
adieresis = -68;
amacron = -78;
atilde = -85;
edieresis = -85;
emacron = -90;
odieresis = -90;
omacron = -95;
racute = -59;
rcaron = -44;
scaron = -90;
udieresis = -60;
uni1EBD = -95;
ydieresis = -65;
};
uni0259 = {
l = -3;
lslash = 8;
};
uni02B9 = {
J = -35;
at = -40;
imacron = 50;
itilde = 31;
};
uni02BA = {
J = -35;
at = -40;
imacron = 50;
itilde = 31;
};
uni1EBC = {
ibreve = 37;
imacron = 54;
itilde = 37;
};
uni1EBD = {
lslash = 5;
};
uni1EF8 = {
ibreve = 40;
imacron = 67;
itilde = 20;
};
uni20A8 = {
lslash = 5;
};
v = {
aacute = -28;
abreve = -28;
acircumflex = -28;
adieresis = -28;
ae = -28;
agrave = -28;
amacron = -28;
ampersand = -18;
aogonek = -28;
aring = -28;
at = -47;
atilde = -28;
comma = -50;
f = 20;
questiondown = -43;
};
x = {
i = 5;
};
z = {
imacron = 40;
};
zacute = {
imacron = 40;
};
zcaron = {
imacron = 40;
};
zdotaccent = {
imacron = 40;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2022 The Rethink Sans Project Authors (https://github.com/hans-thiessen/Rethink-Sans)";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "The Rethink Sans project authors (Hans Thiessen). DM Sans designed by Colophon Foundry.";
}
);
},
{
key = designerURL;
value = "https://www.hansthiessen.com/";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://scripts.sil.org/OFL";
}
);
},
{
key = licenseURL;
value = "https://scripts.sil.org/OFL";
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Rethink Communications LLC";
}
);
},
{
key = manufacturerURL;
value = "https://rethinkideas.com/";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 1;
}
