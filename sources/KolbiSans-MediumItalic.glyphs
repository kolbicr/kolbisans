{
.appVersion = "3343";
.formatVersion = 3;
customParameters = (
{
name = panose;
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
4,
5,
6,
7,
9,
29,
31,
32,
33,
35,
36,
37,
38,
42,
45,
47,
60,
62
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
CR,
space,
A,
Aacute,
Abreve,
uni01CD,
Acircumflex,
Adieresis,
Agrave,
Amacron,
Aogonek,
Aring,
Atilde,
AE,
AEacute,
B,
C,
Cacute,
Ccaron,
Ccedilla,
Cdotaccent,
D,
Dcaron,
Dcroat,
Eth,
E,
Eacute,
Ebreve,
Ecaron,
Ecircumflex,
Edieresis,
Edotaccent,
Egrave,
Emacron,
Eogonek,
uni018E,
uni1EBC,
uni018F,
F,
G,
Gbreve,
uni0122,
Gdotaccent,
H,
Hbar,
I,
IJ,
Iacute,
Ibreve,
Icircumflex,
Idieresis,
Idotaccent,
Igrave,
Imacron,
Iogonek,
Itilde,
J,
uni004A0301,
K,
uni0136,
L,
Lacute,
Lcaron,
uni013B,
Ldot,
Lslash,
M,
N,
Nacute,
Ncaron,
uni0145,
Ntilde,
Eng,
O,
Oacute,
Obreve,
Ocircumflex,
Odieresis,
Ograve,
Ohungarumlaut,
Omacron,
Oslash,
Otilde,
OE,
P,
Thorn,
Q,
R,
Racute,
Rcaron,
uni0156,
S,
Sacute,
Scaron,
Scedilla,
uni0218,
uni1E9E,
T,
Tcaron,
uni0162,
uni021A,
U,
Uacute,
Ubreve,
Ucircumflex,
Udieresis,
Ugrave,
Uhungarumlaut,
Umacron,
Uogonek,
Uring,
Utilde,
V,
W,
Wacute,
Wcircumflex,
Wdieresis,
Wgrave,
X,
Y,
Yacute,
Ycircumflex,
Ydieresis,
Ygrave,
uni1EF8,
Z,
Zacute,
Zcaron,
Zdotaccent,
uniA78B,
a,
aacute,
abreve,
uni01CE,
acircumflex,
adieresis,
agrave,
amacron,
aogonek,
aring,
atilde,
ae,
aeacute,
b,
c,
cacute,
ccaron,
ccedilla,
cdotaccent,
d,
dcaron,
dcroat,
eth,
e,
eacute,
ebreve,
ecaron,
ecircumflex,
edieresis,
edotaccent,
egrave,
emacron,
eogonek,
uni1EBD,
uni0259,
f,
g,
gbreve,
uni0123,
gdotaccent,
h,
hbar,
i,
dotlessi,
iacute,
ibreve,
icircumflex,
idieresis,
i.loclTRK,
igrave,
imacron,
iogonek,
itilde,
ij,
j,
uni0237,
uni006A0301,
k,
uni0137,
l,
lacute,
lcaron,
uni013C,
ldot,
lslash,
m,
n,
nacute,
ncaron,
uni0146,
ntilde,
eng,
o,
oacute,
obreve,
ocircumflex,
odieresis,
ograve,
ohungarumlaut,
omacron,
oslash,
otilde,
oe,
p,
thorn,
q,
r,
racute,
rcaron,
uni0157,
s,
sacute,
scaron,
scedilla,
uni0219,
germandbls,
t,
tcaron,
uni0163,
uni021B,
u,
uacute,
ubreve,
ucircumflex,
udieresis,
ugrave,
uhungarumlaut,
umacron,
uogonek,
uring,
utilde,
v,
w,
wacute,
wcircumflex,
wdieresis,
wgrave,
x,
y,
yacute,
ycircumflex,
ydieresis,
ygrave,
uni1EF9,
z,
zacute,
zcaron,
zdotaccent,
uniA78C,
fi,
fl,
ordfeminine,
ordmasculine,
uni042F,
uni0394,
Pi,
uni03A9,
uni03BC,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
uni24EA,
uni2780,
uni2781,
uni2782,
uni2783,
uni2784,
uni2785,
uni2786,
uni2787,
uni2788,
uni278A,
uni278B,
uni278C,
uni278D,
uni278E,
uni278F,
uni2790,
uni2791,
uni2792,
uni24EA.solid,
zero.dnom,
one.dnom,
two.dnom,
three.dnom,
four.dnom,
five.dnom,
six.dnom,
seven.dnom,
eight.dnom,
nine.dnom,
zero.numr,
one.numr,
two.numr,
three.numr,
four.numr,
five.numr,
six.numr,
seven.numr,
eight.numr,
nine.numr,
fraction,
onehalf,
onequarter,
threequarters,
oneeighth,
threeeighths,
fiveeighths,
seveneighths,
uni2080,
uni2081,
uni2082,
uni2083,
uni2084,
uni2085,
uni2086,
uni2087,
uni2088,
uni2089,
uni2070,
uni00B9,
uni00B2,
uni00B3,
uni2074,
uni2075,
uni2076,
uni2077,
uni2078,
uni2079,
uni00A0,
period,
comma,
colon,
semicolon,
ellipsis,
exclam,
exclamdown,
question,
questiondown,
periodcentered,
bullet,
asterisk,
numbersign,
slash,
backslash,
periodcentered.loclCAT,
periodcentered.loclCAT.case,
hyphen,
endash,
emdash,
underscore,
parenleft,
parenright,
braceleft,
braceright,
bracketleft,
bracketright,
quotesinglbase,
quotedblbase,
quotedblleft,
quotedblright,
quoteleft,
quoteright,
guillemotleft,
guillemotright,
guilsinglleft,
guilsinglright,
quotedbl,
quotesingle,
florin,
at,
ampersand,
paragraph,
section,
copyright,
registered,
trademark,
degree,
bar,
brokenbar,
dagger,
uni2113,
daggerdbl,
estimated,
at.case,
registered.case,
uni20BF,
cent,
currency,
dollar,
Euro,
uni20BD,
uni20A8,
sterling,
yen,
cent.001,
uni2215,
plus,
minus,
multiply,
divide,
equal,
notequal,
greater,
less,
greaterequal,
lessequal,
plusminus,
approxequal,
asciitilde,
logicalnot,
asciicircum,
infinity,
integral,
uni2126,
uni2206,
product,
summation,
radical,
uni00B5,
partialdiff,
percent,
perthousand,
plus.case,
arrowup,
arrowright,
arrowdown,
arrowleft,
lozenge,
uni0308,
uni0307,
gravecomb,
acutecomb,
uni030B,
uni030C.alt,
uni0302,
uni030C,
uni0306,
uni030A,
tildecomb,
uni0304,
uni0312,
uni0326,
uni0327,
uni0328,
uni0308.case,
uni0307.case,
gravecomb.case,
acutecomb.case,
uni030B.case,
uni030C.alt.case,
uni0302.case,
uni030C.case,
uni0306.case,
uni030A.case,
tildecomb.case,
uni0304.case,
uni0327.case,
uni0328.case,
uni0308.narrow,
dieresis,
dotaccent,
grave,
acute,
hungarumlaut,
circumflex,
caron,
breve,
ring,
tilde,
macron,
cedilla,
ogonek,
uni02BA,
uni02B9,
uniE000,
uniE001,
uniE002,
uniE003,
uniE004,
uniE005,
REbackwards,
RethinkWordmark,
Rlogobig
);
}
);
date = "2021-03-04 17:58:23 +0000";
familyName = "Kolbi Sans";
featurePrefixes = (
{
code = "lookup SUB_1 {
	sub L periodcentered by Ldot;
	sub l periodcentered by ldot;
} SUB_1;
lookup SUB_20 {
	sub i by dotlessi;
	sub j by uni0237;
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_20;
lookup SUB_21 {
	sub iogonek by dotlessi uni0328;
} SUB_21;
lookup SUB_22 {
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_22;
lookup SUB_23 {
	sub periodcentered by periodcentered.loclCAT;
} SUB_23;
lookup SUB_24 {
	sub J by uni004A0301;
	sub j by uni006A0301;
	sub periodcentered by periodcentered.loclCAT.case;
} SUB_24;
lookup SUB_25 {
	sub zero.numr by zero.dnom;
	sub one.numr by one.dnom;
	sub two.numr by two.dnom;
	sub three.numr by three.dnom;
	sub four.numr by four.dnom;
	sub five.numr by five.dnom;
	sub six.numr by six.dnom;
	sub seven.numr by seven.dnom;
	sub eight.numr by eight.dnom;
	sub nine.numr by nine.dnom;
} SUB_25;
lookup SUB_26 {
	sub A by ordfeminine;
	sub O by ordmasculine;
	sub a by ordfeminine;
	sub o by ordmasculine;
} SUB_26;
";
name = Prefix;
}
);
features = (
{
automatic = 1;
code = "";
tag = aalt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_2 {
	@SUB_2_0_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub [i j]' lookup SUB_20 @SUB_2_0_LA_0;
	@SUB_2_1_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub [i j]' lookup SUB_20 [uni0327 uni0328] @SUB_2_1_LA_0;
	@SUB_2_2_BT_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	@SUB_2_2_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_2_2_BT_0 @SUB_2_2_1' lookup SUB_20;
	@SUB_2_3_BT_0 = [A Aacute Abreve uni01CD Acircumflex Adieresis Agrave Amacron Aogonek Aring Atilde AE AEacute B C Cacute Ccaron Ccedilla Cdotaccent D Dcaron Dcroat Eth E Eacute Ebreve Ecaron Ecircumflex Edieresis Edotaccent Egrave Emacron Eogonek uni018E uni1EBC uni018F F G Gbreve uni0122 Gdotaccent H Hbar I IJ Iacute Ibreve Icircumflex Idieresis Idotaccent Igrave Imacron Iogonek Itilde J uni004A0301 K uni0136 L Lacute Lcaron uni013B Ldot Lslash M N Nacute Ncaron uni0145 Ntilde Eng O Oacute Obreve Ocircumflex Odieresis Ograve Ohungarumlaut Omacron Oslash Otilde OE P Thorn Q R Racute Rcaron uni0156 S Sacute Scaron Scedilla uni0218 uni1E9E T Tcaron uni0162 uni021A U Uacute Ubreve Ucircumflex Udieresis Ugrave Uhungarumlaut Umacron Uogonek Uring Utilde V W Wacute Wcircumflex Wdieresis Wgrave X Y Yacute Ycircumflex Ydieresis Ygrave uni1EF8 Z Zacute Zcaron Zdotaccent uniA78B uni042F uni0394 Pi uni03A9];
	@SUB_2_3_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_2_3_BT_0 @SUB_2_3_1' lookup SUB_20;
	@SUB_2_4_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub iogonek' lookup SUB_21 @SUB_2_4_LA_0;
} SUB_2;
lookup SUB_3 {
	@SUB_3_0_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	@SUB_3_0_LA_1 = [uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni030C.alt.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0327.case uni0328.case];
	sub @SUB_3_0_0' lookup SUB_22 @SUB_3_0_LA_1;
	@SUB_3_1_BT_0 = [uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni030C.alt.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0327.case uni0328.case];
	@SUB_3_1_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_3_1_BT_0 @SUB_3_1_1' lookup SUB_22;
} SUB_3;
lookup SUB_4 {
	sub Ldot by L periodcentered.loclCAT.case;
	sub fi by f i;
	sub fl by f l;
} SUB_4;
script latn;
language dflt;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language AZE;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language CAT;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language CRT;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language KAZ;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language MOL;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language NLD;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language ROM;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language TAT;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
language TRK;
lookup SUB_2;
lookup SUB_3;
lookup SUB_4;
";
tag = ccmp;
},
{
code = "script latn;
language AZE;
lookup SUB_5 {
	sub i by i.loclTRK;
} SUB_5;
language CRT;
lookup SUB_5;
language KAZ;
lookup SUB_5;
language TAT;
lookup SUB_5;
language TRK;
lookup SUB_5;
language MOL;
lookup SUB_6 {
	sub Scedilla by uni0218;
	sub uni0162 by uni021A;
	sub uni0163 by uni021B;
} SUB_6;
language ROM;
lookup SUB_6;
language CAT;
lookup SUB_7 {
	sub L periodcentered' lookup SUB_24 L;
	sub l periodcentered' lookup SUB_23 l;
} SUB_7;
language NLD;
lookup SUB_8 {
	sub Iacute J' lookup SUB_24;
	sub iacute j' lookup SUB_24;
} SUB_8;
";
tag = locl;
},
{
code = "script DFLT;
language dflt;
lookup SUB_9 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_9;
script latn;
language dflt;
lookup SUB_9;
language AZE;
lookup SUB_9;
language CAT;
lookup SUB_9;
language CRT;
lookup SUB_9;
language KAZ;
lookup SUB_9;
language MOL;
lookup SUB_9;
language NLD;
lookup SUB_9;
language ROM;
lookup SUB_9;
language TAT;
lookup SUB_9;
language TRK;
lookup SUB_9;
";
tag = subs;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_10;
script latn;
language dflt;
lookup SUB_10;
language AZE;
lookup SUB_10;
language CAT;
lookup SUB_10;
language CRT;
lookup SUB_10;
language KAZ;
lookup SUB_10;
language MOL;
lookup SUB_10;
language NLD;
lookup SUB_10;
language ROM;
lookup SUB_10;
language TAT;
lookup SUB_10;
language TRK;
lookup SUB_10;
";
tag = sinf;
},
{
code = "script DFLT;
language dflt;
lookup SUB_11 {
	sub zero by uni2070;
	sub one by uni00B9;
	sub two by uni00B2;
	sub three by uni00B3;
	sub four by uni2074;
	sub five by uni2075;
	sub six by uni2076;
	sub seven by uni2077;
	sub eight by uni2078;
	sub nine by uni2079;
} SUB_11;
script latn;
language dflt;
lookup SUB_11;
language AZE;
lookup SUB_11;
language CAT;
lookup SUB_11;
language CRT;
lookup SUB_11;
language KAZ;
lookup SUB_11;
language MOL;
lookup SUB_11;
language NLD;
lookup SUB_11;
language ROM;
lookup SUB_11;
language TAT;
lookup SUB_11;
language TRK;
lookup SUB_11;
";
tag = sups;
},
{
code = "script DFLT;
language dflt;
lookup SUB_12 {
	sub zero by zero.numr;
	sub one by one.numr;
	sub two by two.numr;
	sub three by three.numr;
	sub four by four.numr;
	sub five by five.numr;
	sub six by six.numr;
	sub seven by seven.numr;
	sub eight by eight.numr;
	sub nine by nine.numr;
} SUB_12;
script latn;
language dflt;
lookup SUB_12;
language AZE;
lookup SUB_12;
language CAT;
lookup SUB_12;
language CRT;
lookup SUB_12;
language KAZ;
lookup SUB_12;
language MOL;
lookup SUB_12;
language NLD;
lookup SUB_12;
language ROM;
lookup SUB_12;
language TAT;
lookup SUB_12;
language TRK;
lookup SUB_12;
";
tag = numr;
},
{
code = "script DFLT;
language dflt;
lookup SUB_13 {
	sub zero by zero.dnom;
	sub one by one.dnom;
	sub two by two.dnom;
	sub three by three.dnom;
	sub four by four.dnom;
	sub five by five.dnom;
	sub six by six.dnom;
	sub seven by seven.dnom;
	sub eight by eight.dnom;
	sub nine by nine.dnom;
} SUB_13;
script latn;
language dflt;
lookup SUB_13;
language AZE;
lookup SUB_13;
language CAT;
lookup SUB_13;
language CRT;
lookup SUB_13;
language KAZ;
lookup SUB_13;
language MOL;
lookup SUB_13;
language NLD;
lookup SUB_13;
language ROM;
lookup SUB_13;
language TAT;
lookup SUB_13;
language TRK;
lookup SUB_13;
";
tag = dnom;
},
{
code = "script DFLT;
language dflt;
lookup SUB_14 {
	sub slash by fraction;
} SUB_14;
lookup SUB_15 {
	sub zero by zero.numr;
	sub one by one.numr;
	sub two by two.numr;
	sub three by three.numr;
	sub four by four.numr;
	sub five by five.numr;
	sub six by six.numr;
	sub seven by seven.numr;
	sub eight by eight.numr;
	sub nine by nine.numr;
} SUB_15;
lookup SUB_16 {
	@SUB_16_0_0 = [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
	sub fraction @SUB_16_0_0' lookup SUB_25;
	@SUB_16_1_BT_0 = [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];
	@SUB_16_1_1 = [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
	sub @SUB_16_1_BT_0 @SUB_16_1_1' lookup SUB_25;
} SUB_16;
script latn;
language dflt;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language AZE;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language CAT;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language CRT;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language KAZ;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language MOL;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language NLD;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language ROM;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language TAT;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
language TRK;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
";
tag = frac;
},
{
code = "script DFLT;
language dflt;
lookup SUB_17 {
	lookupflag IgnoreMarks;
	sub E less by uni018E;
	sub R E less by REbackwards;
	sub R less E by REbackwards;
	sub R greater by RethinkWordmark;
	sub R less by uni042F;
	sub f i by fi;
	sub f l by fl;
	sub hyphen hyphen hyphen greater by arrowdown;
	sub hyphen hyphen greater by arrowright;
	sub parenleft R parenright by Rlogobig;
	sub parenleft zero parenright by uni24EA;
	sub parenleft one parenright by uni2780;
	sub parenleft two parenright by uni2781;
	sub parenleft three parenright by uni2782;
	sub parenleft four parenright by uni2783;
	sub parenleft five parenright by uni2784;
	sub parenleft six parenright by uni2785;
	sub parenleft seven parenright by uni2786;
	sub parenleft eight parenright by uni2787;
	sub parenleft nine parenright by uni2788;
	sub braceleft zero braceright by uni24EA.solid;
	sub braceleft one braceright by uni278A;
	sub braceleft two braceright by uni278B;
	sub braceleft three braceright by uni278C;
	sub braceleft four braceright by uni278D;
	sub braceleft five braceright by uni278E;
	sub braceleft six braceright by uni278F;
	sub braceleft seven braceright by uni2790;
	sub braceleft eight braceright by uni2791;
	sub braceleft nine braceright by uni2792;
	sub registered plus by registered.case;
	sub less hyphen hyphen hyphen by arrowup;
	sub less hyphen hyphen by arrowleft;
} SUB_17;
script latn;
language dflt;
lookup SUB_17;
language AZE;
lookup SUB_17;
language CAT;
lookup SUB_17;
language CRT;
lookup SUB_17;
language KAZ;
lookup SUB_17;
language MOL;
lookup SUB_17;
language NLD;
lookup SUB_17;
language ROM;
lookup SUB_17;
language TAT;
lookup SUB_17;
language TRK;
lookup SUB_17;
";
tag = liga;
},
{
code = "script DFLT;
language dflt;
lookup SUB_18 {
	@SUB_18_0_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_18_0_BT_0 [A a]' lookup SUB_26;
	@SUB_18_1_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_18_1_BT_0 [O o]' lookup SUB_26;
} SUB_18;
script latn;
language dflt;
lookup SUB_18;
language AZE;
lookup SUB_18;
language CAT;
lookup SUB_18;
language CRT;
lookup SUB_18;
language KAZ;
lookup SUB_18;
language MOL;
lookup SUB_18;
language NLD;
lookup SUB_18;
language ROM;
lookup SUB_18;
language TAT;
lookup SUB_18;
language TRK;
lookup SUB_18;
";
tag = ordn;
},
{
code = "script DFLT;
language dflt;
lookup SUB_19 {
	sub periodcentered.loclCAT by periodcentered.loclCAT.case;
	sub at by at.case;
	sub registered by registered.case;
	sub plus by plus.case;
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_19;
script latn;
language dflt;
lookup SUB_19;
language AZE;
lookup SUB_19;
language CAT;
lookup SUB_19;
language CRT;
lookup SUB_19;
language KAZ;
lookup SUB_19;
language MOL;
lookup SUB_19;
language NLD;
lookup SUB_19;
language ROM;
lookup SUB_19;
language TAT;
lookup SUB_19;
language TRK;
lookup SUB_19;
";
tag = case;
},
{
code = "script DFLT;
language dflt;
lookup POS_2 {
	markClass uni0326 <anchor 12 0> @POS_2_0_MARK_0;
	markClass uni0327 <anchor 41 0> @POS_2_0_MARK_0;
	markClass uni0327.case <anchor 38 0> @POS_2_0_MARK_0;
	markClass uni0308 <anchor 216 496> @POS_2_0_MARK_1;
	markClass uni0307 <anchor 116 496> @POS_2_0_MARK_1;
	markClass gravecomb <anchor 153 496> @POS_2_0_MARK_1;
	markClass acutecomb <anchor 153 496> @POS_2_0_MARK_1;
	markClass uni030B <anchor 176 496> @POS_2_0_MARK_1;
	markClass uni0302 <anchor 186 496> @POS_2_0_MARK_1;
	markClass uni030C <anchor 186 496> @POS_2_0_MARK_1;
	markClass uni0306 <anchor 193 496> @POS_2_0_MARK_1;
	markClass uni030A <anchor 156 496> @POS_2_0_MARK_1;
	markClass tildecomb <anchor 208 496> @POS_2_0_MARK_1;
	markClass uni0304 <anchor 232 496> @POS_2_0_MARK_1;
	markClass uni0312 <anchor 102 496> @POS_2_0_MARK_1;
	markClass uni0308.case <anchor 252 700> @POS_2_0_MARK_1;
	markClass uni0307.case <anchor 152 700> @POS_2_0_MARK_1;
	markClass gravecomb.case <anchor 189 700> @POS_2_0_MARK_1;
	markClass acutecomb.case <anchor 189 700> @POS_2_0_MARK_1;
	markClass uni030B.case <anchor 242 700> @POS_2_0_MARK_1;
	markClass uni0302.case <anchor 221 700> @POS_2_0_MARK_1;
	markClass uni030C.case <anchor 222 700> @POS_2_0_MARK_1;
	markClass uni0306.case <anchor 229 700> @POS_2_0_MARK_1;
	markClass uni030A.case <anchor 191 700> @POS_2_0_MARK_1;
	markClass tildecomb.case <anchor 244 700> @POS_2_0_MARK_1;
	markClass uni0304.case <anchor 261 700> @POS_2_0_MARK_1;
	markClass uni0308.narrow <anchor 226 496> @POS_2_0_MARK_1;
	pos base cent <anchor 313 0> mark @POS_2_0_MARK_0 <anchor 435 691> mark @POS_2_0_MARK_1;
	pos base uni20A8 <anchor 793 0> mark @POS_2_0_MARK_0 <anchor 881 496> mark @POS_2_0_MARK_1;
} POS_2;
lookup POS_3 {
	markClass uni0326 <anchor 12 0> @POS_3_0_MARK_0;
	markClass uni0327 <anchor 41 0> @POS_3_0_MARK_0;
	markClass uni0327.case <anchor 38 0> @POS_3_0_MARK_0;
	markClass uni0308 <anchor 216 496> @POS_3_0_MARK_1;
	markClass uni0307 <anchor 116 496> @POS_3_0_MARK_1;
	markClass gravecomb <anchor 153 496> @POS_3_0_MARK_1;
	markClass acutecomb <anchor 153 496> @POS_3_0_MARK_1;
	markClass uni030B <anchor 176 496> @POS_3_0_MARK_1;
	markClass uni0302 <anchor 186 496> @POS_3_0_MARK_1;
	markClass uni030C <anchor 186 496> @POS_3_0_MARK_1;
	markClass uni0306 <anchor 193 496> @POS_3_0_MARK_1;
	markClass uni030A <anchor 156 496> @POS_3_0_MARK_1;
	markClass tildecomb <anchor 208 496> @POS_3_0_MARK_1;
	markClass uni0304 <anchor 232 496> @POS_3_0_MARK_1;
	markClass uni0312 <anchor 102 496> @POS_3_0_MARK_1;
	markClass uni0308.case <anchor 252 700> @POS_3_0_MARK_1;
	markClass uni0307.case <anchor 152 700> @POS_3_0_MARK_1;
	markClass gravecomb.case <anchor 189 700> @POS_3_0_MARK_1;
	markClass acutecomb.case <anchor 189 700> @POS_3_0_MARK_1;
	markClass uni030B.case <anchor 242 700> @POS_3_0_MARK_1;
	markClass uni0302.case <anchor 221 700> @POS_3_0_MARK_1;
	markClass uni030C.case <anchor 222 700> @POS_3_0_MARK_1;
	markClass uni0306.case <anchor 229 700> @POS_3_0_MARK_1;
	markClass uni030A.case <anchor 191 700> @POS_3_0_MARK_1;
	markClass tildecomb.case <anchor 244 700> @POS_3_0_MARK_1;
	markClass uni0304.case <anchor 261 700> @POS_3_0_MARK_1;
	markClass uni0308.narrow <anchor 226 496> @POS_3_0_MARK_1;
	pos base A <anchor 293 0> mark @POS_3_0_MARK_0 <anchor 417 700> mark @POS_3_0_MARK_1;
	pos base Aacute <anchor 293 0> mark @POS_3_0_MARK_0 <anchor 460 942> mark @POS_3_0_MARK_1;
	pos base Abreve <anchor 293 0> mark @POS_3_0_MARK_0 <anchor 454 909> mark @POS_3_0_MARK_1;
	pos base uni01CD <anchor 293 0> mark @POS_3_0_MARK_0 <anchor 453 910> mark @POS_3_0_MARK_1;
	pos base Acircumflex <anchor 293 0> mark @POS_3_0_MARK_0 <anchor 454 911> mark @POS_3_0_MARK_1;
	pos base Adieresis <anchor 293 0> mark @POS_3_0_MARK_0 <anchor 454 912> mark @POS_3_0_MARK_1;
	pos base Agrave <anchor 293 0> mark @POS_3_0_MARK_0 <anchor 460 942> mark @POS_3_0_MARK_1;
	pos base Amacron <anchor 293 0> mark @POS_3_0_MARK_0 <anchor 446 867> mark @POS_3_0_MARK_1;
	pos base Aogonek <anchor 293 0> mark @POS_3_0_MARK_0 <anchor 417 700> mark @POS_3_0_MARK_1;
	pos base Aring <anchor 293 0> mark @POS_3_0_MARK_0 <anchor 465 971> mark @POS_3_0_MARK_1;
	pos base Atilde <anchor 293 0> mark @POS_3_0_MARK_0 <anchor 446 868> mark @POS_3_0_MARK_1;
	pos base AE <anchor 417 0> mark @POS_3_0_MARK_0 <anchor 701 700> mark @POS_3_0_MARK_1;
	pos base AEacute <anchor 417 0> mark @POS_3_0_MARK_0 <anchor 744 942> mark @POS_3_0_MARK_1;
	pos base C <anchor 317 0> mark @POS_3_0_MARK_0 <anchor 441 700> mark @POS_3_0_MARK_1;
	pos base Cacute <anchor 317 0> mark @POS_3_0_MARK_0 <anchor 484 942> mark @POS_3_0_MARK_1;
	pos base Ccaron <anchor 317 0> mark @POS_3_0_MARK_0 <anchor 477 910> mark @POS_3_0_MARK_1;
	pos base Ccedilla <anchor 271 -261> mark @POS_3_0_MARK_0 <anchor 441 700> mark @POS_3_0_MARK_1;
	pos base Cdotaccent <anchor 317 0> mark @POS_3_0_MARK_0 <anchor 478 912> mark @POS_3_0_MARK_1;
	pos base D <anchor 306 0> mark @POS_3_0_MARK_0 <anchor 430 700> mark @POS_3_0_MARK_1;
	pos base Dcaron <anchor 306 0> mark @POS_3_0_MARK_0 <anchor 466 910> mark @POS_3_0_MARK_1;
	pos base E <anchor 228 0> mark @POS_3_0_MARK_0 <anchor 352 700> mark @POS_3_0_MARK_1;
	pos base Eacute <anchor 228 0> mark @POS_3_0_MARK_0 <anchor 395 942> mark @POS_3_0_MARK_1;
	pos base Ebreve <anchor 228 0> mark @POS_3_0_MARK_0 <anchor 389 909> mark @POS_3_0_MARK_1;
	pos base Ecaron <anchor 228 0> mark @POS_3_0_MARK_0 <anchor 389 910> mark @POS_3_0_MARK_1;
	pos base Ecircumflex <anchor 228 0> mark @POS_3_0_MARK_0 <anchor 389 911> mark @POS_3_0_MARK_1;
	pos base Edieresis <anchor 228 0> mark @POS_3_0_MARK_0 <anchor 390 912> mark @POS_3_0_MARK_1;
	pos base Edotaccent <anchor 228 0> mark @POS_3_0_MARK_0 <anchor 390 912> mark @POS_3_0_MARK_1;
	pos base Egrave <anchor 228 0> mark @POS_3_0_MARK_0 <anchor 395 942> mark @POS_3_0_MARK_1;
	pos base Emacron <anchor 228 0> mark @POS_3_0_MARK_0 <anchor 382 867> mark @POS_3_0_MARK_1;
	pos base Eogonek <anchor 228 0> mark @POS_3_0_MARK_0 <anchor 352 700> mark @POS_3_0_MARK_1;
	pos base uni1EBC <anchor 228 0> mark @POS_3_0_MARK_0 <anchor 382 868> mark @POS_3_0_MARK_1;
	pos base G <anchor 336 0> mark @POS_3_0_MARK_0 <anchor 460 700> mark @POS_3_0_MARK_1;
	pos base Gbreve <anchor 336 0> mark @POS_3_0_MARK_0 <anchor 497 909> mark @POS_3_0_MARK_1;
	pos base uni0122 <anchor 291 -256> mark @POS_3_0_MARK_0 <anchor 460 700> mark @POS_3_0_MARK_1;
	pos base Gdotaccent <anchor 336 0> mark @POS_3_0_MARK_0 <anchor 498 912> mark @POS_3_0_MARK_1;
	pos base I <anchor 76 0> mark @POS_3_0_MARK_0 <anchor 200 700> mark @POS_3_0_MARK_1;
	pos base IJ <anchor 442 0> mark @POS_3_0_MARK_0 <anchor 691 700> mark @POS_3_0_MARK_1;
	pos base Iacute <anchor 76 0> mark @POS_3_0_MARK_0 <anchor 243 942> mark @POS_3_0_MARK_1;
	pos base Ibreve <anchor 76 0> mark @POS_3_0_MARK_0 <anchor 237 909> mark @POS_3_0_MARK_1;
	pos base Icircumflex <anchor 76 0> mark @POS_3_0_MARK_0 <anchor 237 911> mark @POS_3_0_MARK_1;
	pos base Idieresis <anchor 76 0> mark @POS_3_0_MARK_0 <anchor 237 912> mark @POS_3_0_MARK_1;
	pos base Idotaccent <anchor 76 0> mark @POS_3_0_MARK_0 <anchor 237 912> mark @POS_3_0_MARK_1;
	pos base Igrave <anchor 76 0> mark @POS_3_0_MARK_0 <anchor 243 942> mark @POS_3_0_MARK_1;
	pos base Imacron <anchor 76 0> mark @POS_3_0_MARK_0 <anchor 229 867> mark @POS_3_0_MARK_1;
	pos base Iogonek <anchor 76 0> mark @POS_3_0_MARK_0 <anchor 200 700> mark @POS_3_0_MARK_1;
	pos base Itilde <anchor 76 0> mark @POS_3_0_MARK_0 <anchor 229 868> mark @POS_3_0_MARK_1;
	pos base J <anchor 203 0> mark @POS_3_0_MARK_0 <anchor 452 700> mark @POS_3_0_MARK_1;
	pos base uni004A0301 <anchor 203 0> mark @POS_3_0_MARK_0 <anchor 495 942> mark @POS_3_0_MARK_1;
	pos base K <anchor 261 0> mark @POS_3_0_MARK_0 <anchor 385 700> mark @POS_3_0_MARK_1;
	pos base uni0136 <anchor 216 -256> mark @POS_3_0_MARK_0 <anchor 385 700> mark @POS_3_0_MARK_1;
	pos base L <anchor 219 0> mark @POS_3_0_MARK_0 <anchor 251 700> mark @POS_3_0_MARK_1;
	pos base Lacute <anchor 219 0> mark @POS_3_0_MARK_0 <anchor 294 942> mark @POS_3_0_MARK_1;
	pos base Lcaron <anchor 219 0> mark @POS_3_0_MARK_0 <anchor 251 700> mark @POS_3_0_MARK_1;
	pos base uni013B <anchor 174 -256> mark @POS_3_0_MARK_0 <anchor 251 700> mark @POS_3_0_MARK_1;
	pos base N <anchor 304 0> mark @POS_3_0_MARK_0 <anchor 428 700> mark @POS_3_0_MARK_1;
	pos base Nacute <anchor 304 0> mark @POS_3_0_MARK_0 <anchor 471 942> mark @POS_3_0_MARK_1;
	pos base Ncaron <anchor 304 0> mark @POS_3_0_MARK_0 <anchor 465 910> mark @POS_3_0_MARK_1;
	pos base uni0145 <anchor 259 -256> mark @POS_3_0_MARK_0 <anchor 428 700> mark @POS_3_0_MARK_1;
	pos base Ntilde <anchor 304 0> mark @POS_3_0_MARK_0 <anchor 458 868> mark @POS_3_0_MARK_1;
	pos base Eng <anchor 304 0> mark @POS_3_0_MARK_0 <anchor 428 700> mark @POS_3_0_MARK_1;
	pos base O <anchor 350 0> mark @POS_3_0_MARK_0 <anchor 474 700> mark @POS_3_0_MARK_1;
	pos base Oacute <anchor 350 0> mark @POS_3_0_MARK_0 <anchor 517 942> mark @POS_3_0_MARK_1;
	pos base Obreve <anchor 350 0> mark @POS_3_0_MARK_0 <anchor 511 909> mark @POS_3_0_MARK_1;
	pos base Ocircumflex <anchor 350 0> mark @POS_3_0_MARK_0 <anchor 511 911> mark @POS_3_0_MARK_1;
	pos base Odieresis <anchor 350 0> mark @POS_3_0_MARK_0 <anchor 512 912> mark @POS_3_0_MARK_1;
	pos base Ograve <anchor 350 0> mark @POS_3_0_MARK_0 <anchor 517 942> mark @POS_3_0_MARK_1;
	pos base Ohungarumlaut <anchor 350 0> mark @POS_3_0_MARK_0 <anchor 512 915> mark @POS_3_0_MARK_1;
	pos base Omacron <anchor 350 0> mark @POS_3_0_MARK_0 <anchor 504 867> mark @POS_3_0_MARK_1;
	pos base Otilde <anchor 350 0> mark @POS_3_0_MARK_0 <anchor 504 868> mark @POS_3_0_MARK_1;
	pos base OE <anchor 511 0> mark @POS_3_0_MARK_0 <anchor 635 700> mark @POS_3_0_MARK_1;
	pos base R <anchor 253 0> mark @POS_3_0_MARK_0 <anchor 377 700> mark @POS_3_0_MARK_1;
	pos base Racute <anchor 253 0> mark @POS_3_0_MARK_0 <anchor 420 942> mark @POS_3_0_MARK_1;
	pos base Rcaron <anchor 253 0> mark @POS_3_0_MARK_0 <anchor 413 910> mark @POS_3_0_MARK_1;
	pos base uni0156 <anchor 208 -256> mark @POS_3_0_MARK_0 <anchor 377 700> mark @POS_3_0_MARK_1;
	pos base S <anchor 250 0> mark @POS_3_0_MARK_0 <anchor 374 700> mark @POS_3_0_MARK_1;
	pos base Sacute <anchor 250 0> mark @POS_3_0_MARK_0 <anchor 417 942> mark @POS_3_0_MARK_1;
	pos base Scaron <anchor 250 0> mark @POS_3_0_MARK_0 <anchor 411 910> mark @POS_3_0_MARK_1;
	pos base Scedilla <anchor 204 -261> mark @POS_3_0_MARK_0 <anchor 374 700> mark @POS_3_0_MARK_1;
	pos base uni0218 <anchor 205 -256> mark @POS_3_0_MARK_0 <anchor 374 700> mark @POS_3_0_MARK_1;
	pos base T <anchor 239 0> mark @POS_3_0_MARK_0 <anchor 363 700> mark @POS_3_0_MARK_1;
	pos base Tcaron <anchor 239 0> mark @POS_3_0_MARK_0 <anchor 399 910> mark @POS_3_0_MARK_1;
	pos base uni0162 <anchor 193 -261> mark @POS_3_0_MARK_0 <anchor 363 700> mark @POS_3_0_MARK_1;
	pos base uni021A <anchor 194 -256> mark @POS_3_0_MARK_0 <anchor 363 700> mark @POS_3_0_MARK_1;
	pos base U <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 414 700> mark @POS_3_0_MARK_1;
	pos base Uacute <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 457 942> mark @POS_3_0_MARK_1;
	pos base Ubreve <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 451 909> mark @POS_3_0_MARK_1;
	pos base Ucircumflex <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 451 911> mark @POS_3_0_MARK_1;
	pos base Udieresis <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 451 912> mark @POS_3_0_MARK_1;
	pos base Ugrave <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 457 942> mark @POS_3_0_MARK_1;
	pos base Uhungarumlaut <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 451 915> mark @POS_3_0_MARK_1;
	pos base Umacron <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 443 867> mark @POS_3_0_MARK_1;
	pos base Uogonek <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 414 700> mark @POS_3_0_MARK_1;
	pos base Uring <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 462 971> mark @POS_3_0_MARK_1;
	pos base Utilde <anchor 290 0> mark @POS_3_0_MARK_0 <anchor 443 868> mark @POS_3_0_MARK_1;
	pos base W <anchor 453 0> mark @POS_3_0_MARK_0 <anchor 571 700> mark @POS_3_0_MARK_1;
	pos base Wacute <anchor 453 0> mark @POS_3_0_MARK_0 <anchor 614 942> mark @POS_3_0_MARK_1;
	pos base Wcircumflex <anchor 453 0> mark @POS_3_0_MARK_0 <anchor 608 911> mark @POS_3_0_MARK_1;
	pos base Wdieresis <anchor 453 0> mark @POS_3_0_MARK_0 <anchor 609 912> mark @POS_3_0_MARK_1;
	pos base Wgrave <anchor 453 0> mark @POS_3_0_MARK_0 <anchor 614 942> mark @POS_3_0_MARK_1;
	pos base Y <anchor 251 0> mark @POS_3_0_MARK_0 <anchor 375 700> mark @POS_3_0_MARK_1;
	pos base Yacute <anchor 251 0> mark @POS_3_0_MARK_0 <anchor 418 942> mark @POS_3_0_MARK_1;
	pos base Ycircumflex <anchor 251 0> mark @POS_3_0_MARK_0 <anchor 412 911> mark @POS_3_0_MARK_1;
	pos base Ydieresis <anchor 251 0> mark @POS_3_0_MARK_0 <anchor 413 912> mark @POS_3_0_MARK_1;
	pos base Ygrave <anchor 251 0> mark @POS_3_0_MARK_0 <anchor 418 942> mark @POS_3_0_MARK_1;
	pos base uni1EF8 <anchor 251 0> mark @POS_3_0_MARK_0 <anchor 405 868> mark @POS_3_0_MARK_1;
	pos base Z <anchor 227 0> mark @POS_3_0_MARK_0 <anchor 351 700> mark @POS_3_0_MARK_1;
	pos base Zacute <anchor 227 0> mark @POS_3_0_MARK_0 <anchor 394 942> mark @POS_3_0_MARK_1;
	pos base Zcaron <anchor 227 0> mark @POS_3_0_MARK_0 <anchor 387 910> mark @POS_3_0_MARK_1;
	pos base Zdotaccent <anchor 227 0> mark @POS_3_0_MARK_0 <anchor 388 912> mark @POS_3_0_MARK_1;
	pos base a <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 322 496> mark @POS_3_0_MARK_1;
	pos base aacute <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 367 749> mark @POS_3_0_MARK_1;
	pos base abreve <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 362 722> mark @POS_3_0_MARK_1;
	pos base uni01CE <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 363 730> mark @POS_3_0_MARK_1;
	pos base acircumflex <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 363 730> mark @POS_3_0_MARK_1;
	pos base adieresis <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 362 723> mark @POS_3_0_MARK_1;
	pos base agrave <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 367 749> mark @POS_3_0_MARK_1;
	pos base amacron <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 350 693> mark @POS_3_0_MARK_1;
	pos base aogonek <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 322 496> mark @POS_3_0_MARK_1;
	pos base aring <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 370 766> mark @POS_3_0_MARK_1;
	pos base atilde <anchor 234 0> mark @POS_3_0_MARK_0 <anchor 359 705> mark @POS_3_0_MARK_1;
	pos base ae <anchor 415 0> mark @POS_3_0_MARK_0 <anchor 503 496> mark @POS_3_0_MARK_1;
	pos base aeacute <anchor 415 0> mark @POS_3_0_MARK_0 <anchor 548 749> mark @POS_3_0_MARK_1;
	pos base c <anchor 238 0> mark @POS_3_0_MARK_0 <anchor 326 496> mark @POS_3_0_MARK_1;
	pos base cacute <anchor 238 0> mark @POS_3_0_MARK_0 <anchor 371 749> mark @POS_3_0_MARK_1;
	pos base ccaron <anchor 238 0> mark @POS_3_0_MARK_0 <anchor 367 730> mark @POS_3_0_MARK_1;
	pos base ccedilla <anchor 192 -261> mark @POS_3_0_MARK_0 <anchor 326 496> mark @POS_3_0_MARK_1;
	pos base cdotaccent <anchor 238 0> mark @POS_3_0_MARK_0 <anchor 366 723> mark @POS_3_0_MARK_1;
	pos base d <anchor 262 0> mark @POS_3_0_MARK_0 <anchor 437 992> mark @POS_3_0_MARK_1;
	pos base dcaron <anchor 262 0> mark @POS_3_0_MARK_0 <anchor 437 992> mark @POS_3_0_MARK_1;
	pos base e <anchor 237 0> mark @POS_3_0_MARK_0 <anchor 325 496> mark @POS_3_0_MARK_1;
	pos base eacute <anchor 237 0> mark @POS_3_0_MARK_0 <anchor 370 749> mark @POS_3_0_MARK_1;
	pos base ebreve <anchor 237 0> mark @POS_3_0_MARK_0 <anchor 365 722> mark @POS_3_0_MARK_1;
	pos base ecaron <anchor 237 0> mark @POS_3_0_MARK_0 <anchor 366 730> mark @POS_3_0_MARK_1;
	pos base ecircumflex <anchor 237 0> mark @POS_3_0_MARK_0 <anchor 366 730> mark @POS_3_0_MARK_1;
	pos base edieresis <anchor 237 0> mark @POS_3_0_MARK_0 <anchor 365 723> mark @POS_3_0_MARK_1;
	pos base edotaccent <anchor 237 0> mark @POS_3_0_MARK_0 <anchor 365 723> mark @POS_3_0_MARK_1;
	pos base egrave <anchor 237 0> mark @POS_3_0_MARK_0 <anchor 370 749> mark @POS_3_0_MARK_1;
	pos base emacron <anchor 237 0> mark @POS_3_0_MARK_0 <anchor 353 693> mark @POS_3_0_MARK_1;
	pos base eogonek <anchor 237 0> mark @POS_3_0_MARK_0 <anchor 325 496> mark @POS_3_0_MARK_1;
	pos base uni1EBD <anchor 237 0> mark @POS_3_0_MARK_0 <anchor 362 705> mark @POS_3_0_MARK_1;
	pos base g <anchor 159 -310> mark @POS_3_0_MARK_0 <anchor 292 496> mark @POS_3_0_MARK_1;
	pos base gbreve <anchor 159 -310> mark @POS_3_0_MARK_0 <anchor 332 722> mark @POS_3_0_MARK_1;
	pos base uni0123 <anchor 159 -310> mark @POS_3_0_MARK_0 <anchor 347 804> mark @POS_3_0_MARK_1;
	pos base gdotaccent <anchor 159 -310> mark @POS_3_0_MARK_0 <anchor 332 723> mark @POS_3_0_MARK_1;
	pos base i <anchor 74 0> mark @POS_3_0_MARK_0;
	pos base dotlessi <anchor 67 0> mark @POS_3_0_MARK_0 <anchor 154 496> mark @POS_3_0_MARK_1;
	pos base iacute <anchor 67 0> mark @POS_3_0_MARK_0 <anchor 199 749> mark @POS_3_0_MARK_1;
	pos base ibreve <anchor 67 0> mark @POS_3_0_MARK_0 <anchor 194 722> mark @POS_3_0_MARK_1;
	pos base icircumflex <anchor 67 0> mark @POS_3_0_MARK_0 <anchor 195 730> mark @POS_3_0_MARK_1;
	pos base idieresis <anchor 67 0> mark @POS_3_0_MARK_0 <anchor 194 723> mark @POS_3_0_MARK_1;
	pos base i.loclTRK <anchor 67 0> mark @POS_3_0_MARK_0 <anchor 194 723> mark @POS_3_0_MARK_1;
	pos base igrave <anchor 67 0> mark @POS_3_0_MARK_0 <anchor 199 749> mark @POS_3_0_MARK_1;
	pos base imacron <anchor 67 0> mark @POS_3_0_MARK_0 <anchor 182 693> mark @POS_3_0_MARK_1;
	pos base iogonek <anchor 67 0> mark @POS_3_0_MARK_0 <anchor 194 723> mark @POS_3_0_MARK_1;
	pos base itilde <anchor 67 0> mark @POS_3_0_MARK_0 <anchor 191 705> mark @POS_3_0_MARK_1;
	pos base ij <anchor 74 0> mark @POS_3_0_MARK_0;
	pos base uni0237 <anchor 20 -310> mark @POS_3_0_MARK_0 <anchor 162 496> mark @POS_3_0_MARK_1;
	pos base uni006A0301 <anchor 20 -310> mark @POS_3_0_MARK_0 <anchor 207 749> mark @POS_3_0_MARK_1;
	pos base k <anchor 211 0> mark @POS_3_0_MARK_0 <anchor 386 992> mark @POS_3_0_MARK_1;
	pos base uni0137 <anchor 166 -256> mark @POS_3_0_MARK_0 <anchor 386 992> mark @POS_3_0_MARK_1;
	pos base l <anchor 67 0> mark @POS_3_0_MARK_0 <anchor 190 700> mark @POS_3_0_MARK_1;
	pos base lacute <anchor 67 0> mark @POS_3_0_MARK_0 <anchor 233 942> mark @POS_3_0_MARK_1;
	pos base lcaron <anchor 67 0> mark @POS_3_0_MARK_0 <anchor 190 700> mark @POS_3_0_MARK_1;
	pos base uni013C <anchor 22 -256> mark @POS_3_0_MARK_0 <anchor 190 700> mark @POS_3_0_MARK_1;
	pos base n <anchor 242 0> mark @POS_3_0_MARK_0 <anchor 330 496> mark @POS_3_0_MARK_1;
	pos base nacute <anchor 242 0> mark @POS_3_0_MARK_0 <anchor 375 749> mark @POS_3_0_MARK_1;
	pos base ncaron <anchor 242 0> mark @POS_3_0_MARK_0 <anchor 371 730> mark @POS_3_0_MARK_1;
	pos base uni0146 <anchor 197 -256> mark @POS_3_0_MARK_0 <anchor 330 496> mark @POS_3_0_MARK_1;
	pos base ntilde <anchor 242 0> mark @POS_3_0_MARK_0 <anchor 367 705> mark @POS_3_0_MARK_1;
	pos base eng <anchor 242 0> mark @POS_3_0_MARK_0 <anchor 330 496> mark @POS_3_0_MARK_1;
	pos base o <anchor 249 0> mark @POS_3_0_MARK_0 <anchor 337 496> mark @POS_3_0_MARK_1;
	pos base oacute <anchor 249 0> mark @POS_3_0_MARK_0 <anchor 382 749> mark @POS_3_0_MARK_1;
	pos base obreve <anchor 249 0> mark @POS_3_0_MARK_0 <anchor 377 722> mark @POS_3_0_MARK_1;
	pos base ocircumflex <anchor 249 0> mark @POS_3_0_MARK_0 <anchor 378 730> mark @POS_3_0_MARK_1;
	pos base odieresis <anchor 249 0> mark @POS_3_0_MARK_0 <anchor 377 723> mark @POS_3_0_MARK_1;
	pos base ograve <anchor 249 0> mark @POS_3_0_MARK_0 <anchor 382 749> mark @POS_3_0_MARK_1;
	pos base ohungarumlaut <anchor 249 0> mark @POS_3_0_MARK_0 <anchor 374 711> mark @POS_3_0_MARK_1;
	pos base omacron <anchor 249 0> mark @POS_3_0_MARK_0 <anchor 364 693> mark @POS_3_0_MARK_1;
	pos base otilde <anchor 249 0> mark @POS_3_0_MARK_0 <anchor 374 705> mark @POS_3_0_MARK_1;
	pos base oe <anchor 442 0> mark @POS_3_0_MARK_0 <anchor 530 496> mark @POS_3_0_MARK_1;
	pos base r <anchor 73 0> mark @POS_3_0_MARK_0 <anchor 228 496> mark @POS_3_0_MARK_1;
	pos base racute <anchor 73 0> mark @POS_3_0_MARK_0 <anchor 273 749> mark @POS_3_0_MARK_1;
	pos base rcaron <anchor 73 0> mark @POS_3_0_MARK_0 <anchor 269 730> mark @POS_3_0_MARK_1;
	pos base uni0157 <anchor 28 -256> mark @POS_3_0_MARK_0 <anchor 228 496> mark @POS_3_0_MARK_1;
	pos base s <anchor 211 0> mark @POS_3_0_MARK_0 <anchor 299 496> mark @POS_3_0_MARK_1;
	pos base sacute <anchor 211 0> mark @POS_3_0_MARK_0 <anchor 344 749> mark @POS_3_0_MARK_1;
	pos base scaron <anchor 211 0> mark @POS_3_0_MARK_0 <anchor 340 730> mark @POS_3_0_MARK_1;
	pos base scedilla <anchor 165 -261> mark @POS_3_0_MARK_0 <anchor 299 496> mark @POS_3_0_MARK_1;
	pos base uni0219 <anchor 166 -256> mark @POS_3_0_MARK_0 <anchor 299 496> mark @POS_3_0_MARK_1;
	pos base t <anchor 170 0> mark @POS_3_0_MARK_0 <anchor 230 496> mark @POS_3_0_MARK_1;
	pos base tcaron <anchor 170 0> mark @POS_3_0_MARK_0 <anchor 230 496> mark @POS_3_0_MARK_1;
	pos base uni0163 <anchor 124 -261> mark @POS_3_0_MARK_0 <anchor 230 496> mark @POS_3_0_MARK_1;
	pos base uni021B <anchor 125 -256> mark @POS_3_0_MARK_0 <anchor 230 496> mark @POS_3_0_MARK_1;
	pos base u <anchor 242 0> mark @POS_3_0_MARK_0 <anchor 330 496> mark @POS_3_0_MARK_1;
	pos base uacute <anchor 242 0> mark @POS_3_0_MARK_0 <anchor 375 749> mark @POS_3_0_MARK_1;
	pos base ubreve <anchor 242 0> mark @POS_3_0_MARK_0 <anchor 370 722> mark @POS_3_0_MARK_1;
	pos base ucircumflex <anchor 242 0> mark @POS_3_0_MARK_0 <anchor 371 730> mark @POS_3_0_MARK_1;
	pos base udieresis <anchor 242 0> mark @POS_3_0_MARK_0 <anchor 370 723> mark @POS_3_0_MARK_1;
	pos base ugrave <anchor 242 0> mark @POS_3_0_MARK_0 <anchor 375 749> mark @POS_3_0_MARK_1;
	pos base uhungarumlaut <anchor 242 0> mark @POS_3_0_MARK_0 <anchor 368 711> mark @POS_3_0_MARK_1;
	pos base umacron <anchor 242 0> mark @POS_3_0_MARK_0 <anchor 358 693> mark @POS_3_0_MARK_1;
	pos base uogonek <anchor 242 0> mark @POS_3_0_MARK_0 <anchor 330 496> mark @POS_3_0_MARK_1;
	pos base uring <anchor 242 0> mark @POS_3_0_MARK_0 <anchor 378 766> mark @POS_3_0_MARK_1;
	pos base utilde <anchor 242 0> mark @POS_3_0_MARK_0 <anchor 367 705> mark @POS_3_0_MARK_1;
	pos base w <anchor 334 0> mark @POS_3_0_MARK_0 <anchor 422 496> mark @POS_3_0_MARK_1;
	pos base wacute <anchor 334 0> mark @POS_3_0_MARK_0 <anchor 467 749> mark @POS_3_0_MARK_1;
	pos base wcircumflex <anchor 334 0> mark @POS_3_0_MARK_0 <anchor 463 730> mark @POS_3_0_MARK_1;
	pos base wdieresis <anchor 334 0> mark @POS_3_0_MARK_0 <anchor 462 723> mark @POS_3_0_MARK_1;
	pos base wgrave <anchor 334 0> mark @POS_3_0_MARK_0 <anchor 467 749> mark @POS_3_0_MARK_1;
	pos base y <anchor 233 0> mark @POS_3_0_MARK_0 <anchor 321 496> mark @POS_3_0_MARK_1;
	pos base yacute <anchor 233 0> mark @POS_3_0_MARK_0 <anchor 366 749> mark @POS_3_0_MARK_1;
	pos base ycircumflex <anchor 233 0> mark @POS_3_0_MARK_0 <anchor 362 730> mark @POS_3_0_MARK_1;
	pos base ydieresis <anchor 233 0> mark @POS_3_0_MARK_0 <anchor 361 723> mark @POS_3_0_MARK_1;
	pos base ygrave <anchor 233 0> mark @POS_3_0_MARK_0 <anchor 366 749> mark @POS_3_0_MARK_1;
	pos base uni1EF9 <anchor 233 0> mark @POS_3_0_MARK_0 <anchor 358 705> mark @POS_3_0_MARK_1;
	pos base z <anchor 190 0> mark @POS_3_0_MARK_0 <anchor 278 496> mark @POS_3_0_MARK_1;
	pos base zacute <anchor 190 0> mark @POS_3_0_MARK_0 <anchor 323 749> mark @POS_3_0_MARK_1;
	pos base zcaron <anchor 190 0> mark @POS_3_0_MARK_0 <anchor 319 730> mark @POS_3_0_MARK_1;
	pos base zdotaccent <anchor 190 0> mark @POS_3_0_MARK_0 <anchor 318 723> mark @POS_3_0_MARK_1;
} POS_3;
lookup POS_4 {
	markClass uni0328 <anchor 159 0> @POS_4_0_MARK_0;
	markClass uni0328.case <anchor 159 0> @POS_4_0_MARK_0;
	pos base A <anchor 608 0> mark @POS_4_0_MARK_0;
	pos base Aacute <anchor 608 0> mark @POS_4_0_MARK_0;
	pos base Abreve <anchor 608 0> mark @POS_4_0_MARK_0;
	pos base uni01CD <anchor 608 0> mark @POS_4_0_MARK_0;
	pos base Acircumflex <anchor 608 0> mark @POS_4_0_MARK_0;
	pos base Adieresis <anchor 608 0> mark @POS_4_0_MARK_0;
	pos base Agrave <anchor 608 0> mark @POS_4_0_MARK_0;
	pos base Amacron <anchor 608 0> mark @POS_4_0_MARK_0;
	pos base Aogonek <anchor 608 0> mark @POS_4_0_MARK_0;
	pos base Aring <anchor 608 0> mark @POS_4_0_MARK_0;
	pos base Atilde <anchor 608 0> mark @POS_4_0_MARK_0;
	pos base E <anchor 444 0> mark @POS_4_0_MARK_0;
	pos base Eacute <anchor 444 0> mark @POS_4_0_MARK_0;
	pos base Ebreve <anchor 444 0> mark @POS_4_0_MARK_0;
	pos base Ecaron <anchor 444 0> mark @POS_4_0_MARK_0;
	pos base Ecircumflex <anchor 444 0> mark @POS_4_0_MARK_0;
	pos base Edieresis <anchor 444 0> mark @POS_4_0_MARK_0;
	pos base Edotaccent <anchor 444 0> mark @POS_4_0_MARK_0;
	pos base Egrave <anchor 444 0> mark @POS_4_0_MARK_0;
	pos base Emacron <anchor 444 0> mark @POS_4_0_MARK_0;
	pos base Eogonek <anchor 444 0> mark @POS_4_0_MARK_0;
	pos base uni1EBC <anchor 444 0> mark @POS_4_0_MARK_0;
	pos base I <anchor 129 0> mark @POS_4_0_MARK_0;
	pos base IJ <anchor 129 0> mark @POS_4_0_MARK_0;
	pos base Iacute <anchor 129 0> mark @POS_4_0_MARK_0;
	pos base Ibreve <anchor 129 0> mark @POS_4_0_MARK_0;
	pos base Icircumflex <anchor 129 0> mark @POS_4_0_MARK_0;
	pos base Idieresis <anchor 129 0> mark @POS_4_0_MARK_0;
	pos base Idotaccent <anchor 129 0> mark @POS_4_0_MARK_0;
	pos base Igrave <anchor 129 0> mark @POS_4_0_MARK_0;
	pos base Imacron <anchor 129 0> mark @POS_4_0_MARK_0;
	pos base Iogonek <anchor 129 0> mark @POS_4_0_MARK_0;
	pos base Itilde <anchor 129 0> mark @POS_4_0_MARK_0;
	pos base K <anchor 129 0> mark @POS_4_0_MARK_0;
	pos base uni0136 <anchor 129 0> mark @POS_4_0_MARK_0;
	pos base O <anchor 430 10> mark @POS_4_0_MARK_0;
	pos base Oacute <anchor 430 10> mark @POS_4_0_MARK_0;
	pos base Obreve <anchor 430 10> mark @POS_4_0_MARK_0;
	pos base Ocircumflex <anchor 430 10> mark @POS_4_0_MARK_0;
	pos base Odieresis <anchor 430 10> mark @POS_4_0_MARK_0;
	pos base Ograve <anchor 430 10> mark @POS_4_0_MARK_0;
	pos base Ohungarumlaut <anchor 430 10> mark @POS_4_0_MARK_0;
	pos base Omacron <anchor 430 10> mark @POS_4_0_MARK_0;
	pos base Otilde <anchor 430 10> mark @POS_4_0_MARK_0;
	pos base U <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Uacute <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Ubreve <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Ucircumflex <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Udieresis <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Ugrave <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Uhungarumlaut <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Umacron <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Uogonek <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Uring <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base Utilde <anchor 403 10> mark @POS_4_0_MARK_0;
	pos base a <anchor 490 0> mark @POS_4_0_MARK_0;
	pos base aacute <anchor 490 0> mark @POS_4_0_MARK_0;
	pos base abreve <anchor 490 0> mark @POS_4_0_MARK_0;
	pos base uni01CE <anchor 490 0> mark @POS_4_0_MARK_0;
	pos base acircumflex <anchor 490 0> mark @POS_4_0_MARK_0;
	pos base adieresis <anchor 490 0> mark @POS_4_0_MARK_0;
	pos base agrave <anchor 490 0> mark @POS_4_0_MARK_0;
	pos base amacron <anchor 490 0> mark @POS_4_0_MARK_0;
	pos base aogonek <anchor 490 0> mark @POS_4_0_MARK_0;
	pos base aring <anchor 490 0> mark @POS_4_0_MARK_0;
	pos base atilde <anchor 490 0> mark @POS_4_0_MARK_0;
	pos base e <anchor 353 10> mark @POS_4_0_MARK_0;
	pos base eacute <anchor 353 10> mark @POS_4_0_MARK_0;
	pos base ebreve <anchor 353 10> mark @POS_4_0_MARK_0;
	pos base ecaron <anchor 353 10> mark @POS_4_0_MARK_0;
	pos base ecircumflex <anchor 353 10> mark @POS_4_0_MARK_0;
	pos base edieresis <anchor 353 10> mark @POS_4_0_MARK_0;
	pos base edotaccent <anchor 353 10> mark @POS_4_0_MARK_0;
	pos base egrave <anchor 353 10> mark @POS_4_0_MARK_0;
	pos base emacron <anchor 353 10> mark @POS_4_0_MARK_0;
	pos base eogonek <anchor 353 10> mark @POS_4_0_MARK_0;
	pos base uni1EBD <anchor 353 10> mark @POS_4_0_MARK_0;
	pos base dotlessi <anchor 120 0> mark @POS_4_0_MARK_0;
	pos base iacute <anchor 120 0> mark @POS_4_0_MARK_0;
	pos base ibreve <anchor 120 0> mark @POS_4_0_MARK_0;
	pos base icircumflex <anchor 120 0> mark @POS_4_0_MARK_0;
	pos base idieresis <anchor 120 0> mark @POS_4_0_MARK_0;
	pos base i.loclTRK <anchor 120 0> mark @POS_4_0_MARK_0;
	pos base igrave <anchor 120 0> mark @POS_4_0_MARK_0;
	pos base imacron <anchor 120 0> mark @POS_4_0_MARK_0;
	pos base iogonek <anchor 120 0> mark @POS_4_0_MARK_0;
	pos base itilde <anchor 120 0> mark @POS_4_0_MARK_0;
	pos base o <anchor 365 10> mark @POS_4_0_MARK_0;
	pos base oacute <anchor 365 10> mark @POS_4_0_MARK_0;
	pos base obreve <anchor 365 10> mark @POS_4_0_MARK_0;
	pos base ocircumflex <anchor 365 10> mark @POS_4_0_MARK_0;
	pos base odieresis <anchor 365 10> mark @POS_4_0_MARK_0;
	pos base ograve <anchor 365 10> mark @POS_4_0_MARK_0;
	pos base ohungarumlaut <anchor 365 10> mark @POS_4_0_MARK_0;
	pos base omacron <anchor 365 10> mark @POS_4_0_MARK_0;
	pos base otilde <anchor 365 10> mark @POS_4_0_MARK_0;
	pos base u <anchor 470 0> mark @POS_4_0_MARK_0;
	pos base uacute <anchor 470 0> mark @POS_4_0_MARK_0;
	pos base ubreve <anchor 470 0> mark @POS_4_0_MARK_0;
	pos base ucircumflex <anchor 470 0> mark @POS_4_0_MARK_0;
	pos base udieresis <anchor 470 0> mark @POS_4_0_MARK_0;
	pos base ugrave <anchor 470 0> mark @POS_4_0_MARK_0;
	pos base uhungarumlaut <anchor 470 0> mark @POS_4_0_MARK_0;
	pos base umacron <anchor 470 0> mark @POS_4_0_MARK_0;
	pos base uogonek <anchor 470 0> mark @POS_4_0_MARK_0;
	pos base uring <anchor 470 0> mark @POS_4_0_MARK_0;
	pos base utilde <anchor 470 0> mark @POS_4_0_MARK_0;
} POS_4;
lookup POS_5 {
	markClass uni030C.alt <anchor 132 992> @POS_5_0_MARK_0;
	markClass uni030C.alt.case <anchor 83 700> @POS_5_0_MARK_0;
	pos base L <anchor 340 700> mark @POS_5_0_MARK_0;
	pos base Lacute <anchor 340 700> mark @POS_5_0_MARK_0;
	pos base Lcaron <anchor 340 700> mark @POS_5_0_MARK_0;
	pos base uni013B <anchor 340 700> mark @POS_5_0_MARK_0;
	pos base O <anchor 854 700> mark @POS_5_0_MARK_0;
	pos base Oacute <anchor 854 700> mark @POS_5_0_MARK_0;
	pos base Obreve <anchor 854 700> mark @POS_5_0_MARK_0;
	pos base Ocircumflex <anchor 854 700> mark @POS_5_0_MARK_0;
	pos base Odieresis <anchor 854 700> mark @POS_5_0_MARK_0;
	pos base Ograve <anchor 854 700> mark @POS_5_0_MARK_0;
	pos base Ohungarumlaut <anchor 854 700> mark @POS_5_0_MARK_0;
	pos base Omacron <anchor 854 700> mark @POS_5_0_MARK_0;
	pos base Otilde <anchor 854 700> mark @POS_5_0_MARK_0;
	pos base U <anchor 732 700> mark @POS_5_0_MARK_0;
	pos base Uacute <anchor 732 700> mark @POS_5_0_MARK_0;
	pos base Ubreve <anchor 732 700> mark @POS_5_0_MARK_0;
	pos base Ucircumflex <anchor 732 700> mark @POS_5_0_MARK_0;
	pos base Udieresis <anchor 732 700> mark @POS_5_0_MARK_0;
	pos base Ugrave <anchor 732 700> mark @POS_5_0_MARK_0;
	pos base Uhungarumlaut <anchor 732 700> mark @POS_5_0_MARK_0;
	pos base Umacron <anchor 732 700> mark @POS_5_0_MARK_0;
	pos base Uogonek <anchor 732 700> mark @POS_5_0_MARK_0;
	pos base Uring <anchor 732 700> mark @POS_5_0_MARK_0;
	pos base Utilde <anchor 732 700> mark @POS_5_0_MARK_0;
	pos base d <anchor 728 992> mark @POS_5_0_MARK_0;
	pos base dcaron <anchor 728 992> mark @POS_5_0_MARK_0;
	pos base l <anchor 338 992> mark @POS_5_0_MARK_0;
	pos base lacute <anchor 338 992> mark @POS_5_0_MARK_0;
	pos base lcaron <anchor 338 992> mark @POS_5_0_MARK_0;
	pos base uni013C <anchor 338 992> mark @POS_5_0_MARK_0;
	pos base o <anchor 611 496> mark @POS_5_0_MARK_0;
	pos base oacute <anchor 611 496> mark @POS_5_0_MARK_0;
	pos base obreve <anchor 611 496> mark @POS_5_0_MARK_0;
	pos base ocircumflex <anchor 611 496> mark @POS_5_0_MARK_0;
	pos base odieresis <anchor 611 496> mark @POS_5_0_MARK_0;
	pos base ograve <anchor 611 496> mark @POS_5_0_MARK_0;
	pos base ohungarumlaut <anchor 611 496> mark @POS_5_0_MARK_0;
	pos base omacron <anchor 611 496> mark @POS_5_0_MARK_0;
	pos base otilde <anchor 611 496> mark @POS_5_0_MARK_0;
	pos base t <anchor 366 992> mark @POS_5_0_MARK_0;
	pos base tcaron <anchor 366 992> mark @POS_5_0_MARK_0;
	pos base uni0163 <anchor 366 992> mark @POS_5_0_MARK_0;
	pos base uni021B <anchor 366 992> mark @POS_5_0_MARK_0;
	pos base u <anchor 600 496> mark @POS_5_0_MARK_0;
	pos base uacute <anchor 600 496> mark @POS_5_0_MARK_0;
	pos base ubreve <anchor 600 496> mark @POS_5_0_MARK_0;
	pos base ucircumflex <anchor 600 496> mark @POS_5_0_MARK_0;
	pos base udieresis <anchor 600 496> mark @POS_5_0_MARK_0;
	pos base ugrave <anchor 600 496> mark @POS_5_0_MARK_0;
	pos base uhungarumlaut <anchor 600 496> mark @POS_5_0_MARK_0;
	pos base umacron <anchor 600 496> mark @POS_5_0_MARK_0;
	pos base uogonek <anchor 600 496> mark @POS_5_0_MARK_0;
	pos base uring <anchor 600 496> mark @POS_5_0_MARK_0;
	pos base utilde <anchor 600 496> mark @POS_5_0_MARK_0;
} POS_5;
script latn;
language dflt;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language AZE;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language CAT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language CRT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language KAZ;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language MOL;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language NLD;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language ROM;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language TAT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language TRK;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
";
tag = mark;
},
{
code = "script DFLT;
language dflt;
lookup POS_6 {
	lookupflag UseMarkFilteringSet [uni0326 uni0327 uni0327.case];
	markClass uni0326 <anchor 12 0> @POS_6_0_MARK_0;
	markClass uni0327 <anchor 41 0> @POS_6_0_MARK_0;
	markClass uni0327.case <anchor 38 0> @POS_6_0_MARK_0;
	pos mark uni0326 <anchor -34 -256> mark @POS_6_0_MARK_0;
	pos mark uni0327 <anchor -6 -261> mark @POS_6_0_MARK_0;
	pos mark uni0327.case <anchor -9 -261> mark @POS_6_0_MARK_0;
} POS_6;
lookup POS_7 {
	lookupflag UseMarkFilteringSet [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312 uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0308.narrow];
	markClass uni0308 <anchor 216 496> @POS_7_0_MARK_0;
	markClass uni0307 <anchor 116 496> @POS_7_0_MARK_0;
	markClass gravecomb <anchor 153 496> @POS_7_0_MARK_0;
	markClass acutecomb <anchor 153 496> @POS_7_0_MARK_0;
	markClass uni030B <anchor 176 496> @POS_7_0_MARK_0;
	markClass uni0302 <anchor 186 496> @POS_7_0_MARK_0;
	markClass uni030C <anchor 186 496> @POS_7_0_MARK_0;
	markClass uni0306 <anchor 193 496> @POS_7_0_MARK_0;
	markClass uni030A <anchor 156 496> @POS_7_0_MARK_0;
	markClass tildecomb <anchor 208 496> @POS_7_0_MARK_0;
	markClass uni0304 <anchor 232 496> @POS_7_0_MARK_0;
	markClass uni0312 <anchor 102 496> @POS_7_0_MARK_0;
	markClass uni0308.case <anchor 252 700> @POS_7_0_MARK_0;
	markClass uni0307.case <anchor 152 700> @POS_7_0_MARK_0;
	markClass gravecomb.case <anchor 189 700> @POS_7_0_MARK_0;
	markClass acutecomb.case <anchor 189 700> @POS_7_0_MARK_0;
	markClass uni030B.case <anchor 242 700> @POS_7_0_MARK_0;
	markClass uni0302.case <anchor 221 700> @POS_7_0_MARK_0;
	markClass uni030C.case <anchor 222 700> @POS_7_0_MARK_0;
	markClass uni0306.case <anchor 229 700> @POS_7_0_MARK_0;
	markClass uni030A.case <anchor 191 700> @POS_7_0_MARK_0;
	markClass tildecomb.case <anchor 244 700> @POS_7_0_MARK_0;
	markClass uni0304.case <anchor 261 700> @POS_7_0_MARK_0;
	markClass uni0308.narrow <anchor 226 496> @POS_7_0_MARK_0;
	pos mark uni0308 <anchor 256 723> mark @POS_7_0_MARK_0;
	pos mark uni0307 <anchor 156 723> mark @POS_7_0_MARK_0;
	pos mark gravecomb <anchor 198 749> mark @POS_7_0_MARK_0;
	pos mark acutecomb <anchor 198 749> mark @POS_7_0_MARK_0;
	pos mark uni030B <anchor 214 711> mark @POS_7_0_MARK_0;
	pos mark uni0302 <anchor 227 730> mark @POS_7_0_MARK_0;
	pos mark uni030C <anchor 227 730> mark @POS_7_0_MARK_0;
	pos mark uni0306 <anchor 233 722> mark @POS_7_0_MARK_0;
	pos mark uni030A <anchor 203 766> mark @POS_7_0_MARK_0;
	pos mark tildecomb <anchor 245 705> mark @POS_7_0_MARK_0;
	pos mark uni0304 <anchor 260 693> mark @POS_7_0_MARK_0;
	pos mark uni0312 <anchor 156 804> mark @POS_7_0_MARK_0;
	pos mark uni0308.case <anchor 289 912> mark @POS_7_0_MARK_0;
	pos mark uni0307.case <anchor 189 912> mark @POS_7_0_MARK_0;
	pos mark gravecomb.case <anchor 232 942> mark @POS_7_0_MARK_0;
	pos mark acutecomb.case <anchor 232 942> mark @POS_7_0_MARK_0;
	pos mark uni030B.case <anchor 280 915> mark @POS_7_0_MARK_0;
	pos mark uni0302.case <anchor 258 911> mark @POS_7_0_MARK_0;
	pos mark uni030C.case <anchor 259 910> mark @POS_7_0_MARK_0;
	pos mark uni0306.case <anchor 266 909> mark @POS_7_0_MARK_0;
	pos mark uni030A.case <anchor 239 971> mark @POS_7_0_MARK_0;
	pos mark tildecomb.case <anchor 273 868> mark @POS_7_0_MARK_0;
	pos mark uni0304.case <anchor 290 867> mark @POS_7_0_MARK_0;
	pos mark uni0308.narrow <anchor 266 723> mark @POS_7_0_MARK_0;
} POS_7;
script latn;
language dflt;
lookup POS_6;
lookup POS_7;
language AZE;
lookup POS_6;
lookup POS_7;
language CAT;
lookup POS_6;
lookup POS_7;
language CRT;
lookup POS_6;
lookup POS_7;
language KAZ;
lookup POS_6;
lookup POS_7;
language MOL;
lookup POS_6;
lookup POS_7;
language NLD;
lookup POS_6;
lookup POS_7;
language ROM;
lookup POS_6;
lookup POS_7;
language TAT;
lookup POS_6;
lookup POS_7;
language TRK;
lookup POS_6;
lookup POS_7;
";
tag = mkmk;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 992;
},
{
name = typoDescender;
value = -310;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 992;
},
{
name = winDescent;
value = 310;
},
{
name = hheaAscender;
value = 992;
},
{
name = hheaDescender;
value = -310;
},
{
name = strikeoutPosition;
value = 297;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
200
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 1
INSTCTRL[ ]	/* SetInstrExecControl */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
WCVTF[ ]	/* WriteCVTInFUnits */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 6 values pushed */
0 0 42 0 4 0
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
NPUSHB[ ]	/* 10 values pushed */
55 4 47 4 31 8 21 5 4 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
NPUSHB[ ]	/* 10 values pushed */
59 2 51 2 39 6 26 3 4 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 11
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 6 values pushed */
3584 3072 2048 1408 4 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 15
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 6 values pushed */
64 64 64 64 4 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
36 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
40 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 1 value pushed */
2048
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
39 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 3 values pushed */
2176 1 1088
GETINFO[ ]	/* GetInfo */
MUL[ ]	/* Multiply */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
57 2 49 2 33 6 23 3 4 14
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 1 value pushed */
511
SCANCTRL[ ]	/* ScanConversionControl */
PUSHB[ ]	/* 1 value pushed */
4
SCANTYPE[ ]	/* ScanType */
PUSHB[ ]	/* 2 values pushed */
2 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
5 100 6 0
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */
0
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
RCVT[ ]	/* ReadCVT */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
14
LTEQ[ ]	/* LessThenOrEqual */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
6
GTEQ[ ]	/* GreaterThanOrEqual */
AND[ ]	/* LogicalAnd */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
52
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
40
EIF[ ]	/* EndIf */
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
2
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 4 values pushed */
3 20 21 0
WS[ ]	/* WriteStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
19
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
2 20
RS[ ]	/* ReadStore */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
37 3
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
EQ[ ]	/* Equal */
JROT[ ]	/* JumpRelativeOnTrue */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
4
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 3 values pushed */
2 2 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
33
NEG[ ]	/* Negate */
JMPR[ ]	/* Jump */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 3 values pushed */
14 21 1
WS[ ]	/* WriteStore */
JMPR[ ]	/* Jump */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
19 1 19
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 3 values pushed */
22 1 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
4
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
21
RS[ ]	/* ReadStore */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
AND[ ]	/* LogicalAnd */
PUSHB[ ]	/* 3 values pushed */
40 1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
EIF[ ]	/* EndIf */
GT[ ]	/* GreaterThan */
OR[ ]	/* LogicalOr */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
ROLL[ ]	/* RollTopThreeStack */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
80
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
56
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
56
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
48
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
54
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
54
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
30
MPPEM[ ]	/* MeasurePixelPerEm */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 1 value pushed */
4096
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1280
DIV[ ]	/* Divide */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ABS[ ]	/* Absolute */
SUB[ ]	/* Subtract */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
7
RS[ ]	/* ReadStore */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
7
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
6
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 2 values pushed */
7 98
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
5
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
48 5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
ADD[ ]	/* Add */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
SUB[ ]	/* Subtract */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
EIF[ ]	/* EndIf */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 3 values pushed */
0 2 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
7
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
9 14 0
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
11
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
12
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
13
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
36
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
14
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 4 values pushed */
13 12 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
15
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 2
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
100
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
16
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
17
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHW[ ]	/* 1 value pushed */
1024
MUL[ ]	/* Multiply */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
18
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
13
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
19
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
MPPEM[ ]	/* MeasurePixelPerEm */
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
19
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 18
RS[ ]	/* ReadStore */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
18 18
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
17
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
15 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
16 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
0 0
SZP0[ ]	/* SetZonePointer0 */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
0
MIAP[0]	/* MoveIndirectAbsPt */
PUSHB[ ]	/* 3 values pushed */
1 1 1
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 8 values pushed */
24 24 1 0 17 0 19 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
20
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
27
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
28
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
29
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
30
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
31
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
43
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
6
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP1[ ]	/* DeltaExceptionP1 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
44
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
22
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP2[ ]	/* DeltaExceptionP2 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
38
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP3[ ]	/* DeltaExceptionP3 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 6 values pushed */
24 24 1 0 17 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
33
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
34
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
35
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
36
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
37
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
38
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
39
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
40
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
41
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
42
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
46
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
24
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
46
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
48
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
47
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
49
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
50
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
51
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
52
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
SHC[1]	/* ShiftContourByLastPt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
53
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 5 values pushed */
0 0 0 0 0
WCVTP[ ]	/* WriteCVTInPixels */
MIAP[0]	/* MoveIndirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
52 1
SZP2[ ]	/* SetZonePointer2 */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
54
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55
FDEF[ ]	/* FunctionDefinition */
MDAP[0]	/* MoveDirectAbsPt */
SLOOP[ ]	/* SetLoopVariable */
ALIGNRP[ ]	/* AlignRelativePt */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 0
SZPS[ ]	/* SetZonePointerS */
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
56 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
NEG[ ]	/* Negate */
ROLL[ ]	/* RollTopThreeStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
60
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
61
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
62
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
0
EQ[ ]	/* Equal */
IF[ ]	/* If */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
63
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
64
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
65
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
66
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
67
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
68
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
69
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
70
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
10 4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
71
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
72
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
73
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
74
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
75
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 1
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
PUSHB[ ]	/* 1 value pushed */
55
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
76
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
77
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
RCVT[ ]	/* ReadCVT */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
78
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
77
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
79
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
80
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
81
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
82
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
83
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
84
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
85
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
86
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
87
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
88
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
89
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
90
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
91
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
92
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
93
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
94
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
95
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
96
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
97
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
98
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
99
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
100
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
101
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
102
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
103
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
104
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
105
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
106
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
107
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
108
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
109
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
110
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
111
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
112
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
113
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
114
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
115
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
116
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
117
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
118
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
119
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
120
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
121
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
122
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
123
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
124
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
125
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
126
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
127
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
128
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
129
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
130
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
131
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
132
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
133
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
134
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
135
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
136
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
137
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
138
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
139
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
11 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
6
ELSE[ ]	/* Else */
PUSHB[ ]	/* 3 values pushed */
4 2 3
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
8
NEG[ ]	/* Negate */
PUSHB[ ]	/* 1 value pushed */
3
DEPTH[ ]	/* GetDepthStack */
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    24,
    24,
    24,
    24,
    712,
    0,
    \"-220\",
    712,
    0,
    \"-220\",
    107,
    107,
    91,
    91,
    700,
    0,
    700,
    496,
    0,
    \"-220\",
    712,
    \"-12\",
    723,
    508,
    \"-12\",
    \"-220\",
    72,
    72,
    63,
    63,
    353,
    0,
    358,
    \"-5\",
    72,
    72,
    63,
    63,
    700,
    347,
    705,
    342
)";
}
);
id = m01;
metricValues = (
{
pos = 992;
},
{
pos = 700;
},
{
pos = 496;
},
{
},
{
pos = -310;
},
{
pos = 10;
}
);
name = Medium;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(22,0,l),
(423,0,l),
(547,700,l),
(146,700,l)
);
},
{
closed = 1;
nodes = (
(102,57,l),
(206,643,l),
(467,643,l),
(363,57,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
4 1 1 0 2 3 1 2 103 0 3 0 0 3 87 0 3 3 0 95 0 0 3 0 79 0 0 7 6 5 4 0 3 0 3 17 5 6 23
CALL[ ]	/* CallFunction */";
};
width = 533;
}
);
note = .notdef;
},
{
glyphname = CR;
layers = (
{
layerId = m01;
width = 590;
}
);
note = CR;
unicode = 13;
},
{
glyphname = space;
layers = (
{
layerId = m01;
width = 262;
}
);
note = space;
unicode = 32;
},
{
glyphname = A;
kernLeft = A;
kernRight = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,0);
},
{
name = ogonek;
pos = (608,0);
},
{
name = top;
pos = (417,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(90,0,l),
(181,171,l),
(466,171,l),
(497,0,l),
(608,0,l),
(475,700,l),
(358,700,l),
(-22,0,l)
);
},
{
closed = 1;
nodes = (
(395,578,l),
(452,253,l),
(224,253,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
9 1 4 0 1 76 5 1 4 0 2 1 4 2 104 0 0 0 33 77 3 1 1 1 34 1 78 8 8 8 10 8 10 17 17 17 16 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 673;
}
);
note = A;
unicode = 65;
},
{
glyphname = Aacute;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,0);
},
{
name = ogonek;
pos = (608,0);
},
{
name = top;
pos = (460,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (228,0);
ref = acutecomb.case;
}
);
width = 673;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Abreve;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,0);
},
{
name = ogonek;
pos = (608,0);
},
{
name = top;
pos = (454,909);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (188,0);
ref = uni0306.case;
}
);
width = 673;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = uni01CD;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,0);
},
{
name = ogonek;
pos = (608,0);
},
{
name = top;
pos = (453,910);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (195,0);
ref = uni030C.case;
}
);
width = 673;
}
);
note = uni01CD;
unicode = 461;
},
{
glyphname = Acircumflex;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,0);
},
{
name = ogonek;
pos = (608,0);
},
{
name = top;
pos = (454,911);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (196,0);
ref = uni0302.case;
}
);
width = 673;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Adieresis;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,0);
},
{
name = ogonek;
pos = (608,0);
},
{
name = top;
pos = (454,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (165,0);
ref = uni0308.case;
}
);
width = 673;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Agrave;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,0);
},
{
name = ogonek;
pos = (608,0);
},
{
name = top;
pos = (460,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (228,0);
ref = gravecomb.case;
}
);
width = 673;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Amacron;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,0);
},
{
name = ogonek;
pos = (608,0);
},
{
name = top;
pos = (446,867);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (156,0);
ref = uni0304.case;
}
);
width = 673;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = Aogonek;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,0);
},
{
name = ogonek;
pos = (608,0);
},
{
name = top;
pos = (417,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(90,0,l),
(181,171,l),
(466,171,l),
(495,10,l),
(436,-19,o),
(385,-86,o),
(385,-126,qs),
(385,-165,o),
(446,-206,o),
(495,-206,qs),
(535,-206,o),
(579,-193,q),
(590,-127,l),
(551,-142,o),
(519,-142,qs),
(496,-142,o),
(470,-122,o),
(470,-105,qs),
(470,-83,o),
(506,-46,o),
(549,-27,qs),
(608,0,l),
(475,700,l),
(358,700,l),
(-22,0,l)
);
},
{
closed = 1;
nodes = (
(395,578,l),
(452,253,l),
(224,253,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
26 1 5 0 20 1 4 3 11 1 1 4 3 76 2 1 4 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 5 0 3 4 5 3 104 0 0 0 33 77 0 4 4 34 77 0 1 1 2 97 0 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
6 1 5 0 3 4 5 3 104 0 1 0 2 1 2 101 0 0 0 33 77 0 4 4 34 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
25 25 25 27 25 27 17 22 35 39 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 673;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = Aring;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,0);
},
{
name = ogonek;
pos = (608,0);
},
{
name = top;
pos = (465,971);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (226,0);
ref = uni030A.case;
}
);
width = 673;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = Atilde;
kernLeft = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (293,0);
},
{
name = ogonek;
pos = (608,0);
},
{
name = top;
pos = (446,868);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (173,0);
ref = tildecomb.case;
}
);
width = 673;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = AE;
kernLeft = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (417,0);
},
{
name = top;
pos = (701,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,0,l),
(203,149,l),
(461,149,l),
(435,0,l),
(821,0,l),
(836,84,l),
(557,84,l),
(597,313,l),
(847,313,l),
(861,396,l),
(610,396,l),
(650,616,l),
(930,616,l),
(945,700,l),
(491,700,l),
(-22,0,l)
);
},
{
closed = 1;
nodes = (
(544,617,l),
(476,232,l),
(262,232,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
17 1 1 0 1 76 0 2 0 3 8 2 3 103 9 1 8 0 6 4 8 6 103 0 1 1 0 95 0 0 0 33 77 0 4 4 5 95 7 1 5 5 34 5 78 16 16 16 18 16 18 17 17 17 17 17 17 17 16 10 8 30
CALL[ ]	/* CallFunction */";
};
width = 921;
}
);
note = AE;
unicode = 198;
},
{
glyphname = AEacute;
kernLeft = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (417,0);
},
{
name = top;
pos = (744,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = AE;
},
{
alignment = -1;
pos = (512,0);
ref = acutecomb.case;
}
);
width = 921;
}
);
note = AEacute;
unicode = 508;
},
{
glyphname = B;
kernRight = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(300,0,ls),
(378,0,o),
(499,57,o),
(565,158,o),
(565,221,qs),
(565,273,o),
(506,358,o),
(456,376,q),
(519,397,o),
(591,491,o),
(591,548,qs),
(591,615,o),
(493,700,o),
(400,700,qs),
(147,700,l),
(23,0,l)
);
},
{
closed = 1;
nodes = (
(145,90,l),
(186,325,l),
(337,325,ls),
(397,325,o),
(458,272,o),
(458,224,qs),
(458,160,o),
(377,90,o),
(298,90,qs)
);
},
{
closed = 1;
nodes = (
(202,413,l),
(236,611,l),
(372,611,ls),
(428,611,o),
(480,564,o),
(480,524,qs),
(480,473,o),
(409,413,o),
(340,413,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
7 1 2 5 1 76 7 1 5 0 2 3 5 2 103 0 4 4 0 95 0 0 0 33 77 6 1 3 3 1 95 0 1 1 34 1 78 25 25 16 16 25 33 25 32 31 29 16 24 16 23 37 43 32 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = B;
unicode = 66;
},
{
glyphname = C;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (317,0);
},
{
name = top;
pos = (441,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(457,-12,o),
(634,105,o),
(673,211,q),
(555,211,l),
(530,150,o),
(427,83,o),
(352,83,qs),
(263,83,o),
(163,186,o),
(163,279,qs),
(163,365,o),
(230,521,o),
(358,617,o),
(444,617,qs),
(519,617,o),
(601,547,o),
(603,484,q),
(721,484,l),
(719,592,o),
(583,712,o),
(460,712,qs),
(344,712,o),
(158,594,o),
(53,391,o),
(53,269,qs),
(53,195,o),
(111,68,o),
(237,-12,o),
(335,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 39 77 0 3 3 5 97 6 1 5 5 40 5 78 0 0 0 28 0 27 18 37 34 18 38 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 721;
}
);
note = C;
unicode = 67;
},
{
glyphname = Cacute;
kernLeft = C;
kernRight = Cacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (317,0);
},
{
name = top;
pos = (484,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (252,0);
ref = acutecomb.case;
}
);
width = 721;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = Ccaron;
kernLeft = C;
kernRight = Cacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (317,0);
},
{
name = top;
pos = (477,910);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (219,0);
ref = uni030C.case;
}
);
width = 721;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = Ccedilla;
kernLeft = C;
kernRight = Cacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (271,-261);
},
{
name = top;
pos = (441,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(309,-261,ls),
(369,-261,o),
(454,-194,o),
(454,-137,qs),
(454,-97,o),
(392,-55,o),
(341,-56,q),
(349,-12,l),
(466,-8,o),
(635,108,o),
(673,211,q),
(555,211,l),
(530,150,o),
(427,83,o),
(352,83,qs),
(263,83,o),
(163,186,o),
(163,279,qs),
(163,365,o),
(230,521,o),
(358,617,o),
(444,617,qs),
(519,617,o),
(601,547,o),
(603,484,q),
(721,484,l),
(719,592,o),
(583,712,o),
(460,712,qs),
(344,712,o),
(158,594,o),
(53,391,o),
(53,269,qs),
(53,203,o),
(100,85,o),
(203,2,o),
(281,-8,q),
(262,-115,l),
(317,-115,ls),
(372,-115,o),
(372,-148,qs),
(371,-172,o),
(334,-197,o),
(303,-197,qs),
(201,-197,l),
(190,-261,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
8 1 7 5 1 76 0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 99 0 4 4 2 97 0 2 2 39 77 0 5 5 7 97 0 7 7 40 7 78 45 43 17 18 18 37 34 18 40 35 32 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 721;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = Cdotaccent;
kernLeft = C;
kernRight = Cacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (317,0);
},
{
name = top;
pos = (478,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (289,0);
ref = uni0307.case;
}
);
width = 721;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = D;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (306,0);
},
{
name = top;
pos = (430,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(146,700,l),
(23,0,l),
(250,0,ls),
(364,0,o),
(560,93,o),
(680,280,o),
(680,416,qs),
(680,553,o),
(528,700,o),
(373,700,qs)
);
},
{
closed = 1;
nodes = (
(145,90,l),
(237,611,l),
(354,611,ls),
(466,611,o),
(570,510,o),
(570,408,qs),
(570,320,o),
(506,177,o),
(368,90,o),
(262,90,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 1 95 4 1 1 1 33 77 5 1 3 3 0 95 0 0 0 34 0 78 10 10 0 0 10 19 10 18 17 15 0 9 0 8 37 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 699;
}
);
note = D;
unicode = 68;
},
{
glyphname = Dcaron;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (306,0);
},
{
name = top;
pos = (466,910);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = D;
},
{
alignment = -1;
pos = (208,0);
ref = uni030C.case;
}
);
width = 699;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = Dcroat;
kernRight = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(34,0,l),
(261,0,ls),
(390,0,o),
(488,53,qs),
(585,107,o),
(690,294,o),
(690,416,qs),
(690,553,o),
(538,700,o),
(384,700,qs),
(157,700,l),
(104,396,l),
(23,396,l),
(7,303,l),
(87,303,l)
);
},
{
closed = 1;
nodes = (
(156,90,l),
(193,303,l),
(382,303,l),
(398,396,l),
(210,396,l),
(248,611,l),
(365,611,ls),
(477,611,o),
(581,510,o),
(581,408,qs),
(581,311,o),
(545,240,qs),
(508,168,o),
(369,90,o),
(273,90,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
5 1 0 6 8 2 3 7 0 3 103 0 4 4 1 95 0 1 1 33 77 9 1 7 7 2 95 0 2 2 34 2 78 15 15 0 0 15 29 15 28 27 26 25 24 23 21 0 14 0 14 38 33 17 10 8 25
CALL[ ]	/* CallFunction */";
};
width = 710;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = Eth;
kernRight = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(34,0,l),
(261,0,ls),
(390,0,o),
(488,53,qs),
(585,107,o),
(690,294,o),
(690,416,qs),
(690,553,o),
(538,700,o),
(384,700,qs),
(157,700,l),
(104,396,l),
(23,396,l),
(7,303,l),
(87,303,l)
);
},
{
closed = 1;
nodes = (
(156,90,l),
(193,303,l),
(382,303,l),
(398,396,l),
(210,396,l),
(248,611,l),
(365,611,ls),
(477,611,o),
(581,510,o),
(581,408,qs),
(581,311,o),
(545,240,qs),
(508,168,o),
(369,90,o),
(273,90,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
5 1 0 6 8 2 3 7 0 3 103 0 4 4 1 95 0 1 1 33 77 9 1 7 7 2 95 0 2 2 34 2 78 15 15 0 0 15 29 15 28 27 26 25 24 23 21 0 14 0 14 38 33 17 10 8 25
CALL[ ]	/* CallFunction */";
};
width = 710;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = E;
kernRight = E;
layers = (
{
anchors = (
{
name = bottom;
pos = (228,0);
},
{
name = ogonek;
pos = (444,0);
},
{
name = top;
pos = (352,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,0,l),
(460,89,l),
(144,89,l),
(186,326,l),
(457,326,l),
(473,414,l),
(202,414,l),
(236,611,l),
(552,611,l),
(568,700,l),
(146,700,l),
(22,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 5 95 0 5 5 34 5 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 544;
}
);
note = E;
unicode = 69;
},
{
glyphname = Eacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (228,0);
},
{
name = ogonek;
pos = (444,0);
},
{
name = top;
pos = (395,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (163,0);
ref = acutecomb.case;
}
);
width = 544;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ebreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (228,0);
},
{
name = ogonek;
pos = (444,0);
},
{
name = top;
pos = (389,909);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (123,0);
ref = uni0306.case;
}
);
width = 544;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = Ecaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (228,0);
},
{
name = ogonek;
pos = (444,0);
},
{
name = top;
pos = (389,910);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (130,0);
ref = uni030C.case;
}
);
width = 544;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = Ecircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (228,0);
},
{
name = ogonek;
pos = (444,0);
},
{
name = top;
pos = (389,911);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (131,0);
ref = uni0302.case;
}
);
width = 544;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (228,0);
},
{
name = ogonek;
pos = (444,0);
},
{
name = top;
pos = (390,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (101,0);
ref = uni0308.case;
}
);
width = 544;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Edotaccent;
layers = (
{
anchors = (
{
name = bottom;
pos = (228,0);
},
{
name = ogonek;
pos = (444,0);
},
{
name = top;
pos = (390,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (201,0);
ref = uni0307.case;
}
);
width = 544;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = Egrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (228,0);
},
{
name = ogonek;
pos = (444,0);
},
{
name = top;
pos = (395,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (163,0);
ref = gravecomb.case;
}
);
width = 544;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Emacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (228,0);
},
{
name = ogonek;
pos = (444,0);
},
{
name = top;
pos = (382,867);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (92,0);
ref = uni0304.case;
}
);
width = 544;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = Eogonek;
layers = (
{
anchors = (
{
name = bottom;
pos = (228,0);
},
{
name = ogonek;
pos = (444,0);
},
{
name = top;
pos = (352,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(312,0,l),
(263,-28,o),
(221,-90,o),
(221,-126,qs),
(221,-165,o),
(282,-206,o),
(331,-206,qs),
(371,-206,o),
(415,-193,q),
(426,-127,l),
(387,-142,o),
(355,-142,qs),
(332,-142,o),
(306,-122,o),
(306,-105,qs),
(306,-83,o),
(342,-46,o),
(385,-27,qs),
(444,0,l),
(460,89,l),
(144,89,l),
(186,326,l),
(457,326,l),
(473,414,l),
(202,414,l),
(236,611,l),
(552,611,l),
(568,700,l),
(146,700,l),
(22,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
19 1 5 7 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 7 95 0 7 7 34 77 0 5 5 6 97 0 6 6 38 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 2 0 3 4 2 3 103 0 5 0 6 5 6 101 0 1 1 0 95 0 0 0 33 77 0 4 4 7 95 0 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
21 35 39 17 17 17 17 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 544;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = uni018E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(449,0,l),
(573,700,l),
(132,700,l),
(116,611,l),
(451,611,l),
(416,414,l),
(126,414,l),
(111,326,l),
(401,326,l),
(359,89,l),
(24,89,l),
(8,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 1 0 2 1 103 0 3 3 4 95 0 4 4 33 77 0 0 0 5 95 0 5 5 34 5 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = uni018E;
unicode = (398,477);
},
{
glyphname = uni1EBC;
layers = (
{
anchors = (
{
name = bottom;
pos = (228,0);
},
{
name = ogonek;
pos = (444,0);
},
{
name = top;
pos = (382,868);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (109,0);
ref = tildecomb.case;
}
);
width = 544;
}
);
note = uni1EBC;
unicode = 7868;
},
{
glyphname = uni018F;
kernLeft = uni018F;
kernRight = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,-12,o),
(631,109,o),
(734,313,o),
(734,434,qs),
(734,507,o),
(672,633,o),
(545,712,o),
(451,712,qs),
(380,712,o),
(241,662,o),
(122,557,o),
(87,477,q),
(205,477,l),
(236,542,o),
(361,616,o),
(436,616,qs),
(521,616,o),
(622,513,o),
(622,425,qs),
(622,398,o),
(619,382,q),
(68,382,l),
(48,314,o),
(48,256,qs),
(48,182,o),
(112,60,o),
(237,-12,o),
(324,-12,qs)
);
},
{
closed = 1;
nodes = (
(254,85,o),
(156,174,o),
(156,253,qs),
(156,270,o),
(160,300,q),
(607,300,l),
(594,244,o),
(523,146,o),
(410,85,o),
(338,85,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 2 1 0 1 2 0 128 0 0 0 5 6 0 5 103 0 1 1 3 97 0 3 3 39 77 8 1 6 6 4 97 7 1 4 4 40 4 78 28 28 0 0 28 37 28 36 32 31 0 27 0 26 35 18 36 21 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = uni018F;
unicode = 399;
},
{
glyphname = F;
kernRight = F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,0,l),
(184,317,l),
(462,317,l),
(478,406,l),
(200,406,l),
(236,611,l),
(559,611,l),
(575,700,l),
(146,700,l),
(22,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 34 4 78 17 17 17 17 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 528;
}
);
note = F;
unicode = 70;
},
{
glyphname = G;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (336,0);
},
{
name = top;
pos = (460,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(411,-12,o),
(527,46,o),
(575,104,q),
(566,0,l),
(663,0,l),
(729,376,l),
(382,376,l),
(367,289,l),
(605,289,l),
(577,191,o),
(450,83,o),
(352,83,qs),
(265,83,o),
(165,193,o),
(165,288,qs),
(165,369,o),
(227,519,o),
(357,615,o),
(453,615,qs),
(528,615,o),
(612,551,o),
(617,494,q),
(737,494,l),
(732,596,o),
(588,712,o),
(467,712,qs),
(348,712,o),
(161,601,o),
(55,404,o),
(55,280,qs),
(55,205,o),
(114,72,o),
(236,-12,o),
(328,-12,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
30 1 3 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 1 2 5 2 1 5 128 0 5 0 4 3 5 4 103 0 2 2 0 97 0 0 0 39 77 0 3 3 6 97 8 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 1 2 5 2 1 5 128 0 5 0 4 3 5 4 103 0 2 2 0 97 0 0 0 39 77 0 6 6 34 77 0 3 3 7 97 8 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 0 32 17 17 18 37 34 18 38 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 759;
}
);
note = G;
unicode = 71;
},
{
glyphname = Gbreve;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (336,0);
},
{
name = top;
pos = (497,909);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (231,0);
ref = uni0306.case;
}
);
width = 759;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = uni0122;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (291,-256);
},
{
name = top;
pos = (460,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (325,0);
ref = uni0326;
}
);
width = 759;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = Gdotaccent;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (336,0);
},
{
name = top;
pos = (498,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (309,0);
ref = uni0307.case;
}
);
width = 759;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = H;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,0,l),
(187,326,l),
(525,326,l),
(467,0,l),
(573,0,l),
(697,700,l),
(591,700,l),
(541,415,l),
(202,415,l),
(253,700,l),
(147,700,l),
(23,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 1 0 4 3 1 4 104 2 1 0 0 33 77 5 1 3 3 34 3 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 683;
}
);
note = H;
unicode = 72;
},
{
glyphname = Hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,0,l),
(187,326,l),
(525,326,l),
(467,0,l),
(573,0,l),
(662,503,l),
(707,503,l),
(723,592,l),
(678,592,l),
(697,700,l),
(591,700,l),
(572,592,l),
(233,592,l),
(253,700,l),
(147,700,l),
(127,592,l),
(82,592,l),
(66,503,l),
(112,503,l),
(23,0,l)
);
},
{
closed = 1;
nodes = (
(218,503,l),
(556,503,l),
(541,415,l),
(202,415,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
5 3 2 1 10 6 2 0 11 1 0 104 12 1 11 0 8 7 11 8 103 4 1 2 2 33 77 9 1 7 7 34 7 78 20 20 20 23 20 23 22 21 19 18 17 17 17 17 17 17 17 17 16 13 8 31
CALL[ ]	/* CallFunction */";
};
width = 683;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = I;
layers = (
{
anchors = (
{
name = bottom;
pos = (76,0);
},
{
name = ogonek;
pos = (129,0);
},
{
name = top;
pos = (200,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,0,l),
(252,700,l),
(146,700,l),
(23,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 239;
}
);
note = I;
unicode = 73;
},
{
glyphname = IJ;
layers = (
{
anchors = (
{
name = bottom;
pos = (442,0);
},
{
name = ogonek;
pos = (129,0);
},
{
name = top;
pos = (691,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (239,0);
ref = J;
}
);
width = 733;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = Iacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (76,0);
},
{
name = ogonek;
pos = (129,0);
},
{
name = top;
pos = (243,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (11,0);
ref = acutecomb.case;
}
);
width = 239;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (76,0);
},
{
name = ogonek;
pos = (129,0);
},
{
name = top;
pos = (237,909);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-30,0);
ref = uni0306.case;
}
);
width = 239;
}
);
note = Ibreve;
unicode = 300;
},
{
glyphname = Icircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (76,0);
},
{
name = ogonek;
pos = (129,0);
},
{
name = top;
pos = (237,911);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-22,0);
ref = uni0302.case;
}
);
width = 239;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (76,0);
},
{
name = ogonek;
pos = (129,0);
},
{
name = top;
pos = (237,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-52,0);
ref = uni0308.case;
}
);
width = 239;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Idotaccent;
layers = (
{
anchors = (
{
name = bottom;
pos = (76,0);
},
{
name = ogonek;
pos = (129,0);
},
{
name = top;
pos = (237,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (48,0);
ref = uni0307.case;
}
);
width = 239;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = Igrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (76,0);
},
{
name = ogonek;
pos = (129,0);
},
{
name = top;
pos = (243,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (11,0);
ref = gravecomb.case;
}
);
width = 239;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Imacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (76,0);
},
{
name = ogonek;
pos = (129,0);
},
{
name = top;
pos = (229,867);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-61,0);
ref = uni0304.case;
}
);
width = 239;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = Iogonek;
layers = (
{
anchors = (
{
name = bottom;
pos = (76,0);
},
{
name = ogonek;
pos = (129,0);
},
{
name = top;
pos = (200,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,-206,o),
(100,-193,q),
(111,-127,l),
(72,-142,o),
(40,-142,qs),
(17,-142,o),
(-9,-122,o),
(-9,-105,qs),
(-9,-83,o),
(27,-46,o),
(70,-27,qs),
(129,0,l),
(252,700,l),
(146,700,l),
(26,15,l),
(-39,-16,o),
(-94,-85,o),
(-94,-126,qs),
(-94,-165,o),
(-33,-206,o),
(16,-206,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
17 1 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 33 77 0 1 1 2 97 3 1 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 1 3 1 2 1 2 101 0 0 0 33 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 20 0 19 39 22 4 8 24
CALL[ ]	/* CallFunction */";
};
width = 239;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = Itilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (76,0);
},
{
name = ogonek;
pos = (129,0);
},
{
name = top;
pos = (229,868);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-44,0);
ref = tildecomb.case;
}
);
width = 239;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = J;
kernLeft = J;
kernRight = J;
layers = (
{
anchors = (
{
name = bottom;
pos = (203,0);
},
{
name = top;
pos = (452,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(274,-12,o),
(401,93,o),
(417,184,qs),
(507,700,l),
(401,700,l),
(311,184,ls),
(303,140,o),
(246,83,o),
(199,83,qs),
(158,83,o),
(117,127,o),
(117,165,qs),
(117,181,o),
(120,197,q),
(14,197,l),
(9,169,o),
(9,149,qs),
(9,73,o),
(102,-12,o),
(183,-12,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 0 2 1 1 0 114 0 2 2 33 77 0 1 1 3 98 4 1 3 3 40 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 2 1 2 0 1 128 0 2 2 33 77 0 1 1 3 98 4 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 19 0 18 19 36 20 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 494;
}
);
note = J;
unicode = 74;
},
{
glyphname = uni004A0301;
layers = (
{
anchors = (
{
name = bottom;
pos = (203,0);
},
{
name = top;
pos = (495,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = J;
},
{
alignment = -1;
pos = (263,0);
ref = acutecomb.case;
}
);
width = 494;
}
);
note = uni004A0301;
},
{
glyphname = K;
kernRight = K;
layers = (
{
anchors = (
{
name = bottom;
pos = (261,0);
},
{
name = ogonek;
pos = (129,0);
},
{
name = top;
pos = (385,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,0,l),
(188,336,l),
(427,0,l),
(561,0,l),
(297,357,l),
(655,700,l),
(518,700,l),
(196,382,l),
(252,700,l),
(146,700,l),
(23,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
8 5 2 3 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = K;
unicode = 75;
},
{
glyphname = uni0136;
kernRight = K;
layers = (
{
anchors = (
{
name = bottom;
pos = (216,-256);
},
{
name = ogonek;
pos = (129,0);
},
{
name = top;
pos = (385,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = K;
},
{
alignment = -1;
pos = (249,0);
ref = uni0326;
}
);
width = 608;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = L;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (219,0);
},
{
name = top;
pos = (251,700);
},
{
name = topright;
pos = (340,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(443,0,l),
(459,88,l),
(145,88,l),
(252,700,l),
(146,700,l),
(23,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 17 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 525;
}
);
note = L;
unicode = 76;
},
{
glyphname = Lacute;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (219,0);
},
{
name = top;
pos = (294,942);
},
{
name = topright;
pos = (340,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (62,0);
ref = acutecomb.case;
}
);
width = 525;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = Lcaron;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (219,0);
},
{
name = top;
pos = (251,700);
},
{
name = topright;
pos = (340,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (257,0);
ref = uni030C.alt.case;
}
);
width = 525;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = uni013B;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (174,-256);
},
{
name = top;
pos = (251,700);
},
{
name = topright;
pos = (340,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (207,0);
ref = uni0326;
}
);
width = 525;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = Ldot;
kernRight = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(443,0,l),
(459,88,l),
(145,88,l),
(252,700,l),
(146,700,l),
(23,0,l)
);
},
{
closed = 1;
nodes = (
(414,280,o),
(455,321,o),
(455,350,qs),
(455,379,o),
(414,420,o),
(385,420,qs),
(355,420,o),
(314,379,o),
(314,350,qs),
(314,321,o),
(355,280,o),
(385,280,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 3 5 1 4 1 3 4 105 0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 6 6 6 17 6 16 37 17 17 16 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 525;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = Lslash;
kernRight = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(468,0,l),
(483,88,l),
(169,88,l),
(213,334,l),
(333,375,l),
(350,476,l),
(231,435,l),
(277,700,l),
(171,700,l),
(118,398,l),
(37,371,l),
(19,270,l),
(100,297,l),
(48,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
7 6 1 3 1 0 1 76 0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 17 21 20 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 550;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = M;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,0,l),
(219,511,l),
(348,95,l),
(430,95,l),
(706,511,l),
(616,0,l),
(722,0,l),
(845,700,l),
(720,700,l),
(414,230,l),
(271,700,l),
(146,700,l),
(23,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
10 7 2 3 3 0 1 76 0 3 0 2 0 3 2 128 1 1 0 0 33 77 4 1 2 2 34 2 78 18 18 17 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 832;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
kernRight = N;
layers = (
{
anchors = (
{
name = bottom;
pos = (304,0);
},
{
name = top;
pos = (428,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,0,l),
(222,528,l),
(480,0,l),
(586,0,l),
(709,700,l),
(603,700,l),
(510,172,l),
(252,700,l),
(146,700,l),
(23,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
7 2 2 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 17 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 696;
}
);
note = N;
unicode = 78;
},
{
glyphname = Nacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (304,0);
},
{
name = top;
pos = (471,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (239,0);
ref = acutecomb.case;
}
);
width = 696;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = Ncaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (304,0);
},
{
name = top;
pos = (465,910);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (206,0);
ref = uni030C.case;
}
);
width = 696;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = uni0145;
layers = (
{
anchors = (
{
name = bottom;
pos = (259,-256);
},
{
name = top;
pos = (428,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (293,0);
ref = uni0326;
}
);
width = 696;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = Ntilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (304,0);
},
{
name = top;
pos = (458,868);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (185,0);
ref = tildecomb.case;
}
);
width = 696;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Eng;
layers = (
{
anchors = (
{
name = bottom;
pos = (304,0);
},
{
name = top;
pos = (428,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,0,l),
(222,528,l),
(480,0,l),
(468,-67,ls),
(462,-100,o),
(426,-129,o),
(392,-129,qs),
(359,-129,l),
(343,-220,l),
(392,-220,ls),
(546,-220,o),
(574,-68,qs),
(709,700,l),
(603,700,l),
(511,172,l),
(252,700,l),
(146,700,l),
(23,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
15 2 2 4 0 1 76 14 1 4 1 75 1 1 0 0 33 77 0 4 4 34 77 0 3 3 2 97 0 2 2 38 2 78 21 33 34 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 695;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = O;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (350,0);
},
{
name = ogonek;
pos = (430,10);
},
{
name = top;
pos = (474,700);
},
{
name = topright;
pos = (854,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(464,-12,o),
(656,101,o),
(770,296,o),
(770,413,qs),
(770,490,o),
(703,627,o),
(569,712,o),
(473,712,qs),
(359,712,o),
(167,599,o),
(54,404,o),
(54,288,qs),
(54,211,o),
(122,73,o),
(256,-12,o),
(351,-12,qs)
);
},
{
closed = 1;
nodes = (
(273,83,o),
(164,200,o),
(164,296,qs),
(164,384,o),
(243,531,o),
(378,617,o),
(459,617,qs),
(552,617,o),
(660,502,o),
(660,406,qs),
(660,318,o),
(581,170,o),
(446,83,o),
(365,83,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 39 77 5 1 3 3 1 97 4 1 1 1 40 1 78 16 16 0 0 16 29 16 28 23 21 0 15 0 14 38 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 787;
}
);
note = O;
unicode = 79;
},
{
glyphname = Oacute;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (350,0);
},
{
name = ogonek;
pos = (430,10);
},
{
name = top;
pos = (517,942);
},
{
name = topright;
pos = (854,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (285,0);
ref = acutecomb.case;
}
);
width = 787;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Obreve;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (350,0);
},
{
name = ogonek;
pos = (430,10);
},
{
name = top;
pos = (511,909);
},
{
name = topright;
pos = (854,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (245,0);
ref = uni0306.case;
}
);
width = 787;
}
);
note = Obreve;
unicode = 334;
},
{
glyphname = Ocircumflex;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (350,0);
},
{
name = ogonek;
pos = (430,10);
},
{
name = top;
pos = (511,911);
},
{
name = topright;
pos = (854,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (253,0);
ref = uni0302.case;
}
);
width = 787;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Odieresis;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (350,0);
},
{
name = ogonek;
pos = (430,10);
},
{
name = top;
pos = (512,912);
},
{
name = topright;
pos = (854,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (223,0);
ref = uni0308.case;
}
);
width = 787;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = Ograve;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (350,0);
},
{
name = ogonek;
pos = (430,10);
},
{
name = top;
pos = (517,942);
},
{
name = topright;
pos = (854,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (285,0);
ref = gravecomb.case;
}
);
width = 787;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Ohungarumlaut;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (350,0);
},
{
name = ogonek;
pos = (430,10);
},
{
name = top;
pos = (512,915);
},
{
name = topright;
pos = (854,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (232,0);
ref = uni030B.case;
}
);
width = 787;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = Omacron;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (350,0);
},
{
name = ogonek;
pos = (430,10);
},
{
name = top;
pos = (504,867);
},
{
name = topright;
pos = (854,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (214,0);
ref = uni0304.case;
}
);
width = 787;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = Oslash;
kernLeft = Oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(462,-12,o),
(654,102,o),
(767,297,o),
(767,413,qs),
(767,465,o),
(739,557,o),
(713,593,q),
(826,700,l),
(720,700,l),
(663,646,l),
(625,678,o),
(526,712,o),
(470,712,qs),
(356,712,o),
(163,599,o),
(51,404,o),
(51,288,qs),
(51,189,o),
(102,112,q),
(-14,0,l),
(92,0,l),
(152,57,l),
(232,-12,o),
(348,-12,qs)
);
},
{
closed = 1;
nodes = (
(281,83,o),
(228,130,q),
(633,516,l),
(657,470,o),
(657,406,qs),
(657,318,o),
(577,169,o),
(442,83,o),
(362,83,qs)
);
},
{
closed = 1;
nodes = (
(183,189,l),
(161,234,o),
(161,296,qs),
(161,382,o),
(239,530,o),
(374,617,o),
(456,617,qs),
(537,617,o),
(587,574,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
13 1 5 1 41 40 30 29 16 4 6 4 5 1 1 0 4 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
13 1 5 2 41 40 30 29 16 4 6 4 5 1 1 0 4 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 39 77 7 1 4 4 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 33 77 0 5 5 1 97 0 1 1 39 77 0 0 0 34 77 7 1 4 4 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
24 24 0 0 35 33 24 32 24 31 0 23 0 22 19 38 18 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 777;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Otilde;
kernLeft = C;
kernRight = B;
layers = (
{
anchors = (
{
name = bottom;
pos = (350,0);
},
{
name = ogonek;
pos = (430,10);
},
{
name = top;
pos = (504,868);
},
{
name = topright;
pos = (854,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (231,0);
ref = tildecomb.case;
}
);
width = 787;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = OE;
kernLeft = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (511,0);
},
{
name = top;
pos = (635,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(412,-12,o),
(554,52,o),
(606,110,q),
(586,0,l),
(1007,0,l),
(1023,89,l),
(708,89,l),
(748,317,l),
(1025,317,l),
(1041,406,l),
(764,406,l),
(800,611,l),
(1115,611,l),
(1131,700,l),
(710,700,l),
(690,588,l),
(659,647,o),
(534,712,o),
(456,712,qs),
(350,712,o),
(165,600,o),
(56,409,o),
(56,297,qs),
(56,222,o),
(117,80,o),
(244,-12,o),
(338,-12,qs)
);
},
{
closed = 1;
nodes = (
(303,83,o),
(215,140,o),
(167,241,o),
(167,304,qs),
(167,387,o),
(244,532,o),
(375,617,o),
(450,617,qs),
(540,617,o),
(652,507,o),
(652,410,qs),
(652,322,o),
(574,172,o),
(441,83,o),
(361,83,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
10 1 3 2 23 1 5 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 1 1 0 0 39 77 11 9 2 5 5 6 97 10 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 0 0 0 39 77 8 1 2 2 1 95 0 1 1 33 77 11 9 2 5 5 6 95 0 6 6 34 77 11 9 2 5 5 7 97 10 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 3 0 4 5 3 4 103 0 8 8 0 97 0 0 0 39 77 0 2 2 1 95 0 1 1 33 77 0 5 5 6 95 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
27 27 0 0 27 41 27 40 34 32 0 26 0 25 17 17 17 17 17 19 38 12 8 29
CALL[ ]	/* CallFunction */";
};
width = 1108;
}
);
note = OE;
unicode = 338;
},
{
glyphname = P;
kernRight = P;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,0,l),
(179,286,l),
(318,286,ls),
(402,286,o),
(530,342,o),
(602,449,o),
(602,522,qs),
(602,603,o),
(488,700,o),
(391,700,qs),
(146,700,l),
(23,0,l)
);
},
{
closed = 1;
nodes = (
(195,376,l),
(236,611,l),
(372,611,ls),
(431,611,o),
(492,557,o),
(492,511,qs),
(492,444,o),
(409,376,o),
(331,376,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 4 0 1 2 4 1 103 0 3 3 0 95 0 0 0 33 77 0 2 2 34 2 78 12 12 12 20 12 19 37 17 37 32 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 586;
}
);
note = P;
unicode = 80;
},
{
glyphname = Thorn;
kernRight = Thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,0,l),
(154,142,l),
(293,142,ls),
(374,142,o),
(503,198,o),
(577,307,o),
(577,383,qs),
(577,465,o),
(466,560,o),
(366,560,qs),
(228,560,l),
(252,700,l),
(146,700,l),
(23,0,l)
);
},
{
closed = 1;
nodes = (
(169,228,l),
(213,472,l),
(347,472,ls),
(410,472,o),
(468,426,o),
(468,380,qs),
(468,309,o),
(381,228,o),
(304,228,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 0 4 5 1 4 104 6 1 5 0 2 3 5 2 103 0 0 0 33 77 0 3 3 34 3 78 14 14 14 22 14 21 37 17 37 33 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 586;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = Q;
kernLeft = C;
kernRight = Q;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(412,-12,o),
(527,23,o),
(577,55,q),
(634,-11,l),
(714,59,l),
(658,123,l),
(711,181,o),
(771,330,o),
(771,413,qs),
(771,490,o),
(704,627,o),
(570,712,o),
(474,712,qs),
(360,712,o),
(168,599,o),
(55,404,o),
(55,288,qs),
(55,211,o),
(123,73,o),
(257,-12,o),
(352,-12,qs)
);
},
{
closed = 1;
nodes = (
(165,384,o),
(244,531,o),
(379,617,o),
(460,617,qs),
(553,617,o),
(661,502,o),
(661,406,qs),
(661,347,o),
(625,241,o),
(592,199,q),
(508,299,l),
(428,229,l),
(516,127,l),
(447,83,o),
(366,83,qs),
(274,83,o),
(165,200,o),
(165,296,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
28 27 26 25 14 5 2 3 17 16 15 3 1 2 2 76 0 3 3 0 97 0 0 0 39 77 0 2 2 1 97 4 1 1 1 40 1 78 0 0 35 33 24 22 0 20 0 19 38 5 8 23
CALL[ ]	/* CallFunction */";
};
width = 796;
}
);
note = Q;
unicode = 81;
},
{
glyphname = R;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (253,0);
},
{
name = top;
pos = (377,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,0,l),
(182,303,l),
(279,303,l),
(401,0,l),
(529,0,l),
(388,321,l),
(482,340,o),
(577,450,o),
(577,532,qs),
(577,609,o),
(467,700,o),
(371,700,qs),
(146,700,l),
(22,0,l)
);
},
{
closed = 1;
nodes = (
(198,393,l),
(236,611,l),
(352,611,ls),
(412,611,o),
(468,560,o),
(468,519,qs),
(468,454,o),
(392,393,o),
(314,393,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 1 2 5 1 76 6 1 5 0 2 1 5 2 103 0 4 4 0 95 0 0 0 33 77 3 1 1 1 34 1 78 14 14 14 22 14 21 37 17 17 22 32 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = R;
unicode = 82;
},
{
glyphname = Racute;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (253,0);
},
{
name = top;
pos = (420,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (188,0);
ref = acutecomb.case;
}
);
width = 595;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = Rcaron;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (253,0);
},
{
name = top;
pos = (413,910);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (155,0);
ref = uni030C.case;
}
);
width = 595;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = uni0156;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (208,-256);
},
{
name = top;
pos = (377,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (241,0);
ref = uni0326;
}
);
width = 595;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = S;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (250,0);
},
{
name = top;
pos = (374,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(344,-12,o),
(467,44,o),
(536,147,o),
(536,215,qs),
(536,337,o),
(385,393,qs),
(357,403,ls),
(312,419,o),
(260,443,o),
(243,459,qs),
(220,479,o),
(220,513,qs),
(220,561,o),
(291,622,o),
(349,622,qs),
(400,622,o),
(457,570,o),
(457,532,qs),
(457,520,o),
(456,514,q),
(568,514,l),
(571,531,o),
(571,545,qs),
(571,620,o),
(458,712,o),
(365,712,qs),
(289,712,o),
(172,658,o),
(107,559,o),
(107,495,qs),
(107,440,o),
(174,357,o),
(240,333,qs),
(279,319,ls),
(331,301,o),
(387,275,o),
(421,234,o),
(421,202,qs),
(421,145,o),
(345,77,o),
(277,77,qs),
(218,77,o),
(146,138,o),
(146,187,qs),
(146,202,o),
(148,211,q),
(36,211,l),
(32,194,o),
(32,171,qs),
(32,116,o),
(89,34,o),
(195,-12,o),
(265,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 39 77 0 1 1 5 97 6 1 5 5 40 5 78 0 0 0 52 0 51 36 20 45 36 21 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = S;
unicode = 83;
},
{
glyphname = Sacute;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (250,0);
},
{
name = top;
pos = (417,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (185,0);
ref = acutecomb.case;
}
);
width = 588;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = Scaron;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (250,0);
},
{
name = top;
pos = (411,910);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (152,0);
ref = uni030C.case;
}
);
width = 588;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = Scedilla;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (204,-261);
},
{
name = top;
pos = (374,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(243,-261,ls),
(303,-261,o),
(388,-194,o),
(388,-137,qs),
(388,-97,o),
(326,-55,o),
(275,-56,q),
(283,-12,l),
(358,-9,o),
(472,50,o),
(536,150,o),
(536,215,qs),
(536,337,o),
(385,393,qs),
(357,403,ls),
(312,419,o),
(260,443,o),
(243,459,qs),
(220,479,o),
(220,513,qs),
(220,561,o),
(291,622,o),
(349,622,qs),
(400,622,o),
(457,570,o),
(457,532,qs),
(457,520,o),
(456,514,q),
(568,514,l),
(571,531,o),
(571,545,qs),
(571,620,o),
(458,712,o),
(365,712,qs),
(289,712,o),
(172,658,o),
(107,559,o),
(107,495,qs),
(107,440,o),
(174,357,o),
(240,333,qs),
(279,319,ls),
(331,301,o),
(387,275,o),
(421,234,o),
(421,202,qs),
(421,145,o),
(345,77,o),
(277,77,qs),
(218,77,o),
(146,138,o),
(146,187,qs),
(146,202,o),
(148,211,q),
(36,211,l),
(32,194,o),
(32,171,qs),
(32,98,o),
(130,2,o),
(215,-9,q),
(196,-115,l),
(251,-115,ls),
(306,-115,o),
(306,-148,qs),
(305,-172,o),
(268,-197,o),
(237,-197,qs),
(135,-197,l),
(124,-261,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
8 1 7 3 1 76 0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 100 0 6 6 4 97 0 4 4 39 77 0 3 3 7 97 0 7 7 40 7 78 68 66 17 29 36 20 45 36 22 35 32 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = uni0218;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (205,-256);
},
{
name = top;
pos = (374,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (239,0);
ref = uni0326;
}
);
width = 588;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni1E9E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(468,-10,o),
(569,38,o),
(625,122,o),
(625,176,qs),
(625,228,o),
(572,292,o),
(512,314,qs),
(464,331,o),
(416,359,o),
(416,380,qs),
(416,398,o),
(446,426,o),
(480,447,qs),
(508,464,o),
(526,477,qs),
(554,498,o),
(585,551,o),
(585,587,qs),
(585,627,o),
(537,694,o),
(446,732,o),
(384,732,qs),
(266,732,o),
(122,612,o),
(105,515,qs),
(13,0,l),
(119,0,l),
(209,506,ls),
(221,572,o),
(300,643,o),
(369,643,qs),
(420,643,o),
(476,604,o),
(476,570,qs),
(476,545,o),
(448,507,o),
(416,484,o),
(371,455,qs),
(306,413,o),
(306,358,qs),
(306,319,o),
(366,267,o),
(435,242,qs),
(480,226,o),
(518,190,o),
(518,164,qs),
(518,122,o),
(461,71,o),
(414,71,qs),
(372,71,o),
(323,118,o),
(323,158,qs),
(324,172,l),
(221,172,l),
(215,89,o),
(313,-10,o),
(403,-10,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
4 1 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 0 2 1 1 0 114 0 2 2 4 97 0 4 4 41 77 0 1 1 3 98 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 1 1 3 98 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 3 3 34 77 0 1 1 5 98 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 2 1 2 0 1 128 0 4 0 2 0 4 2 105 0 3 3 34 77 0 1 1 5 98 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 56 0 55 35 33 30 29 26 24 35 18 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = uni1E9E;
unicode = 7838;
},
{
glyphname = T;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (239,0);
},
{
name = top;
pos = (363,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(292,0,l),
(399,612,l),
(606,612,l),
(622,700,l),
(103,700,l),
(87,612,l),
(293,612,l),
(186,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 1 95 0 1 1 33 77 0 3 3 34 3 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 565;
}
);
note = T;
unicode = 84;
},
{
glyphname = Tcaron;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (239,0);
},
{
name = top;
pos = (399,910);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (141,0);
ref = uni030C.case;
}
);
width = 565;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = uni0162;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (193,-261);
},
{
name = top;
pos = (363,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,0,l),
(184,-115,l),
(239,-115,ls),
(294,-115,o),
(294,-148,qs),
(293,-172,o),
(256,-197,o),
(225,-197,qs),
(123,-197,l),
(112,-261,l),
(231,-261,ls),
(291,-261,o),
(376,-194,o),
(376,-137,qs),
(376,-97,o),
(314,-55,o),
(263,-56,q),
(273,0,l),
(292,0,l),
(399,612,l),
(606,612,l),
(622,700,l),
(103,700,l),
(87,612,l),
(293,612,l),
(186,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 0 7 6 4 7 105 0 6 0 5 6 5 99 2 1 0 0 1 95 0 1 1 33 77 8 1 3 3 34 3 78 17 35 33 36 17 17 17 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 565;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni021A;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (194,-256);
},
{
name = top;
pos = (363,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (227,0);
ref = uni0326;
}
);
width = 565;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = U;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (414,700);
},
{
name = topright;
pos = (732,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(350,-12,o),
(481,41,o),
(581,164,o),
(599,263,qs),
(676,700,l),
(570,700,l),
(492,263,ls),
(476,174,o),
(375,85,o),
(299,85,qs),
(234,85,o),
(162,149,o),
(162,213,qs),
(162,236,o),
(168,263,qs),
(245,700,l),
(139,700,l),
(62,263,ls),
(56,227,o),
(56,196,qs),
(56,98,o),
(174,-12,o),
(280,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 0 0 33 77 0 1 1 3 98 4 1 3 3 40 3 78 0 0 0 22 0 21 19 37 21 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 667;
}
);
note = U;
unicode = 85;
},
{
glyphname = Uacute;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (457,942);
},
{
name = topright;
pos = (732,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (225,0);
ref = acutecomb.case;
}
);
width = 667;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ubreve;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (451,909);
},
{
name = topright;
pos = (732,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (185,0);
ref = uni0306.case;
}
);
width = 667;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = Ucircumflex;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (451,911);
},
{
name = topright;
pos = (732,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (193,0);
ref = uni0302.case;
}
);
width = 667;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (451,912);
},
{
name = topright;
pos = (732,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (162,0);
ref = uni0308.case;
}
);
width = 667;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Ugrave;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (457,942);
},
{
name = topright;
pos = (732,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (225,0);
ref = gravecomb.case;
}
);
width = 667;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uhungarumlaut;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (451,915);
},
{
name = topright;
pos = (732,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (172,0);
ref = uni030B.case;
}
);
width = 667;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = Umacron;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (443,867);
},
{
name = topright;
pos = (732,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (153,0);
ref = uni0304.case;
}
);
width = 667;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = Uogonek;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (414,700);
},
{
name = topright;
pos = (732,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(330,-196,o),
(374,-183,q),
(385,-117,l),
(346,-132,o),
(314,-132,qs),
(291,-132,o),
(265,-112,o),
(265,-95,qs),
(265,-73,o),
(301,-36,o),
(344,-17,qs),
(397,7,l),
(472,33,o),
(580,159,o),
(599,263,qs),
(676,700,l),
(570,700,l),
(492,263,ls),
(476,174,o),
(375,85,o),
(299,85,qs),
(234,85,o),
(162,149,o),
(162,213,qs),
(162,236,o),
(168,263,qs),
(245,700,l),
(139,700,l),
(62,263,ls),
(56,227,o),
(56,196,qs),
(56,108,o),
(152,1,o),
(240,-10,q),
(180,-55,o),
(180,-116,qs),
(180,-155,o),
(241,-196,o),
(290,-196,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
35 4 2 3 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 3 0 1 3 128 2 1 0 0 33 77 0 3 3 4 98 5 1 4 4 38 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 1 0 3 0 1 3 128 0 3 5 1 4 3 4 102 2 1 0 0 33 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 38 0 37 42 19 37 26 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 667;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = Uring;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (462,971);
},
{
name = topright;
pos = (732,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (223,0);
ref = uni030A.case;
}
);
width = 667;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = Utilde;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (443,868);
},
{
name = topright;
pos = (732,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (170,0);
ref = tildecomb.case;
}
);
width = 667;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = V;
kernLeft = V;
kernRight = V;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(229,0,l),
(357,0,l),
(741,700,l),
(627,700,l),
(313,112,l),
(208,700,l),
(94,700,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
1 1 1 0 1 76 3 2 2 0 0 33 77 0 1 1 34 1 78 0 0 0 6 0 6 17 18 4 8 24
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (453,0);
},
{
name = top;
pos = (571,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(543,541,l),
(597,0,l),
(726,0,l),
(1042,700,l),
(927,700,l),
(684,124,l),
(633,700,l),
(513,700,l),
(253,125,l),
(215,700,l),
(101,700,l),
(164,0,l),
(293,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 33 77 5 4 2 3 3 34 3 78 0 0 0 12 0 12 17 18 18 17 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 988;
}
);
note = W;
unicode = 87;
},
{
glyphname = Wacute;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (453,0);
},
{
name = top;
pos = (614,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (382,0);
ref = acutecomb.case;
}
);
width = 988;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = Wcircumflex;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (453,0);
},
{
name = top;
pos = (608,911);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (350,0);
ref = uni0302.case;
}
);
width = 988;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = Wdieresis;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (453,0);
},
{
name = top;
pos = (609,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (320,0);
ref = uni0308.case;
}
);
width = 988;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = Wgrave;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (453,0);
},
{
name = top;
pos = (614,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (382,0);
ref = gravecomb.case;
}
);
width = 988;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = X;
kernLeft = X;
kernRight = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,0,l),
(306,282,l),
(424,0,l),
(544,0,l),
(385,379,l),
(631,700,l),
(511,700,l),
(344,474,l),
(249,700,l),
(129,700,l),
(264,379,l),
(-24,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (251,0);
},
{
name = top;
pos = (375,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(298,0,l),
(346,274,l),
(652,700,l),
(534,700,l),
(312,378,l),
(204,700,l),
(84,700,l),
(240,274,l),
(192,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
3 1 2 0 1 76 1 1 0 0 33 77 0 2 2 34 2 78 18 18 17 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Yacute;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (251,0);
},
{
name = top;
pos = (418,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (186,0);
ref = acutecomb.case;
}
);
width = 589;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Ycircumflex;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (251,0);
},
{
name = top;
pos = (412,911);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (154,0);
ref = uni0302.case;
}
);
width = 589;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = Ydieresis;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (251,0);
},
{
name = top;
pos = (413,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (124,0);
ref = uni0308.case;
}
);
width = 589;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Ygrave;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (251,0);
},
{
name = top;
pos = (418,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (186,0);
ref = gravecomb.case;
}
);
width = 589;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = uni1EF8;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (251,0);
},
{
name = top;
pos = (405,868);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (132,0);
ref = tildecomb.case;
}
);
width = 589;
}
);
note = uni1EF8;
unicode = 7928;
},
{
glyphname = Z;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = top;
pos = (351,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(450,0,l),
(466,90,l),
(128,90,l),
(556,618,l),
(570,700,l),
(118,700,l),
(102,610,l),
(431,610,l),
(5,82,l),
(-10,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 0 0 1 95 0 1 1 33 77 0 2 2 3 95 0 3 3 34 3 78 17 18 17 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = Z;
unicode = 90;
},
{
glyphname = Zacute;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = top;
pos = (394,942);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (162,0);
ref = acutecomb.case;
}
);
width = 541;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = Zcaron;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = top;
pos = (387,910);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (129,0);
ref = uni030C.case;
}
);
width = 541;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = Zdotaccent;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = top;
pos = (388,912);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (199,0);
ref = uni0307.case;
}
);
width = 541;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = uniA78B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(154,220,l),
(252,700,l),
(138,700,l),
(65,220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 229;
}
);
note = uniA78B;
unicode = 42891;
},
{
glyphname = a;
kernLeft = a;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (490,0);
},
{
name = top;
pos = (322,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,75,o),
(126,105,o),
(126,134,qs),
(126,179,o),
(198,224,o),
(251,224,qs),
(369,224,l),
(357,162,o),
(266,75,o),
(206,75,qs)
);
},
{
closed = 1;
nodes = (
(16,59,o),
(103,-12,o),
(169,-12,qs),
(230,-12,o),
(319,38,o),
(348,78,q),
(342,0,l),
(436,0,l),
(489,299,ls),
(494,327,o),
(494,347,qs),
(494,425,o),
(398,508,o),
(312,508,qs),
(224,508,o),
(91,419,o),
(63,337,q),
(169,337,l),
(185,377,o),
(254,419,o),
(296,419,qs),
(341,419,o),
(387,373,o),
(387,331,qs),
(387,318,o),
(384,297,q),
(257,297,ls),
(154,297,o),
(16,204,o),
(16,119,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
33 1 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 2 3 4 2 128 0 2 0 0 1 2 0 103 0 3 3 5 97 0 5 5 42 77 8 1 1 1 6 97 7 1 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 4 3 2 3 4 2 128 0 2 0 0 1 2 0 103 0 3 3 5 97 0 5 5 42 77 0 6 6 34 77 8 1 1 1 7 97 0 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 37 35 32 31 26 24 22 21 19 17 13 11 0 9 0 8 34 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 528;
}
);
note = a;
unicode = 97;
},
{
glyphname = aacute;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (490,0);
},
{
name = top;
pos = (367,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (169,0);
ref = acutecomb;
}
);
width = 528;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = abreve;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (490,0);
},
{
name = top;
pos = (362,722);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (130,0);
ref = uni0306;
}
);
width = 528;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = uni01CE;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (490,0);
},
{
name = top;
pos = (363,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (137,0);
ref = uni030C;
}
);
width = 528;
}
);
note = uni01CE;
unicode = 462;
},
{
glyphname = acircumflex;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (490,0);
},
{
name = top;
pos = (363,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (137,0);
ref = uni0302;
}
);
width = 528;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = adieresis;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (490,0);
},
{
name = top;
pos = (362,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (107,0);
ref = uni0308;
}
);
width = 528;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = agrave;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (490,0);
},
{
name = top;
pos = (367,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (170,0);
ref = gravecomb;
}
);
width = 528;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = amacron;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (490,0);
},
{
name = top;
pos = (350,693);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (90,0);
ref = uni0304;
}
);
width = 528;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = aogonek;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (490,0);
},
{
name = top;
pos = (322,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,75,o),
(126,105,o),
(126,134,qs),
(126,179,o),
(198,224,o),
(251,224,qs),
(369,224,l),
(357,162,o),
(266,75,o),
(206,75,qs)
);
},
{
closed = 1;
nodes = (
(417,-206,o),
(461,-193,q),
(472,-127,l),
(433,-142,o),
(401,-142,qs),
(378,-142,o),
(352,-122,o),
(352,-105,qs),
(352,-83,o),
(388,-46,o),
(431,-27,qs),
(490,0,l),
(475,52,l),
(443,39,l),
(489,299,ls),
(494,327,o),
(494,347,qs),
(494,425,o),
(398,508,o),
(312,508,qs),
(224,508,o),
(91,419,o),
(63,337,q),
(169,337,l),
(185,377,o),
(254,419,o),
(296,419,qs),
(341,419,o),
(387,373,o),
(387,331,qs),
(387,318,o),
(384,297,q),
(257,297,ls),
(154,297,o),
(16,204,o),
(16,119,qs),
(16,59,o),
(103,-12,o),
(169,-12,qs),
(230,-12,o),
(319,38,o),
(348,78,q),
(342,0,l),
(358,0,l),
(309,-28,o),
(267,-90,o),
(267,-126,qs),
(267,-165,o),
(328,-206,o),
(377,-206,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
17 1 1 0 46 45 2 2 1 56 1 8 2 3 76 47 1 2 1 75
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
17 1 1 0 46 45 2 2 1 56 1 8 3 3 76 47 1 2 1 75
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 6 5 4 5 6 4 128 0 4 0 0 1 4 0 103 0 5 5 7 97 0 7 7 42 77 10 1 1 1 2 97 3 1 2 2 34 77 0 8 8 9 97 11 1 9 9 38 9 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 6 5 4 5 6 4 128 0 4 0 0 1 4 0 103 0 5 5 7 97 0 7 7 42 77 0 2 2 34 77 10 1 1 1 3 97 0 3 3 40 77 0 8 8 9 97 11 1 9 9 38 9 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 6 5 4 5 6 4 128 0 4 0 0 1 4 0 103 0 8 11 1 9 8 9 101 0 5 5 7 97 0 7 7 42 77 0 2 2 34 77 10 1 1 1 3 97 0 3 3 40 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
10 10 0 0 10 59 10 58 55 53 40 38 36 35 33 31 27 25 21 19 16 15 0 9 0 8 34 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 528;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = aring;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (490,0);
},
{
name = top;
pos = (370,766);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (167,0);
ref = uni030A;
}
);
width = 528;
}
);
note = aring;
unicode = 229;
},
{
glyphname = atilde;
kernLeft = a;
kernRight = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (234,0);
},
{
name = ogonek;
pos = (490,0);
},
{
name = top;
pos = (359,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (115,0);
ref = tildecomb;
}
);
width = 528;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = ae;
kernLeft = a;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (415,0);
},
{
name = top;
pos = (503,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(254,-12,o),
(374,49,o),
(412,100,q),
(435,48,o),
(533,-12,o),
(599,-12,qs),
(679,-12,o),
(820,73,o),
(858,152,q),
(751,152,l),
(729,116,o),
(658,76,o),
(614,76,qs),
(561,76,o),
(493,142,o),
(493,201,qs),
(493,209,o),
(495,223,q),
(881,223,l),
(895,273,o),
(895,315,qs),
(895,367,o),
(850,455,o),
(759,508,o),
(692,508,qs),
(634,508,o),
(531,466,o),
(491,428,q),
(451,508,o),
(326,508,qs),
(276,508,o),
(172,472,o),
(89,395,o),
(73,336,q),
(179,336,l),
(194,377,o),
(265,421,o),
(311,421,qs),
(355,421,o),
(405,377,o),
(405,334,qs),
(405,317,o),
(401,296,q),
(256,296,ls),
(196,296,o),
(87,259,o),
(16,179,o),
(16,117,qs),
(16,59,o),
(104,-12,o),
(185,-12,qs)
);
},
{
closed = 1;
nodes = (
(174,74,o),
(130,107,o),
(130,136,qs),
(130,178,o),
(197,224,o),
(253,224,qs),
(384,224,l),
(381,205,ls),
(375,173,o),
(327,112,o),
(253,74,o),
(212,74,qs)
);
},
{
closed = 1;
nodes = (
(510,296,l),
(529,356,o),
(620,421,o),
(676,421,qs),
(728,421,o),
(790,363,o),
(790,312,qs),
(789,296,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 93 values pushed */
22 1 1 3 47 1 6 7 2 76 0 2 1 0 1 2 0 128 0 7 5 6 5 7 6 128 13 1 0 10 1 5 7 0 5 103 12 1 1 1 3 97 4 1 3 3 42 77 15 11 2 6 6 8 97 14 9 2 8 8 40 8 78 51 51 0 0 70 69 67 65 51 62 51 61 57 55 0 50 0 49 34 18 36 21 35 35 18 36 37 16 8 31
CALL[ ]	/* CallFunction */";
};
width = 917;
}
);
note = ae;
unicode = 230;
},
{
glyphname = aeacute;
kernLeft = a;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (415,0);
},
{
name = top;
pos = (548,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = ae;
},
{
alignment = -1;
pos = (350,0);
ref = acutecomb;
}
);
width = 917;
}
);
note = aeacute;
unicode = 509;
},
{
glyphname = b;
kernLeft = b;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(373,-12,o),
(503,69,o),
(578,210,o),
(578,295,qs),
(578,353,o),
(531,450,o),
(439,508,o),
(375,508,qs),
(267,508,o),
(194,426,q),
(242,700,l),
(136,700,l),
(13,0,l),
(108,0,l),
(132,76,l),
(151,39,o),
(237,-12,o),
(292,-12,qs)
);
},
{
closed = 1;
nodes = (
(231,81,o),
(160,155,o),
(160,215,qs),
(160,268,o),
(204,360,o),
(285,416,o),
(339,416,qs),
(397,416,o),
(468,338,o),
(468,278,qs),
(468,222,o),
(423,132,o),
(342,81,o),
(290,81,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
7 1 4 2 2 1 0 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 1 33 77 0 4 4 2 97 0 2 2 42 77 7 1 5 5 0 98 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 33 77 0 4 4 2 97 0 2 2 42 77 0 0 0 34 77 7 1 5 5 3 98 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
18 18 0 0 18 31 18 30 25 23 0 17 0 16 34 17 19 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 611;
}
);
note = b;
unicode = 98;
},
{
glyphname = c;
kernLeft = c;
kernRight = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = top;
pos = (326,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(331,-12,o),
(481,81,o),
(514,171,q),
(404,171,l),
(387,127,o),
(309,78,o),
(262,78,qs),
(210,78,o),
(143,150,o),
(143,211,qs),
(143,260,o),
(184,356,o),
(265,418,o),
(321,418,qs),
(369,418,o),
(430,369,o),
(430,325,q),
(541,325,l),
(540,410,o),
(430,508,o),
(337,508,qs),
(252,508,o),
(114,427,o),
(34,286,o),
(34,200,qs),
(34,142,o),
(83,46,o),
(179,-12,o),
(246,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 42 77 0 3 3 5 97 6 1 5 5 40 5 78 0 0 0 28 0 27 18 37 34 18 38 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 564;
}
);
note = c;
unicode = 99;
},
{
glyphname = cacute;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = top;
pos = (371,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (173,0);
ref = acutecomb;
}
);
width = 564;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = ccaron;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = top;
pos = (367,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (141,0);
ref = uni030C;
}
);
width = 564;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = ccedilla;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (192,-261);
},
{
name = top;
pos = (326,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(228,-261,ls),
(288,-261,o),
(373,-194,o),
(373,-137,qs),
(373,-97,o),
(311,-55,o),
(260,-56,q),
(268,-11,l),
(347,-5,o),
(483,87,o),
(514,171,q),
(404,171,l),
(387,127,o),
(309,78,o),
(262,78,qs),
(210,78,o),
(143,150,o),
(143,211,qs),
(143,260,o),
(184,356,o),
(265,418,o),
(321,418,qs),
(369,418,o),
(430,369,o),
(430,325,q),
(541,325,l),
(540,410,o),
(430,508,o),
(337,508,qs),
(252,508,o),
(114,427,o),
(34,286,o),
(34,200,qs),
(34,121,o),
(121,6,o),
(200,-8,q),
(181,-115,l),
(236,-115,ls),
(291,-115,o),
(291,-148,qs),
(290,-172,o),
(253,-197,o),
(222,-197,qs),
(120,-197,l),
(109,-261,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 7 5 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 5 7 7 5 112 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 42 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 5 7 4 5 7 126 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 42 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 20 18 37 34 18 39 35 32 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 564;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = cdotaccent;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = top;
pos = (366,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (211,0);
ref = uni0307;
}
);
width = 564;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = d;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (262,0);
},
{
name = top;
pos = (437,992);
},
{
name = topright;
pos = (728,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(344,-12,o),
(418,77,q),
(415,0,l),
(511,0,l),
(634,700,l),
(528,700,l),
(479,421,l),
(459,462,o),
(377,508,o),
(316,508,qs),
(245,508,o),
(115,436,o),
(35,300,o),
(35,208,qs),
(35,152,o),
(78,52,o),
(168,-12,o),
(235,-12,qs)
);
},
{
closed = 1;
nodes = (
(213,81,o),
(144,159,o),
(144,219,qs),
(144,266,o),
(184,357,o),
(266,416,o),
(324,416,qs),
(383,416,o),
(452,345,o),
(452,286,qs),
(452,237,o),
(411,143,o),
(329,81,o),
(272,81,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
10 1 4 0 15 1 2 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 1 33 77 0 4 4 0 97 0 0 0 42 77 7 1 5 5 2 97 6 3 2 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 33 77 0 4 4 0 97 0 0 0 42 77 0 2 2 34 77 7 1 5 5 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
18 18 0 0 18 31 18 30 25 23 0 17 0 16 17 19 38 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = d;
unicode = 100;
},
{
glyphname = dcaron;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (262,0);
},
{
name = top;
pos = (437,992);
},
{
name = topright;
pos = (728,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = d;
},
{
alignment = -1;
pos = (596,0);
ref = uni030C.alt;
}
);
width = 613;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = dcroat;
kernLeft = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(344,-12,o),
(418,77,q),
(415,0,l),
(511,0,l),
(610,565,l),
(657,565,l),
(670,641,l),
(624,641,l),
(634,700,l),
(528,700,l),
(518,641,l),
(358,641,l),
(344,565,l),
(505,565,l),
(479,421,l),
(459,462,o),
(377,508,o),
(316,508,qs),
(245,508,o),
(115,436,o),
(35,300,o),
(35,208,qs),
(35,152,o),
(78,52,o),
(168,-12,o),
(235,-12,qs)
);
},
{
closed = 1;
nodes = (
(144,266,o),
(184,357,o),
(266,416,o),
(324,416,qs),
(383,416,o),
(452,345,o),
(452,286,qs),
(452,237,o),
(411,143,o),
(329,81,o),
(272,81,qs),
(213,81,o),
(144,159,o),
(144,219,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
10 1 9 0 23 1 6 8 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
4 1 2 5 1 1 0 2 1 104 0 3 3 33 77 0 9 9 0 97 0 0 0 42 77 0 8 8 6 97 10 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
4 1 2 5 1 1 0 2 1 104 0 3 3 33 77 0 9 9 0 97 0 0 0 42 77 0 6 6 34 77 0 8 8 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 36 34 29 27 0 25 0 24 17 17 17 17 17 19 38 11 8 29
CALL[ ]	/* CallFunction */";
};
width = 611;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = eth;
kernLeft = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(353,-12,o),
(497,77,o),
(583,247,o),
(583,363,qs),
(583,430,o),
(547,558,o),
(512,614,q),
(598,642,l),
(611,709,l),
(476,666,l),
(460,686,o),
(444,700,q),
(342,700,l),
(368,675,o),
(395,640,q),
(304,611,l),
(292,544,l),
(429,588,l),
(467,520,o),
(483,438,q),
(439,505,o),
(332,505,qs),
(251,505,o),
(115,428,o),
(35,295,o),
(35,215,qs),
(35,158,o),
(88,54,o),
(193,-12,o),
(268,-12,qs)
);
},
{
closed = 1;
nodes = (
(219,78,o),
(145,158,o),
(145,222,qs),
(145,271,o),
(191,360,o),
(275,415,o),
(328,415,qs),
(387,415,o),
(464,343,o),
(464,278,qs),
(464,232,o),
(419,139,o),
(334,78,o),
(279,78,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
22 19 14 12 11 5 0 1 9 1 3 0 2 76 20 1 1 74 0 1 1 33 77 0 3 3 0 97 0 0 0 42 77 6 1 4 4 2 97 5 1 2 2 40 2 78 30 30 0 0 30 43 30 42 37 35 0 29 0 28 24 38 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 606;
}
);
note = eth;
unicode = 240;
},
{
glyphname = e;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (237,0);
},
{
name = ogonek;
pos = (353,10);
},
{
name = top;
pos = (325,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(326,-12,o),
(464,75,o),
(500,152,q),
(393,152,l),
(372,117,o),
(303,76,o),
(259,76,qs),
(206,76,o),
(138,141,o),
(138,200,qs),
(138,215,o),
(139,223,q),
(525,223,l),
(539,273,o),
(539,315,qs),
(539,369,o),
(493,456,o),
(400,508,o),
(334,508,qs),
(253,508,o),
(116,430,o),
(34,289,o),
(34,199,qs),
(34,102,o),
(148,-12,o),
(243,-12,qs)
);
},
{
closed = 1;
nodes = (
(154,296,l),
(173,355,o),
(265,421,o),
(320,421,qs),
(372,421,o),
(435,363,o),
(435,312,q),
(433,296,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
26 1 6 5 1 76 0 3 1 2 1 3 2 128 0 6 0 1 3 6 1 103 0 5 5 0 97 0 0 0 42 77 0 2 2 4 97 7 1 4 4 40 4 78 0 0 33 32 30 28 0 25 0 24 18 36 21 37 8 8 26
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = e;
unicode = 101;
},
{
glyphname = eacute;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (237,0);
},
{
name = ogonek;
pos = (353,10);
},
{
name = top;
pos = (370,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (172,0);
ref = acutecomb;
}
);
width = 562;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ebreve;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (237,0);
},
{
name = ogonek;
pos = (353,10);
},
{
name = top;
pos = (365,722);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (133,0);
ref = uni0306;
}
);
width = 562;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = ecaron;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (237,0);
},
{
name = ogonek;
pos = (353,10);
},
{
name = top;
pos = (366,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (140,0);
ref = uni030C;
}
);
width = 562;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = ecircumflex;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (237,0);
},
{
name = ogonek;
pos = (353,10);
},
{
name = top;
pos = (366,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (140,0);
ref = uni0302;
}
);
width = 562;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (237,0);
},
{
name = ogonek;
pos = (353,10);
},
{
name = top;
pos = (365,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (110,0);
ref = uni0308;
}
);
width = 562;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = edotaccent;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (237,0);
},
{
name = ogonek;
pos = (353,10);
},
{
name = top;
pos = (365,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (210,0);
ref = uni0307;
}
);
width = 562;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = egrave;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (237,0);
},
{
name = ogonek;
pos = (353,10);
},
{
name = top;
pos = (370,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (173,0);
ref = gravecomb;
}
);
width = 562;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = emacron;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (237,0);
},
{
name = ogonek;
pos = (353,10);
},
{
name = top;
pos = (353,693);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (93,0);
ref = uni0304;
}
);
width = 562;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = eogonek;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (237,0);
},
{
name = ogonek;
pos = (353,10);
},
{
name = top;
pos = (325,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(154,296,l),
(173,355,o),
(265,421,o),
(320,421,qs),
(372,421,o),
(435,363,o),
(435,312,q),
(433,296,l)
);
},
{
closed = 1;
nodes = (
(280,-196,o),
(324,-183,q),
(335,-117,l),
(296,-132,o),
(264,-132,qs),
(241,-132,o),
(215,-112,o),
(215,-95,qs),
(215,-73,o),
(251,-36,o),
(294,-17,qs),
(351,9,ls),
(400,29,o),
(477,102,o),
(500,152,q),
(393,152,l),
(372,117,o),
(303,76,o),
(259,76,qs),
(206,76,o),
(138,141,o),
(138,200,qs),
(138,215,o),
(139,223,q),
(525,223,l),
(539,273,o),
(539,315,qs),
(539,369,o),
(493,456,o),
(400,508,o),
(334,508,qs),
(253,508,o),
(116,430,o),
(34,289,o),
(34,199,qs),
(34,116,o),
(119,7,o),
(193,-7,q),
(130,-54,o),
(130,-116,qs),
(130,-155,o),
(191,-196,o),
(240,-196,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 47 12 2 6 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 5 3 4 3 5 4 128 0 4 6 3 4 6 126 0 1 0 3 5 1 3 103 0 0 0 2 97 0 2 2 42 77 0 6 6 7 98 8 1 7 7 38 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 5 3 4 3 5 4 128 0 4 6 3 4 6 126 0 1 0 3 5 1 3 103 0 6 8 1 7 6 7 102 0 0 0 2 97 0 2 2 42 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
8 8 8 50 8 49 41 18 36 21 43 18 34 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = uni1EBD;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (237,0);
},
{
name = ogonek;
pos = (353,10);
},
{
name = top;
pos = (362,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (118,0);
ref = tildecomb;
}
);
width = 562;
}
);
note = uni1EBD;
unicode = 7869;
},
{
glyphname = uni0259;
kernLeft = c;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,-12,o),
(452,71,o),
(529,213,o),
(529,298,qs),
(529,394,o),
(415,508,o),
(319,508,qs),
(232,508,o),
(97,416,o),
(63,344,q),
(169,344,l),
(190,379,o),
(260,420,o),
(304,420,qs),
(357,420,o),
(425,356,o),
(425,297,qs),
(425,287,o),
(423,273,q),
(37,273,l),
(23,215,o),
(23,181,qs),
(23,130,o),
(69,42,o),
(161,-12,o),
(228,-12,qs)
);
},
{
closed = 1;
nodes = (
(190,76,o),
(128,133,o),
(128,182,q),
(129,192,o),
(129,201,q),
(409,201,l),
(390,141,o),
(298,76,o),
(242,76,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
31 1 6 5 1 76 0 2 1 0 1 2 0 128 0 0 0 5 6 0 5 103 0 1 1 3 97 0 3 3 42 77 8 1 6 6 4 97 7 1 4 4 40 4 78 26 26 0 0 26 34 26 33 29 28 0 25 0 24 34 18 36 21 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = uni0259;
unicode = 601;
},
{
glyphname = f;
kernLeft = f;
kernRight = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(147,0,l),
(219,407,l),
(324,407,l),
(340,496,l),
(234,496,l),
(243,547,ls),
(250,581,o),
(285,610,o),
(320,610,qs),
(349,610,l),
(366,700,l),
(320,700,ls),
(244,700,o),
(152,627,o),
(137,548,qs),
(128,496,l),
(62,496,l),
(47,407,l),
(113,407,l),
(41,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 3 3 2 97 0 2 2 33 77 5 1 0 0 1 95 4 1 1 1 36 77 0 6 6 34 6 78 17 17 19 33 35 17 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 325;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (159,-310);
},
{
name = top;
pos = (292,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(299,-232,o),
(440,-131,o),
(440,-41,qs),
(440,22,o),
(351,92,o),
(274,92,qs),
(182,92,ls),
(113,92,o),
(113,134,qs),
(113,151,o),
(138,174,o),
(158,177,q),
(197,155,o),
(251,155,qs),
(307,155,o),
(402,198,o),
(462,279,o),
(467,332,qs),
(470,375,o),
(453,413,q),
(534,413,l),
(548,496,l),
(360,496,l),
(324,508,o),
(282,508,qs),
(221,508,o),
(123,461,o),
(66,373,o),
(66,315,qs),
(66,263,o),
(96,224,q),
(60,207,o),
(13,142,o),
(13,104,qs),
(13,81,o),
(33,42,o),
(53,31,q),
(12,14,o),
(-33,-49,o),
(-33,-90,qs),
(-33,-157,o),
(87,-232,o),
(179,-232,qs)
);
},
{
closed = 1;
nodes = (
(139,-147,o),
(69,-110,o),
(69,-76,qs),
(69,-37,o),
(129,2,o),
(177,2,qs),
(255,2,ls),
(295,2,o),
(337,-31,o),
(337,-60,qs),
(337,-106,o),
(255,-147,o),
(192,-147,qs)
);
},
{
closed = 1;
nodes = (
(214,240,o),
(165,285,o),
(165,322,qs),
(165,365,o),
(226,423,o),
(273,423,qs),
(315,423,o),
(368,376,o),
(368,339,qs),
(368,296,o),
(305,240,o),
(257,240,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
24 1 9 2 30 11 2 3 9 5 1 6 4 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
12 1 9 0 3 4 9 3 105 8 1 2 2 0 97 1 1 0 0 42 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
12 1 9 0 3 4 9 3 105 8 1 2 2 0 97 0 0 0 42 77 8 1 2 2 1 95 0 1 1 36 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
12 1 9 0 3 4 9 3 105 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
12 1 9 0 3 4 9 3 105 11 1 7 10 1 5 7 5 101 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 77 0 4 4 6 95 0 6 6 34 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
56 56 43 43 0 0 56 67 56 66 62 60 43 55 43 54 50 47 0 42 0 41 37 34 29 27 22 21 20 19 18 16 13 8 22
CALL[ ]	/* CallFunction */";
};
width = 526;
}
);
note = g;
unicode = 103;
},
{
glyphname = gbreve;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (159,-310);
},
{
name = top;
pos = (332,722);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (100,0);
ref = uni0306;
}
);
width = 526;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = uni0123;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (159,-310);
},
{
name = top;
pos = (347,804);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (191,0);
ref = uni0312;
}
);
width = 526;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = gdotaccent;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (159,-310);
},
{
name = top;
pos = (332,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (177,0);
ref = uni0307;
}
);
width = 526;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = h;
kernLeft = b;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,0,l),
(165,257,ls),
(178,332,o),
(270,418,o),
(330,418,qs),
(427,418,o),
(427,321,qs),
(427,303,o),
(422,275,qs),
(374,0,l),
(480,0,l),
(530,285,ls),
(536,320,o),
(536,349,qs),
(536,427,o),
(453,508,o),
(376,508,qs),
(321,508,o),
(225,459,o),
(193,416,q),
(243,700,l),
(137,700,l),
(14,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 1 2 3 1 76 0 0 0 33 77 0 3 3 1 97 0 1 1 42 77 4 1 2 2 34 2 78 19 36 21 35 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = h;
unicode = 104;
},
{
glyphname = hbar;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(126,0,l),
(171,257,ls),
(184,332,o),
(275,418,o),
(335,418,qs),
(432,418,o),
(432,321,qs),
(432,298,o),
(428,275,qs),
(379,0,l),
(485,0,l),
(536,285,ls),
(542,320,o),
(542,349,qs),
(542,427,o),
(459,508,o),
(382,508,qs),
(327,508,o),
(231,459,o),
(199,416,q),
(225,565,l),
(390,565,l),
(403,641,l),
(238,641,l),
(249,700,l),
(143,700,l),
(132,641,l),
(81,641,l),
(67,565,l),
(119,565,l),
(20,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
10 1 6 7 1 76 3 1 1 4 1 0 5 1 0 104 0 2 2 33 77 0 7 7 5 97 0 5 5 42 77 8 1 6 6 34 6 78 19 36 21 35 17 17 17 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = i;
kernLeft = i;
layers = (
{
anchors = (
{
name = bottom;
pos = (74,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(127,0,l),
(214,496,l),
(108,496,l),
(21,0,l)
);
},
{
closed = 1;
nodes = (
(219,586,o),
(259,626,o),
(259,655,qs),
(259,684,o),
(219,723,o),
(190,723,qs),
(161,723,o),
(121,684,o),
(121,655,qs),
(121,626,o),
(161,586,o),
(190,586,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 3 3 2 97 0 2 2 41 77 0 0 0 36 77 0 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 3 3 2 97 0 2 2 39 77 0 0 0 36 77 0 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 2 4 1 3 0 2 3 105 0 0 0 36 77 0 1 1 34 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 236;
}
);
note = i;
unicode = 105;
},
{
glyphname = dotlessi;
kernLeft = dotlessi;
layers = (
{
anchors = (
{
name = bottom;
pos = (67,0);
},
{
name = ogonek;
pos = (120,0);
},
{
name = top;
pos = (154,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,0,l),
(207,496,l),
(101,496,l),
(14,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 36 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 221;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = iacute;
kernLeft = iacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (67,0);
},
{
name = ogonek;
pos = (120,0);
},
{
name = top;
pos = (199,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (1,0);
ref = acutecomb;
}
);
width = 221;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = ibreve;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (67,0);
},
{
name = ogonek;
pos = (120,0);
},
{
name = top;
pos = (194,722);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-39,0);
ref = uni0306;
}
);
width = 221;
}
);
note = ibreve;
unicode = 301;
},
{
glyphname = icircumflex;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (67,0);
},
{
name = ogonek;
pos = (120,0);
},
{
name = top;
pos = (195,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-32,0);
ref = uni0302;
}
);
width = 221;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (67,0);
},
{
name = ogonek;
pos = (120,0);
},
{
name = top;
pos = (194,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-72,0);
ref = uni0308.narrow;
}
);
width = 221;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = i.loclTRK;
layers = (
{
anchors = (
{
name = bottom;
pos = (67,0);
},
{
name = ogonek;
pos = (120,0);
},
{
name = top;
pos = (194,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (39,0);
ref = uni0307;
}
);
width = 221;
}
);
note = i.loclTRK;
},
{
glyphname = igrave;
kernLeft = igrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (67,0);
},
{
name = ogonek;
pos = (120,0);
},
{
name = top;
pos = (199,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (2,0);
ref = gravecomb;
}
);
width = 221;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = imacron;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (67,0);
},
{
name = ogonek;
pos = (120,0);
},
{
name = top;
pos = (182,693);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-78,0);
ref = uni0304;
}
);
width = 221;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = iogonek;
kernLeft = dotlessi;
layers = (
{
anchors = (
{
name = bottom;
pos = (67,0);
},
{
name = ogonek;
pos = (120,0);
},
{
name = top;
pos = (194,723);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,583,o),
(253,624,o),
(253,654,qs),
(253,683,o),
(212,723,o),
(182,723,qs),
(152,723,o),
(112,683,o),
(112,654,qs),
(112,624,o),
(152,583,o),
(182,583,qs)
);
},
{
closed = 1;
nodes = (
(47,-206,o),
(91,-193,q),
(102,-127,l),
(63,-142,o),
(31,-142,qs),
(8,-142,o),
(-18,-122,o),
(-18,-105,qs),
(-18,-83,o),
(18,-46,o),
(61,-27,qs),
(120,0,l),
(207,496,l),
(101,496,l),
(17,15,l),
(-48,-16,o),
(-103,-85,o),
(-103,-126,qs),
(-103,-165,o),
(-42,-206,o),
(7,-206,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
29 1 3 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
5 1 1 1 0 97 0 0 0 41 77 0 2 2 36 77 0 3 3 4 97 6 1 4 4 38 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
5 1 1 1 0 97 0 0 0 39 77 0 2 2 36 77 0 3 3 4 97 6 1 4 4 38 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 3 6 1 4 3 4 101 5 1 1 1 0 97 0 0 0 39 77 0 2 2 36 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 5 1 1 2 0 1 105 0 3 6 1 4 3 4 101 0 2 2 36 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
12 12 0 0 12 32 12 31 28 26 19 18 0 11 0 10 36 7 8 23
CALL[ ]	/* CallFunction */";
};
width = 221;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = itilde;
kernLeft = ibreve;
kernRight = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (67,0);
},
{
name = ogonek;
pos = (120,0);
},
{
name = top;
pos = (191,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-54,0);
ref = tildecomb;
}
);
width = 221;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = ij;
layers = (
{
anchors = (
{
name = bottom;
pos = (74,0);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = i;
},
{
alignment = -1;
pos = (236,0);
ref = j;
}
);
width = 471;
}
);
note = ij;
unicode = 307;
},
{
glyphname = j;
kernLeft = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-72,-220,ls),
(84,-220,o),
(111,-68,qs),
(210,496,l),
(104,496,l),
(5,-67,ls),
(-1,-100,o),
(-37,-129,o),
(-72,-129,qs),
(-111,-129,l),
(-127,-220,l)
);
},
{
closed = 1;
nodes = (
(215,586,o),
(254,626,o),
(254,655,qs),
(254,684,o),
(215,723,o),
(186,723,qs),
(157,723,o),
(117,684,o),
(117,655,qs),
(117,626,o),
(157,586,o),
(186,586,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
5 1 4 4 3 97 0 3 3 41 77 0 1 1 36 77 0 0 0 2 97 0 2 2 38 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
5 1 4 4 3 97 0 3 3 39 77 0 1 1 36 77 0 0 0 2 97 0 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 5 1 4 1 3 4 105 0 1 1 36 77 0 0 0 2 97 0 2 2 38 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
11 11 11 22 11 21 37 34 19 32 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 235;
}
);
note = j;
unicode = 106;
},
{
glyphname = uni0237;
layers = (
{
anchors = (
{
name = bottom;
pos = (20,-310);
},
{
name = top;
pos = (162,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-72,-220,ls),
(84,-220,o),
(111,-68,qs),
(210,496,l),
(104,496,l),
(5,-67,ls),
(-1,-100,o),
(-37,-129,o),
(-72,-129,qs),
(-111,-129,l),
(-127,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 1 1 36 77 0 0 0 2 97 0 2 2 38 2 78 34 19 32 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 235;
}
);
note = uni0237;
unicode = 567;
},
{
glyphname = uni006A0301;
kernLeft = uni006A0301;
layers = (
{
anchors = (
{
name = bottom;
pos = (20,-310);
},
{
name = top;
pos = (207,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni0237;
},
{
alignment = -1;
pos = (9,0);
ref = acutecomb;
}
);
width = 235;
}
);
note = uni006A0301;
},
{
glyphname = k;
kernLeft = b;
kernRight = k;
layers = (
{
anchors = (
{
name = bottom;
pos = (211,0);
},
{
name = top;
pos = (386,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(119,0,l),
(161,236,l),
(328,0,l),
(458,0,l),
(265,260,l),
(528,496,l),
(391,496,l),
(170,287,l),
(243,700,l),
(137,700,l),
(13,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
8 5 2 3 2 1 1 76 0 0 0 33 77 0 1 1 36 77 3 1 2 2 34 2 78 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 509;
}
);
note = k;
unicode = 107;
},
{
glyphname = uni0137;
kernRight = k;
layers = (
{
anchors = (
{
name = bottom;
pos = (166,-256);
},
{
name = top;
pos = (386,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = k;
},
{
alignment = -1;
pos = (199,0);
ref = uni0326;
}
);
width = 509;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = l;
kernLeft = b;
kernRight = l;
layers = (
{
anchors = (
{
name = bottom;
pos = (67,0);
},
{
name = top;
pos = (190,700);
},
{
name = topright;
pos = (338,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(119,0,l),
(243,700,l),
(137,700,l),
(13,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 222;
}
);
note = l;
unicode = 108;
},
{
glyphname = lacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (67,0);
},
{
name = top;
pos = (233,942);
},
{
name = topright;
pos = (338,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (1,0);
ref = acutecomb.case;
}
);
width = 222;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = lcaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (67,0);
},
{
name = top;
pos = (190,700);
},
{
name = topright;
pos = (338,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (206,0);
ref = uni030C.alt;
}
);
width = 222;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = uni013C;
layers = (
{
anchors = (
{
name = bottom;
pos = (22,-256);
},
{
name = top;
pos = (190,700);
},
{
name = topright;
pos = (338,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (56,0);
ref = uni0326;
}
);
width = 222;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(119,0,l),
(243,700,l),
(137,700,l),
(13,0,l)
);
},
{
closed = 1;
nodes = (
(324,311,o),
(357,343,o),
(357,366,qs),
(357,390,o),
(324,423,o),
(301,423,qs),
(277,423,o),
(245,390,o),
(245,366,qs),
(245,343,o),
(277,311,o),
(301,311,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 4 1 3 1 2 3 105 0 0 0 33 77 0 1 1 34 1 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 347;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = lslash;
kernLeft = lslash;
kernRight = lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(133,0,l),
(198,368,l),
(275,396,l),
(293,496,l),
(216,468,l),
(257,700,l),
(151,700,l),
(103,429,l),
(26,402,l),
(9,301,l),
(85,328,l),
(27,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
7 6 1 3 1 0 1 76 0 0 0 33 77 0 1 1 34 1 78 21 20 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 274;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = m;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,0,l),
(165,257,ls),
(178,332,o),
(263,418,o),
(316,418,qs),
(359,418,o),
(404,368,o),
(404,319,qs),
(404,296,o),
(400,275,qs),
(352,0,l),
(457,0,l),
(506,273,ls),
(518,339,o),
(601,418,o),
(653,418,qs),
(696,418,o),
(742,368,o),
(742,320,qs),
(742,302,o),
(737,275,qs),
(689,0,l),
(795,0,l),
(846,285,ls),
(852,318,o),
(852,346,qs),
(852,417,o),
(769,508,o),
(686,508,qs),
(634,508,o),
(537,457,o),
(504,412,q),
(488,459,o),
(410,508,o),
(354,508,qs),
(304,508,o),
(221,462,o),
(191,421,q),
(195,496,l),
(101,496,l),
(14,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
2 1 4 0 8 1 3 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
6 1 4 4 0 97 2 1 2 0 0 36 77 7 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 0 36 77 6 1 4 4 1 97 2 1 1 1 42 77 7 5 2 3 3 34 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
19 37 19 37 21 36 35 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 887;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (242,0);
},
{
name = top;
pos = (330,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,0,l),
(167,263,ls),
(179,333,o),
(270,418,o),
(330,418,qs),
(427,418,o),
(427,320,qs),
(427,297,o),
(422,275,qs),
(374,0,l),
(480,0,l),
(530,285,ls),
(536,318,o),
(536,346,qs),
(536,424,o),
(451,508,o),
(375,508,qs),
(318,508,o),
(221,456,o),
(189,410,q),
(196,496,l),
(101,496,l),
(14,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 2 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 3 3 0 97 1 1 0 0 36 77 4 1 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 36 77 0 3 3 1 97 0 1 1 42 77 4 1 2 2 34 2 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
19 36 21 35 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = n;
unicode = 110;
},
{
glyphname = nacute;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (242,0);
},
{
name = top;
pos = (375,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (177,0);
ref = acutecomb;
}
);
width = 571;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = ncaron;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (242,0);
},
{
name = top;
pos = (371,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (145,0);
ref = uni030C;
}
);
width = 571;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = uni0146;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (197,-256);
},
{
name = top;
pos = (330,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (231,0);
ref = uni0326;
}
);
width = 571;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = ntilde;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (242,0);
},
{
name = top;
pos = (367,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (123,0);
ref = tildecomb;
}
);
width = 571;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = eng;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (242,0);
},
{
name = top;
pos = (330,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,0,l),
(167,263,ls),
(179,335,o),
(270,418,o),
(330,418,qs),
(427,418,o),
(427,320,qs),
(427,297,o),
(422,275,qs),
(362,-67,ls),
(355,-101,o),
(320,-129,o),
(286,-129,qs),
(252,-129,l),
(236,-220,l),
(286,-220,ls),
(360,-220,o),
(453,-148,o),
(467,-68,qs),
(530,285,ls),
(536,318,o),
(536,346,qs),
(536,424,o),
(451,508,o),
(375,508,qs),
(318,508,o),
(221,456,o),
(189,410,q),
(196,496,l),
(101,496,l),
(14,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 5 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 4 4 0 97 1 1 0 0 36 77 0 5 5 34 77 0 3 3 2 97 0 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 0 0 36 77 0 4 4 1 97 0 1 1 42 77 0 5 5 34 77 0 3 3 2 97 0 2 2 38 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
19 38 33 39 35 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = eng;
unicode = 331;
},
{
glyphname = o;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (249,0);
},
{
name = ogonek;
pos = (365,10);
},
{
name = top;
pos = (337,496);
},
{
name = topright;
pos = (611,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(334,-12,o),
(471,69,o),
(550,208,o),
(550,292,qs),
(550,351,o),
(499,449,o),
(400,508,o),
(332,508,qs),
(250,508,o),
(113,429,o),
(34,292,o),
(34,207,qs),
(34,145,o),
(88,45,o),
(187,-12,o),
(251,-12,qs)
);
},
{
closed = 1;
nodes = (
(211,80,o),
(142,154,o),
(142,214,qs),
(142,270,o),
(187,363,o),
(267,417,o),
(317,417,qs),
(372,417,o),
(443,342,o),
(443,281,qs),
(443,225,o),
(398,133,o),
(318,80,o),
(267,80,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 42 77 5 1 3 3 1 97 4 1 1 1 40 1 78 16 16 0 0 16 29 16 28 23 21 0 15 0 14 38 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = o;
unicode = 111;
},
{
glyphname = oacute;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (249,0);
},
{
name = ogonek;
pos = (365,10);
},
{
name = top;
pos = (382,749);
},
{
name = topright;
pos = (611,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (184,0);
ref = acutecomb;
}
);
width = 584;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = obreve;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (249,0);
},
{
name = ogonek;
pos = (365,10);
},
{
name = top;
pos = (377,722);
},
{
name = topright;
pos = (611,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (144,0);
ref = uni0306;
}
);
width = 584;
}
);
note = obreve;
unicode = 335;
},
{
glyphname = ocircumflex;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (249,0);
},
{
name = ogonek;
pos = (365,10);
},
{
name = top;
pos = (378,730);
},
{
name = topright;
pos = (611,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (151,0);
ref = uni0302;
}
);
width = 584;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = odieresis;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (249,0);
},
{
name = ogonek;
pos = (365,10);
},
{
name = top;
pos = (377,723);
},
{
name = topright;
pos = (611,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (121,0);
ref = uni0308;
}
);
width = 584;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = ograve;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (249,0);
},
{
name = ogonek;
pos = (365,10);
},
{
name = top;
pos = (382,749);
},
{
name = topright;
pos = (611,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (184,0);
ref = gravecomb;
}
);
width = 584;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = ohungarumlaut;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (249,0);
},
{
name = ogonek;
pos = (365,10);
},
{
name = top;
pos = (374,711);
},
{
name = topright;
pos = (611,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (161,0);
ref = uni030B;
}
);
width = 584;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = omacron;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (249,0);
},
{
name = ogonek;
pos = (365,10);
},
{
name = top;
pos = (364,693);
},
{
name = topright;
pos = (611,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (105,0);
ref = uni0304;
}
);
width = 584;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(327,-12,o),
(464,69,o),
(544,208,o),
(544,292,qs),
(544,363,o),
(508,418,q),
(590,496,l),
(500,496,l),
(466,464,l),
(408,508,o),
(325,508,qs),
(243,508,o),
(107,429,o),
(28,291,o),
(28,207,qs),
(28,136,o),
(65,79,q),
(-17,0,l),
(73,0,l),
(108,33,l),
(164,-12,o),
(245,-12,qs)
);
},
{
closed = 1;
nodes = (
(216,79,o),
(182,105,q),
(427,340,l),
(438,313,o),
(438,281,qs),
(438,230,o),
(396,137,o),
(315,79,o),
(261,79,qs)
);
},
{
closed = 1;
nodes = (
(145,156,l),
(134,183,o),
(134,214,qs),
(134,264,o),
(177,359,o),
(257,418,o),
(311,418,qs),
(359,418,o),
(390,391,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
12 1 5 1 39 38 28 27 4 4 5 1 1 0 4 3 76 15 1 5 4 1 4 2 75
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
12 1 5 2 39 38 28 27 4 4 5 1 1 0 4 3 76 15 1 5 4 1 4 2 75
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 42 77 7 1 4 4 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 36 77 0 5 5 1 97 0 1 1 42 77 0 0 0 34 77 7 1 4 4 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
22 22 0 0 33 31 22 30 22 29 0 21 0 20 18 38 18 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = otilde;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (249,0);
},
{
name = ogonek;
pos = (365,10);
},
{
name = top;
pos = (374,705);
},
{
name = topright;
pos = (611,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (129,0);
ref = tildecomb;
}
);
width = 584;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = oe;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (442,0);
},
{
name = top;
pos = (530,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(315,-12,o),
(428,39,o),
(469,84,q),
(495,38,o),
(588,-12,o),
(649,-12,qs),
(727,-12,o),
(868,72,o),
(907,152,q),
(800,152,l),
(778,116,o),
(708,76,o),
(664,76,qs),
(611,76,o),
(543,141,o),
(543,199,qs),
(543,207,o),
(545,223,q),
(931,223,l),
(945,282,o),
(945,315,qs),
(945,369,o),
(898,456,o),
(806,508,o),
(741,508,qs),
(674,508,o),
(558,455,o),
(518,408,q),
(492,455,o),
(396,508,o),
(332,508,qs),
(250,508,o),
(113,429,o),
(34,291,o),
(34,207,qs),
(34,148,o),
(86,48,o),
(184,-12,o),
(251,-12,qs)
);
},
{
closed = 1;
nodes = (
(208,80,o),
(142,155,o),
(142,214,qs),
(142,264,o),
(184,358,o),
(264,417,o),
(317,417,qs),
(372,417,o),
(443,342,o),
(443,281,qs),
(443,230,o),
(401,137,o),
(321,80,o),
(267,80,qs)
);
},
{
closed = 1;
nodes = (
(559,296,l),
(578,355,o),
(670,421,o),
(726,421,qs),
(777,421,o),
(840,364,o),
(840,315,qs),
(840,303,o),
(839,296,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 80 values pushed */
10 1 10 7 35 1 3 4 2 76 0 4 2 3 2 4 3 128 0 10 0 2 4 10 2 103 9 1 7 7 0 97 1 1 0 0 42 77 12 8 2 3 3 5 97 11 6 2 5 5 40 5 78 39 39 0 0 61 60 58 56 39 52 39 51 46 44 0 38 0 37 34 18 36 21 36 38 13 8 28
CALL[ ]	/* CallFunction */";
};
width = 967;
}
);
note = oe;
unicode = 339;
},
{
glyphname = p;
kernLeft = p;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(81,-220,l),
(134,76,l),
(153,37,o),
(238,-12,o),
(292,-12,qs),
(374,-12,o),
(505,69,o),
(579,209,o),
(579,295,qs),
(579,355,o),
(531,452,o),
(439,508,o),
(376,508,qs),
(266,508,o),
(194,420,q),
(198,496,l),
(101,496,l),
(-25,-220,l)
);
},
{
closed = 1;
nodes = (
(232,81,o),
(160,155,o),
(160,215,qs),
(160,269,o),
(204,361,o),
(287,416,o),
(341,416,qs),
(399,416,o),
(470,338,o),
(470,278,qs),
(470,222,o),
(425,132,o),
(344,81,o),
(292,81,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
2 1 4 0 15 1 2 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 0 97 1 1 0 0 36 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 0 36 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
18 18 18 31 18 30 38 19 38 34 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = p;
unicode = 112;
},
{
glyphname = thorn;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(81,-220,l),
(134,76,l),
(153,37,o),
(238,-12,o),
(292,-12,qs),
(374,-12,o),
(505,69,o),
(579,209,o),
(579,295,qs),
(579,355,o),
(531,452,o),
(439,508,o),
(376,508,qs),
(270,508,o),
(195,426,q),
(243,700,l),
(137,700,l),
(-25,-220,l)
);
},
{
closed = 1;
nodes = (
(232,81,o),
(160,155,o),
(160,215,qs),
(160,269,o),
(204,361,o),
(287,416,o),
(341,416,qs),
(399,416,o),
(470,338,o),
(470,278,qs),
(470,222,o),
(425,132,o),
(344,81,o),
(292,81,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
2 1 4 1 15 1 2 5 2 76 0 0 0 33 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 2 98 0 2 2 40 77 0 3 3 38 3 78 18 18 18 31 18 30 38 19 38 34 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = q;
kernLeft = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(367,-220,l),
(473,-220,l),
(599,496,l),
(504,496,l),
(479,421,l),
(459,462,o),
(377,508,o),
(316,508,qs),
(245,508,o),
(115,436,o),
(35,300,o),
(35,208,qs),
(35,152,o),
(78,52,o),
(168,-12,o),
(235,-12,qs),
(344,-12,o),
(418,77,q)
);
},
{
closed = 1;
nodes = (
(213,81,o),
(144,159,o),
(144,219,qs),
(144,266,o),
(184,357,o),
(266,416,o),
(324,416,qs),
(383,416,o),
(452,345,o),
(452,286,qs),
(452,237,o),
(411,143,o),
(329,81,o),
(272,81,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
12 1 4 1 17 1 0 5 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
12 1 4 2 17 1 0 5 2 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 1 97 2 1 1 1 42 77 6 1 5 5 0 97 0 0 0 40 77 0 3 3 38 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 2 36 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 0 97 0 0 0 40 77 0 3 3 38 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
18 18 18 31 18 30 39 17 19 38 32 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = q;
unicode = 113;
},
{
glyphname = r;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (73,0);
},
{
name = top;
pos = (228,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,0,l),
(165,251,ls),
(190,397,o),
(345,397,qs),
(374,397,l),
(393,508,l),
(330,508,o),
(226,454,o),
(191,407,q),
(197,496,l),
(101,496,l),
(14,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 2 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 2 2 0 97 1 1 0 0 36 77 0 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 36 77 0 2 2 1 97 0 1 1 42 77 0 3 3 34 3 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
18 33 19 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 366;
}
);
note = r;
unicode = 114;
},
{
glyphname = racute;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (73,0);
},
{
name = top;
pos = (273,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (75,0);
ref = acutecomb;
}
);
width = 366;
}
);
note = racute;
unicode = 341;
},
{
glyphname = rcaron;
kernLeft = rcaron;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (73,0);
},
{
name = top;
pos = (269,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (42,0);
ref = uni030C;
}
);
width = 366;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = uni0157;
kernLeft = dotlessi;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (28,-256);
},
{
name = top;
pos = (228,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (61,0);
ref = uni0326;
}
);
width = 366;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = s;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (211,0);
},
{
name = top;
pos = (299,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(284,-12,o),
(387,32,o),
(444,112,o),
(444,163,qs),
(444,221,o),
(357,280,o),
(281,297,qs),
(230,309,o),
(181,336,o),
(181,360,qs),
(181,387,o),
(233,424,o),
(274,424,qs),
(314,424,o),
(362,386,o),
(361,354,q),
(464,354,l),
(467,426,o),
(369,508,o),
(285,508,qs),
(225,508,o),
(129,466,o),
(74,392,o),
(74,346,qs),
(74,273,o),
(160,239,qs),
(193,224,o),
(236,214,qs),
(286,204,o),
(334,176,o),
(334,149,qs),
(334,114,o),
(279,73,o),
(231,73,qs),
(177,73,o),
(123,124,o),
(125,165,q),
(19,165,l),
(15,112,o),
(60,32,o),
(153,-12,o),
(217,-12,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 3 4 0 4 3 114 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 42 77 0 1 1 5 97 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 42 77 0 1 1 5 97 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 3 4 0 4 3 114 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 42 77 0 1 1 5 97 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 42 77 0 1 1 5 97 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 41 0 40 34 18 44 34 19 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 499;
}
);
note = s;
unicode = 115;
},
{
glyphname = sacute;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (211,0);
},
{
name = top;
pos = (344,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (146,0);
ref = acutecomb;
}
);
width = 499;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = scaron;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (211,0);
},
{
name = top;
pos = (340,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (113,0);
ref = uni030C;
}
);
width = 499;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = scedilla;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (165,-261);
},
{
name = top;
pos = (299,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(200,-261,ls),
(260,-261,o),
(345,-194,o),
(345,-137,qs),
(345,-97,o),
(283,-55,o),
(232,-56,q),
(240,-11,l),
(332,-6,o),
(444,90,o),
(444,163,qs),
(444,221,o),
(357,280,o),
(281,297,qs),
(230,309,o),
(181,336,o),
(181,360,qs),
(181,387,o),
(233,424,o),
(274,424,qs),
(314,424,o),
(362,386,o),
(361,354,q),
(464,354,l),
(467,426,o),
(369,508,o),
(285,508,qs),
(225,508,o),
(129,466,o),
(74,392,o),
(74,346,qs),
(74,273,o),
(160,239,qs),
(193,224,o),
(236,214,qs),
(286,204,o),
(334,176,o),
(334,149,qs),
(334,114,o),
(279,73,o),
(231,73,qs),
(177,73,o),
(123,124,o),
(125,165,q),
(19,165,l),
(13,95,o),
(95,2,o),
(172,-9,q),
(153,-115,l),
(208,-115,ls),
(263,-115,o),
(263,-148,qs),
(262,-172,o),
(225,-197,o),
(194,-197,qs),
(92,-197,l),
(81,-261,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
8 1 7 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 5 6 2 6 5 114 0 2 3 6 2 3 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 100 0 6 6 4 97 0 4 4 42 77 0 3 3 7 97 0 7 7 40 7 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 100 0 6 6 4 97 0 4 4 42 77 0 3 3 7 97 0 7 7 40 7 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 5 6 2 6 5 114 0 2 3 6 2 3 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 100 0 6 6 4 97 0 4 4 42 77 0 3 3 7 97 0 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 100 0 6 6 4 97 0 4 4 42 77 0 3 3 7 97 0 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
56 54 17 26 34 18 44 34 20 35 32 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 499;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = uni0219;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (166,-256);
},
{
name = top;
pos = (299,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (199,0);
ref = uni0326;
}
);
width = 499;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = germandbls;
kernRight = germandbls;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(468,-10,o),
(569,38,o),
(625,122,o),
(625,176,qs),
(625,228,o),
(572,292,o),
(512,314,qs),
(462,332,o),
(416,359,o),
(416,380,qs),
(416,398,o),
(446,426,o),
(480,447,qs),
(508,464,o),
(526,477,qs),
(554,498,o),
(585,551,o),
(585,587,qs),
(585,627,o),
(537,694,o),
(446,732,o),
(384,732,qs),
(266,732,o),
(122,612,o),
(105,515,qs),
(13,0,l),
(119,0,l),
(209,506,ls),
(221,572,o),
(300,643,o),
(369,643,qs),
(420,643,o),
(476,604,o),
(476,570,qs),
(476,545,o),
(448,507,o),
(416,484,o),
(371,455,qs),
(306,413,o),
(306,358,qs),
(306,319,o),
(366,267,o),
(435,242,qs),
(480,226,o),
(518,190,o),
(518,164,qs),
(518,122,o),
(461,71,o),
(414,71,qs),
(372,71,o),
(323,118,o),
(323,158,qs),
(324,172,l),
(221,172,l),
(215,89,o),
(313,-10,o),
(403,-10,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
4 1 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 0 2 1 1 0 114 0 2 2 4 97 0 4 4 41 77 0 1 1 3 98 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 1 1 3 98 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 3 3 34 77 0 1 1 5 98 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 2 1 2 0 1 128 0 4 0 2 0 4 2 105 0 3 3 34 77 0 1 1 5 98 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 56 0 55 35 33 30 29 26 24 35 18 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = t;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (170,0);
},
{
name = top;
pos = (230,496);
},
{
name = topright;
pos = (366,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(293,0,l),
(309,91,l),
(243,91,ls),
(209,91,o),
(179,113,o),
(179,140,qs),
(181,164,l),
(225,407,l),
(364,407,l),
(381,496,l),
(240,496,l),
(262,616,l),
(155,616,l),
(134,496,l),
(55,496,l),
(39,407,l),
(118,407,l),
(75,164,ls),
(70,136,o),
(70,117,qs),
(70,55,o),
(142,0,o),
(210,0,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
16 1 5 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 1 1 2 112 4 1 0 0 1 95 3 1 1 1 36 77 0 5 5 6 95 7 1 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 1 2 133 4 1 0 0 1 95 3 1 1 1 36 77 0 5 5 6 95 7 1 6 6 34 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 0 22 0 21 36 17 17 17 17 21 8 8 28
CALL[ ]	/* CallFunction */";
};
width = 371;
}
);
note = t;
unicode = 116;
},
{
glyphname = tcaron;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (170,0);
},
{
name = top;
pos = (230,496);
},
{
name = topright;
pos = (366,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (234,0);
ref = uni030C.alt;
}
);
width = 371;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = uni0163;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (124,-261);
},
{
name = top;
pos = (230,496);
},
{
name = topright;
pos = (366,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(293,0,l),
(309,91,l),
(243,91,ls),
(209,91,o),
(179,113,o),
(179,140,qs),
(181,164,l),
(225,407,l),
(364,407,l),
(381,496,l),
(240,496,l),
(262,616,l),
(155,616,l),
(134,496,l),
(55,496,l),
(39,407,l),
(118,407,l),
(75,164,ls),
(70,136,o),
(70,117,qs),
(70,36,o),
(135,11,q),
(112,-115,l),
(167,-115,ls),
(222,-115,o),
(222,-148,qs),
(221,-172,o),
(184,-197,o),
(153,-197,qs),
(51,-197,l),
(40,-261,l),
(159,-261,ls),
(219,-261,o),
(304,-194,o),
(304,-137,qs),
(304,-97,o),
(242,-55,o),
(191,-56,q),
(201,0,l),
(210,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
33 1 9 4 17 1 10 9 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 6 5 5 6 112 0 0 0 3 2 0 3 105 0 2 0 1 2 1 99 8 1 4 4 5 95 7 1 5 5 36 77 0 9 9 10 95 11 1 10 10 34 10 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 6 5 6 133 0 0 0 3 2 0 3 105 0 2 0 1 2 1 99 8 1 4 4 5 95 7 1 5 5 36 77 0 9 9 10 95 11 1 10 10 34 10 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 39 0 38 37 35 17 17 17 17 22 35 33 36 17 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 371;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = uni021B;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (125,-256);
},
{
name = top;
pos = (230,496);
},
{
name = topright;
pos = (366,992);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (158,0);
ref = uni0326;
}
);
width = 371;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = u;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (242,0);
},
{
name = ogonek;
pos = (470,0);
},
{
name = top;
pos = (330,496);
},
{
name = topright;
pos = (600,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(253,-12,o),
(350,40,o),
(382,86,q),
(376,0,l),
(470,0,l),
(557,496,l),
(451,496,l),
(405,233,ls),
(393,161,o),
(301,78,o),
(242,78,qs),
(145,78,o),
(145,177,qs),
(145,194,o),
(149,222,qs),
(198,496,l),
(92,496,l),
(41,211,ls),
(35,180,o),
(35,151,qs),
(35,73,o),
(120,-12,o),
(196,-12,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
19 1 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
2 1 0 0 36 77 0 1 1 3 98 5 4 2 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 36 77 0 3 3 34 77 0 1 1 4 98 5 1 4 4 40 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 22 0 21 17 19 36 21 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = u;
unicode = 117;
},
{
glyphname = uacute;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (242,0);
},
{
name = ogonek;
pos = (470,0);
},
{
name = top;
pos = (375,749);
},
{
name = topright;
pos = (600,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (177,0);
ref = acutecomb;
}
);
width = 571;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ubreve;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (242,0);
},
{
name = ogonek;
pos = (470,0);
},
{
name = top;
pos = (370,722);
},
{
name = topright;
pos = (600,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (138,0);
ref = uni0306;
}
);
width = 571;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = ucircumflex;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (242,0);
},
{
name = ogonek;
pos = (470,0);
},
{
name = top;
pos = (371,730);
},
{
name = topright;
pos = (600,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (145,0);
ref = uni0302;
}
);
width = 571;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (242,0);
},
{
name = ogonek;
pos = (470,0);
},
{
name = top;
pos = (370,723);
},
{
name = topright;
pos = (600,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (115,0);
ref = uni0308;
}
);
width = 571;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = ugrave;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (242,0);
},
{
name = ogonek;
pos = (470,0);
},
{
name = top;
pos = (375,749);
},
{
name = topright;
pos = (600,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (178,0);
ref = gravecomb;
}
);
width = 571;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uhungarumlaut;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (242,0);
},
{
name = ogonek;
pos = (470,0);
},
{
name = top;
pos = (368,711);
},
{
name = topright;
pos = (600,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (154,0);
ref = uni030B;
}
);
width = 571;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = umacron;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (242,0);
},
{
name = ogonek;
pos = (470,0);
},
{
name = top;
pos = (358,693);
},
{
name = topright;
pos = (600,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (98,0);
ref = uni0304;
}
);
width = 571;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = uogonek;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (242,0);
},
{
name = ogonek;
pos = (470,0);
},
{
name = top;
pos = (330,496);
},
{
name = topright;
pos = (600,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(253,-12,o),
(350,40,o),
(382,86,q),
(377,20,l),
(307,-12,o),
(247,-83,o),
(247,-126,qs),
(247,-165,o),
(308,-206,o),
(357,-206,qs),
(397,-206,o),
(441,-193,q),
(452,-127,l),
(413,-142,o),
(381,-142,qs),
(358,-142,o),
(332,-122,o),
(332,-105,qs),
(332,-83,o),
(368,-46,o),
(411,-27,qs),
(470,0,l),
(557,496,l),
(451,496,l),
(405,233,ls),
(393,161,o),
(301,78,o),
(242,78,qs),
(145,78,o),
(145,177,qs),
(145,194,o),
(149,222,qs),
(198,496,l),
(92,496,l),
(41,211,ls),
(35,180,o),
(35,151,qs),
(35,73,o),
(120,-12,o),
(196,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
36 1 1 0 26 1 3 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
2 1 0 0 36 77 0 1 1 5 98 6 1 5 5 40 77 0 3 3 4 97 0 4 4 38 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 0 4 3 4 101 2 1 0 0 36 77 0 1 1 5 98 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 39 0 38 35 39 19 36 21 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = uring;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (242,0);
},
{
name = ogonek;
pos = (470,0);
},
{
name = top;
pos = (378,766);
},
{
name = topright;
pos = (600,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (175,0);
ref = uni030A;
}
);
width = 571;
}
);
note = uring;
unicode = 367;
},
{
glyphname = utilde;
kernLeft = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (242,0);
},
{
name = ogonek;
pos = (470,0);
},
{
name = top;
pos = (367,705);
},
{
name = topright;
pos = (600,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (123,0);
ref = tildecomb;
}
);
width = 571;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = v;
kernLeft = v;
kernRight = v;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,0,l),
(562,496,l),
(450,496,l),
(237,100,l),
(163,496,l),
(53,496,l),
(155,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 2 0 1 76 1 1 0 0 36 77 0 2 2 34 2 78 17 18 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 527;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (334,0);
},
{
name = top;
pos = (422,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,0,l),
(403,390,l),
(448,0,l),
(558,0,l),
(790,496,l),
(685,496,l),
(523,123,l),
(481,496,l),
(362,496,l),
(188,123,l),
(158,496,l),
(53,496,l),
(111,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
10 5 2 3 3 0 1 76 2 1 2 0 0 36 77 4 1 3 3 34 3 78 18 17 18 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = w;
unicode = 119;
},
{
glyphname = wacute;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (334,0);
},
{
name = top;
pos = (467,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (269,0);
ref = acutecomb;
}
);
width = 755;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = wcircumflex;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (334,0);
},
{
name = top;
pos = (463,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (236,0);
ref = uni0302;
}
);
width = 755;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = wdieresis;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (334,0);
},
{
name = top;
pos = (462,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (206,0);
ref = uni0308;
}
);
width = 755;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = wgrave;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (334,0);
},
{
name = top;
pos = (467,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (269,0);
ref = gravecomb;
}
);
width = 755;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = x;
kernLeft = x;
kernRight = x;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,0,l),
(229,180,l),
(319,0,l),
(434,0,l),
(310,247,l),
(522,496,l),
(408,496,l),
(261,317,l),
(171,496,l),
(55,496,l),
(180,250,l),
(-33,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 36 77 3 1 2 2 34 2 78 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 489;
}
);
note = x;
unicode = 120;
},
{
glyphname = y;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (233,0);
},
{
name = top;
pos = (321,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(144,-220,l),
(590,496,l),
(478,496,l),
(255,129,l),
(165,496,l),
(52,496,l),
(179,13,l),
(32,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
3 1 2 0 1 76 1 1 0 0 36 77 0 2 2 38 2 78 17 18 17 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
note = y;
unicode = 121;
},
{
glyphname = yacute;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (233,0);
},
{
name = top;
pos = (366,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (168,0);
ref = acutecomb;
}
);
width = 554;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = ycircumflex;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (233,0);
},
{
name = top;
pos = (362,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (136,0);
ref = uni0302;
}
);
width = 554;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = ydieresis;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (233,0);
},
{
name = top;
pos = (361,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (106,0);
ref = uni0308;
}
);
width = 554;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = ygrave;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (233,0);
},
{
name = top;
pos = (366,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (169,0);
ref = gravecomb;
}
);
width = 554;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = uni1EF9;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (233,0);
},
{
name = top;
pos = (358,705);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (114,0);
ref = tildecomb;
}
);
width = 554;
}
);
note = uni1EF9;
unicode = 7929;
},
{
glyphname = z;
kernLeft = z;
kernRight = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (190,0);
},
{
name = top;
pos = (278,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(376,0,l),
(392,88,l),
(122,88,l),
(454,410,l),
(470,496,l),
(89,496,l),
(73,408,l),
(333,408,l),
(2,86,l),
(-14,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 0 0 1 95 0 1 1 36 77 0 2 2 3 95 0 3 3 34 3 78 17 18 17 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 458;
}
);
note = z;
unicode = 122;
},
{
glyphname = zacute;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (190,0);
},
{
name = top;
pos = (323,749);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (125,0);
ref = acutecomb;
}
);
width = 458;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = zcaron;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (190,0);
},
{
name = top;
pos = (319,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (93,0);
ref = uni030C;
}
);
width = 458;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = zdotaccent;
kernLeft = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (190,0);
},
{
name = top;
pos = (318,723);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (163,0);
ref = uni0307;
}
);
width = 458;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = uniA78C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,335,l),
(252,700,l),
(138,700,l),
(90,335,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 229;
}
);
note = uniA78C;
unicode = 42892;
},
{
glyphname = fi;
layers = (
{
anchors = (
{
name = caret_1;
pos = (280,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(147,0,l),
(219,407,l),
(324,407,l),
(340,496,l),
(234,496,l),
(243,547,ls),
(250,581,o),
(285,610,o),
(320,610,qs),
(349,610,l),
(366,700,l),
(320,700,ls),
(244,700,o),
(152,627,o),
(137,548,qs),
(128,496,l),
(62,496,l),
(47,407,l),
(113,407,l),
(41,0,l)
);
},
{
closed = 1;
nodes = (
(452,0,l),
(539,496,l),
(433,496,l),
(346,0,l)
);
},
{
closed = 1;
nodes = (
(543,586,o),
(583,626,o),
(583,655,qs),
(583,684,o),
(543,723,o),
(514,723,qs),
(485,723,o),
(445,684,o),
(445,655,qs),
(445,626,o),
(485,586,o),
(514,586,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 3 2 97 0 2 2 33 77 11 1 10 10 9 97 0 9 9 41 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 3 2 97 0 2 2 33 77 11 1 10 10 9 97 0 9 9 39 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 9 11 1 10 1 9 10 105 0 3 3 2 97 0 2 2 33 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
24 24 24 35 24 34 30 28 17 17 17 17 19 33 35 17 16 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 560;
}
);
note = fi;
unicode = 64257;
},
{
glyphname = fl;
layers = (
{
anchors = (
{
name = caret_1;
pos = (273,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(147,0,l),
(219,407,l),
(324,407,l),
(340,496,l),
(234,496,l),
(243,547,ls),
(250,581,o),
(285,610,o),
(320,610,qs),
(349,610,l),
(366,700,l),
(320,700,ls),
(244,700,o),
(152,627,o),
(137,548,qs),
(128,496,l),
(62,496,l),
(47,407,l),
(113,407,l),
(41,0,l)
);
},
{
closed = 1;
nodes = (
(444,0,l),
(568,700,l),
(462,700,l),
(338,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 2 97 7 1 2 2 33 77 5 1 0 0 1 95 4 1 1 1 36 77 8 1 6 6 34 6 78 17 17 17 17 19 33 35 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 546;
}
);
note = fl;
unicode = 64258;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(258,346,o),
(309,414,q),
(314,384,o),
(360,355,o),
(403,355,q),
(414,418,l),
(397,418,o),
(382,430,o),
(382,444,qs),
(384,463,l),
(402,564,ls),
(405,582,o),
(405,598,qs),
(405,652,o),
(339,710,o),
(278,710,qs),
(217,710,o),
(123,648,o),
(104,591,q),
(178,591,l),
(189,618,o),
(237,647,o),
(267,647,qs),
(298,647,o),
(331,616,o),
(331,587,qs),
(331,581,o),
(329,563,q),
(240,563,ls),
(168,563,o),
(71,498,o),
(71,438,qs),
(71,396,o),
(132,346,o),
(178,346,qs)
);
},
{
closed = 1;
nodes = (
(179,407,o),
(148,428,o),
(148,448,qs),
(148,479,o),
(199,511,o),
(236,511,qs),
(318,511,l),
(309,467,o),
(246,407,o),
(204,407,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
25 1 4 7 32 1 5 4 2 76
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
25 1 4 7 32 1 8 4 2 76
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
25 1 4 7 32 1 5 4 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
25 1 4 7 32 1 8 4 2 76
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 10 8 2 4 4 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 9 6 2 5 5 58 77 10 1 8 8 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 10 8 2 4 4 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 9 6 2 5 5 58 77 10 1 8 8 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 0 5 5 58 77 10 1 8 8 6 97 9 1 6 6 58 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
35 35 0 0 35 44 35 43 39 37 0 34 0 33 17 24 34 18 36 36 11 10 28
CALL[ ]	/* CallFunction */";
};
width = 414;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(280,348,o),
(376,404,o),
(431,502,o),
(431,561,qs),
(431,625,o),
(349,712,o),
(278,712,qs),
(220,712,o),
(125,657,o),
(70,560,o),
(70,501,qs),
(70,435,o),
(154,348,o),
(221,348,qs)
);
},
{
closed = 1;
nodes = (
(194,412,o),
(145,464,o),
(145,506,qs),
(145,566,o),
(215,648,o),
(268,648,qs),
(307,648,o),
(356,596,o),
(356,553,qs),
(356,493,o),
(286,412,o),
(233,412,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 59 77 5 1 3 3 1 97 4 1 1 1 58 1 78 14 14 0 0 14 25 14 24 20 18 0 13 0 12 37 6 10 23
CALL[ ]	/* CallFunction */";
};
width = 401;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = uni042F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-33,0,l),
(95,0,l),
(324,303,l),
(421,303,l),
(368,0,l),
(474,0,l),
(598,700,l),
(373,700,ls),
(248,700,o),
(96,581,o),
(96,473,qs),
(96,414,o),
(163,334,o),
(222,321,q)
);
},
{
closed = 1;
nodes = (
(261,393,o),
(206,443,o),
(206,485,qs),
(206,550,o),
(280,611,o),
(359,611,qs),
(475,611,l),
(437,393,l),
(321,393,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
13 1 2 5 1 76 3 1 1 2 1 134 0 0 0 4 5 0 4 103 6 1 5 2 2 5 87 6 1 5 5 2 95 0 2 5 2 79 14 14 14 22 14 21 35 17 17 17 36 7 6 27
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = uni042F;
unicode = (1071,1103);
},
{
glyphname = uni0394;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-31,0,l),
(619,0,l),
(634,82,l),
(461,700,l),
(374,700,l),
(-17,82,l)
);
},
{
closed = 1;
nodes = (
(92,82,l),
(396,580,l),
(526,82,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 23 77 0 2 2 1 95 0 1 1 24 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 0 2 0 133 0 2 2 1 95 0 1 1 24 1 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
19 18 16 3 7 25
CALL[ ]	/* CallFunction */";
};
width = 694;
}
);
note = uni0394;
unicode = 916;
},
{
glyphname = Pi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,0,l),
(247,414,l),
(449,414,l),
(375,0,l),
(481,0,l),
(555,414,l),
(631,414,l),
(646,496,l),
(79,496,l),
(64,414,l),
(141,414,l),
(67,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 1 4 2 2 0 3 1 0 103 5 1 3 3 24 3 78 17 17 17 17 17 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 637;
}
);
note = Pi;
unicode = 928;
},
{
glyphname = uni03A9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(288,0,l),
(303,86,l),
(241,108,o),
(166,226,o),
(166,306,qs),
(166,386,o),
(238,529,o),
(374,616,o),
(464,616,qs),
(521,616,o),
(615,570,o),
(670,477,o),
(670,410,qs),
(670,348,o),
(620,217,o),
(517,110,o),
(440,86,q),
(424,0,l),
(698,0,l),
(714,82,l),
(583,82,l),
(672,131,o),
(780,316,o),
(780,427,qs),
(780,502,o),
(713,632,o),
(578,712,o),
(481,712,qs),
(368,712,o),
(174,607,o),
(59,423,o),
(59,309,qs),
(59,248,o),
(111,120,o),
(161,82,q),
(28,82,l),
(13,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
34 1 0 4 1 76 0 4 4 1 97 0 1 1 23 77 2 1 0 0 3 95 5 1 3 3 24 3 78 23 40 17 22 38 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 796;
}
);
note = uni03A9;
unicode = 937;
},
{
glyphname = uni03BC;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(95,-220,l),
(136,13,l),
(169,-12,o),
(221,-12,qs),
(277,-12,o),
(375,40,o),
(406,85,q),
(400,0,l),
(495,0,l),
(582,496,l),
(476,496,l),
(430,237,ls),
(417,163,o),
(325,78,o),
(266,78,qs),
(169,78,o),
(169,174,qs),
(169,194,o),
(174,222,qs),
(222,496,l),
(116,496,l),
(-11,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
14 1 1 0 19 1 3 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
2 1 0 1 0 133 0 3 3 24 77 0 1 1 4 97 0 4 4 24 77 0 5 5 25 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
2 1 0 1 0 133 0 1 0 4 5 1 4 105 0 3 3 24 77 0 5 5 25 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 35 17 19 36 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = uni03BC;
unicode = 956;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(373,-12,o),
(524,144,o),
(588,364,o),
(588,468,qs),
(588,583,o),
(487,712,o),
(378,712,qs),
(259,712,o),
(107,559,o),
(40,340,o),
(40,236,qs),
(40,121,o),
(142,-12,o),
(250,-12,qs)
);
},
{
closed = 1;
nodes = (
(148,83,o),
(148,244,qs),
(148,322,o),
(190,495,o),
(287,618,o),
(362,618,qs),
(421,618,o),
(479,535,o),
(479,458,qs),
(479,387,o),
(435,211,o),
(340,83,o),
(267,83,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 39 77 5 1 3 3 1 97 4 1 1 1 40 1 78 14 14 0 0 14 26 14 25 21 19 0 13 0 12 37 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,0,l),
(530,89,l),
(358,89,l),
(467,700,l),
(411,700,l),
(153,610,l),
(136,517,l),
(345,582,l),
(257,89,l),
(56,89,l),
(40,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
3 2 2 0 1 1 76 0 1 1 33 77 2 1 0 0 3 96 0 3 3 34 3 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(491,0,l),
(507,90,l),
(170,90,l),
(370,262,ls),
(439,320,o),
(512,391,o),
(565,485,o),
(565,539,qs),
(565,616,o),
(467,712,o),
(378,712,qs),
(274,712,o),
(128,592,o),
(108,487,q),
(211,487,l),
(221,545,o),
(301,622,o),
(360,622,qs),
(408,622,o),
(459,568,o),
(459,526,qs),
(459,478,o),
(375,379,o),
(300,315,qs),
(278,296,l),
(34,83,l),
(19,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 39 77 0 3 3 4 95 0 4 4 34 4 78 17 23 34 18 39 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(341,-12,o),
(472,62,o),
(541,183,o),
(541,252,qs),
(541,304,o),
(493,383,o),
(408,426,o),
(354,426,q),
(585,614,l),
(600,700,l),
(153,700,l),
(137,611,l),
(452,611,l),
(188,399,l),
(238,327,l),
(276,347,o),
(316,347,qs),
(373,347,o),
(438,294,o),
(438,244,qs),
(438,203,o),
(399,127,o),
(322,79,o),
(268,79,qs),
(209,79,o),
(142,140,o),
(142,189,qs),
(142,198,o),
(143,203,q),
(39,203,l),
(37,181,o),
(37,174,qs),
(37,86,o),
(152,-12,o),
(252,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
20 1 2 5 19 1 0 2 7 1 1 0 3 76 0 0 2 1 2 0 1 128 0 5 0 2 0 5 2 105 0 3 3 4 95 0 4 4 33 77 0 1 1 6 97 7 1 6 6 40 6 78 0 0 0 34 0 33 18 17 19 37 36 20 8 8 28
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(431,0,l),
(456,140,l),
(547,140,l),
(564,233,l),
(472,233,l),
(506,423,l),
(406,423,l),
(373,233,l),
(149,233,l),
(463,700,l),
(356,700,l),
(33,224,l),
(18,140,l),
(350,140,l),
(325,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 33 77 0 6 6 34 6 78 17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(339,-12,o),
(474,64,o),
(552,199,o),
(552,282,qs),
(552,338,o),
(505,428,o),
(416,481,o),
(356,481,qs),
(262,481,o),
(195,420,q),
(264,608,l),
(562,608,l),
(578,700,l),
(201,700,l),
(72,308,l),
(173,308,l),
(194,343,o),
(274,394,o),
(329,394,qs),
(383,394,o),
(448,322,o),
(448,265,qs),
(448,220,o),
(408,134,o),
(328,79,o),
(272,79,qs),
(217,79,o),
(145,140,o),
(144,193,q),
(40,193,l),
(39,191,o),
(39,182,qs),
(39,127,o),
(90,39,o),
(190,-12,o),
(258,-12,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
25 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 5 5 4 95 0 4 4 33 77 0 2 2 6 97 0 6 6 36 77 0 1 1 7 97 8 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 33 77 0 1 1 7 97 8 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 35 0 34 34 17 17 18 37 34 36 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(349,-12,o),
(469,58,o),
(541,180,o),
(541,255,qs),
(541,312,o),
(494,400,o),
(409,450,o),
(356,450,qs),
(243,450,o),
(169,351,q),
(194,477,o),
(300,623,o),
(377,623,qs),
(426,623,o),
(475,565,o),
(475,515,q),
(569,515,l),
(572,564,o),
(538,654,o),
(456,712,o),
(390,712,qs),
(309,712,o),
(159,601,o),
(63,383,o),
(63,233,qs),
(63,133,o),
(161,-12,o),
(278,-12,qs)
);
},
{
closed = 1;
nodes = (
(232,80,o),
(168,146,o),
(168,201,qs),
(168,245,o),
(209,318,o),
(281,360,o),
(325,360,qs),
(378,360,o),
(441,292,o),
(441,239,qs),
(441,197,o),
(403,124,o),
(333,80,o),
(287,80,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
17 1 6 5 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 39 77 8 1 6 6 4 97 7 1 4 4 40 4 78 28 28 0 0 28 41 28 40 35 33 0 27 0 26 35 34 19 37 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(211,0,l),
(609,623,l),
(622,700,l),
(120,700,l),
(104,610,l),
(493,610,l),
(98,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 95 0 1 1 33 77 0 2 2 34 2 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(338,-12,o),
(463,52,o),
(531,161,o),
(531,225,qs),
(531,278,o),
(481,357,o),
(429,375,q),
(482,395,o),
(569,480,o),
(569,550,qs),
(569,624,o),
(466,712,o),
(375,712,qs),
(299,712,o),
(181,656,o),
(117,561,o),
(117,503,qs),
(117,460,o),
(165,392,o),
(207,375,q),
(136,353,o),
(41,244,o),
(41,169,qs),
(41,82,o),
(164,-12,o),
(256,-12,qs)
);
},
{
closed = 1;
nodes = (
(213,79,o),
(146,134,o),
(146,183,qs),
(146,232,o),
(196,296,o),
(271,326,o),
(308,326,qs),
(362,326,o),
(428,273,o),
(428,222,qs),
(428,177,o),
(382,112,o),
(309,79,o),
(269,79,qs)
);
},
{
closed = 1;
nodes = (
(281,409,o),
(221,456,o),
(221,502,qs),
(221,556,o),
(301,624,o),
(359,624,qs),
(409,624,o),
(463,577,o),
(463,533,qs),
(463,495,o),
(425,438,o),
(362,409,o),
(328,409,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
18 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 39 77 7 1 3 3 1 97 6 1 1 1 40 1 78 40 40 26 26 0 0 40 52 40 51 47 45 26 39 26 38 33 31 0 25 0 24 43 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(318,-12,o),
(468,100,o),
(564,318,o),
(564,468,qs),
(564,567,o),
(466,712,o),
(349,712,qs),
(278,712,o),
(158,643,o),
(86,521,o),
(86,445,qs),
(86,389,o),
(133,300,o),
(218,250,o),
(271,250,qs),
(383,250,o),
(458,349,q),
(433,224,o),
(327,78,o),
(250,78,qs),
(201,78,o),
(152,135,o),
(152,185,q),
(58,185,l),
(55,136,o),
(89,46,o),
(171,-12,o),
(237,-12,qs)
);
},
{
closed = 1;
nodes = (
(249,341,o),
(186,408,o),
(186,461,qs),
(186,503,o),
(224,576,o),
(294,620,o),
(340,620,qs),
(395,620,o),
(459,554,o),
(459,499,qs),
(459,455,o),
(418,382,o),
(346,341,o),
(302,341,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
10 1 6 5 1 76 0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 39 77 0 1 1 4 97 7 1 4 4 40 4 78 28 28 0 0 28 41 28 40 35 33 0 27 0 26 38 35 34 19 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = nine;
unicode = 57;
},
{
glyphname = uni24EA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(331,51,o),
(194,130,o),
(115,267,o),
(115,350,qs),
(115,433,o),
(194,570,o),
(331,649,o),
(413,649,qs),
(496,649,o),
(633,570,o),
(712,433,o),
(712,350,qs),
(712,267,o),
(633,130,o),
(496,51,o),
(413,51,qs)
);
},
{
closed = 1;
nodes = (
(484,165,o),
(516,215,qs),
(548,265,o),
(548,350,qs),
(548,435,o),
(516,485,qs),
(484,535,o),
(414,535,qs),
(344,535,o),
(312,484,qs),
(279,435,o),
(279,350,qs),
(279,266,o),
(312,216,qs),
(344,165,o),
(414,165,qs)
);
},
{
closed = 1;
nodes = (
(383,230,o),
(368,261,qs),
(353,294,o),
(353,350,qs),
(353,408,o),
(368,439,qs),
(383,470,o),
(414,470,qs),
(445,470,o),
(460,439,qs),
(475,404,o),
(475,350,qs),
(475,298,o),
(460,261,qs),
(445,230,o),
(414,230,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
0 4 0 6 7 4 6 105 11 1 7 10 1 5 3 7 5 105 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 48 48 32 32 16 16 0 0 48 63 48 62 56 54 32 47 32 46 40 38 16 31 16 30 24 22 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni24EA;
unicode = 9450;
},
{
glyphname = uni2780;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(331,51,o),
(194,130,o),
(115,267,o),
(115,350,qs),
(115,433,o),
(194,570,o),
(331,649,o),
(413,649,qs),
(496,649,o),
(633,570,o),
(712,433,o),
(712,350,qs),
(712,267,o),
(633,130,o),
(496,51,o),
(413,51,qs)
);
},
{
closed = 1;
nodes = (
(541,176,l),
(541,239,l),
(461,239,l),
(461,533,l),
(422,533,l),
(304,491,l),
(304,434,l),
(392,452,l),
(392,239,l),
(301,239,l),
(301,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
36 35 34 3 4 5 1 76 0 5 2 4 2 5 4 128 6 1 4 0 7 3 4 7 104 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 16 16 0 0 42 41 40 39 38 37 33 32 16 31 16 30 24 22 0 15 0 14 38 10 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2780;
unicode = 10112;
},
{
glyphname = uni2781;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(330,51,o),
(194,131,o),
(115,268,o),
(115,350,qs),
(115,432,o),
(194,569,o),
(330,649,o),
(413,649,qs),
(496,649,o),
(633,570,o),
(712,433,o),
(712,350,qs),
(712,267,o),
(633,130,o),
(496,51,o),
(413,51,qs)
);
},
{
closed = 1;
nodes = (
(540,176,l),
(540,239,l),
(390,239,l),
(450,300,ls),
(489,337,o),
(533,397,o),
(533,432,qs),
(533,480,o),
(470,540,o),
(415,540,qs),
(360,540,o),
(291,479,o),
(290,420,q),
(361,420,l),
(361,445,o),
(387,478,o),
(413,478,qs),
(436,478,o),
(462,453,o),
(462,430,qs),
(462,415,o),
(441,382,o),
(409,349,o),
(396,336,qs),
(290,227,l),
(290,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 81 values pushed */
32 1 8 7 1 76 0 5 4 7 4 5 7 128 0 6 0 4 5 6 4 105 0 7 0 8 3 7 8 103 0 2 2 0 97 0 0 0 39 77 10 1 3 3 1 97 9 1 1 1 40 1 78 16 16 0 0 57 56 55 54 48 46 44 43 41 39 16 31 16 30 24 22 0 15 0 14 38 11 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2781;
unicode = 10113;
},
{
glyphname = uni2782;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(331,51,o),
(194,130,o),
(115,267,o),
(115,350,qs),
(115,433,o),
(194,570,o),
(331,649,o),
(413,649,qs),
(496,649,o),
(633,570,o),
(712,433,o),
(712,350,qs),
(712,267,o),
(633,130,o),
(496,51,o),
(413,51,qs)
);
},
{
closed = 1;
nodes = (
(472,158,o),
(543,225,o),
(543,279,qs),
(543,321,o),
(496,382,o),
(447,388,q),
(532,461,l),
(532,522,l),
(294,522,l),
(294,460,l),
(441,460,l),
(338,369,l),
(377,323,l),
(396,334,o),
(415,334,qs),
(439,334,o),
(473,305,o),
(473,278,qs),
(473,250,o),
(443,221,o),
(414,221,qs),
(389,221,o),
(355,251,o),
(355,279,q),
(284,279,l),
(285,220,o),
(356,158,o),
(414,158,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
52 1 7 8 53 47 2 6 7 46 1 4 6 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 6 7 4 7 6 114 0 4 5 7 4 5 126 0 8 0 7 6 8 7 103 0 5 12 1 9 3 5 9 105 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 98 10 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 6 7 4 7 6 4 128 0 4 5 7 4 5 126 0 8 0 7 6 8 7 103 0 5 12 1 9 3 5 9 105 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 98 10 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
32 32 16 16 0 0 32 59 32 58 51 50 49 48 45 43 39 37 35 34 16 31 16 30 24 22 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2782;
unicode = 10114;
},
{
glyphname = uni2783;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(500,176,l),
(500,239,l),
(538,239,l),
(538,302,l),
(500,302,l),
(500,392,l),
(432,392,l),
(432,302,l),
(340,302,l),
(454,533,l),
(383,533,l),
(263,298,l),
(263,239,l),
(427,239,l),
(427,176,l)
);
},
{
closed = 1;
nodes = (
(331,51,o),
(194,130,o),
(115,267,o),
(115,350,qs),
(115,433,o),
(194,570,o),
(331,649,o),
(413,649,qs),
(496,649,o),
(633,570,o),
(712,433,o),
(712,350,qs),
(712,267,o),
(633,130,o),
(496,51,o),
(413,51,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
18 1 2 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 3 9 5 9 3 5 128 0 5 4 4 5 112 0 8 2 10 2 8 114 6 1 4 7 1 2 8 4 2 104 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 3 9 5 9 3 5 128 0 5 4 9 5 4 126 0 8 2 10 2 8 114 6 1 4 7 1 2 8 4 2 104 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 3 9 5 9 3 5 128 0 5 4 9 5 4 126 0 8 2 10 2 8 10 128 6 1 4 7 1 2 8 4 2 104 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
31 31 0 0 31 46 31 45 39 37 30 29 28 27 26 25 24 23 22 21 20 19 17 16 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2783;
unicode = 10115;
},
{
glyphname = uni2784;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(331,51,o),
(194,130,o),
(115,267,o),
(115,350,qs),
(115,433,o),
(194,570,o),
(331,649,o),
(413,649,qs),
(496,649,o),
(633,570,o),
(712,433,o),
(712,350,qs),
(712,267,o),
(633,130,o),
(496,51,o),
(413,51,qs)
);
},
{
closed = 1;
nodes = (
(473,160,o),
(545,233,o),
(545,291,qs),
(545,343,o),
(486,413,o),
(430,413,qs),
(409,413,o),
(371,400,o),
(359,386,q),
(374,461,l),
(522,461,l),
(522,524,l),
(319,524,l),
(289,317,l),
(359,317,l),
(366,334,o),
(398,354,o),
(418,354,qs),
(444,354,o),
(475,318,o),
(475,290,qs),
(475,262,o),
(443,223,o),
(417,223,qs),
(394,223,o),
(361,247,o),
(356,269,q),
(285,269,l),
(287,220,o),
(361,160,o),
(417,160,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
53 1 6 10 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
0 7 6 4 9 7 114 0 4 5 6 4 5 126 0 8 0 9 10 8 9 103 0 10 0 6 7 10 6 105 0 5 14 1 11 3 5 11 105 0 2 2 0 97 0 0 0 39 77 13 1 3 3 1 98 12 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 63 values pushed */
0 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 8 0 9 10 8 9 103 0 10 0 6 7 10 6 105 0 5 14 1 11 3 5 11 105 0 2 2 0 97 0 0 0 39 77 13 1 3 3 1 98 12 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 38 values pushed */
32 32 16 16 0 0 32 62 32 61 57 55 52 51 50 49 48 47 45 43 39 37 35 34 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2784;
unicode = 10116;
},
{
glyphname = uni2785;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(331,51,o),
(194,130,o),
(115,267,o),
(115,350,qs),
(115,433,o),
(194,570,o),
(331,649,o),
(413,649,qs),
(496,649,o),
(633,570,o),
(712,433,o),
(712,350,qs),
(712,267,o),
(633,130,o),
(496,51,o),
(413,51,qs)
);
},
{
closed = 1;
nodes = (
(391,227,o),
(360,260,o),
(360,286,qs),
(360,310,o),
(392,342,o),
(415,342,qs),
(439,342,o),
(471,311,o),
(471,284,qs),
(471,257,o),
(438,227,o),
(416,227,qs)
);
},
{
closed = 1;
nodes = (
(474,165,o),
(540,237,o),
(540,287,qs),
(540,334,o),
(481,403,o),
(434,403,qs),
(407,403,o),
(363,377,o),
(352,357,q),
(354,476,o),
(417,476,qs),
(438,476,o),
(463,452,o),
(467,430,q),
(534,430,l),
(532,473,o),
(468,535,o),
(417,535,qs),
(347,535,o),
(280,421,o),
(280,339,qs),
(280,265,o),
(349,165,o),
(420,165,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 103 values pushed */
58 1 4 9 1 76 0 7 8 9 8 7 9 128 0 6 0 8 7 6 8 105 0 9 0 4 5 9 4 105 13 1 5 14 1 10 3 5 10 105 0 2 2 0 97 0 0 0 39 77 12 1 3 3 1 97 11 1 1 1 40 1 78 44 44 32 32 16 16 0 0 44 67 44 66 62 60 57 55 53 52 50 48 32 43 32 42 38 36 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2785;
unicode = 10117;
},
{
glyphname = uni2786;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(408,167,l),
(549,473,l),
(549,524,l),
(283,524,l),
(283,463,l),
(471,463,l),
(333,167,l)
);
},
{
closed = 1;
nodes = (
(331,51,o),
(194,130,o),
(115,267,o),
(115,350,qs),
(115,433,o),
(194,570,o),
(331,649,o),
(413,649,qs),
(496,649,o),
(633,570,o),
(712,433,o),
(712,350,qs),
(712,267,o),
(633,130,o),
(496,51,o),
(413,51,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
20 1 2 3 1 76 0 4 2 6 2 4 6 128 0 3 0 2 4 3 2 103 0 5 5 0 97 0 0 0 39 77 8 1 6 6 1 97 7 1 1 1 40 1 78 23 23 0 0 23 38 23 37 31 29 22 21 19 18 17 16 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2786;
unicode = 10118;
},
{
glyphname = uni2787;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(149,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(149,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(359,226,o),
(359,278,qs),
(359,305,o),
(390,332,o),
(415,332,qs),
(440,332,o),
(469,304,o),
(469,278,qs),
(469,253,o),
(440,226,o),
(415,226,qs)
);
},
{
closed = 1;
nodes = (
(331,51,o),
(194,131,o),
(115,268,o),
(115,350,qs),
(115,433,o),
(194,570,o),
(331,649,o),
(413,649,qs),
(496,649,o),
(633,569,o),
(712,432,o),
(712,350,qs),
(712,268,o),
(633,131,o),
(496,51,o),
(413,51,qs)
);
},
{
closed = 1;
nodes = (
(467,165,o),
(540,221,o),
(540,272,qs),
(540,304,o),
(512,352,o),
(484,364,q),
(506,374,o),
(532,415,o),
(532,439,qs),
(532,485,o),
(464,535,o),
(414,535,qs),
(361,535,o),
(295,484,o),
(295,439,qs),
(295,389,o),
(344,364,q),
(316,352,o),
(287,303,o),
(287,272,qs),
(287,223,o),
(362,165,o),
(414,165,qs)
);
},
{
closed = 1;
nodes = (
(393,385,o),
(368,410,o),
(368,430,qs),
(368,477,o),
(414,477,qs),
(436,477,o),
(460,452,o),
(460,430,qs),
(460,409,o),
(436,385,o),
(414,385,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 99 values pushed */
59 48 2 2 9 1 76 0 6 0 8 9 6 8 105 14 1 9 0 2 3 9 2 105 11 1 3 13 1 7 5 3 7 105 0 4 4 0 97 0 0 0 39 77 12 1 5 5 1 97 10 1 1 1 40 1 78 66 66 43 43 27 27 16 16 0 0 66 76 66 75 72 70 43 65 43 64 54 52 27 42 27 41 35 33 16 26 16 25 22 20 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2787;
unicode = 10119;
},
{
glyphname = uni2788;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(331,51,o),
(194,130,o),
(115,267,o),
(115,350,qs),
(115,433,o),
(194,570,o),
(331,649,o),
(413,649,qs),
(496,649,o),
(633,570,o),
(712,433,o),
(712,350,qs),
(712,267,o),
(633,130,o),
(496,51,o),
(413,51,qs)
);
},
{
closed = 1;
nodes = (
(478,165,o),
(546,277,o),
(546,361,qs),
(546,434,o),
(479,535,o),
(406,535,qs),
(354,535,o),
(287,464,o),
(287,414,qs),
(287,378,o),
(318,325,o),
(367,297,o),
(393,297,qs),
(420,297,o),
(462,324,o),
(475,344,q),
(474,296,o),
(445,225,o),
(410,225,qs),
(370,225,o),
(359,270,q),
(293,270,l),
(295,226,o),
(357,165,o),
(409,165,qs)
);
},
{
closed = 1;
nodes = (
(387,359,o),
(356,391,o),
(356,416,qs),
(356,441,o),
(387,473,o),
(410,473,qs),
(435,473,o),
(467,440,o),
(467,415,qs),
(467,391,o),
(435,359,o),
(412,359,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 103 values pushed */
40 1 6 10 1 76 0 4 6 5 6 4 5 128 0 7 0 9 10 7 9 105 14 1 10 0 6 4 10 6 105 0 5 13 1 8 3 5 8 105 0 2 2 0 97 0 0 0 39 77 12 1 3 3 1 98 11 1 1 1 40 1 78 57 57 32 32 16 16 0 0 57 68 57 67 63 61 32 56 32 55 51 49 44 42 38 36 35 34 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2788;
unicode = 10120;
},
{
glyphname = uni278A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(300,239,l),
(392,239,l),
(392,452,l),
(304,434,l),
(304,491,l),
(422,533,l),
(460,533,l),
(460,239,l),
(541,239,l),
(541,176,l),
(300,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
23 22 21 3 2 3 1 76 4 1 2 3 5 3 2 5 128 0 3 3 0 97 0 0 0 39 77 7 1 5 5 1 97 6 1 1 1 40 1 78 16 16 0 0 16 26 16 26 25 24 20 19 18 17 0 15 0 14 38 8 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni278A;
unicode = 10122;
},
{
glyphname = uni278B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(290,227,l),
(396,336,ls),
(409,349,o),
(441,382,o),
(462,415,o),
(462,430,qs),
(462,453,o),
(436,478,o),
(413,478,qs),
(387,478,o),
(361,445,o),
(361,420,q),
(290,420,l),
(291,479,o),
(360,540,o),
(415,540,qs),
(470,540,o),
(533,480,o),
(533,432,qs),
(533,397,o),
(489,337,o),
(450,300,qs),
(390,239,l),
(540,239,l),
(540,176,l),
(290,176,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
40 1 6 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 5 2 5 4 2 128 0 3 3 0 97 0 0 0 39 77 0 2 2 5 97 0 5 5 36 77 8 1 6 6 1 98 7 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 5 2 5 4 2 128 0 5 0 2 6 5 2 103 0 3 3 0 97 0 0 0 39 77 8 1 6 6 1 98 7 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
16 16 0 0 16 41 16 41 33 31 29 28 26 24 18 17 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni278B;
unicode = 10123;
},
{
glyphname = uni278C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(356,158,o),
(285,220,o),
(284,279,q),
(355,279,l),
(355,251,o),
(389,221,o),
(414,221,qs),
(443,221,o),
(473,250,o),
(473,278,qs),
(473,305,o),
(439,334,o),
(415,334,qs),
(396,334,o),
(377,323,q),
(338,369,l),
(441,460,l),
(294,460,l),
(294,522,l),
(532,522,l),
(532,461,l),
(447,388,l),
(496,382,o),
(543,321,o),
(543,279,qs),
(543,225,o),
(472,158,o),
(414,158,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 80 values pushed */
22 1 3 2 27 21 2 4 3 28 1 6 4 3 76 0 3 0 6 5 3 6 103 0 4 0 5 7 4 5 105 0 2 2 0 97 0 0 0 39 77 9 1 7 7 1 97 8 1 1 1 40 1 78 16 16 0 0 16 43 16 42 40 39 37 35 31 29 26 25 24 23 0 15 0 14 38 10 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni278C;
unicode = 10124;
},
{
glyphname = uni278D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(427,239,l),
(264,239,l),
(264,298,l),
(383,533,l),
(454,533,l),
(341,302,l),
(433,302,l),
(433,392,l),
(501,392,l),
(501,302,l),
(538,302,l),
(538,239,l),
(501,239,l),
(501,176,l),
(427,176,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
27 1 2 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 4 6 3 6 4 114 5 1 3 2 6 3 2 126 7 1 2 8 8 2 112 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 4 6 3 6 4 3 128 5 1 3 2 6 3 2 126 7 1 2 8 8 2 112 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 4 6 3 6 4 3 128 5 1 3 2 6 3 2 126 7 1 2 8 6 2 8 126 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
16 16 0 0 16 30 16 30 29 28 26 25 24 23 22 21 20 19 18 17 0 15 0 14 38 11 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni278D;
unicode = 10125;
},
{
glyphname = uni278E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(149,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(149,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(361,160,o),
(287,220,o),
(285,269,q),
(356,269,l),
(361,247,o),
(394,223,o),
(417,223,qs),
(443,223,o),
(475,262,o),
(475,290,qs),
(475,318,o),
(444,354,o),
(418,354,qs),
(398,354,o),
(366,334,o),
(359,317,q),
(289,317,l),
(319,524,l),
(522,524,l),
(522,461,l),
(374,461,l),
(359,386,l),
(371,400,o),
(409,413,o),
(430,413,qs),
(486,413,o),
(545,343,o),
(545,291,qs),
(545,233,o),
(473,160,o),
(417,160,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
24 1 6 2 1 76 0 3 0 2 6 3 2 105 0 5 0 8 7 5 8 103 0 6 0 7 9 6 7 105 0 4 4 0 97 0 0 0 39 77 11 1 9 9 1 97 10 1 1 1 40 1 78 16 16 0 0 16 46 16 45 43 42 40 38 34 32 30 29 28 27 26 25 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni278E;
unicode = 10126;
},
{
glyphname = uni278F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(438,227,o),
(471,257,o),
(471,284,qs),
(471,311,o),
(439,342,o),
(415,342,qs),
(392,342,o),
(360,310,o),
(360,286,qs),
(360,260,o),
(391,227,o),
(416,227,qs)
);
},
{
closed = 1;
nodes = (
(349,165,o),
(280,265,o),
(280,339,qs),
(280,421,o),
(347,535,o),
(417,535,qs),
(468,535,o),
(532,473,o),
(534,430,q),
(467,430,l),
(463,452,o),
(438,476,o),
(417,476,qs),
(354,476,o),
(352,357,q),
(363,377,o),
(407,403,o),
(434,403,qs),
(481,403,o),
(540,334,o),
(540,287,qs),
(540,237,o),
(474,165,o),
(420,165,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
36 1 2 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 6 5 4 5 6 114 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 0 4 4 5 97 0 5 5 36 77 11 1 8 8 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 6 5 4 5 6 114 0 5 0 4 2 5 4 105 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 11 1 8 8 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 6 5 4 5 6 4 128 0 5 0 4 2 5 4 105 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 11 1 8 8 1 97 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
28 28 16 16 0 0 28 51 28 50 46 44 42 41 39 37 34 32 16 27 16 26 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni278F;
unicode = 10127;
},
{
glyphname = uni2790;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(471,463,l),
(283,463,l),
(283,524,l),
(548,524,l),
(548,473,l),
(408,167,l),
(332,167,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
17 1 3 2 1 76 0 3 2 4 2 3 4 128 0 2 2 0 97 0 0 0 39 77 6 1 4 4 1 98 5 1 1 1 40 1 78 16 16 0 0 16 22 16 22 21 20 19 18 0 15 0 14 38 7 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2790;
unicode = 10128;
},
{
glyphname = uni2791;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(362,165,o),
(287,223,o),
(287,272,qs),
(287,303,o),
(316,352,o),
(344,364,q),
(295,389,o),
(295,439,qs),
(295,484,o),
(361,535,o),
(414,535,qs),
(464,535,o),
(532,485,o),
(532,439,qs),
(532,415,o),
(506,374,o),
(484,364,q),
(512,352,o),
(540,304,o),
(540,272,qs),
(540,221,o),
(467,165,o),
(414,165,qs)
);
},
{
closed = 1;
nodes = (
(440,226,o),
(469,253,o),
(469,278,qs),
(469,304,o),
(440,332,o),
(415,332,qs),
(390,332,o),
(359,305,o),
(359,278,qs),
(359,226,o),
(415,226,qs)
);
},
{
closed = 1;
nodes = (
(436,385,o),
(460,409,o),
(460,430,qs),
(460,452,o),
(436,477,o),
(414,477,qs),
(368,477,o),
(368,430,qs),
(368,410,o),
(393,385,o),
(414,385,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
32 21 2 4 7 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 4 10 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 11 1 7 7 6 97 0 6 6 36 77 9 1 3 3 1 97 8 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 6 11 1 7 4 6 7 105 0 4 10 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
50 50 39 39 16 16 0 0 50 60 50 59 55 53 39 49 39 48 44 42 16 38 16 37 28 26 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2791;
unicode = 10129;
},
{
glyphname = uni2792;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(357,165,o),
(295,226,o),
(293,270,q),
(359,270,l),
(370,225,o),
(410,225,qs),
(445,225,o),
(474,296,o),
(475,344,q),
(462,324,o),
(420,297,o),
(393,297,qs),
(367,297,o),
(318,325,o),
(287,378,o),
(287,414,qs),
(287,464,o),
(354,535,o),
(406,535,qs),
(479,535,o),
(546,434,o),
(546,361,qs),
(546,277,o),
(478,165,o),
(409,165,qs)
);
},
{
closed = 1;
nodes = (
(435,359,o),
(467,391,o),
(467,415,qs),
(467,440,o),
(435,473,o),
(410,473,qs),
(387,473,o),
(356,441,o),
(356,416,qs),
(356,391,o),
(387,359,o),
(412,359,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
31 1 3 8 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 5 3 4 3 5 4 128 0 3 0 4 6 3 4 105 0 2 2 0 97 0 0 0 39 77 11 1 8 8 7 97 0 7 7 36 77 10 1 6 6 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 5 3 4 3 5 4 128 0 7 11 1 8 3 7 8 105 0 3 0 4 6 3 4 105 0 2 2 0 97 0 0 0 39 77 10 1 6 6 1 97 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
41 41 16 16 0 0 41 52 41 51 47 45 16 40 16 39 37 36 35 33 29 27 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni2792;
unicode = 10130;
},
{
glyphname = uni24EA.solid;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,-12,o),
(678,85,o),
(775,252,o),
(775,350,qs),
(775,448,o),
(678,615,o),
(511,712,o),
(413,712,qs),
(315,712,o),
(148,615,o),
(51,448,o),
(51,350,qs),
(51,252,o),
(148,85,o),
(315,-12,o),
(413,-12,qs)
);
},
{
closed = 1;
nodes = (
(344,165,o),
(311,216,qs),
(279,264,o),
(279,350,qs),
(279,436,o),
(311,484,qs),
(344,535,o),
(414,535,qs),
(483,535,o),
(516,485,qs),
(548,435,o),
(548,350,qs),
(548,265,o),
(516,215,qs),
(483,165,o),
(414,165,qs)
);
},
{
closed = 1;
nodes = (
(444,230,o),
(459,261,qs),
(474,294,o),
(474,350,qs),
(474,408,o),
(459,439,qs),
(444,470,o),
(414,470,qs),
(383,470,o),
(368,439,qs),
(353,410,o),
(353,350,qs),
(353,291,o),
(368,261,qs),
(383,230,o),
(414,230,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 4 8 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 7 1 3 3 1 97 6 1 1 1 40 1 78 32 32 16 16 0 0 32 47 32 46 40 38 16 31 16 30 24 22 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni24EA.solid;
},
{
glyphname = zero.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,-5,o),
(252,76,o),
(284,188,o),
(284,237,qs),
(284,294,o),
(232,358,o),
(177,358,qs),
(116,358,o),
(39,279,o),
(6,168,o),
(6,118,qs),
(6,61,o),
(57,-5,o),
(113,-5,qs)
);
},
{
closed = 1;
nodes = (
(78,59,o),
(78,127,qs),
(78,156,o),
(95,235,o),
(135,295,o),
(166,295,qs),
(211,295,o),
(211,228,qs),
(211,198,o),
(194,118,o),
(155,59,o),
(124,59,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 0 0 2 3 0 2 105 5 1 3 3 1 97 4 1 1 1 34 1 78 14 14 0 0 14 25 14 24 20 18 0 13 0 12 37 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 315;
}
);
note = zero.dnom;
},
{
glyphname = one.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(234,0,l),
(245,62,l),
(163,62,l),
(215,353,l),
(178,353,l),
(50,309,l),
(40,254,l),
(133,274,l),
(96,62,l),
(3,62,l),
(-8,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
3 2 2 0 1 1 76 0 1 0 1 133 2 1 0 0 3 96 0 3 3 34 3 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 306;
}
);
note = one.dnom;
},
{
glyphname = two.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(229,0,l),
(240,62,l),
(92,62,l),
(158,118,ls),
(201,155,o),
(238,188,o),
(269,240,o),
(269,270,qs),
(269,307,o),
(219,358,o),
(169,358,qs),
(115,358,o),
(38,297,o),
(26,240,q),
(96,240,l),
(100,265,o),
(132,298,o),
(157,298,qs),
(176,298,o),
(198,278,o),
(198,261,qs),
(198,239,o),
(158,194,o),
(117,158,qs),
(100,143,l),
(-8,50,l),
(-16,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
0 1 0 3 0 1 3 128 0 2 0 0 1 2 0 105 0 3 3 4 95 0 4 4 34 4 78 17 23 34 18 39 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 302;
}
);
note = two.dnom;
},
{
glyphname = three.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,-5,o),
(225,34,o),
(260,99,o),
(260,135,qs),
(260,169,o),
(220,215,o),
(183,221,q),
(279,296,l),
(289,353,l),
(57,353,l),
(46,292,l),
(187,292,l),
(71,202,l),
(102,156,l),
(124,167,o),
(141,167,qs),
(163,167,o),
(190,145,o),
(190,125,qs),
(190,96,o),
(153,57,o),
(121,57,qs),
(97,57,o),
(71,80,o),
(71,100,qs),
(71,107,o),
(72,111,q),
(3,111,l),
(1,95,o),
(1,87,qs),
(1,43,o),
(59,-5,o),
(110,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
25 19 2 2 3 18 1 0 2 7 2 2 1 0 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 2 3 0 3 2 114 0 0 1 1 0 112 0 4 0 3 2 4 3 103 0 1 1 5 98 6 1 5 5 34 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 3 0 3 2 0 128 0 0 1 1 0 112 0 4 0 3 2 4 3 103 0 1 1 5 98 6 1 5 5 34 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 4 0 3 2 4 3 103 0 1 1 5 98 6 1 5 5 34 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 32 0 31 17 19 36 36 20 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 309;
}
);
note = three.dnom;
},
{
glyphname = four.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,0,l),
(216,65,l),
(256,65,l),
(268,127,l),
(228,127,l),
(243,213,l),
(176,213,l),
(161,127,l),
(71,127,l),
(223,353,l),
(152,353,l),
(-7,120,l),
(-17,65,l),
(146,65,l),
(134,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 3 1 133 0 3 2 2 3 112 4 1 2 5 1 0 6 2 0 104 0 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 3 1 133 0 3 2 3 133 4 1 2 5 1 0 6 2 0 104 0 6 6 34 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 299;
}
);
note = four.dnom;
},
{
glyphname = five.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(147,-5,o),
(218,36,o),
(259,107,o),
(259,149,qs),
(259,191,o),
(208,245,o),
(162,245,qs),
(122,245,o),
(93,224,q),
(118,291,l),
(262,291,l),
(274,353,l),
(76,353,l),
(9,149,l),
(76,149,l),
(87,167,o),
(120,187,o),
(141,187,qs),
(163,187,o),
(189,160,o),
(189,137,qs),
(189,105,o),
(148,57,o),
(117,57,qs),
(94,57,o),
(66,83,o),
(66,103,q),
(-4,103,l),
(-9,55,o),
(49,-5,o),
(106,-5,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 0 2 3 0 128 0 0 1 1 0 112 0 4 0 5 6 4 5 103 0 6 0 2 3 6 2 105 0 1 1 7 98 8 1 7 7 34 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 4 0 5 6 4 5 103 0 6 0 2 3 6 2 105 0 1 1 7 98 8 1 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 30 0 29 34 17 17 18 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 303;
}
);
note = five.dnom;
},
{
glyphname = six.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(155,-5,o),
(220,36,o),
(258,103,o),
(258,139,qs),
(258,180,o),
(207,231,o),
(168,231,qs),
(145,231,o),
(101,210,o),
(85,192,q),
(96,242,o),
(138,299,o),
(168,299,qs),
(207,299,o),
(209,256,q),
(274,256,l),
(277,301,o),
(226,358,o),
(178,358,qs),
(124,358,o),
(46,283,o),
(6,171,o),
(6,118,qs),
(6,62,o),
(60,-5,o),
(116,-5,qs)
);
},
{
closed = 1;
nodes = (
(103,57,o),
(78,82,o),
(78,102,qs),
(78,129,o),
(117,170,o),
(143,170,qs),
(164,170,o),
(188,146,o),
(188,126,qs),
(188,98,o),
(152,57,o),
(124,57,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 5 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 3 2 1 114 0 0 0 2 1 0 2 105 0 3 0 5 6 3 5 105 8 1 6 6 4 97 7 1 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 1 2 3 2 1 3 128 0 0 0 2 1 0 2 105 0 3 0 5 6 3 5 105 8 1 6 6 4 97 7 1 4 4 34 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
26 26 0 0 26 37 26 36 32 30 0 25 0 24 36 33 18 37 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 303;
}
);
note = six.dnom;
},
{
glyphname = seven.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(101,0,l),
(294,303,l),
(303,353,l),
(43,353,l),
(32,291,l),
(215,291,l),
(27,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 1 0 0 2 1 0 103 0 2 2 34 2 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 308;
}
);
note = seven.dnom;
},
{
glyphname = eight.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(172,-5,o),
(250,65,o),
(250,116,qs),
(250,169,o),
(204,190,q),
(268,219,o),
(268,276,qs),
(268,313,o),
(216,358,o),
(169,358,qs),
(111,358,o),
(32,300,o),
(32,252,qs),
(32,213,o),
(72,190,q),
(37,177,o),
(-3,121,o),
(-3,87,qs),
(-3,47,o),
(54,-5,o),
(107,-5,qs)
);
},
{
closed = 1;
nodes = (
(94,54,o),
(66,78,o),
(66,98,qs),
(66,126,o),
(107,158,o),
(133,158,qs),
(155,158,o),
(182,135,o),
(182,115,qs),
(182,87,o),
(142,54,o),
(116,54,qs)
);
},
{
closed = 1;
nodes = (
(124,210,o),
(101,231,o),
(101,249,qs),
(101,271,o),
(134,300,o),
(157,300,qs),
(176,300,o),
(198,279,o),
(198,262,qs),
(198,240,o),
(165,210,o),
(143,210,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
15 5 2 2 5 1 76 0 0 0 4 5 0 4 105 8 1 5 0 2 3 5 2 105 7 1 3 3 1 97 6 1 1 1 34 1 78 33 33 21 21 0 0 33 44 33 43 39 37 21 32 21 31 27 25 0 20 0 19 41 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 299;
}
);
note = eight.dnom;
},
{
glyphname = nine.dnom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(154,-5,o),
(232,71,o),
(272,183,o),
(272,236,qs),
(272,291,o),
(218,358,o),
(162,358,qs),
(123,358,o),
(58,317,o),
(20,251,o),
(20,217,qs),
(20,176,o),
(69,123,o),
(110,123,qs),
(133,123,o),
(178,144,o),
(194,161,q),
(183,111,o),
(141,55,o),
(111,55,qs),
(72,55,o),
(70,99,q),
(5,99,l),
(2,52,o),
(52,-5,o),
(100,-5,qs)
);
},
{
closed = 1;
nodes = (
(115,184,o),
(90,208,o),
(90,228,qs),
(90,256,o),
(127,297,o),
(155,297,qs),
(175,297,o),
(201,271,o),
(201,251,qs),
(201,225,o),
(162,184,o),
(136,184,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 0 2 1 1 0 114 0 3 0 5 6 3 5 105 8 1 6 0 2 0 6 2 105 0 1 1 4 98 7 1 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 0 2 1 2 0 1 128 0 3 0 5 6 3 5 105 8 1 6 0 2 0 6 2 105 0 1 1 4 98 7 1 4 4 34 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
26 26 0 0 26 37 26 36 32 30 0 25 0 24 37 36 33 18 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 303;
}
);
note = nine.dnom;
},
{
glyphname = zero.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(236,342,o),
(313,422,o),
(345,534,o),
(345,584,qs),
(345,641,o),
(294,705,o),
(238,705,qs),
(177,705,o),
(100,625,o),
(67,514,o),
(67,465,qs),
(67,408,o),
(119,342,o),
(174,342,qs)
);
},
{
closed = 1;
nodes = (
(164,406,o),
(139,439,o),
(139,473,qs),
(139,503,o),
(156,582,o),
(195,642,o),
(227,642,qs),
(273,642,o),
(273,574,qs),
(273,544,o),
(256,465,o),
(216,406,o),
(185,406,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 3 4 1 1 3 1 101 0 2 2 0 97 0 0 0 33 2 78 14 14 0 0 14 26 14 25 20 18 0 13 0 12 37 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 315;
}
);
note = zero.numr;
},
{
glyphname = one.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(295,347,l),
(306,409,l),
(224,409,l),
(276,700,l),
(239,700,l),
(111,656,l),
(101,601,l),
(195,621,l),
(157,409,l),
(64,409,l),
(53,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
3 2 2 0 1 1 76 2 1 0 0 3 0 3 100 0 1 1 33 1 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 306;
}
);
note = one.numr;
},
{
glyphname = two.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(290,347,l),
(301,409,l),
(153,409,l),
(219,465,ls),
(262,502,o),
(299,535,o),
(330,587,o),
(330,617,qs),
(330,654,o),
(280,705,o),
(230,705,qs),
(176,705,o),
(99,644,o),
(87,587,q),
(157,587,l),
(161,612,o),
(193,645,o),
(218,645,qs),
(237,645,o),
(259,625,o),
(259,608,qs),
(259,586,o),
(219,541,o),
(178,505,qs),
(161,490,l),
(53,397,l),
(45,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 0 3 0 1 3 128 0 3 0 4 3 4 99 0 0 0 2 97 0 2 2 33 0 78 17 23 34 18 39 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 302;
}
);
note = two.numr;
},
{
glyphname = three.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,342,o),
(286,381,o),
(321,446,o),
(321,482,qs),
(321,516,o),
(281,562,o),
(244,568,q),
(340,643,l),
(350,700,l),
(118,700,l),
(107,639,l),
(248,639,l),
(132,549,l),
(163,503,l),
(185,514,o),
(202,514,qs),
(224,514,o),
(251,492,o),
(251,472,qs),
(251,443,o),
(214,404,o),
(182,404,qs),
(158,404,o),
(132,427,o),
(132,447,qs),
(132,454,o),
(133,458,q),
(64,458,l),
(62,442,o),
(62,434,qs),
(62,390,o),
(120,342,o),
(171,342,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
25 19 2 2 3 18 1 0 2 7 2 2 1 0 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 2 3 0 3 2 114 0 0 1 1 0 112 0 1 6 1 5 1 5 102 0 3 3 4 95 0 4 4 33 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 2 3 0 3 2 0 128 0 0 1 1 0 112 0 1 6 1 5 1 5 102 0 3 3 4 95 0 4 4 33 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 1 6 1 5 1 5 102 0 3 3 4 95 0 4 4 33 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 32 0 31 17 19 36 36 20 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 309;
}
);
note = three.numr;
},
{
glyphname = four.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(266,347,l),
(278,412,l),
(318,412,l),
(329,474,l),
(289,474,l),
(304,560,l),
(238,560,l),
(223,474,l),
(133,474,l),
(284,700,l),
(213,700,l),
(54,467,l),
(44,412,l),
(207,412,l),
(196,347,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 3 1 2 2 3 114 0 6 0 0 6 113 0 1 1 33 77 5 1 0 0 2 95 4 1 2 2 36 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 3 1 2 1 3 2 128 0 6 0 0 6 113 0 1 1 33 77 5 1 0 0 2 95 4 1 2 2 36 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 3 1 2 1 3 2 128 0 6 0 6 134 0 1 1 33 77 5 1 0 0 2 95 4 1 2 2 36 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 0 6 0 6 134 4 1 2 5 1 0 6 2 0 104 0 1 1 33 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 300;
}
);
note = four.numr;
},
{
glyphname = five.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,342,o),
(279,383,o),
(320,454,o),
(320,496,qs),
(320,538,o),
(269,592,o),
(223,592,qs),
(183,592,o),
(154,571,q),
(179,638,l),
(324,638,l),
(335,700,l),
(137,700,l),
(70,496,l),
(137,496,l),
(148,514,o),
(182,534,o),
(203,534,qs),
(225,534,o),
(250,507,o),
(250,484,qs),
(250,452,o),
(209,404,o),
(179,404,qs),
(156,404,o),
(128,430,o),
(127,450,q),
(57,450,l),
(52,402,o),
(111,342,o),
(168,342,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 2 0 2 3 0 128 0 0 1 1 0 112 0 6 0 2 3 6 2 105 0 1 8 1 7 1 7 102 0 5 5 4 95 0 4 4 33 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 1 8 1 7 1 7 102 0 5 5 4 95 0 4 4 33 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 30 0 29 34 17 17 18 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 303;
}
);
note = five.numr;
},
{
glyphname = six.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,342,o),
(280,383,o),
(318,450,o),
(318,485,qs),
(318,527,o),
(268,578,o),
(229,578,qs),
(206,578,o),
(161,557,o),
(145,539,q),
(156,589,o),
(198,646,o),
(228,646,qs),
(267,646,o),
(269,603,q),
(334,603,l),
(337,649,o),
(287,705,o),
(239,705,qs),
(185,705,o),
(107,629,o),
(67,517,o),
(67,465,qs),
(67,409,o),
(121,342,o),
(177,342,qs)
);
},
{
closed = 1;
nodes = (
(164,404,o),
(138,429,o),
(138,449,qs),
(138,476,o),
(177,517,o),
(203,517,qs),
(224,517,o),
(249,493,o),
(249,472,qs),
(249,445,o),
(212,404,o),
(184,404,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 5 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 1 2 3 2 1 114 0 3 0 5 6 3 5 105 8 1 6 7 1 4 6 4 101 0 2 2 0 97 0 0 0 33 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 8 1 6 7 1 4 6 4 101 0 2 2 0 97 0 0 0 33 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
26 26 0 0 26 37 26 36 32 30 0 25 0 24 36 33 18 37 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 303;
}
);
note = six.numr;
},
{
glyphname = seven.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(162,347,l),
(355,650,l),
(364,700,l),
(104,700,l),
(93,638,l),
(277,638,l),
(88,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 2 0 2 134 0 0 0 1 95 0 1 1 33 0 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 308;
}
);
note = seven.numr;
},
{
glyphname = eight.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(233,342,o),
(312,413,o),
(312,463,qs),
(312,515,o),
(266,537,q),
(330,567,o),
(330,623,qs),
(330,660,o),
(277,705,o),
(230,705,qs),
(172,705,o),
(94,647,o),
(94,599,qs),
(94,560,o),
(133,537,q),
(99,524,o),
(58,468,o),
(58,434,qs),
(58,394,o),
(116,342,o),
(169,342,qs)
);
},
{
closed = 1;
nodes = (
(156,401,o),
(128,425,o),
(128,445,qs),
(128,473,o),
(169,505,o),
(194,505,qs),
(217,505,o),
(243,482,o),
(243,462,qs),
(243,434,o),
(203,401,o),
(178,401,qs)
);
},
{
closed = 1;
nodes = (
(185,557,o),
(162,578,o),
(162,596,qs),
(162,618,o),
(195,647,o),
(219,647,qs),
(238,647,o),
(260,626,o),
(260,609,qs),
(260,587,o),
(227,557,o),
(205,557,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
15 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 7 1 3 6 1 1 3 1 101 0 4 4 0 97 0 0 0 33 4 78 33 33 21 21 0 0 33 44 33 43 39 37 21 32 21 31 27 25 0 20 0 19 41 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 299;
}
);
note = eight.numr;
},
{
glyphname = nine.numr;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,342,o),
(294,417,o),
(334,528,o),
(334,582,qs),
(334,638,o),
(280,705,o),
(224,705,qs),
(185,705,o),
(120,664,o),
(82,598,o),
(82,563,qs),
(82,523,o),
(130,470,o),
(171,470,qs),
(194,470,o),
(239,491,o),
(255,508,q),
(244,458,o),
(202,402,o),
(172,402,qs),
(133,402,o),
(131,446,q),
(66,446,l),
(63,399,o),
(114,342,o),
(162,342,qs)
);
},
{
closed = 1;
nodes = (
(176,531,o),
(152,555,o),
(152,575,qs),
(152,603,o),
(188,644,o),
(216,644,qs),
(237,644,o),
(262,619,o),
(262,599,qs),
(262,571,o),
(223,531,o),
(197,531,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 0 2 1 1 0 114 0 1 7 1 4 1 4 102 0 5 5 3 97 0 3 3 33 77 0 2 2 6 97 8 1 6 6 42 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 1 0 114 8 1 6 0 2 0 6 2 105 0 1 7 1 4 1 4 102 0 5 5 3 97 0 3 3 33 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 1 7 1 4 1 4 102 0 5 5 3 97 0 3 3 33 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
26 26 0 0 26 37 26 36 32 30 0 25 0 24 37 36 33 18 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = nine.numr;
},
{
glyphname = fraction;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(28,0,l),
(672,700,l),
(588,700,l),
(-56,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
note = fraction;
unicode = 8260;
},
{
glyphname = onehalf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(127,0,l),
(771,700,l),
(687,700,l),
(43,0,l)
);
},
{
closed = 1;
nodes = (
(291,347,l),
(302,409,l),
(221,409,l),
(273,700,l),
(235,700,l),
(108,657,l),
(98,601,l),
(191,621,l),
(153,409,l),
(61,409,l),
(50,347,l)
);
},
{
closed = 1;
nodes = (
(674,0,l),
(685,62,l),
(537,62,l),
(603,118,ls),
(646,155,o),
(683,188,o),
(714,240,o),
(714,270,qs),
(714,307,o),
(664,358,o),
(614,358,qs),
(560,358,o),
(483,297,o),
(471,240,q),
(541,240,l),
(545,265,o),
(577,298,o),
(602,298,qs),
(621,298,o),
(643,278,o),
(643,261,qs),
(643,239,o),
(603,194,o),
(562,158,qs),
(545,143,l),
(437,50,l),
(429,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 71 values pushed */
7 6 2 2 0 1 76 3 1 0 2 0 133 0 7 6 9 6 7 9 128 4 1 2 0 5 6 2 5 104 0 8 0 6 7 8 6 105 0 9 1 1 9 87 0 9 9 1 95 10 1 1 9 1 79 41 40 39 38 34 18 40 17 17 20 17 17 16 11 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 758;
}
);
note = onehalf;
unicode = 189;
},
{
glyphname = onequarter;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,0,l),
(768,700,l),
(684,700,l),
(40,0,l)
);
},
{
closed = 1;
nodes = (
(291,347,l),
(302,409,l),
(221,409,l),
(273,700,l),
(235,700,l),
(108,657,l),
(98,601,l),
(191,621,l),
(153,409,l),
(61,409,l),
(50,347,l)
);
},
{
closed = 1;
nodes = (
(633,0,l),
(644,65,l),
(684,65,l),
(696,127,l),
(656,127,l),
(671,213,l),
(604,213,l),
(589,127,l),
(499,127,l),
(651,353,l),
(580,353,l),
(421,120,l),
(411,65,l),
(574,65,l),
(562,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 7 values pushed */
7 6 2 2 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
3 1 0 2 0 133 0 7 2 5 2 7 5 128 0 9 5 8 8 9 114 12 1 1 6 6 1 113 4 1 2 0 5 9 2 5 104 10 1 8 6 6 8 87 10 1 8 8 6 96 11 1 6 8 6 80
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
3 1 0 2 0 133 0 7 2 5 2 7 5 128 0 9 5 8 5 9 8 128 12 1 1 6 6 1 113 4 1 2 0 5 9 2 5 104 10 1 8 6 6 8 87 10 1 8 8 6 96 11 1 6 8 6 80
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
3 1 0 2 0 133 0 7 2 5 2 7 5 128 0 9 5 8 5 9 8 128 12 1 1 6 1 134 4 1 2 0 5 9 2 5 104 10 1 8 6 6 8 87 10 1 8 8 6 96 11 1 6 8 6 80
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
29 28 27 26 25 24 23 22 17 18 17 17 17 20 17 17 16 13 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 752;
}
);
note = onequarter;
unicode = 188;
},
{
glyphname = threequarters;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,0,l),
(773,700,l),
(688,700,l),
(45,0,l)
);
},
{
closed = 1;
nodes = (
(637,0,l),
(649,65,l),
(689,65,l),
(700,127,l),
(660,127,l),
(675,213,l),
(609,213,l),
(594,127,l),
(504,127,l),
(655,353,l),
(584,353,l),
(425,120,l),
(415,65,l),
(578,65,l),
(567,0,l)
);
},
{
closed = 1;
nodes = (
(226,342,o),
(294,381,o),
(329,446,o),
(329,482,qs),
(329,516,o),
(289,562,o),
(252,568,q),
(348,643,l),
(358,700,l),
(126,700,l),
(115,639,l),
(256,639,l),
(140,549,l),
(171,503,l),
(193,514,o),
(210,514,qs),
(232,514,o),
(259,492,o),
(259,472,qs),
(259,443,o),
(222,404,o),
(190,404,qs),
(166,404,o),
(140,427,o),
(140,447,qs),
(140,454,o),
(141,458,q),
(72,458,l),
(70,442,o),
(70,434,qs),
(70,390,o),
(128,342,o),
(179,342,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 16 values pushed */
44 38 2 11 12 37 1 9 11 26 21 2 10 9 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
0 11 12 9 12 11 114 0 9 10 10 9 112 0 3 10 14 10 3 14 128 0 5 14 4 4 5 114 8 1 1 2 2 1 113 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 106 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
0 11 12 9 12 11 9 128 0 9 10 10 9 112 0 3 10 14 10 3 14 128 0 5 14 4 4 5 114 8 1 1 2 2 1 113 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 106 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 74 values pushed */
0 11 12 9 12 11 9 128 0 9 10 10 9 112 0 3 10 14 10 3 14 128 0 5 14 4 14 5 4 128 8 1 1 2 2 1 113 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 106 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
0 11 12 9 12 11 9 128 0 9 10 10 9 112 0 3 10 14 10 3 14 128 0 5 14 4 14 5 4 128 8 1 1 2 1 134 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 106 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 74 values pushed */
0 11 12 9 12 11 9 128 0 9 10 12 9 10 126 0 3 10 14 10 3 14 128 0 5 14 4 14 5 4 128 8 1 1 2 1 134 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 106 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
19 19 19 51 19 50 42 41 40 39 36 34 30 28 24 23 17 17 17 17 17 18 17 17 16 16 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 757;
}
);
note = threequarters;
unicode = 190;
},
{
glyphname = oneeighth;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(125,0,l),
(769,700,l),
(684,700,l),
(41,0,l)
);
},
{
closed = 1;
nodes = (
(291,347,l),
(302,409,l),
(221,409,l),
(273,700,l),
(235,700,l),
(108,657,l),
(98,601,l),
(191,621,l),
(153,409,l),
(61,409,l),
(50,347,l)
);
},
{
closed = 1;
nodes = (
(536,54,o),
(508,78,o),
(508,98,qs),
(508,126,o),
(549,158,o),
(575,158,qs),
(597,158,o),
(624,135,o),
(624,115,qs),
(624,87,o),
(584,54,o),
(558,54,qs)
);
},
{
closed = 1;
nodes = (
(614,-5,o),
(692,65,o),
(692,116,qs),
(692,169,o),
(646,190,q),
(710,219,o),
(710,276,qs),
(710,313,o),
(658,358,o),
(611,358,qs),
(553,358,o),
(474,300,o),
(474,252,qs),
(474,213,o),
(514,190,q),
(479,177,o),
(439,121,o),
(439,87,qs),
(439,47,o),
(496,-5,o),
(549,-5,qs)
);
},
{
closed = 1;
nodes = (
(566,210,o),
(543,231,o),
(543,249,qs),
(543,271,o),
(576,300,o),
(599,300,qs),
(618,300,o),
(640,279,o),
(640,262,qs),
(640,240,o),
(607,210,o),
(585,210,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
7 6 2 2 0 42 32 2 6 11 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
4 1 2 0 5 10 2 5 104 0 8 0 10 11 8 10 105 14 1 11 0 6 7 11 6 105 3 1 0 0 33 77 12 1 7 7 1 97 13 9 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
4 1 2 0 5 10 2 5 104 0 8 0 10 11 8 10 105 14 1 11 0 6 7 11 6 105 3 1 0 0 33 77 0 1 1 34 77 12 1 7 7 9 97 13 1 9 9 34 9 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
48 48 27 27 15 15 48 59 48 58 54 52 27 47 27 46 38 36 15 26 15 25 37 17 17 20 17 17 16 15 8 29
CALL[ ]	/* CallFunction */";
};
width = 754;
}
);
note = oneeighth;
unicode = 8539;
},
{
glyphname = threeeighths;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,0,l),
(768,700,l),
(683,700,l),
(40,0,l)
);
},
{
closed = 1;
nodes = (
(226,342,o),
(294,381,o),
(329,446,o),
(329,482,qs),
(329,516,o),
(289,562,o),
(252,568,q),
(348,643,l),
(358,700,l),
(126,700,l),
(115,639,l),
(256,639,l),
(140,549,l),
(171,503,l),
(193,514,o),
(210,514,qs),
(232,514,o),
(259,492,o),
(259,472,qs),
(259,443,o),
(222,404,o),
(190,404,qs),
(166,404,o),
(140,427,o),
(140,447,qs),
(140,454,o),
(141,458,q),
(72,458,l),
(70,442,o),
(70,434,qs),
(70,390,o),
(128,342,o),
(179,342,qs)
);
},
{
closed = 1;
nodes = (
(614,-5,o),
(692,65,o),
(692,116,qs),
(692,169,o),
(646,190,q),
(710,219,o),
(710,276,qs),
(710,313,o),
(658,358,o),
(611,358,qs),
(553,358,o),
(474,300,o),
(474,252,qs),
(474,213,o),
(514,190,q),
(479,177,o),
(439,121,o),
(439,87,qs),
(439,47,o),
(496,-5,o),
(549,-5,qs)
);
},
{
closed = 1;
nodes = (
(536,54,o),
(508,78,o),
(508,98,qs),
(508,126,o),
(549,158,o),
(575,158,qs),
(597,158,o),
(624,135,o),
(624,115,qs),
(624,87,o),
(584,54,o),
(558,54,qs)
);
},
{
closed = 1;
nodes = (
(566,210,o),
(543,231,o),
(543,249,qs),
(543,271,o),
(576,300,o),
(599,300,qs),
(618,300,o),
(640,279,o),
(640,262,qs),
(640,240,o),
(607,210,o),
(585,210,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
29 23 2 4 5 22 1 2 4 11 6 2 3 2 52 42 2 10 13 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 4 5 2 5 4 114 0 2 3 3 2 112 0 3 14 1 7 12 3 7 106 0 8 0 12 13 8 12 105 17 1 13 0 10 11 13 10 105 0 5 5 0 95 6 1 0 0 33 77 16 1 11 11 1 97 15 9 2 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
0 4 5 2 5 4 2 128 0 2 3 3 2 112 0 3 14 1 7 12 3 7 106 0 8 0 12 13 8 12 105 17 1 13 0 10 11 13 10 105 0 5 5 0 95 6 1 0 0 33 77 16 1 11 11 1 97 15 9 2 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
0 4 5 2 5 4 2 128 0 2 3 5 2 3 126 0 3 14 1 7 12 3 7 106 0 8 0 12 13 8 12 105 17 1 13 0 10 11 13 10 105 0 5 5 0 95 6 1 0 0 33 77 16 1 11 11 1 97 15 9 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 70 values pushed */
0 4 5 2 5 4 2 128 0 2 3 5 2 3 126 0 3 14 1 7 12 3 7 106 0 8 0 12 13 8 12 105 17 1 13 0 10 11 13 10 105 0 5 5 0 95 6 1 0 0 33 77 0 1 1 34 77 16 1 11 11 9 97 15 1 9 9 34 9 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 40 values pushed */
70 70 58 58 37 37 4 4 70 81 70 80 76 74 58 69 58 68 64 62 37 57 37 56 48 46 4 36 4 35 17 19 36 36 21 17 16 18 8 29
CALL[ ]	/* CallFunction */";
};
width = 751;
}
);
note = threeeighths;
unicode = 8540;
},
{
glyphname = fiveeighths;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,0,l),
(772,700,l),
(687,700,l),
(43,0,l)
);
},
{
closed = 1;
nodes = (
(225,342,o),
(294,383,o),
(335,454,o),
(335,496,qs),
(335,538,o),
(284,592,o),
(238,592,qs),
(198,592,o),
(169,571,q),
(194,638,l),
(339,638,l),
(350,700,l),
(152,700,l),
(85,496,l),
(152,496,l),
(163,514,o),
(197,534,o),
(218,534,qs),
(240,534,o),
(265,507,o),
(265,484,qs),
(265,452,o),
(224,404,o),
(194,404,qs),
(171,404,o),
(143,430,o),
(142,450,q),
(72,450,l),
(67,402,o),
(126,342,o),
(183,342,qs)
);
},
{
closed = 1;
nodes = (
(618,-5,o),
(696,65,o),
(696,116,qs),
(696,169,o),
(650,190,q),
(714,219,o),
(714,276,qs),
(714,313,o),
(662,358,o),
(615,358,qs),
(557,358,o),
(478,300,o),
(478,252,qs),
(478,213,o),
(518,190,q),
(483,177,o),
(443,121,o),
(443,87,qs),
(443,47,o),
(500,-5,o),
(553,-5,qs)
);
},
{
closed = 1;
nodes = (
(540,54,o),
(512,78,o),
(512,98,qs),
(512,126,o),
(553,158,o),
(579,158,qs),
(601,158,o),
(628,135,o),
(628,115,qs),
(628,87,o),
(588,54,o),
(562,54,qs)
);
},
{
closed = 1;
nodes = (
(570,210,o),
(547,231,o),
(547,249,qs),
(547,271,o),
(580,300,o),
(603,300,qs),
(622,300,o),
(644,279,o),
(644,262,qs),
(644,240,o),
(611,210,o),
(589,210,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
25 1 4 8 50 40 2 12 15 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
0 5 4 2 4 5 2 128 0 2 3 3 2 112 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 106 0 10 0 14 15 10 14 105 19 1 15 0 12 13 15 12 105 0 7 7 0 95 6 1 0 0 33 77 18 1 13 13 1 97 17 11 2 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 74 values pushed */
0 5 4 2 4 5 2 128 0 2 3 4 2 3 126 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 106 0 10 0 14 15 10 14 105 19 1 15 0 12 13 15 12 105 0 7 7 0 95 6 1 0 0 33 77 18 1 13 13 1 97 17 11 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 78 values pushed */
0 5 4 2 4 5 2 128 0 2 3 4 2 3 126 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 106 0 10 0 14 15 10 14 105 19 1 15 0 12 13 15 12 105 0 7 7 0 95 6 1 0 0 33 77 0 1 1 34 77 18 1 13 13 11 97 17 1 11 11 34 11 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 42 values pushed */
68 68 56 56 35 35 4 4 68 79 68 78 74 72 56 67 56 66 62 60 35 55 35 54 46 44 4 34 4 33 34 17 17 18 36 34 19 17 16 20 8 31
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = fiveeighths;
unicode = 8541;
},
{
glyphname = seveneighths;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(95,0,l),
(739,700,l),
(654,700,l),
(10,0,l)
);
},
{
closed = 1;
nodes = (
(188,347,l),
(381,650,l),
(390,700,l),
(130,700,l),
(119,638,l),
(303,638,l),
(114,347,l)
);
},
{
closed = 1;
nodes = (
(596,-5,o),
(674,65,o),
(674,116,qs),
(674,169,o),
(628,190,q),
(692,219,o),
(692,276,qs),
(692,313,o),
(640,358,o),
(593,358,qs),
(535,358,o),
(456,300,o),
(456,252,qs),
(456,213,o),
(496,190,q),
(461,177,o),
(421,121,o),
(421,87,qs),
(421,47,o),
(478,-5,o),
(531,-5,qs)
);
},
{
closed = 1;
nodes = (
(518,54,o),
(490,78,o),
(490,98,qs),
(490,126,o),
(531,158,o),
(557,158,qs),
(579,158,o),
(606,135,o),
(606,115,qs),
(606,87,o),
(566,54,o),
(540,54,qs)
);
},
{
closed = 1;
nodes = (
(548,210,o),
(525,231,o),
(525,249,qs),
(525,271,o),
(558,300,o),
(581,300,qs),
(600,300,o),
(622,279,o),
(622,262,qs),
(622,240,o),
(589,210,o),
(567,210,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
26 16 2 7 10 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 4 5 9 5 4 9 128 0 5 0 9 10 5 9 105 13 1 10 0 7 8 10 7 105 0 2 2 0 95 3 1 0 0 33 77 12 1 8 8 1 97 11 6 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 4 5 9 5 4 9 128 0 5 0 9 10 5 9 105 13 1 10 0 7 8 10 7 105 0 2 2 0 95 3 1 0 0 33 77 0 1 1 34 77 12 1 8 8 6 97 11 1 6 6 34 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
44 44 32 32 11 11 44 55 44 54 50 48 32 43 32 42 38 36 11 31 11 30 42 18 17 17 17 16 14 8 28
CALL[ ]	/* CallFunction */";
};
width = 731;
}
);
note = seveneighths;
unicode = 8542;
},
{
glyphname = uni2080;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,-5,o),
(252,76,o),
(284,188,o),
(284,237,qs),
(284,294,o),
(232,358,o),
(177,358,qs),
(116,358,o),
(39,279,o),
(6,168,o),
(6,118,qs),
(6,61,o),
(57,-5,o),
(113,-5,qs)
);
},
{
closed = 1;
nodes = (
(78,59,o),
(78,127,qs),
(78,156,o),
(95,235,o),
(135,295,o),
(166,295,qs),
(211,295,o),
(211,228,qs),
(211,198,o),
(194,118,o),
(155,59,o),
(124,59,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 51 77 5 1 3 3 1 97 4 1 1 1 52 1 78 14 14 0 0 14 25 14 24 20 18 0 13 0 12 37 6 9 23
CALL[ ]	/* CallFunction */";
};
width = 315;
}
);
note = uni2080;
unicode = 8320;
},
{
glyphname = uni2081;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(234,0,l),
(245,62,l),
(163,62,l),
(215,353,l),
(178,353,l),
(50,309,l),
(40,254,l),
(133,274,l),
(96,62,l),
(3,62,l),
(-8,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
3 2 2 0 1 1 76 0 1 1 49 77 2 1 0 0 3 96 0 3 3 50 3 78 17 17 20 16 4 9 26
CALL[ ]	/* CallFunction */";
};
width = 306;
}
);
note = uni2081;
unicode = 8321;
},
{
glyphname = uni2082;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(229,0,l),
(240,62,l),
(92,62,l),
(158,118,ls),
(201,155,o),
(238,188,o),
(269,240,o),
(269,270,qs),
(269,307,o),
(219,358,o),
(169,358,qs),
(115,358,o),
(38,297,o),
(26,240,q),
(96,240,l),
(100,265,o),
(132,298,o),
(157,298,qs),
(176,298,o),
(198,278,o),
(198,261,qs),
(198,239,o),
(158,194,o),
(117,158,qs),
(100,143,l),
(-8,50,l),
(-16,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 51 77 0 3 3 4 95 0 4 4 50 4 78 17 23 34 18 39 5 9 27
CALL[ ]	/* CallFunction */";
};
width = 302;
}
);
note = uni2082;
unicode = 8322;
},
{
glyphname = uni2083;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,-5,o),
(225,34,o),
(260,99,o),
(260,135,qs),
(260,169,o),
(220,215,o),
(183,221,q),
(279,296,l),
(289,353,l),
(57,353,l),
(46,292,l),
(187,292,l),
(71,202,l),
(102,156,l),
(124,167,o),
(141,167,qs),
(163,167,o),
(190,145,o),
(190,125,qs),
(190,96,o),
(153,57,o),
(121,57,qs),
(97,57,o),
(71,80,o),
(71,100,qs),
(71,107,o),
(72,111,q),
(3,111,l),
(1,95,o),
(1,87,qs),
(1,43,o),
(59,-5,o),
(110,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
25 19 2 2 3 18 1 0 2 7 2 2 1 0 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 3 0 3 2 114 0 0 1 1 0 112 0 3 3 4 95 0 4 4 49 77 0 1 1 5 98 6 1 5 5 52 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 3 0 3 2 0 128 0 0 1 1 0 112 0 3 3 4 95 0 4 4 49 77 0 1 1 5 98 6 1 5 5 52 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 49 77 0 1 1 5 98 6 1 5 5 52 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 32 0 31 17 19 36 36 20 7 9 27
CALL[ ]	/* CallFunction */";
};
width = 309;
}
);
note = uni2083;
unicode = 8323;
},
{
glyphname = uni2084;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,0,l),
(216,65,l),
(256,65,l),
(268,127,l),
(228,127,l),
(243,213,l),
(176,213,l),
(161,127,l),
(71,127,l),
(223,353,l),
(152,353,l),
(-7,120,l),
(-17,65,l),
(146,65,l),
(134,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 1 2 2 3 114 4 1 2 5 1 0 6 2 0 104 0 1 1 49 77 0 6 6 50 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 49 77 0 6 6 50 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 9 29
CALL[ ]	/* CallFunction */";
};
width = 299;
}
);
note = uni2084;
unicode = 8324;
},
{
glyphname = uni2085;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(147,-5,o),
(218,36,o),
(259,107,o),
(259,149,qs),
(259,191,o),
(208,245,o),
(162,245,qs),
(122,245,o),
(93,224,q),
(118,291,l),
(262,291,l),
(274,353,l),
(76,353,l),
(9,149,l),
(76,149,l),
(87,167,o),
(120,187,o),
(141,187,qs),
(163,187,o),
(189,160,o),
(189,137,qs),
(189,105,o),
(148,57,o),
(117,57,qs),
(94,57,o),
(66,83,o),
(66,103,q),
(-4,103,l),
(-9,55,o),
(49,-5,o),
(106,-5,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 3 2 0 2 3 0 128 0 0 1 1 0 112 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 49 77 0 1 1 7 98 8 1 7 7 52 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 49 77 0 1 1 7 98 8 1 7 7 52 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 30 0 29 34 17 17 18 36 34 18 9 9 29
CALL[ ]	/* CallFunction */";
};
width = 303;
}
);
note = uni2085;
unicode = 8325;
},
{
glyphname = uni2086;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(155,-5,o),
(220,36,o),
(258,103,o),
(258,139,qs),
(258,180,o),
(207,231,o),
(168,231,qs),
(145,231,o),
(101,210,o),
(85,192,q),
(96,242,o),
(138,299,o),
(168,299,qs),
(207,299,o),
(209,256,q),
(274,256,l),
(277,301,o),
(226,358,o),
(178,358,qs),
(124,358,o),
(46,283,o),
(6,171,o),
(6,118,qs),
(6,62,o),
(60,-5,o),
(116,-5,qs)
);
},
{
closed = 1;
nodes = (
(103,57,o),
(78,82,o),
(78,102,qs),
(78,129,o),
(117,170,o),
(143,170,qs),
(164,170,o),
(188,146,o),
(188,126,qs),
(188,98,o),
(152,57,o),
(124,57,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 5 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 1 2 3 2 1 114 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 51 77 8 1 6 6 4 97 7 1 4 4 52 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 51 77 8 1 6 6 4 97 7 1 4 4 52 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
26 26 0 0 26 37 26 36 32 30 0 25 0 24 36 33 18 37 9 9 26
CALL[ ]	/* CallFunction */";
};
width = 303;
}
);
note = uni2086;
unicode = 8326;
},
{
glyphname = uni2087;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(101,0,l),
(294,303,l),
(303,353,l),
(43,353,l),
(32,291,l),
(215,291,l),
(27,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 95 0 1 1 49 77 0 2 2 50 2 78 18 17 16 3 9 25
CALL[ ]	/* CallFunction */";
};
width = 308;
}
);
note = uni2087;
unicode = 8327;
},
{
glyphname = uni2088;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(172,-5,o),
(250,65,o),
(250,116,qs),
(250,169,o),
(204,190,q),
(268,219,o),
(268,276,qs),
(268,313,o),
(216,358,o),
(169,358,qs),
(111,358,o),
(32,300,o),
(32,252,qs),
(32,213,o),
(72,190,q),
(37,177,o),
(-3,121,o),
(-3,87,qs),
(-3,47,o),
(54,-5,o),
(107,-5,qs)
);
},
{
closed = 1;
nodes = (
(94,54,o),
(66,78,o),
(66,98,qs),
(66,126,o),
(107,158,o),
(133,158,qs),
(155,158,o),
(182,135,o),
(182,115,qs),
(182,87,o),
(142,54,o),
(116,54,qs)
);
},
{
closed = 1;
nodes = (
(124,210,o),
(101,231,o),
(101,249,qs),
(101,271,o),
(134,300,o),
(157,300,qs),
(176,300,o),
(198,279,o),
(198,262,qs),
(198,240,o),
(165,210,o),
(143,210,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
15 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 51 77 7 1 3 3 1 97 6 1 1 1 52 1 78 33 33 21 21 0 0 33 44 33 43 39 37 21 32 21 31 27 25 0 20 0 19 41 9 9 23
CALL[ ]	/* CallFunction */";
};
width = 299;
}
);
note = uni2088;
unicode = 8328;
},
{
glyphname = uni2089;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(154,-5,o),
(232,71,o),
(272,183,o),
(272,236,qs),
(272,291,o),
(218,358,o),
(162,358,qs),
(123,358,o),
(58,317,o),
(20,251,o),
(20,217,qs),
(20,176,o),
(69,123,o),
(110,123,qs),
(133,123,o),
(178,144,o),
(194,161,q),
(183,111,o),
(141,55,o),
(111,55,qs),
(72,55,o),
(70,99,q),
(5,99,l),
(2,52,o),
(52,-5,o),
(100,-5,qs)
);
},
{
closed = 1;
nodes = (
(115,184,o),
(90,208,o),
(90,228,qs),
(90,256,o),
(127,297,o),
(155,297,qs),
(175,297,o),
(201,271,o),
(201,251,qs),
(201,225,o),
(162,184,o),
(136,184,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 0 2 1 1 0 114 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 51 77 0 1 1 4 98 7 1 4 4 52 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 51 77 0 1 1 4 98 7 1 4 4 52 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
26 26 0 0 26 37 26 36 32 30 0 25 0 24 37 36 33 18 9 9 26
CALL[ ]	/* CallFunction */";
};
width = 303;
}
);
note = uni2089;
unicode = 8329;
},
{
glyphname = uni2070;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(236,342,o),
(313,422,o),
(345,534,o),
(345,584,qs),
(345,641,o),
(294,705,o),
(238,705,qs),
(177,705,o),
(100,625,o),
(67,514,o),
(67,465,qs),
(67,408,o),
(119,342,o),
(174,342,qs)
);
},
{
closed = 1;
nodes = (
(164,406,o),
(139,439,o),
(139,473,qs),
(139,503,o),
(156,582,o),
(195,642,o),
(227,642,qs),
(273,642,o),
(273,574,qs),
(273,544,o),
(256,465,o),
(216,406,o),
(185,406,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 59 77 5 1 3 3 1 97 4 1 1 1 60 1 78 14 14 0 0 14 26 14 25 20 18 0 13 0 12 37 6 10 23
CALL[ ]	/* CallFunction */";
};
width = 315;
}
);
note = uni2070;
unicode = 8304;
},
{
glyphname = uni00B9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(295,347,l),
(306,409,l),
(224,409,l),
(276,700,l),
(239,700,l),
(111,656,l),
(101,601,l),
(195,621,l),
(157,409,l),
(64,409,l),
(53,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
3 2 2 0 1 1 76 0 1 1 57 77 2 1 0 0 3 96 0 3 3 58 3 78 17 17 20 16 4 10 26
CALL[ ]	/* CallFunction */";
};
width = 301;
}
);
note = uni00B9;
unicode = 185;
},
{
glyphname = uni00B2;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(290,347,l),
(301,409,l),
(153,409,l),
(219,465,ls),
(262,502,o),
(299,535,o),
(330,587,o),
(330,617,qs),
(330,654,o),
(280,705,o),
(230,705,qs),
(176,705,o),
(99,644,o),
(87,587,q),
(157,587,l),
(161,612,o),
(193,645,o),
(218,645,qs),
(237,645,o),
(259,625,o),
(259,608,qs),
(259,586,o),
(219,541,o),
(178,505,qs),
(161,490,l),
(53,397,l),
(45,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 59 77 0 3 3 4 95 0 4 4 58 4 78 17 23 34 18 39 5 10 27
CALL[ ]	/* CallFunction */";
};
width = 302;
}
);
note = uni00B2;
unicode = 178;
},
{
glyphname = uni00B3;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,342,o),
(286,381,o),
(321,446,o),
(321,482,qs),
(321,516,o),
(281,562,o),
(244,568,q),
(340,643,l),
(350,700,l),
(118,700,l),
(107,639,l),
(248,639,l),
(132,549,l),
(163,503,l),
(185,514,o),
(202,514,qs),
(224,514,o),
(251,492,o),
(251,472,qs),
(251,443,o),
(214,404,o),
(182,404,qs),
(158,404,o),
(132,427,o),
(132,447,qs),
(132,454,o),
(133,458,q),
(64,458,l),
(62,442,o),
(62,434,qs),
(62,390,o),
(120,342,o),
(171,342,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
25 19 2 2 3 18 1 0 2 7 2 2 1 0 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 3 0 3 2 114 0 0 1 1 0 112 0 3 3 4 95 0 4 4 57 77 0 1 1 5 98 6 1 5 5 60 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 3 0 3 2 0 128 0 0 1 1 0 112 0 3 3 4 95 0 4 4 57 77 0 1 1 5 98 6 1 5 5 60 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 57 77 0 1 1 5 98 6 1 5 5 60 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 32 0 31 17 19 36 36 20 7 10 27
CALL[ ]	/* CallFunction */";
};
width = 309;
}
);
note = uni00B3;
unicode = 179;
},
{
glyphname = uni2074;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(266,347,l),
(278,412,l),
(318,412,l),
(329,474,l),
(289,474,l),
(304,560,l),
(238,560,l),
(223,474,l),
(133,474,l),
(284,700,l),
(213,700,l),
(54,467,l),
(44,412,l),
(207,412,l),
(196,347,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 1 2 2 3 114 4 1 2 5 1 0 6 2 0 104 0 1 1 57 77 0 6 6 58 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 57 77 0 6 6 58 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 10 29
CALL[ ]	/* CallFunction */";
};
width = 300;
}
);
note = uni2074;
unicode = 8308;
},
{
glyphname = uni2075;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,342,o),
(279,383,o),
(320,454,o),
(320,496,qs),
(320,538,o),
(269,592,o),
(223,592,qs),
(183,592,o),
(154,571,q),
(179,638,l),
(324,638,l),
(335,700,l),
(137,700,l),
(70,496,l),
(137,496,l),
(148,514,o),
(182,534,o),
(203,534,qs),
(225,534,o),
(250,507,o),
(250,484,qs),
(250,452,o),
(209,404,o),
(179,404,qs),
(156,404,o),
(128,430,o),
(127,450,q),
(57,450,l),
(52,402,o),
(111,342,o),
(168,342,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 3 2 0 2 3 0 128 0 0 1 1 0 112 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 57 77 0 1 1 7 98 8 1 7 7 60 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 57 77 0 1 1 7 98 8 1 7 7 60 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 30 0 29 34 17 17 18 36 34 18 9 10 29
CALL[ ]	/* CallFunction */";
};
width = 303;
}
);
note = uni2075;
unicode = 8309;
},
{
glyphname = uni2076;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,342,o),
(280,383,o),
(318,450,o),
(318,485,qs),
(318,527,o),
(268,578,o),
(229,578,qs),
(206,578,o),
(161,557,o),
(145,539,q),
(156,589,o),
(198,646,o),
(228,646,qs),
(267,646,o),
(269,603,q),
(334,603,l),
(337,649,o),
(287,705,o),
(239,705,qs),
(185,705,o),
(107,629,o),
(67,517,o),
(67,465,qs),
(67,409,o),
(121,342,o),
(177,342,qs)
);
},
{
closed = 1;
nodes = (
(164,404,o),
(138,429,o),
(138,449,qs),
(138,476,o),
(177,517,o),
(203,517,qs),
(224,517,o),
(249,493,o),
(249,472,qs),
(249,445,o),
(212,404,o),
(184,404,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 5 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 1 2 3 2 1 114 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 59 77 8 1 6 6 4 97 7 1 4 4 60 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 59 77 8 1 6 6 4 97 7 1 4 4 60 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
26 26 0 0 26 37 26 36 32 30 0 25 0 24 36 33 18 37 9 10 26
CALL[ ]	/* CallFunction */";
};
width = 303;
}
);
note = uni2076;
unicode = 8310;
},
{
glyphname = uni2077;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(162,347,l),
(355,650,l),
(364,700,l),
(104,700,l),
(93,638,l),
(277,638,l),
(88,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 95 0 1 1 57 77 0 2 2 58 2 78 18 17 16 3 10 25
CALL[ ]	/* CallFunction */";
};
width = 308;
}
);
note = uni2077;
unicode = 8311;
},
{
glyphname = uni2078;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(233,342,o),
(312,413,o),
(312,463,qs),
(312,515,o),
(266,537,q),
(330,567,o),
(330,623,qs),
(330,660,o),
(277,705,o),
(230,705,qs),
(172,705,o),
(94,647,o),
(94,599,qs),
(94,560,o),
(133,537,q),
(99,524,o),
(58,468,o),
(58,434,qs),
(58,394,o),
(116,342,o),
(169,342,qs)
);
},
{
closed = 1;
nodes = (
(156,401,o),
(128,425,o),
(128,445,qs),
(128,473,o),
(169,505,o),
(194,505,qs),
(217,505,o),
(243,482,o),
(243,462,qs),
(243,434,o),
(203,401,o),
(178,401,qs)
);
},
{
closed = 1;
nodes = (
(185,557,o),
(162,578,o),
(162,596,qs),
(162,618,o),
(195,647,o),
(219,647,qs),
(238,647,o),
(260,626,o),
(260,609,qs),
(260,587,o),
(227,557,o),
(205,557,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
15 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 59 77 7 1 3 3 1 97 6 1 1 1 60 1 78 33 33 21 21 0 0 33 44 33 43 39 37 21 32 21 31 27 25 0 20 0 19 41 9 10 23
CALL[ ]	/* CallFunction */";
};
width = 299;
}
);
note = uni2078;
unicode = 8312;
},
{
glyphname = uni2079;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,342,o),
(294,417,o),
(334,528,o),
(334,582,qs),
(334,638,o),
(280,705,o),
(224,705,qs),
(185,705,o),
(120,664,o),
(82,598,o),
(82,563,qs),
(82,523,o),
(130,470,o),
(171,470,qs),
(194,470,o),
(239,491,o),
(255,508,q),
(244,458,o),
(202,402,o),
(172,402,qs),
(133,402,o),
(131,446,q),
(66,446,l),
(63,399,o),
(114,342,o),
(162,342,qs)
);
},
{
closed = 1;
nodes = (
(176,531,o),
(152,555,o),
(152,575,qs),
(152,603,o),
(188,644,o),
(216,644,qs),
(237,644,o),
(262,619,o),
(262,599,qs),
(262,571,o),
(223,531,o),
(197,531,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 0 2 1 1 0 114 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 59 77 0 1 1 4 98 7 1 4 4 60 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 59 77 0 1 1 4 98 7 1 4 4 60 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
26 26 0 0 26 37 26 36 32 30 0 25 0 24 37 36 33 18 9 10 26
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = uni2079;
unicode = 8313;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 262;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = period;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(102,-8,o),
(142,33,o),
(142,62,qs),
(142,91,o),
(102,132,o),
(72,132,qs),
(42,132,o),
(2,91,o),
(2,62,qs),
(2,33,o),
(42,-8,o),
(72,-8,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 97 2 1 1 1 40 1 78 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 209;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
kernLeft = comma;
kernRight = comma;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(8,-117,l),
(142,118,l),
(36,118,l),
(-63,-117,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 195;
}
);
note = comma;
unicode = 44;
},
{
glyphname = colon;
kernLeft = colon;
kernRight = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,370,o),
(209,411,o),
(209,440,qs),
(209,469,o),
(169,510,o),
(139,510,qs),
(109,510,o),
(69,469,o),
(69,440,qs),
(69,411,o),
(109,370,o),
(139,370,qs)
);
},
{
closed = 1;
nodes = (
(102,-8,o),
(142,33,o),
(142,62,qs),
(142,91,o),
(102,132,o),
(72,132,qs),
(42,132,o),
(2,91,o),
(2,62,qs),
(2,33,o),
(42,-8,o),
(72,-8,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
4 1 1 1 0 97 0 0 0 42 77 0 2 2 3 97 5 1 3 3 40 3 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 211;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
kernLeft = semicolon;
kernRight = semicolon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(22,-117,l),
(155,118,l),
(50,118,l),
(-49,-117,l)
);
},
{
closed = 1;
nodes = (
(194,370,o),
(234,411,o),
(234,440,qs),
(234,469,o),
(194,510,o),
(164,510,qs),
(134,510,o),
(94,469,o),
(94,440,qs),
(94,411,o),
(134,370,o),
(164,370,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 0 3 1 3 0 1 128 0 1 1 132 4 1 3 3 2 97 0 2 2 42 3 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 235;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = ellipsis;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(508,-8,o),
(549,33,o),
(549,62,qs),
(549,91,o),
(508,132,o),
(479,132,qs),
(449,132,o),
(408,91,o),
(408,62,qs),
(408,33,o),
(449,-8,o),
(479,-8,qs)
);
},
{
closed = 1;
nodes = (
(103,-8,o),
(144,33,o),
(144,62,qs),
(144,91,o),
(103,132,o),
(74,132,qs),
(44,132,o),
(3,91,o),
(3,62,qs),
(3,33,o),
(44,-8,o),
(74,-8,qs)
);
},
{
closed = 1;
nodes = (
(306,-8,o),
(346,33,o),
(346,62,qs),
(346,91,o),
(306,132,o),
(276,132,qs),
(246,132,o),
(206,91,o),
(206,62,qs),
(206,33,o),
(246,-8,o),
(276,-8,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
4 2 2 0 0 1 97 8 5 7 3 6 5 1 1 40 1 78 24 24 12 12 0 0 24 35 24 34 30 28 12 23 12 22 18 16 0 11 0 10 36 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 618;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(161,208,l),
(260,700,l),
(146,700,l),
(71,208,l)
);
},
{
closed = 1;
nodes = (
(129,-8,o),
(170,33,o),
(170,62,qs),
(170,91,o),
(129,132,o),
(100,132,qs),
(70,132,o),
(29,91,o),
(29,62,qs),
(29,33,o),
(70,-8,o),
(100,-8,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 1 0 95 0 0 0 33 77 0 2 2 3 97 4 1 3 3 40 3 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 264;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = exclamdown;
kernLeft = exclamdown;
kernRight = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(130,-141,l),
(205,352,l),
(115,352,l),
(16,-141,l)
);
},
{
closed = 1;
nodes = (
(206,428,o),
(247,469,o),
(247,498,qs),
(247,527,o),
(206,568,o),
(176,568,qs),
(147,568,o),
(106,527,o),
(106,498,qs),
(106,469,o),
(147,428,o),
(176,428,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 2 4 1 3 0 2 3 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 265;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = question;
kernLeft = question;
kernRight = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,207,l),
(240,299,l),
(323,299,o),
(385,327,qs),
(450,355,o),
(520,463,o),
(520,538,qs),
(520,618,o),
(416,712,o),
(328,712,qs),
(257,712,o),
(205,686,qs),
(149,660,o),
(78,568,o),
(68,508,q),
(168,508,l),
(178,561,o),
(255,624,o),
(312,624,qs),
(360,624,o),
(416,570,o),
(416,526,qs),
(416,465,o),
(387,433,qs),
(332,370,o),
(190,370,qs),
(153,370,l),
(128,207,l)
);
},
{
closed = 1;
nodes = (
(183,-8,o),
(223,33,o),
(223,62,qs),
(223,91,o),
(183,132,o),
(153,132,qs),
(123,132,o),
(83,91,o),
(83,62,qs),
(83,33,o),
(123,-8,o),
(153,-8,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 2 1 0 1 2 0 128 0 5 4 6 4 5 114 0 0 0 4 5 0 4 105 0 1 1 3 97 0 3 3 39 77 0 6 6 7 97 8 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 2 1 0 1 2 0 128 0 5 4 6 4 5 6 128 0 0 0 4 5 0 4 105 0 1 1 3 97 0 3 3 39 77 0 6 6 7 97 8 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
28 28 28 39 28 38 37 17 22 36 18 37 32 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 512;
}
);
note = question;
unicode = 63;
},
{
glyphname = questiondown;
kernLeft = questiondown;
kernRight = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(253,-160,o),
(363,-115,o),
(443,-23,o),
(454,44,q),
(354,44,l),
(344,-9,o),
(267,-71,o),
(210,-71,qs),
(162,-71,o),
(106,-18,o),
(106,26,qs),
(106,106,o),
(217,182,o),
(332,182,qs),
(369,182,l),
(394,345,l),
(302,345,l),
(282,254,l),
(211,253,o),
(84,207,o),
(2,100,o),
(2,15,qs),
(2,-66,o),
(106,-160,o),
(194,-160,qs)
);
},
{
closed = 1;
nodes = (
(399,421,o),
(439,462,o),
(439,491,qs),
(439,520,o),
(399,561,o),
(369,561,qs),
(339,561,o),
(299,520,o),
(299,491,qs),
(299,462,o),
(339,421,o),
(369,421,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 1 7 0 0 1 114 0 4 2 3 2 4 3 128 0 6 9 1 7 1 6 7 105 0 0 0 2 4 0 2 106 0 3 5 5 3 89 0 3 3 5 97 8 1 5 3 5 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 1 7 0 7 1 0 128 0 4 2 3 2 4 3 128 0 6 9 1 7 1 6 7 105 0 0 0 2 4 0 2 106 0 3 5 5 3 89 0 3 3 5 97 8 1 5 3 5 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
25 25 0 0 25 36 25 35 31 29 0 24 0 23 18 36 33 17 21 10 8 27
CALL[ ]	/* CallFunction */";
};
width = 512;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(151,270,o),
(191,311,o),
(191,340,qs),
(191,370,o),
(151,410,o),
(121,410,qs),
(91,410,o),
(51,370,o),
(51,340,qs),
(51,311,o),
(91,270,o),
(121,270,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 209;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,206,o),
(322,280,o),
(322,333,qs),
(322,387,o),
(247,462,o),
(193,462,qs),
(140,462,o),
(66,387,o),
(66,333,qs),
(66,299,o),
(100,240,o),
(159,206,o),
(193,206,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 12 0 11 37 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 357;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = asterisk;
kernLeft = asterisk;
kernRight = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(288,358,l),
(311,487,l),
(411,423,l),
(457,483,l),
(356,547,l),
(479,611,l),
(455,671,l),
(332,607,l),
(354,735,l),
(285,735,l),
(263,607,l),
(163,671,l),
(118,611,l),
(217,547,l),
(96,483,l),
(119,423,l),
(242,487,l),
(219,358,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
15 14 13 12 11 10 9 6 5 4 3 2 1 13 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 24 23 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 480;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(191,0,l),
(264,186,l),
(466,186,l),
(393,0,l),
(494,0,l),
(566,186,l),
(726,186,l),
(743,281,l),
(603,281,l),
(664,436,l),
(819,436,l),
(835,530,l),
(701,530,l),
(773,715,l),
(673,715,l),
(600,530,l),
(399,530,l),
(470,715,l),
(370,715,l),
(298,530,l),
(129,530,l),
(113,436,l),
(261,436,l),
(201,281,l),
(38,281,l),
(21,186,l),
(164,186,l),
(91,0,l)
);
},
{
closed = 1;
nodes = (
(362,436,l),
(564,436,l),
(503,281,l),
(301,281,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 5 2 3 14 8 2 2 1 3 2 104 16 15 9 3 1 12 10 2 0 11 1 0 103 6 1 4 4 33 77 13 1 11 11 34 11 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
6 1 4 3 4 133 7 5 2 3 14 8 2 2 1 3 2 104 16 15 9 3 1 12 10 2 0 11 1 0 103 13 1 11 11 34 11 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
28 28 28 31 28 31 30 29 27 26 25 24 23 22 21 20 19 18 17 17 17 17 17 17 17 17 16 17 8 31
CALL[ ]	/* CallFunction */";
};
width = 827;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = slash;
kernLeft = slash;
kernRight = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,-103,l),
(467,771,l),
(363,771,l),
(-41,-103,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 396;
}
);
note = slash;
unicode = 47;
},
{
glyphname = backslash;
kernLeft = backslash;
kernRight = backslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(313,-103,l),
(217,771,l),
(113,771,l),
(210,-103,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 396;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = periodcentered.loclCAT;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(118,270,o),
(158,311,o),
(158,340,qs),
(158,370,o),
(118,410,o),
(88,410,qs),
(58,410,o),
(18,370,o),
(18,340,qs),
(18,311,o),
(58,270,o),
(88,270,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 143;
}
);
note = periodcentered.loclCAT;
},
{
glyphname = periodcentered.loclCAT.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-104,280,o),
(-63,321,o),
(-63,350,qs),
(-63,380,o),
(-104,420,o),
(-133,420,qs),
(-163,420,o),
(-203,380,o),
(-203,350,qs),
(-203,321,o),
(-163,280,o),
(-133,280,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = periodcentered.loclCAT.case;
},
{
glyphname = hyphen;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(424,246,l),
(440,335,l),
(72,335,l),
(57,246,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 481;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = endash;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(583,246,l),
(599,335,l),
(67,335,l),
(52,246,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(796,246,l),
(811,335,l),
(67,335,l),
(52,246,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 848;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = underscore;
kernLeft = underscore;
kernRight = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(532,-137,l),
(549,-37,l),
(1,-37,l),
(-16,-137,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 651;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = parenleft;
kernRight = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,-145,l),
(279,-135,l),
(219,-60,o),
(152,128,o),
(152,230,qs),
(152,332,o),
(186,433,qs),
(221,534,o),
(352,722,o),
(444,801,q),
(445,811,l),
(338,811,l),
(248,736,o),
(184,641,qs),
(117,543,o),
(46,326,o),
(46,216,qs),
(46,108,o),
(113,-78,o),
(169,-145,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 26 23 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 377;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
kernLeft = parenright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-38,-145,l),
(69,-145,l),
(161,-67,o),
(224,26,qs),
(290,123,o),
(361,341,o),
(361,450,qs),
(361,557,o),
(294,744,o),
(237,811,q),
(130,811,l),
(128,801,l),
(188,726,o),
(255,539,o),
(255,437,qs),
(255,335,o),
(221,234,qs),
(186,132,o),
(55,-56,o),
(-36,-135,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 24 24 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 377;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(310,-162,l),
(325,-73,l),
(287,-73,ls),
(254,-73,o),
(220,-46,o),
(220,-15,qs),
(220,6,o),
(233,55,o),
(247,93,qs),
(262,134,o),
(277,191,o),
(277,217,qs),
(277,258,o),
(234,313,o),
(189,324,q),
(189,326,l),
(276,343,o),
(330,472,o),
(330,565,qs),
(330,613,o),
(340,676,o),
(383,722,o),
(428,722,qs),
(466,722,l),
(481,811,l),
(424,811,ls),
(326,811,o),
(229,686,o),
(229,585,qs),
(229,511,o),
(219,436,o),
(165,377,o),
(104,368,q),
(89,282,l),
(174,267,o),
(174,201,qs),
(174,172,o),
(160,124,o),
(145,82,qs),
(130,46,o),
(114,-10,o),
(114,-42,qs),
(114,-101,o),
(188,-162,o),
(252,-162,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
28 10 2 2 1 1 76 0 0 0 1 2 0 1 105 0 2 3 3 2 89 0 2 2 3 97 4 1 3 2 3 81 0 0 0 44 0 43 42 40 22 20 19 17 5 8 22
CALL[ ]	/* CallFunction */";
};
width = 434;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = braceright;
kernLeft = braceright;
kernRight = braceright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(38,-162,ls),
(130,-162,o),
(232,-46,o),
(232,62,qs),
(232,131,o),
(246,213,o),
(300,272,o),
(357,281,q),
(372,367,l),
(328,375,o),
(287,418,o),
(287,448,qs),
(287,474,o),
(300,521,o),
(315,561,qs),
(331,600,o),
(347,659,o),
(347,691,qs),
(347,750,o),
(274,811,o),
(209,811,qs),
(151,811,l),
(136,722,l),
(174,722,ls),
(206,722,o),
(241,696,o),
(241,664,qs),
(241,644,o),
(228,599,o),
(215,561,qs),
(200,518,o),
(184,460,o),
(184,432,qs),
(184,345,o),
(273,326,q),
(273,324,l),
(192,307,o),
(131,188,o),
(131,100,qs),
(131,20,o),
(93,-73,o),
(34,-73,qs),
(-4,-73,l),
(-20,-162,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
34 7 2 0 1 1 76 0 2 0 1 0 2 1 105 0 0 3 3 0 89 0 0 0 3 97 0 3 0 3 81 43 41 23 21 20 18 32 4 8 23
CALL[ ]	/* CallFunction */";
};
width = 434;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(200,-161,l),
(216,-73,l),
(109,-73,l),
(250,724,l),
(356,724,l),
(372,811,l),
(166,811,l),
(-6,-161,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 325;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,-160,l),
(358,811,l),
(152,811,l),
(136,724,l),
(243,724,l),
(102,-74,l),
(-4,-74,l),
(-20,-160,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 2 0 1 0 2 1 103 0 0 3 3 0 87 0 0 0 3 95 0 3 0 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 325;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(11,-117,l),
(149,118,l),
(35,118,l),
(-63,-117,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 202;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(200,-117,l),
(338,118,l),
(224,118,l),
(126,-117,l)
);
},
{
closed = 1;
nodes = (
(15,-117,l),
(154,118,l),
(39,118,l),
(-58,-117,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 391;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(354,466,l),
(451,700,l),
(377,700,l),
(239,466,l)
);
},
{
closed = 1;
nodes = (
(176,466,l),
(273,700,l),
(199,700,l),
(61,466,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 407;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quotedblright;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(326,465,l),
(464,700,l),
(349,700,l),
(252,465,l)
);
},
{
closed = 1;
nodes = (
(148,465,l),
(286,700,l),
(171,700,l),
(74,465,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 406;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,466,l),
(273,700,l),
(199,700,l),
(61,466,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 33 0 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 229;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = quoteright;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(149,466,l),
(286,700,l),
(172,700,l),
(75,466,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 33 0 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 229;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = guillemotleft;
kernLeft = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(106,120,l),
(209,120,l),
(142,295,l),
(270,470,l),
(168,470,l),
(43,295,l)
);
},
{
closed = 1;
nodes = (
(296,120,l),
(398,120,l),
(332,295,l),
(460,470,l),
(358,470,l),
(233,295,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
11 8 5 2 4 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 469;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(25,120,l),
(127,120,l),
(252,295,l),
(189,470,l),
(87,470,l),
(153,295,l)
);
},
{
closed = 1;
nodes = (
(215,120,l),
(317,120,l),
(442,295,l),
(379,470,l),
(277,470,l),
(343,295,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
11 8 5 2 4 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 469;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = guilsinglleft;
kernLeft = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,120,l),
(142,295,l),
(270,470,l),
(168,470,l),
(43,295,l),
(106,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(127,120,l),
(252,295,l),
(189,470,l),
(87,470,l),
(153,295,l),
(25,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 279;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = quotedbl;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(326,465,l),
(464,700,l),
(349,700,l),
(252,465,l)
);
},
{
closed = 1;
nodes = (
(148,465,l),
(286,700,l),
(171,700,l),
(74,465,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 406;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(149,466,l),
(286,700,l),
(172,700,l),
(75,466,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 33 0 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 229;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = florin;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-115,-210,ls),
(-38,-210,o),
(58,-140,o),
(81,-61,qs),
(229,463,l),
(340,463,l),
(364,551,l),
(253,551,l),
(265,592,ls),
(278,640,o),
(338,681,o),
(393,681,q),
(417,770,l),
(311,770,o),
(187,685,o),
(159,592,qs),
(147,551,l),
(79,551,l),
(55,463,l),
(123,463,l),
(-26,-61,ls),
(-36,-94,o),
(-66,-121,o),
(-93,-121,qs),
(-116,-121,l),
(-141,-210,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 3 0 4 2 3 4 105 5 1 2 6 1 1 0 2 1 103 0 0 0 7 97 0 7 7 38 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 3 0 4 2 3 4 105 5 1 2 6 1 1 0 2 1 103 0 0 7 7 0 89 0 0 0 7 97 0 7 0 7 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
35 17 19 17 19 17 19 32 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = florin;
unicode = 402;
},
{
glyphname = at;
kernLeft = at;
kernRight = at;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(491,-212,o),
(607,-190,o),
(652,-170,q),
(640,-97,l),
(552,-136,o),
(450,-136,qs),
(357,-136,o),
(217,-64,o),
(141,65,o),
(141,150,qs),
(141,262,o),
(258,459,o),
(460,579,o),
(580,579,qs),
(672,579,o),
(811,515,o),
(887,394,o),
(887,313,qs),
(887,268,o),
(860,161,o),
(801,83,o),
(756,83,qs),
(732,83,o),
(707,108,o),
(707,131,qs),
(708,140,o),
(709,149,qs),
(758,429,l),
(665,429,l),
(655,372,l),
(636,406,o),
(569,439,o),
(525,439,qs),
(454,439,o),
(339,363,o),
(274,240,o),
(274,172,qs),
(274,94,o),
(366,-3,o),
(446,-3,qs),
(541,-3,o),
(615,80,q),
(624,41,o),
(681,-1,o),
(727,-1,qs),
(804,-1,o),
(914,98,o),
(970,248,o),
(970,323,qs),
(970,423,o),
(874,573,o),
(703,654,o),
(593,654,qs),
(444,654,o),
(198,510,o),
(57,270,o),
(57,134,qs),
(57,32,o),
(149,-125,o),
(321,-212,o),
(437,-212,qs)
);
},
{
closed = 1;
nodes = (
(429,81,o),
(371,140,o),
(371,189,qs),
(371,234,o),
(412,310,o),
(483,356,o),
(527,356,qs),
(577,356,o),
(634,296,o),
(634,248,qs),
(634,204,o),
(594,128,o),
(524,81,o),
(479,81,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
30 1 9 3 35 1 5 9 18 1 1 5 56 1 7 1 57 1 8 7 5 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
30 1 9 4 35 1 5 9 18 1 1 5 56 1 7 1 57 1 8 7 5 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 0 0 6 3 0 6 105 4 1 3 0 9 5 3 9 105 12 10 2 5 5 1 98 2 1 1 1 34 77 0 7 7 8 97 11 1 8 8 38 8 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 4 3 9 3 4 9 128 0 0 0 6 3 0 6 105 0 3 0 9 5 3 9 105 12 10 2 5 5 1 98 2 1 1 1 34 77 0 7 7 8 97 11 1 8 8 38 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
61 61 0 0 61 74 61 73 68 66 0 60 0 59 38 38 37 19 37 35 38 38 13 8 30
CALL[ ]	/* CallFunction */";
};
width = 1032;
}
);
note = at;
unicode = 64;
},
{
glyphname = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(320,-12,o),
(415,73,q),
(423,82,l),
(491,0,l),
(624,0,l),
(493,158,l),
(684,405,l),
(573,405,l),
(436,226,l),
(327,358,ls),
(281,412,o),
(241,475,o),
(241,508,qs),
(241,533,o),
(267,584,o),
(320,619,o),
(358,619,qs),
(400,619,o),
(445,576,o),
(445,540,qs),
(445,530,o),
(442,516,q),
(547,516,l),
(551,536,o),
(551,558,qs),
(551,630,o),
(457,712,o),
(376,712,qs),
(303,712,o),
(193,647,o),
(136,546,o),
(136,494,qs),
(136,445,o),
(165,398,qs),
(171,388,l),
(162,382,ls),
(93,338,o),
(21,220,o),
(21,157,qs),
(21,81,o),
(125,-12,o),
(212,-12,qs)
);
},
{
closed = 1;
nodes = (
(186,83,o),
(128,139,o),
(128,182,qs),
(128,221,o),
(175,291,o),
(213,314,qs),
(224,321,l),
(369,147,l),
(360,138,ls),
(302,83,o),
(235,83,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
45 44 35 32 6 5 6 3 38 1 4 6 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 1 2 3 2 1 114 0 2 2 0 97 0 0 0 39 77 0 3 3 4 97 7 5 2 4 4 34 77 8 1 6 6 4 97 7 5 2 4 4 34 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 1 2 3 2 1 3 128 0 2 2 0 97 0 0 0 39 77 0 3 3 4 97 7 5 2 4 4 34 77 8 1 6 6 4 97 7 5 2 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 1 2 3 2 1 3 128 0 2 2 0 97 0 0 0 39 77 0 3 3 4 95 0 4 4 34 77 8 1 6 6 5 97 7 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
42 42 0 0 42 52 42 51 0 41 0 40 18 24 36 20 44 9 8 27
CALL[ ]	/* CallFunction */";
};
width = 681;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(312,-100,l),
(439,618,l),
(516,618,l),
(389,-100,l),
(480,-100,l),
(621,700,l),
(349,700,ls),
(279,700,o),
(154,656,o),
(72,554,o),
(72,472,qs),
(72,430,o),
(111,346,o),
(203,289,o),
(277,289,qs),
(290,289,l),
(221,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 0 3 2 3 0 2 128 4 1 2 2 132 0 3 3 1 95 0 1 1 33 3 78 17 17 17 38 32 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(290,-232,o),
(409,-171,o),
(476,-65,o),
(476,0,qs),
(476,32,o),
(462,58,q),
(503,91,o),
(546,181,o),
(546,228,qs),
(546,346,o),
(396,395,qs),
(282,434,o),
(255,455,qs),
(231,474,o),
(231,506,qs),
(231,558,o),
(307,622,o),
(363,622,qs),
(415,622,o),
(468,569,o),
(468,530,q),
(466,514,l),
(578,514,l),
(581,531,o),
(581,547,qs),
(581,623,o),
(468,712,o),
(378,712,qs),
(303,712,o),
(183,651,o),
(116,547,o),
(116,483,qs),
(116,449,o),
(130,423,q),
(88,387,o),
(47,297,o),
(47,252,qs),
(47,187,o),
(128,110,o),
(197,84,qs),
(219,77,ls),
(312,47,o),
(336,27,qs),
(362,8,o),
(362,-25,qs),
(362,-76,o),
(286,-142,o),
(230,-142,qs),
(179,-142,o),
(126,-90,o),
(126,-51,qs),
(126,-39,o),
(127,-34,q),
(15,-34,l),
(12,-51,o),
(12,-66,qs),
(12,-142,o),
(124,-232,o),
(215,-232,qs)
);
},
{
closed = 1;
nodes = (
(363,138,o),
(329,148,q),
(314,154,o),
(298,159,qs),
(252,176,o),
(199,201,o),
(162,243,o),
(162,273,qs),
(162,328,o),
(201,361,q),
(225,347,o),
(263,332,qs),
(290,323,ls),
(338,306,o),
(393,280,o),
(431,238,o),
(431,207,qs),
(431,154,o),
(392,119,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
37 1 3 4 77 67 52 24 4 0 3 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 3 4 0 4 3 0 128 0 0 1 1 0 112 0 4 4 2 97 0 2 2 39 77 0 1 1 5 98 6 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 39 77 0 1 1 5 98 6 1 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 1 6 1 5 1 5 102 0 4 4 2 97 0 2 2 39 4 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 58 0 57 41 39 36 35 31 29 36 20 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = section;
unicode = 167;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(456,-5,o),
(647,106,o),
(757,299,o),
(757,416,qs),
(757,491,o),
(694,623,o),
(563,706,o),
(465,706,qs),
(348,706,o),
(156,594,o),
(47,403,o),
(47,288,qs),
(47,211,o),
(112,77,o),
(244,-5,o),
(340,-5,qs)
);
},
{
closed = 1;
nodes = (
(275,36,o),
(160,94,o),
(93,210,o),
(93,291,qs),
(93,396,o),
(185,567,o),
(351,666,o),
(458,666,qs),
(529,666,o),
(644,610,o),
(712,496,o),
(712,413,qs),
(712,309,o),
(620,136,o),
(454,36,o),
(347,36,qs)
);
},
{
closed = 1;
nodes = (
(438,121,o),
(564,205,o),
(595,276,q),
(501,276,l),
(481,237,o),
(415,195,o),
(373,195,qs),
(327,195,o),
(271,254,o),
(271,310,qs),
(271,354,o),
(305,445,o),
(377,507,o),
(429,507,qs),
(470,507,o),
(522,465,o),
(527,426,q),
(621,426,l),
(617,500,o),
(520,582,o),
(443,582,qs),
(373,582,o),
(253,511,o),
(180,384,o),
(180,304,qs),
(180,220,o),
(281,121,o),
(361,121,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 93 values pushed */
0 5 6 8 6 5 8 128 0 8 7 6 8 7 126 0 0 0 2 4 0 2 105 0 4 0 6 5 4 6 105 0 7 12 1 9 3 7 9 105 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81 32 32 16 16 0 0 32 59 32 58 56 55 53 51 46 44 42 41 39 37 16 31 16 30 24 22 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 780;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(275,425,o),
(341,463,o),
(379,529,o),
(379,568,qs),
(379,607,o),
(341,673,o),
(275,712,o),
(236,712,qs),
(197,712,o),
(131,673,o),
(92,607,o),
(92,568,qs),
(92,529,o),
(131,463,o),
(197,425,o),
(236,425,qs)
);
},
{
closed = 1;
nodes = (
(187,448,o),
(116,519,o),
(116,568,qs),
(116,618,o),
(187,688,o),
(236,688,qs),
(286,688,o),
(356,618,o),
(356,568,qs),
(356,519,o),
(286,448,o),
(236,448,qs)
);
},
{
closed = 1;
nodes = (
(215,496,l),
(215,561,l),
(233,561,l),
(268,496,l),
(301,496,l),
(260,568,l),
(289,578,o),
(289,607,qs),
(289,625,o),
(267,651,o),
(241,651,qs),
(187,651,l),
(187,496,l)
);
},
{
closed = 1;
nodes = (
(215,585,l),
(215,628,l),
(237,628,ls),
(249,628,o),
(262,617,o),
(262,607,qs),
(262,596,o),
(247,585,o),
(234,585,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 6 values pushed */
34 1 6 9 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 63 values pushed */
0 4 2 8 0 4 114 0 8 9 2 8 112 12 1 9 6 2 9 6 126 0 6 5 2 6 5 126 7 1 5 3 2 5 3 126 0 0 0 2 4 0 2 105 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
0 4 2 8 2 4 8 128 0 8 9 2 8 9 126 12 1 9 6 2 9 6 126 0 6 5 2 6 5 126 7 1 5 3 2 5 3 126 0 0 0 2 4 0 2 105 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
41 41 16 16 0 0 41 49 41 48 47 45 40 39 38 37 36 35 30 28 16 27 16 26 22 20 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 357;
}
);
note = registered;
unicode = 174;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(422,350,l),
(463,581,l),
(511,395,l),
(564,395,l),
(678,579,l),
(638,350,l),
(707,350,l),
(769,700,l),
(687,700,l),
(554,484,l),
(501,700,l),
(416,700,l),
(354,350,l)
);
},
{
closed = 1;
nodes = (
(207,350,l),
(258,641,l),
(352,641,l),
(363,700,l),
(104,700,l),
(93,641,l),
(187,641,l),
(135,350,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
10 7 2 3 3 5 1 76 0 3 5 2 5 3 2 128 8 4 2 2 2 132 6 1 2 0 5 5 0 87 6 1 2 0 0 5 95 7 1 5 0 5 79 17 17 17 17 18 18 17 18 16 9 6 31
CALL[ ]	/* CallFunction */";
};
width = 734;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(290,435,o),
(370,512,o),
(370,573,qs),
(370,636,o),
(290,712,o),
(231,712,qs),
(173,712,o),
(93,635,o),
(93,573,qs),
(93,512,o),
(173,435,o),
(231,435,qs)
);
},
{
closed = 1;
nodes = (
(206,507,o),
(169,544,o),
(169,574,qs),
(169,604,o),
(206,640,o),
(231,640,qs),
(257,640,o),
(294,604,o),
(294,574,qs),
(294,544,o),
(257,507,o),
(231,507,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 348;
}
);
note = degree;
unicode = 176;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(111,-100,l),
(256,720,l),
(150,720,l),
(5,-100,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 0 1 134 0 0 0 33 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 9 values pushed */
0 0 1 0 133 0 1 1 118
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 239;
}
);
note = bar;
unicode = 124;
},
{
glyphname = brokenbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,391,l),
(256,720,l),
(150,720,l),
(92,391,l)
);
},
{
closed = 1;
nodes = (
(111,-100,l),
(170,230,l),
(64,230,l),
(5,-100,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 2 0 3 2 3 99 0 1 1 0 95 0 0 0 33 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 239;
}
);
note = brokenbar;
unicode = 166;
},
{
glyphname = dagger;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(233,-261,l),
(352,476,l),
(546,468,l),
(561,551,l),
(364,541,l),
(417,783,l),
(311,783,l),
(280,541,l),
(86,551,l),
(72,468,l),
(268,476,l),
(127,-261,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 1 2 133 0 5 0 5 134 3 1 1 0 0 1 87 3 1 1 1 0 96 4 1 0 1 0 80 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = dagger;
unicode = 8224;
},
{
glyphname = uni2113;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(111,-100,l),
(257,720,l),
(151,720,l),
(5,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 240;
}
);
note = uni2113;
unicode = 8467;
},
{
glyphname = daggerdbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,-261,l),
(265,-19,l),
(459,-28,l),
(474,55,l),
(276,46,l),
(353,476,l),
(546,468,l),
(561,551,l),
(364,541,l),
(417,783,l),
(311,783,l),
(280,541,l),
(86,551,l),
(72,468,l),
(268,476,l),
(192,46,l),
(-1,55,l),
(-16,-28,l),
(181,-19,l),
(127,-261,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 1 0 95 8 1 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 18 17 17 17 17 17 17 17 17 16 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = daggerdbl;
unicode = 8225;
},
{
glyphname = estimated;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(497,-7,o),
(654,136,q),
(619,185,l),
(545,123,o),
(416,61,o),
(344,61,qs),
(280,61,o),
(192,104,o),
(160,147,q),
(191,316,l),
(715,316,l),
(726,377,ls),
(731,403,o),
(731,437,qs),
(731,506,o),
(673,627,o),
(545,703,o),
(448,703,qs),
(308,703,o),
(124,551,o),
(41,343,o),
(41,257,qs),
(41,184,o),
(104,65,o),
(234,-7,o),
(332,-7,qs)
);
},
{
closed = 1;
nodes = (
(231,549,l),
(314,636,o),
(436,636,qs),
(554,636,o),
(605,559,q),
(574,384,l),
(203,384,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
27 1 5 4 23 22 16 3 2 1 2 76 0 0 0 4 5 0 4 105 7 1 5 0 1 2 5 1 103 0 2 3 3 2 89 0 2 2 3 97 6 1 3 2 3 81 26 26 0 0 26 32 26 32 30 28 0 25 0 24 35 22 38 8 6 25
CALL[ ]	/* CallFunction */";
};
width = 749;
}
);
note = estimated;
unicode = 8494;
},
{
glyphname = at.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(513,-84,o),
(629,-62,o),
(674,-42,q),
(662,31,l),
(574,-8,o),
(473,-8,qs),
(380,-8,o),
(239,64,o),
(163,194,o),
(163,278,qs),
(163,390,o),
(281,587,o),
(483,707,o),
(603,707,qs),
(695,707,o),
(833,643,o),
(909,522,o),
(909,441,qs),
(909,396,o),
(882,289,o),
(823,211,o),
(778,211,qs),
(754,211,o),
(729,236,o),
(729,259,qs),
(730,268,o),
(731,277,qs),
(781,557,l),
(687,557,l),
(677,500,l),
(659,534,o),
(592,567,o),
(547,567,qs),
(476,567,o),
(362,491,o),
(297,368,o),
(297,300,qs),
(297,222,o),
(389,125,o),
(469,125,qs),
(563,125,o),
(637,208,q),
(646,169,o),
(704,127,o),
(749,127,qs),
(826,127,o),
(936,226,o),
(992,376,o),
(992,451,qs),
(992,551,o),
(896,701,o),
(725,782,o),
(615,782,qs),
(466,782,o),
(221,638,o),
(80,398,o),
(80,262,qs),
(80,160,o),
(172,3,o),
(343,-84,o),
(459,-84,qs)
);
},
{
closed = 1;
nodes = (
(452,209,o),
(393,268,o),
(393,317,qs),
(393,362,o),
(434,438,o),
(506,484,o),
(549,484,qs),
(599,484,o),
(657,424,o),
(657,376,qs),
(657,332,o),
(617,255,o),
(546,209,o),
(501,209,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
30 1 9 3 35 1 5 9 18 1 1 5 56 1 7 1 57 1 8 7 5 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
30 1 9 4 35 1 5 9 18 1 1 5 56 1 7 1 57 1 8 7 5 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 6 3 0 6 105 4 1 3 0 9 5 3 9 105 12 10 2 5 2 1 1 7 5 1 106 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 4 3 9 3 4 9 128 0 0 0 6 3 0 6 105 0 3 0 9 5 3 9 105 12 10 2 5 2 1 1 7 5 1 106 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
61 61 0 0 61 74 61 73 68 66 0 60 0 59 38 38 37 19 37 35 38 38 13 8 30
CALL[ ]	/* CallFunction */";
};
width = 1032;
}
);
note = at.case;
},
{
glyphname = registered.case;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (36,204);
ref = registered;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 4
PUSHB[ ]	/* 1 value pushed */
204
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 357;
}
);
note = registered.case;
},
{
glyphname = uni20BF;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(134,0,l),
(119,-86,l),
(188,-86,l),
(203,0,l),
(263,0,l),
(248,-86,l),
(317,-86,l),
(332,1,l),
(402,7,o),
(507,67,o),
(565,162,o),
(565,221,qs),
(565,273,o),
(506,358,o),
(456,376,q),
(519,397,o),
(591,491,o),
(591,548,qs),
(591,604,o),
(522,683,o),
(455,695,q),
(471,791,l),
(402,791,l),
(386,700,l),
(326,700,l),
(342,791,l),
(273,791,l),
(257,700,l),
(147,700,l),
(23,0,l)
);
},
{
closed = 1;
nodes = (
(145,90,l),
(186,325,l),
(337,325,ls),
(397,325,o),
(458,272,o),
(458,224,qs),
(458,160,o),
(377,90,o),
(298,90,qs)
);
},
{
closed = 1;
nodes = (
(202,413,l),
(236,611,l),
(372,611,ls),
(428,611,o),
(480,564,o),
(480,524,qs),
(480,473,o),
(409,413,o),
(340,413,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
8 1 10 0 14 1 8 11 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
3 1 1 0 0 1 112 6 1 4 5 5 4 113 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
3 1 1 0 1 133 6 1 4 5 5 4 113 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
3 1 1 0 1 133 6 1 4 5 4 134 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
39 39 30 30 39 47 39 46 45 43 30 38 30 37 37 17 17 17 31 17 17 17 16 14 8 31
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = uni20BF;
unicode = 8383;
},
{
glyphname = cent;
layers = (
{
anchors = (
{
name = bottom;
pos = (313,0);
},
{
name = top;
pos = (435,691);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(188,-86,l),
(220,5,l),
(243,-3,o),
(276,-8,q),
(249,-86,l),
(320,-86,l),
(346,-12,l),
(461,-8,o),
(627,107,o),
(665,208,q),
(548,208,l),
(526,154,o),
(441,91,o),
(380,84,q),
(552,576,l),
(593,542,o),
(596,478,q),
(712,478,l),
(711,550,o),
(647,652,o),
(588,678,q),
(628,791,l),
(557,791,l),
(524,697,l),
(497,701,o),
(465,703,q),
(496,791,l),
(425,791,l),
(392,698,l),
(293,683,o),
(139,561,o),
(53,374,o),
(53,265,qs),
(53,195,o),
(106,74,o),
(160,36,q),
(117,-86,l)
);
},
{
closed = 1;
nodes = (
(161,345,o),
(207,477,o),
(295,575,o),
(356,596,q),
(199,146,l),
(161,195,o),
(161,275,qs)
);
},
{
closed = 1;
nodes = (
(432,609,l),
(439,609,ls),
(466,609,o),
(491,604,q),
(309,85,l),
(281,89,o),
(254,101,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
15 1 8 1 46 39 21 3 3 8 50 38 34 32 22 5 5 4 3 76 0 4 3 5 3 4 5 128 7 1 6 5 6 134 0 8 3 0 8 89 2 1 0 0 3 4 0 3 103 0 1 1 33 77 0 5 5 40 5 78 27 20 17 18 22 20 18 17 24 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 714;
}
);
note = cent;
unicode = 162;
},
{
glyphname = currency;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(149,149,l),
(191,120,o),
(245,120,qs),
(304,120,o),
(353,147,q),
(402,87,l),
(454,132,l),
(408,189,l),
(463,247,o),
(463,327,qs),
(463,370,o),
(443,405,q),
(514,465,l),
(476,510,l),
(402,447,l),
(363,474,o),
(308,474,qs),
(250,474,o),
(200,450,q),
(150,510,l),
(98,465,l),
(144,409,l),
(90,353,o),
(90,272,qs),
(90,228,o),
(110,193,q),
(39,132,l),
(75,87,l)
);
},
{
closed = 1;
nodes = (
(226,194,o),
(184,236,o),
(184,274,qs),
(184,329,o),
(247,402,o),
(294,402,qs),
(325,402,o),
(369,359,o),
(369,321,qs),
(369,268,o),
(305,194,o),
(258,194,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
15 14 12 8 6 5 6 2 0 26 22 20 19 1 5 1 3 2 76 13 7 2 0 74 27 21 2 1 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
4 1 3 0 1 3 1 101 0 2 2 0 97 0 0 0 36 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 2 3 0 2 105 4 1 3 1 1 3 89 4 1 3 3 1 97 0 1 3 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
28 28 28 39 28 38 39 44 41 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 534;
}
);
note = currency;
unicode = 164;
},
{
glyphname = dollar;
kernLeft = S;
kernRight = S;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(197,-87,l),
(264,-87,l),
(277,-12,l),
(348,-10,o),
(466,44,o),
(536,146,o),
(536,215,qs),
(536,279,o),
(455,367,o),
(385,393,qs),
(351,405,l),
(388,618,l),
(422,608,o),
(457,562,o),
(457,532,qs),
(457,520,o),
(456,514,q),
(568,514,l),
(571,531,o),
(571,545,qs),
(571,612,o),
(481,700,o),
(404,710,q),
(419,792,l),
(352,792,l),
(338,711,l),
(273,707,o),
(168,653,o),
(107,558,o),
(107,495,qs),
(107,440,o),
(174,357,o),
(240,333,qs),
(249,329,o),
(269,323,q),
(227,84,l),
(189,95,o),
(146,150,o),
(146,187,qs),
(146,203,o),
(148,211,q),
(36,211,l),
(32,194,o),
(32,171,qs),
(32,99,o),
(129,4,o),
(211,-8,q)
);
},
{
closed = 1;
nodes = (
(332,300,l),
(375,282,o),
(421,237,o),
(421,202,qs),
(421,149,o),
(354,82,o),
(293,78,q)
);
},
{
closed = 1;
nodes = (
(288,429,l),
(255,444,o),
(220,484,o),
(220,513,qs),
(220,554,o),
(275,614,o),
(321,621,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
23 1 1 2 60 34 2 3 1 59 52 35 11 4 0 3 10 1 6 0 46 1 4 6 5 76 0 2 1 2 133 0 3 1 0 1 3 0 128 0 0 6 1 0 6 126 0 5 4 5 134 0 1 1 39 77 7 1 6 6 4 98 0 4 4 40 4 78 47 47 47 53 47 53 17 29 22 17 30 20 8 8 28
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = Euro;
kernRight = Cacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(503,-12,o),
(680,105,o),
(720,211,q),
(602,211,l),
(577,150,o),
(473,83,o),
(398,83,qs),
(320,83,o),
(224,164,o),
(213,238,q),
(441,238,l),
(453,307,l),
(211,307,l),
(214,352,o),
(224,390,q),
(468,390,l),
(480,459,l),
(251,459,l),
(288,532,o),
(414,617,o),
(491,617,qs),
(567,617,o),
(647,547,o),
(649,484,q),
(768,484,l),
(766,592,o),
(630,712,o),
(507,712,qs),
(422,712,o),
(351,681,qs),
(279,649,o),
(168,535,o),
(137,459,q),
(48,459,l),
(36,390,l),
(115,390,l),
(105,352,o),
(102,307,q),
(21,307,l),
(9,238,l),
(101,238,l),
(110,123,o),
(258,-12,o),
(382,-12,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
0 5 6 3 6 5 3 128 0 12 0 11 0 12 11 128 7 1 3 8 1 2 1 3 2 103 9 1 1 10 1 0 12 1 0 103 0 6 6 4 97 0 4 4 39 77 0 11 11 13 97 14 1 13 13 40 13 78 0 0 0 43 0 42 40 39 37 35 33 32 31 30 17 18 34 18 36 17 18 17 18 15 8 31
CALL[ ]	/* CallFunction */";
};
width = 768;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = uni20BD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,0,l),
(194,115,l),
(400,115,l),
(415,199,l),
(209,199,l),
(225,289,l),
(354,289,ls),
(422,289,o),
(552,338,o),
(638,443,o),
(638,522,qs),
(638,605,o),
(533,700,o),
(427,700,qs),
(192,700,l),
(134,373,l),
(45,373,l),
(31,289,l),
(119,289,l),
(103,199,l),
(15,199,l),
(0,115,l),
(88,115,l),
(68,0,l)
);
},
{
closed = 1;
nodes = (
(240,373,l),
(283,618,l),
(409,618,ls),
(528,618,o),
(528,516,qs),
(528,450,o),
(443,373,o),
(366,373,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
11 10 2 3 5 1 2 1 3 2 103 6 1 1 7 1 0 8 1 0 103 0 9 9 4 95 0 4 4 33 77 0 8 8 34 8 78 24 24 24 31 24 30 29 27 17 17 17 37 33 17 17 17 16 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 622;
}
);
note = uni20BD;
unicode = 8381;
},
{
glyphname = uni20A8;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (793,0);
},
{
name = top;
pos = (881,496);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (582,0);
ref = s;
}
);
width = 1081;
}
);
note = uni20A8;
unicode = 8360;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,0,l),
(497,0,l),
(512,86,l),
(152,86,l),
(257,174,o),
(257,286,qs),
(257,298,o),
(256,304,q),
(424,304,l),
(437,378,l),
(246,378,l),
(235,429,o),
(235,463,qs),
(235,533,o),
(314,624,o),
(384,624,qs),
(435,624,o),
(491,569,o),
(491,524,qs),
(491,509,o),
(490,502,q),
(587,502,l),
(589,526,o),
(589,536,qs),
(589,614,o),
(487,712,o),
(392,712,qs),
(326,712,o),
(209,654,o),
(137,538,o),
(137,454,qs),
(137,416,o),
(145,378,q),
(54,378,l),
(41,304,l),
(155,304,l),
(156,298,o),
(156,284,qs),
(156,218,o),
(99,112,o),
(41,60,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 3 4 1 4 3 1 128 5 1 1 6 1 0 7 1 0 103 0 4 4 2 97 0 2 2 39 77 0 7 7 8 95 0 8 8 34 8 78 17 20 17 20 36 20 37 17 35 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = yen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(316,0,l),
(344,159,l),
(544,159,l),
(557,233,l),
(358,233,l),
(362,258,l),
(403,316,l),
(572,316,l),
(585,391,l),
(455,391,l),
(671,700,l),
(552,700,l),
(326,356,l),
(222,700,l),
(102,700,l),
(210,391,l),
(79,391,l),
(66,316,l),
(236,316,l),
(256,258,l),
(252,233,l),
(51,233,l),
(38,159,l),
(238,159,l),
(210,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
11 1 2 3 4 1 1 2 2 76 6 1 3 7 1 2 1 3 2 104 8 1 1 9 1 0 10 1 0 103 5 1 4 4 33 77 0 10 10 34 10 78 24 23 22 21 18 17 17 18 17 17 18 17 16 11 8 31
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = yen;
unicode = 165;
},
{
glyphname = cent.001;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(184,-97,l),
(284,-97,l),
(300,-8,l),
(376,5,o),
(493,100,o),
(519,171,q),
(409,171,l),
(392,127,o),
(314,78,o),
(267,78,qs),
(215,78,o),
(148,150,o),
(148,211,qs),
(148,271,o),
(172,317,qs),
(196,364,o),
(278,418,o),
(326,418,qs),
(374,418,o),
(435,369,o),
(435,325,q),
(546,325,l),
(545,398,o),
(463,492,o),
(390,504,q),
(407,599,l),
(307,599,l),
(290,504,l),
(218,492,o),
(161,450,qs),
(104,407,o),
(39,277,o),
(39,200,qs),
(39,119,o),
(126,7,o),
(200,-7,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
10 1 2 0 35 1 5 3 2 76 0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 3 5 5 3 89 0 3 3 5 95 0 5 3 5 79 20 18 38 34 20 24 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = cent.001;
},
{
glyphname = uni2215;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,-103,l),
(467,771,l),
(363,771,l),
(-41,-103,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 396;
}
);
note = uni2215;
unicode = 8725;
},
{
glyphname = plus;
kernLeft = plus;
kernRight = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,63,l),
(346,246,l),
(535,246,l),
(551,335,l),
(362,335,l),
(394,517,l),
(302,517,l),
(270,335,l),
(80,335,l),
(65,246,l),
(254,246,l),
(222,63,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 5 0 5 134 3 1 1 4 1 0 5 1 0 104 0 2 2 36 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 1 2 133 0 5 0 5 134 3 1 1 0 0 1 87 3 1 1 1 0 96 4 1 0 1 0 80
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = plus;
unicode = 43;
},
{
glyphname = minus;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(504,246,l),
(520,335,l),
(112,335,l),
(97,246,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = multiply;
kernLeft = multiply;
kernRight = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(297,228,l),
(400,102,l),
(473,164,l),
(369,289,l),
(523,421,l),
(472,484,l),
(318,352,l),
(214,478,l),
(141,416,l),
(244,291,l),
(92,160,l),
(144,98,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
11 5 1 50
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(507,246,l),
(523,335,l),
(109,335,l),
(94,246,l)
);
},
{
closed = 1;
nodes = (
(312,56,o),
(352,97,o),
(352,126,qs),
(352,157,o),
(313,197,o),
(282,197,qs),
(251,197,o),
(212,157,o),
(212,126,qs),
(212,97,o),
(252,56,o),
(282,56,qs)
);
},
{
closed = 1;
nodes = (
(366,384,o),
(405,424,o),
(405,454,qs),
(405,484,o),
(366,524,o),
(336,524,qs),
(305,524,o),
(265,484,o),
(265,454,qs),
(265,424,o),
(305,384,o),
(336,384,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 0 0 1 2 0 1 103 0 2 6 1 3 2 3 101 7 1 5 5 4 97 0 4 4 42 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 7 1 5 0 4 5 105 0 0 0 1 2 0 1 103 0 2 3 3 2 89 0 2 2 3 97 6 1 3 2 3 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
16 16 4 4 16 27 16 26 22 20 4 15 4 14 37 17 16 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = divide;
unicode = 247;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,137,l),
(504,229,l),
(92,229,l),
(76,137,l)
);
},
{
closed = 1;
nodes = (
(525,352,l),
(541,444,l),
(130,444,l),
(114,352,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 2 0 3 0 2 3 103 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = equal;
unicode = 61;
},
{
glyphname = notequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(197,71,l),
(244,137,l),
(487,137,l),
(504,229,l),
(309,229,l),
(396,352,l),
(525,352,l),
(541,444,l),
(461,444,l),
(508,511,l),
(420,511,l),
(372,444,l),
(130,444,l),
(114,352,l),
(307,352,l),
(221,229,l),
(92,229,l),
(76,137,l),
(156,137,l),
(109,71,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 3 3 4 112 0 9 0 0 9 113 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 18 17 17 17 17 17 17 17 17 16 10 6 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = greater;
kernRight = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(230,135,l),
(504,363,l),
(311,591,l),
(177,591,l),
(372,363,l),
(97,135,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = greater;
unicode = 62;
},
{
glyphname = less;
kernLeft = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(465,135,l),
(270,363,l),
(545,591,l),
(412,591,l),
(137,363,l),
(331,135,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = less;
unicode = 60;
},
{
glyphname = greaterequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(244,210,l),
(513,400,l),
(311,591,l),
(176,591,l),
(375,401,l),
(109,210,l)
);
},
{
closed = 1;
nodes = (
(446,67,l),
(461,148,l),
(99,148,l),
(85,67,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lessequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(480,210,l),
(279,401,l),
(546,591,l),
(410,591,l),
(141,400,l),
(343,210,l)
);
},
{
closed = 1;
nodes = (
(453,67,l),
(468,148,l),
(106,148,l),
(92,67,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = plusminus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(327,140,l),
(351,274,l),
(547,274,l),
(563,363,l),
(367,363,l),
(391,497,l),
(299,497,l),
(275,363,l),
(79,363,l),
(63,274,l),
(259,274,l),
(235,140,l)
);
},
{
closed = 1;
nodes = (
(499,0,l),
(515,93,l),
(32,93,l),
(15,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 5 0 6 0 5 114 3 1 1 4 1 0 5 1 0 104 0 2 2 36 77 0 6 6 7 95 0 7 7 34 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 5 0 6 0 5 6 128 3 1 1 4 1 0 5 1 0 104 0 2 2 36 77 0 6 6 7 95 0 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 17 17 17 17 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = approxequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(455,317,o),
(549,398,o),
(577,478,q),
(497,478,l),
(487,447,o),
(446,412,o),
(420,412,qs),
(401,412,o),
(371,426,o),
(347,442,qs),
(324,459,o),
(283,478,o),
(257,478,qs),
(134,478,o),
(76,318,q),
(155,318,l),
(166,349,o),
(207,383,o),
(233,383,qs),
(253,383,o),
(285,368,o),
(306,352,qs),
(332,334,o),
(370,317,o),
(396,317,qs)
);
},
{
closed = 1;
nodes = (
(417,99,o),
(511,180,o),
(539,260,q),
(459,260,l),
(449,229,o),
(408,194,o),
(382,194,qs),
(363,194,o),
(333,208,o),
(309,224,qs),
(286,241,o),
(245,260,o),
(219,260,qs),
(96,260,o),
(38,100,q),
(117,100,l),
(128,131,o),
(169,165,o),
(195,165,qs),
(215,165,o),
(247,150,o),
(268,134,qs),
(294,116,o),
(332,99,o),
(358,99,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
4 1 2 0 0 1 2 0 105 0 3 12 5 2 1 8 3 1 105 0 9 6 7 9 89 10 1 8 0 6 7 8 6 105 0 9 9 7 97 13 11 2 7 9 7 81 25 25 0 0 25 49 25 48 46 45 43 41 37 35 34 33 31 29 0 24 0 23 18 36 33 18 36 14 6 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(442,239,o),
(535,319,o),
(563,400,q),
(484,400,l),
(474,369,o),
(433,334,o),
(406,334,qs),
(387,334,o),
(357,349,o),
(334,364,qs),
(309,382,o),
(270,400,o),
(243,400,qs),
(183,400,o),
(92,321,o),
(63,240,q),
(142,240,l),
(153,271,o),
(193,305,o),
(220,305,qs),
(240,305,o),
(272,290,o),
(293,274,qs),
(317,257,o),
(356,239,o),
(383,239,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 25 0 24 18 36 34 18 36 7 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = logicalnot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(544,212,l),
(584,435,l),
(78,435,l),
(63,352,l),
(464,352,l),
(439,212,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 0 0 2 113 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 2 134 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
17 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = logicalnot;
unicode = 172;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(118,174,l),
(368,573,l),
(475,174,l),
(583,174,l),
(440,700,l),
(340,700,l),
(10,174,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 0 1 76 0 0 1 0 133 2 1 1 1 118 18 17 16 3 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 633;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = infinity;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,135,o),
(315,187,o),
(349,229,q),
(380,185,o),
(451,135,o),
(505,135,qs),
(557,135,o),
(600,158,qs),
(644,182,o),
(693,262,o),
(693,312,qs),
(693,372,o),
(619,441,o),
(557,441,qs),
(503,441,o),
(410,386,o),
(376,340,q),
(346,388,o),
(275,441,o),
(220,441,qs),
(170,441,o),
(127,418,qs),
(84,394,o),
(36,314,o),
(36,264,qs),
(36,203,o),
(111,135,o),
(170,135,qs)
);
},
{
closed = 1;
nodes = (
(163,209,o),
(124,244,o),
(124,276,qs),
(124,314,o),
(176,367,o),
(213,367,qs),
(246,367,o),
(292,324,o),
(316,283,q),
(290,248,o),
(226,209,o),
(194,209,qs)
);
},
{
closed = 1;
nodes = (
(479,208,o),
(433,248,o),
(408,286,q),
(435,323,o),
(505,366,o),
(538,366,qs),
(570,366,o),
(606,330,o),
(606,298,qs),
(606,260,o),
(553,208,o),
(514,208,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
48 30 24 10 4 5 4 1 76 1 1 0 6 1 4 5 0 4 105 10 7 9 3 5 2 2 5 89 10 7 9 3 5 5 2 97 8 3 2 2 5 2 81 40 40 28 28 0 0 40 51 40 50 46 44 28 39 28 38 34 32 0 27 0 26 38 36 38 11 6 25
CALL[ ]	/* CallFunction */";
};
width = 715;
}
);
note = infinity;
unicode = 8734;
},
{
glyphname = integral;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-111,-210,ls),
(-38,-210,o),
(56,-140,o),
(79,-61,qs),
(317,776,ls),
(326,807,o),
(356,832,o),
(380,832,qs),
(398,832,l),
(423,922,l),
(401,922,ls),
(328,922,o),
(233,854,o),
(211,776,qs),
(-27,-61,ls),
(-37,-95,o),
(-63,-121,o),
(-88,-121,qs),
(-108,-121,l),
(-132,-210,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 1 0 2 0 1 2 105 0 0 3 3 0 89 0 0 0 3 97 0 3 0 3 81 37 33 37 32 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 257;
}
);
note = integral;
unicode = 8747;
},
{
glyphname = uni2126;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(271,0,l),
(286,86,l),
(224,108,o),
(149,226,o),
(149,306,qs),
(149,386,o),
(221,529,o),
(357,616,o),
(447,616,qs),
(504,616,o),
(598,570,o),
(653,477,o),
(653,410,qs),
(653,348,o),
(603,217,o),
(500,110,o),
(423,86,q),
(407,0,l),
(681,0,l),
(697,82,l),
(566,82,l),
(655,131,o),
(763,316,o),
(763,427,qs),
(763,502,o),
(696,632,o),
(561,712,o),
(464,712,qs),
(351,712,o),
(157,607,o),
(42,423,o),
(42,309,qs),
(42,248,o),
(94,120,o),
(144,82,q),
(11,82,l),
(-4,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
34 1 0 4 1 76 0 1 0 4 0 1 4 105 2 1 0 3 3 0 87 2 1 0 0 3 95 5 1 3 0 3 79 23 40 17 22 38 16 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 779;
}
);
note = uni2126;
unicode = 8486;
},
{
glyphname = uni2206;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(628,0,l),
(643,82,l),
(470,700,l),
(382,700,l),
(-8,82,l),
(-22,0,l)
);
},
{
closed = 1;
nodes = (
(404,580,l),
(535,82,l),
(101,82,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
7 1 2 0 1 76 0 0 2 0 133 3 1 2 1 1 2 87 3 1 2 2 1 95 0 1 2 1 79 6 6 6 8 6 8 18 17 4 6 24
CALL[ ]	/* CallFunction */";
};
width = 694;
}
);
note = uni2206;
unicode = 8710;
},
{
glyphname = product;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(168,0,l),
(276,618,l),
(576,618,l),
(467,0,l),
(573,0,l),
(681,618,l),
(759,618,l),
(774,700,l),
(109,700,l),
(93,618,l),
(170,618,l),
(62,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
5 1 3 0 3 134 0 1 0 0 1 87 0 1 1 0 95 4 2 2 0 1 0 79 17 17 17 17 17 16 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 722;
}
);
note = product;
unicode = 8719;
},
{
glyphname = summation;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(420,-49,l),
(435,32,l),
(120,32,l),
(427,290,l),
(440,369,l),
(220,619,l),
(538,619,l),
(553,700,l),
(147,700,l),
(125,578,l),
(336,328,l),
(36,73,l),
(14,-49,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
7 2 1 3 2 1 1 76 0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 19 17 19 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 547;
}
);
note = summation;
unicode = 8721;
},
{
glyphname = radical;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(236,-43,l),
(896,875,l),
(825,875,l),
(257,83,l),
(176,292,l),
(-1,199,l),
(22,146,l),
(96,185,l),
(185,-43,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
4 3 2 1 4 1 0 1 76 0 0 1 0 133 0 1 1 118 17 21 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 734;
}
);
note = radical;
unicode = 8730;
},
{
glyphname = uni00B5;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(85,-220,l),
(127,15,l),
(159,-12,o),
(212,-12,qs),
(268,-12,o),
(365,40,o),
(397,85,q),
(391,0,l),
(485,0,l),
(572,496,l),
(466,496,l),
(420,233,ls),
(405,160,o),
(315,78,o),
(257,78,qs),
(160,78,o),
(160,177,qs),
(160,194,o),
(165,222,qs),
(213,496,l),
(107,496,l),
(-21,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
14 1 1 0 19 1 3 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 36 77 0 1 1 3 98 4 1 3 3 34 77 0 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
2 1 0 0 36 77 0 3 3 34 77 0 1 1 4 98 0 4 4 40 77 0 5 5 38 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 35 17 19 36 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = uni00B5;
unicode = 181;
},
{
glyphname = partialdiff;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,-9,o),
(487,175,o),
(569,424,o),
(569,519,qs),
(569,627,o),
(471,740,o),
(378,740,qs),
(325,740,o),
(275,726,q),
(265,666,l),
(309,678,o),
(343,678,qs),
(407,678,o),
(468,601,o),
(468,522,qs),
(468,491,o),
(464,463,q),
(457,515,o),
(397,558,o),
(350,558,qs),
(256,558,o),
(104,437,o),
(17,253,o),
(17,165,qs),
(17,92,o),
(101,-9,o),
(186,-9,qs)
);
},
{
closed = 1;
nodes = (
(173,82,o),
(126,132,o),
(126,182,qs),
(126,242,o),
(181,377,o),
(280,469,o),
(341,469,qs),
(382,469,o),
(429,419,o),
(429,371,qs),
(429,312,o),
(374,175,o),
(275,82,o),
(213,82,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
16 1 0 1 9 1 5 4 2 76 0 2 0 1 0 2 1 105 0 0 0 4 5 0 4 105 7 1 5 3 3 5 89 7 1 5 5 3 97 6 1 3 5 3 81 27 27 0 0 27 40 27 39 34 32 0 26 0 25 35 38 37 8 6 25
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = partialdiff;
unicode = 8706;
},
{
glyphname = percent;
kernLeft = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(213,0,l),
(736,700,l),
(632,700,l),
(108,0,l)
);
},
{
closed = 1;
nodes = (
(281,366,o),
(326,393,qs),
(370,421,o),
(422,514,o),
(422,570,qs),
(422,635,o),
(343,712,o),
(280,712,qs),
(224,712,o),
(180,684,qs),
(135,656,o),
(83,563,o),
(83,508,qs),
(83,443,o),
(163,366,o),
(227,366,qs)
);
},
{
closed = 1;
nodes = (
(206,441,o),
(169,480,o),
(169,516,qs),
(169,566,o),
(228,637,o),
(269,637,qs),
(299,637,o),
(336,598,o),
(336,562,qs),
(336,512,o),
(277,441,o),
(236,441,qs)
);
},
{
closed = 1;
nodes = (
(626,-12,o),
(670,16,qs),
(715,44,o),
(766,137,o),
(766,193,qs),
(766,258,o),
(687,334,o),
(624,334,qs),
(568,334,o),
(524,306,qs),
(479,279,o),
(427,186,o),
(427,130,qs),
(427,65,o),
(508,-12,o),
(571,-12,qs)
);
},
{
closed = 1;
nodes = (
(551,64,o),
(514,102,o),
(514,138,qs),
(514,188,o),
(572,260,o),
(614,260,qs),
(643,260,o),
(680,221,o),
(680,184,qs),
(680,135,o),
(622,64,o),
(580,64,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 106 0 4 4 0 97 2 1 0 0 33 77 13 1 9 9 1 97 12 7 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 106 0 0 0 33 77 0 4 4 2 97 0 2 2 39 77 0 1 1 34 77 13 1 9 9 7 97 12 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 36 values pushed */
48 48 32 32 20 20 4 4 48 59 48 58 54 52 32 47 32 46 40 38 20 31 20 30 26 24 4 19 4 18 39 17 16 14 8 25
CALL[ ]	/* CallFunction */";
};
width = 814;
}
);
note = percent;
unicode = 37;
},
{
glyphname = perthousand;
kernLeft = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(213,0,l),
(738,700,l),
(633,700,l),
(109,0,l)
);
},
{
closed = 1;
nodes = (
(282,366,o),
(327,393,qs),
(371,421,o),
(423,514,o),
(423,570,qs),
(423,635,o),
(344,712,o),
(281,712,qs),
(225,712,o),
(181,684,qs),
(136,656,o),
(84,563,o),
(84,508,qs),
(84,444,o),
(165,366,o),
(228,366,qs)
);
},
{
closed = 1;
nodes = (
(207,441,o),
(170,480,o),
(170,516,qs),
(170,566,o),
(229,637,o),
(271,637,qs),
(301,637,o),
(337,598,o),
(337,562,qs),
(337,512,o),
(278,441,o),
(237,441,qs)
);
},
{
closed = 1;
nodes = (
(628,-12,o),
(672,16,qs),
(716,44,o),
(767,137,o),
(767,193,qs),
(767,258,o),
(688,334,o),
(625,334,qs),
(570,334,o),
(526,306,qs),
(481,279,o),
(429,186,o),
(429,130,qs),
(429,65,o),
(509,-12,o),
(572,-12,qs)
);
},
{
closed = 1;
nodes = (
(552,64,o),
(515,102,o),
(515,138,qs),
(515,188,o),
(573,260,o),
(615,260,qs),
(645,260,o),
(682,221,o),
(682,184,qs),
(682,135,o),
(624,64,o),
(582,64,qs)
);
},
{
closed = 1;
nodes = (
(997,-12,o),
(1041,16,qs),
(1086,44,o),
(1137,137,o),
(1137,193,qs),
(1137,258,o),
(1058,334,o),
(995,334,qs),
(939,334,o),
(896,306,qs),
(851,279,o),
(799,186,o),
(799,130,qs),
(799,65,o),
(879,-12,o),
(942,-12,qs)
);
},
{
closed = 1;
nodes = (
(921,64,o),
(885,102,o),
(885,138,qs),
(885,188,o),
(943,260,o),
(985,260,qs),
(1015,260,o),
(1051,221,o),
(1051,184,qs),
(1051,135,o),
(993,64,o),
(951,64,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
15 1 5 14 1 3 6 5 3 105 10 1 6 12 1 8 9 6 8 106 0 4 4 0 97 2 1 0 0 33 77 19 13 17 3 9 9 1 97 18 11 16 7 4 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
15 1 5 14 1 3 6 5 3 105 10 1 6 12 1 8 9 6 8 106 0 0 0 33 77 0 4 4 2 97 0 2 2 39 77 0 1 1 34 77 19 13 17 3 9 9 7 97 18 11 16 3 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 52 values pushed */
76 76 60 60 48 48 32 32 20 20 4 4 76 87 76 86 82 80 60 75 60 74 68 66 48 59 48 58 54 52 32 47 32 46 40 38 20 31 20 30 26 24 4 19 4 18 39 17 16 20 8 25
CALL[ ]	/* CallFunction */";
};
width = 1185;
}
);
note = perthousand;
unicode = 8240;
},
{
glyphname = plus.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(313,116,l),
(345,299,l),
(534,299,l),
(550,388,l),
(361,388,l),
(393,570,l),
(301,570,l),
(269,388,l),
(79,388,l),
(64,299,l),
(253,299,l),
(221,116,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 1 2 133 0 5 0 5 134 3 1 1 0 0 1 87 3 1 1 1 0 96 4 1 0 1 0 80 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = plus.case;
},
{
glyphname = arrowup;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(332,712,l),
(61,483,l),
(113,420,l),
(210,504,l),
(257,549,l),
(160,0,l),
(251,0,l),
(348,549,l),
(379,504,l),
(447,420,l),
(520,483,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
10 9 8 7 5 2 6 0 74 0 0 0 34 0 78 19 1 8 23
CALL[ ]	/* CallFunction */";
};
width = 499;
}
);
note = arrowup;
unicode = 8593;
},
{
glyphname = arrowright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(790,350,l),
(602,580,l),
(528,517,l),
(597,435,l),
(635,396,l),
(85,396,l),
(69,305,l),
(619,305,l),
(567,266,l),
(469,184,l),
(521,121,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
9 1 0 1 1 76 8 7 2 1 74 10 1 0 73 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 18 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 811;
}
);
note = arrowright;
unicode = 8594;
},
{
glyphname = arrowdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,-12,l),
(474,217,l),
(422,280,l),
(325,197,l),
(278,152,l),
(375,700,l),
(284,700,l),
(187,152,l),
(156,197,l),
(88,280,l),
(15,217,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
10 9 8 7 5 2 6 0 73 0 0 0 33 0 78 19 1 8 23
CALL[ ]	/* CallFunction */";
};
width = 499;
}
);
note = arrowdown;
unicode = 8595;
},
{
glyphname = arrowleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(320,184,l),
(251,266,l),
(213,305,l),
(762,305,l),
(778,396,l),
(229,396,l),
(281,435,l),
(379,517,l),
(327,580,l),
(57,350,l),
(246,121,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
2 1 2 0 74 10 9 2 1 73 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 20 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 811;
}
);
note = arrowleft;
unicode = 8592;
},
{
glyphname = lozenge;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(531,351,l),
(329,596,l),
(40,351,l),
(241,105,l)
);
},
{
closed = 1;
nodes = (
(146,350,l),
(311,490,l),
(425,351,l),
(260,210,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 5 3 1 2 50
CALL[ ]	/* CallFunction */";
};
width = 546;
}
);
note = lozenge;
unicode = 9674;
},
{
glyphname = uni0308;
layers = (
{
anchors = (
{
name = _top;
pos = (216,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(372,583,o),
(413,624,o),
(413,654,qs),
(413,683,o),
(372,723,o),
(343,723,qs),
(313,723,o),
(272,683,o),
(272,654,qs),
(272,624,o),
(313,583,o),
(343,583,qs)
);
},
{
closed = 1;
nodes = (
(173,583,o),
(214,624,o),
(214,654,qs),
(214,683,o),
(173,723,o),
(143,723,qs),
(113,723,o),
(73,683,o),
(73,654,qs),
(73,624,o),
(113,583,o),
(143,583,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0308;
unicode = 776;
},
{
glyphname = uni0307;
layers = (
{
anchors = (
{
name = _top;
pos = (116,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,583,o),
(214,624,o),
(214,654,qs),
(214,683,o),
(173,723,o),
(143,723,qs),
(113,723,o),
(73,683,o),
(73,654,qs),
(73,624,o),
(113,583,o),
(143,583,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0307;
unicode = 775;
},
{
glyphname = gravecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (153,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(284,625,l),
(89,749,l),
(73,661,l),
(271,548,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = gravecomb;
unicode = 768;
},
{
glyphname = acutecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (153,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(291,658,l),
(307,749,l),
(67,625,l),
(53,545,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = acutecomb;
unicode = 769;
},
{
glyphname = uni030B;
layers = (
{
anchors = (
{
name = _top;
pos = (176,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(279,547,l),
(405,711,l),
(316,711,l),
(211,547,l)
);
},
{
closed = 1;
nodes = (
(122,547,l),
(239,711,l),
(150,711,l),
(53,547,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030B;
unicode = 779;
},
{
glyphname = uni030C.alt;
layers = (
{
anchors = (
{
name = _topright;
pos = (132,992);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(125,546,l),
(236,700,l),
(129,700,l),
(53,546,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 33 0 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.alt;
},
{
glyphname = uni0302;
layers = (
{
anchors = (
{
name = _top;
pos = (186,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(213,650,l),
(340,567,l),
(354,649,l),
(227,730,l),
(71,649,l),
(57,567,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0302;
unicode = 770;
},
{
glyphname = uni030C;
layers = (
{
anchors = (
{
name = _top;
pos = (186,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(354,651,l),
(368,730,l),
(212,645,l),
(85,730,l),
(71,651,l),
(199,570,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C;
unicode = 780;
},
{
glyphname = uni0306;
layers = (
{
anchors = (
{
name = _top;
pos = (193,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(272,566,o),
(365,643,o),
(377,707,qs),
(380,722,l),
(320,722,l),
(314,685,o),
(265,647,o),
(218,647,qs),
(141,647,o),
(141,703,qs),
(141,708,o),
(143,722,q),
(84,722,l),
(79,700,o),
(79,677,qs),
(79,626,o),
(144,566,o),
(204,566,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 35 values pushed */
2 1 0 1 0 133 0 1 3 3 1 89 0 1 1 3 97 4 1 3 1 3 81 0 0 0 17 0 16 18 35 20 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0306;
unicode = 774;
},
{
glyphname = uni030A;
layers = (
{
anchors = (
{
name = _top;
pos = (156,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,551,o),
(294,610,o),
(294,659,qs),
(294,707,o),
(231,766,o),
(184,766,qs),
(138,766,o),
(75,707,o),
(75,659,qs),
(75,610,o),
(138,551,o),
(184,551,qs)
);
},
{
closed = 1;
nodes = (
(161,602,o),
(130,634,o),
(130,659,qs),
(130,684,o),
(161,715,o),
(184,715,qs),
(208,715,o),
(239,684,o),
(239,659,qs),
(239,634,o),
(208,602,o),
(184,602,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030A;
unicode = 778;
},
{
glyphname = tildecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (208,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(324,591,o),
(390,648,o),
(408,703,q),
(349,703,l),
(334,658,o),
(298,658,qs),
(283,658,o),
(262,669,o),
(248,680,qs),
(231,693,o),
(206,705,o),
(187,705,qs),
(144,705,o),
(79,649,o),
(61,592,q),
(120,592,l),
(135,637,o),
(170,637,qs),
(185,637,o),
(205,627,o),
(221,615,qs),
(236,603,o),
(262,591,o),
(281,591,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 23 0 22 17 36 34 17 36 7 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = tildecomb;
unicode = 771;
},
{
glyphname = uni0304;
layers = (
{
anchors = (
{
name = _top;
pos = (232,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,616,l),
(440,693,l),
(79,693,l),
(65,616,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0304;
unicode = 772;
},
{
glyphname = uni0312;
layers = (
{
anchors = (
{
name = _top;
pos = (102,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,804,l),
(136,804,o),
(73,706,o),
(73,637,qs),
(73,616,o),
(76,595,q),
(171,595,l),
(186,684,l),
(136,684,l),
(139,698,ls),
(148,758,o),
(198,758,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 37 values pushed */
0 2 4 1 3 0 2 3 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 0 0 0 11 0 11 20 17 18 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0312;
unicode = 786;
},
{
glyphname = uni0326;
kernLeft = dotlessi;
kernRight = a;
layers = (
{
anchors = (
{
name = _bottom;
pos = (12,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-86,-256,l),
(-16,-256,o),
(47,-158,o),
(47,-89,qs),
(47,-68,o),
(44,-47,q),
(-51,-47,l),
(-66,-136,l),
(-16,-136,l),
(-19,-150,ls),
(-28,-210,o),
(-78,-210,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 38 values pushed */
0 1 0 0 3 1 0 103 4 1 3 2 2 3 89 4 1 3 3 2 97 0 2 3 2 81 0 0 0 11 0 11 20 17 18 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0326;
unicode = 806;
},
{
glyphname = uni0327;
layers = (
{
anchors = (
{
name = _bottom;
pos = (41,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,-261,ls),
(90,-261,o),
(175,-194,o),
(175,-137,qs),
(175,-97,o),
(113,-55,o),
(62,-56,q),
(75,17,l),
(7,17,l),
(-17,-115,l),
(38,-115,ls),
(93,-115,o),
(93,-148,qs),
(92,-172,o),
(55,-197,o),
(24,-197,qs),
(-78,-197,l),
(-89,-261,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 3 3 2 112 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 3 2 133 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 17 17 35 32 5 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0327;
unicode = 807;
},
{
glyphname = uni0328;
layers = (
{
anchors = (
{
name = _ogonek;
pos = (159,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(86,-206,o),
(130,-193,q),
(141,-127,l),
(102,-142,o),
(70,-142,qs),
(47,-142,o),
(21,-122,o),
(21,-105,qs),
(21,-83,o),
(57,-46,o),
(100,-27,qs),
(159,0,l),
(144,52,l),
(90,30,ls),
(6,-4,o),
(-64,-80,o),
(-64,-126,qs),
(-64,-165,o),
(-3,-206,o),
(46,-206,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 33 values pushed */
16 7 6 3 0 74 0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 19 0 18 45 3 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0328;
unicode = 808;
},
{
glyphname = uni0308.case;
layers = (
{
anchors = (
{
name = _top;
pos = (252,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(406,772,o),
(447,812,o),
(447,842,qs),
(447,872,o),
(406,912,o),
(376,912,qs),
(346,912,o),
(306,872,o),
(306,842,qs),
(306,812,o),
(346,772,o),
(376,772,qs)
);
},
{
closed = 1;
nodes = (
(206,772,o),
(247,812,o),
(247,842,qs),
(247,872,o),
(206,912,o),
(177,912,qs),
(147,912,o),
(106,872,o),
(106,842,qs),
(106,812,o),
(147,772,o),
(177,772,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0308.case;
},
{
glyphname = uni0307.case;
layers = (
{
anchors = (
{
name = _top;
pos = (152,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,772,o),
(247,812,o),
(247,842,qs),
(247,872,o),
(206,912,o),
(177,912,qs),
(147,912,o),
(106,872,o),
(106,842,qs),
(106,812,o),
(147,772,o),
(177,772,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0307.case;
},
{
glyphname = gravecomb.case;
layers = (
{
anchors = (
{
name = _top;
pos = (189,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(319,817,l),
(123,942,l),
(107,853,l),
(305,741,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = gravecomb.case;
},
{
glyphname = acutecomb.case;
layers = (
{
anchors = (
{
name = _top;
pos = (189,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(325,853,l),
(341,942,l),
(101,817,l),
(87,741,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = acutecomb.case;
},
{
glyphname = uni030B.case;
layers = (
{
anchors = (
{
name = _top;
pos = (242,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(315,751,l),
(441,915,l),
(352,915,l),
(247,751,l)
);
},
{
closed = 1;
nodes = (
(158,751,l),
(275,915,l),
(186,915,l),
(89,751,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030B.case;
},
{
glyphname = uni030C.alt.case;
layers = (
{
anchors = (
{
name = _topright;
pos = (83,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(125,546,l),
(236,700,l),
(129,700,l),
(53,546,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 33 0 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.alt.case;
},
{
glyphname = uni0302.case;
layers = (
{
anchors = (
{
name = _top;
pos = (221,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(245,834,l),
(372,751,l),
(386,830,l),
(258,911,l),
(103,830,l),
(89,751,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0302.case;
},
{
glyphname = uni030C.case;
layers = (
{
anchors = (
{
name = _top;
pos = (222,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(386,831,l),
(400,910,l),
(244,825,l),
(117,910,l),
(103,831,l),
(231,750,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.case;
},
{
glyphname = uni0306.case;
layers = (
{
anchors = (
{
name = _top;
pos = (229,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(306,753,o),
(399,830,o),
(411,894,qs),
(414,909,l),
(354,909,l),
(347,872,o),
(298,834,o),
(252,834,qs),
(175,834,o),
(175,890,qs),
(175,895,o),
(177,909,q),
(118,909,l),
(112,887,o),
(112,864,qs),
(112,813,o),
(177,753,o),
(237,753,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
2 1 0 1 0 133 0 1 3 3 1 89 0 1 1 3 97 4 1 3 1 3 81 0 0 0 17 0 16 18 35 20 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0306.case;
},
{
glyphname = uni030A.case;
layers = (
{
anchors = (
{
name = _top;
pos = (191,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(267,756,o),
(329,815,o),
(329,864,qs),
(329,913,o),
(267,971,o),
(219,971,qs),
(173,971,o),
(110,912,o),
(110,864,qs),
(110,815,o),
(173,756,o),
(219,756,qs)
);
},
{
closed = 1;
nodes = (
(196,807,o),
(165,839,o),
(165,864,qs),
(165,889,o),
(196,920,o),
(219,920,qs),
(243,920,o),
(274,889,o),
(274,864,qs),
(274,839,o),
(243,807,o),
(219,807,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030A.case;
},
{
glyphname = tildecomb.case;
layers = (
{
anchors = (
{
name = _top;
pos = (244,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(352,754,o),
(419,812,o),
(436,867,q),
(378,867,l),
(363,822,o),
(327,822,qs),
(312,822,o),
(290,833,o),
(276,844,qs),
(260,856,o),
(235,868,o),
(216,868,qs),
(173,868,o),
(108,812,o),
(90,756,q),
(148,756,l),
(163,801,o),
(199,801,qs),
(214,801,o),
(234,791,o),
(250,779,qs),
(265,767,o),
(291,754,o),
(310,754,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 23 0 22 17 36 34 17 36 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = tildecomb.case;
},
{
glyphname = uni0304.case;
layers = (
{
anchors = (
{
name = _top;
pos = (261,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(456,790,l),
(470,867,l),
(110,867,l),
(96,790,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0304.case;
},
{
glyphname = uni0327.case;
layers = (
{
anchors = (
{
name = _bottom;
pos = (38,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,-261,ls),
(90,-261,o),
(175,-194,o),
(175,-137,qs),
(175,-97,o),
(113,-55,o),
(62,-56,q),
(75,17,l),
(7,17,l),
(-17,-115,l),
(38,-115,ls),
(93,-115,o),
(93,-148,qs),
(92,-172,o),
(55,-197,o),
(24,-197,qs),
(-78,-197,l),
(-89,-261,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 3 3 2 112 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 3 2 133 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 17 17 35 32 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0327.case;
},
{
glyphname = uni0328.case;
layers = (
{
anchors = (
{
name = _ogonek;
pos = (159,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(86,-206,o),
(130,-193,q),
(141,-127,l),
(102,-142,o),
(70,-142,qs),
(47,-142,o),
(21,-122,o),
(21,-105,qs),
(21,-83,o),
(57,-46,o),
(100,-27,qs),
(159,0,l),
(144,52,l),
(90,30,ls),
(6,-4,o),
(-64,-80,o),
(-64,-126,qs),
(-64,-165,o),
(-3,-206,o),
(46,-206,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
16 7 6 3 0 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 1 97 2 1 1 1 38 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 19 0 18 45 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0328.case;
},
{
glyphname = uni0308.narrow;
layers = (
{
anchors = (
{
name = _top;
pos = (226,496);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(370,583,o),
(409,624,o),
(409,654,qs),
(409,683,o),
(370,723,o),
(341,723,qs),
(313,723,o),
(274,683,o),
(274,654,qs),
(274,624,o),
(313,583,o),
(341,583,qs)
);
},
{
closed = 1;
nodes = (
(192,583,o),
(231,624,o),
(231,654,qs),
(231,683,o),
(192,723,o),
(164,723,qs),
(135,723,o),
(96,683,o),
(96,654,qs),
(96,624,o),
(135,583,o),
(164,583,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 1 0 97 2 1 0 0 41 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 1 0 97 2 1 0 0 39 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0308.narrow;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-174,0);
ref = uni0308;
}
);
width = 0;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-74,0);
ref = uni0307;
}
);
width = 0;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-109,0);
ref = gravecomb;
}
);
width = 0;
}
);
note = grave;
unicode = 96;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-112,0);
ref = acutecomb;
}
);
width = 0;
}
);
note = acute;
unicode = 180;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-165,0);
ref = uni030B;
}
);
width = 0;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-145,0);
ref = uni0302;
}
);
width = 0;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-145,0);
ref = uni030C;
}
);
width = 0;
}
);
note = caron;
unicode = 711;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-151,0);
ref = uni0306;
}
);
width = 0;
}
);
note = breve;
unicode = 728;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-112,0);
ref = uni030A;
}
);
width = 0;
}
);
note = ring;
unicode = 730;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-167,0);
ref = tildecomb;
}
);
width = 0;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-184,0);
ref = uni0304;
}
);
width = 0;
}
);
note = macron;
unicode = 175;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-122,0);
ref = uni0327;
}
);
width = 0;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-104,0);
ref = uni0328;
}
);
width = 0;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = uni02BA;
kernLeft = uni02BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(317,552,l),
(364,755,l),
(268,755,l),
(245,552,l)
);
},
{
closed = 1;
nodes = (
(172,552,l),
(218,755,l),
(123,755,l),
(100,552,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 308;
}
);
note = uni02BA;
unicode = 698;
},
{
glyphname = uni02B9;
kernLeft = uni02BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(172,552,l),
(218,755,l),
(123,755,l),
(100,552,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 163;
}
);
note = uni02B9;
unicode = 697;
},
{
glyphname = uniE000;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(294,0,l),
(294,214,l),
(499,0,l),
(645,0,l),
(401,260,l),
(630,511,l),
(486,511,l),
(294,309,l),
(294,700,l),
(180,700,l),
(180,0,l)
);
},
{
closed = 1;
nodes = (
(966,-12,o),
(1091,57,o),
(1162,179,o),
(1162,254,qs),
(1162,329,o),
(1091,452,o),
(966,523,o),
(888,523,qs),
(810,523,o),
(686,452,o),
(615,329,o),
(615,254,qs),
(615,179,o),
(686,57,o),
(810,-12,o),
(888,-12,qs)
);
},
{
closed = 1;
nodes = (
(839,95,o),
(768,137,o),
(729,210,o),
(729,254,qs),
(729,298,o),
(768,371,o),
(839,413,o),
(886,413,qs),
(933,413,o),
(1005,371,o),
(1045,298,o),
(1045,254,qs),
(1045,210,o),
(1005,137,o),
(933,95,o),
(886,95,qs)
);
},
{
closed = 1;
nodes = (
(812,566,o),
(853,607,o),
(853,637,qs),
(853,667,o),
(813,707,o),
(782,707,qs),
(752,707,o),
(711,665,o),
(711,636,qs),
(711,607,o),
(752,566,o),
(782,566,qs)
);
},
{
closed = 1;
nodes = (
(1023,566,o),
(1064,607,o),
(1064,637,qs),
(1064,667,o),
(1024,707,o),
(993,707,qs),
(963,707,o),
(922,665,o),
(922,636,qs),
(922,607,o),
(963,566,o),
(993,566,qs)
);
},
{
closed = 1;
nodes = (
(1342,0,l),
(1342,700,l),
(1232,700,l),
(1232,0,l)
);
},
{
closed = 1;
nodes = (
(1657,95,o),
(1585,140,o),
(1547,213,o),
(1547,254,qs),
(1547,297,o),
(1588,370,o),
(1660,413,o),
(1706,413,qs),
(1774,413,o),
(1862,323,o),
(1862,254,qs),
(1862,209,o),
(1822,136,o),
(1751,95,o),
(1706,95,qs)
);
},
{
closed = 1;
nodes = (
(1802,-12,o),
(1916,60,o),
(1978,182,o),
(1978,254,qs),
(1978,331,o),
(1912,454,o),
(1798,523,o),
(1727,523,qs),
(1670,523,o),
(1582,478,o),
(1547,431,q),
(1547,700,l),
(1437,700,l),
(1437,0,l),
(1547,0,l),
(1547,80,l),
(1582,33,o),
(1670,-12,o),
(1727,-12,qs)
);
},
{
closed = 1;
nodes = (
(2161,0,l),
(2161,511,l),
(2048,511,l),
(2048,0,l)
);
},
{
closed = 1;
nodes = (
(2134,566,o),
(2175,607,o),
(2175,637,qs),
(2175,667,o),
(2135,707,o),
(2104,707,qs),
(2074,707,o),
(2033,665,o),
(2033,636,qs),
(2033,607,o),
(2074,566,o),
(2104,566,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 171 values pushed */
93 1 6 1 8 5 2 3 7 6 88 1 2 7 3 76 17 12 2 0 8 9 8 0 9 128 20 1 1 4 6 4 1 6 128 21 16 13 3 4 2 7 5 7 2 5 128 22 10 2 8 30 23 27 11 26 5 9 4 8 9 105 18 1 4 14 1 6 7 4 6 105 28 15 25 3 7 2 5 7 89 28 15 25 3 7 7 5 97 29 19 24 3 5 7 5 81 109 109 86 86 71 71 55 55 43 43 27 27 11 11 109 120 109 119 115 113 108 107 106 105 86 104 86 103 97 95 92 91 90 89 71 85 71 84 78 76 70 69 68 67 55 66 55 65 61 59 43 54 43 53 49 47 27 42 27 41 35 33 11 26 11 25 39 18 18 18 16 31 6 27
CALL[ ]	/* CallFunction */";
};
width = 2305;
}
);
note = uniE000;
unicode = 57344;
},
{
glyphname = uniE001;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,225,l),
(239,173,o),
(312,118,o),
(359,118,qs),
(411,118,o),
(478,177,o),
(478,227,qs),
(478,278,o),
(410,339,o),
(355,339,qs),
(284,339,o),
(233,288,q),
(139,330,l),
(180,700,l),
(587,700,l),
(587,579,l),
(294,579,l),
(277,426,l),
(294,440,o),
(355,458,o),
(390,458,qs),
(462,458,o),
(567,400,o),
(623,296,o),
(623,229,qs),
(623,160,o),
(556,52,o),
(437,-8,o),
(361,-8,qs),
(272,-8,o),
(141,82,o),
(106,166,q)
);
},
{
closed = 1;
nodes = (
(942,-8,o),
(776,88,o),
(680,253,o),
(680,352,qs),
(680,449,o),
(770,614,o),
(934,711,o),
(1039,711,qs),
(1135,711,o),
(1296,620,o),
(1345,546,q),
(1235,468,l),
(1162,581,o),
(1039,581,qs),
(939,581,o),
(824,456,o),
(824,352,qs),
(824,283,o),
(882,177,o),
(981,120,o),
(1041,120,qs),
(1124,120,o),
(1226,203,o),
(1240,265,q),
(1027,265,l),
(1027,383,l),
(1379,383,l),
(1381,369,o),
(1381,328,qs),
(1381,238,o),
(1298,84,o),
(1143,-8,o),
(1041,-8,qs)
);
},
{
closed = 1;
nodes = (
(861,949,o),
(818,904,o),
(818,873,qs),
(818,843,o),
(861,798,o),
(894,798,qs),
(927,798,o),
(970,843,o),
(970,874,qs),
(970,904,o),
(927,949,o),
(894,949,qs)
);
},
{
closed = 1;
nodes = (
(1673,107,l),
(1720,157,o),
(1769,278,o),
(1769,342,qs),
(1769,405,o),
(1722,525,o),
(1676,575,q),
(1761,663,l),
(1824,597,o),
(1890,430,o),
(1890,342,qs),
(1890,254,o),
(1824,89,o),
(1761,23,q)
);
},
{
closed = 1;
nodes = (
(1845,-59,l),
(1925,23,o),
(2007,231,o),
(2007,342,qs),
(2007,453,o),
(1925,661,o),
(1845,742,q),
(1931,831,l),
(2029,731,o),
(2131,477,o),
(2131,342,qs),
(2131,208,o),
(2029,-47,o),
(1931,-148,q)
);
},
{
closed = 1;
nodes = (
(1094,949,o),
(1051,904,o),
(1051,873,qs),
(1051,843,o),
(1094,798,o),
(1127,798,qs),
(1160,798,o),
(1203,843,o),
(1203,874,qs),
(1203,904,o),
(1160,949,o),
(1127,949,qs)
);
},
{
closed = 1;
nodes = (
(1603,248,o),
(1658,303,o),
(1658,342,qs),
(1658,381,o),
(1603,436,o),
(1564,436,qs),
(1525,436,o),
(1470,381,o),
(1470,342,qs),
(1470,303,o),
(1525,248,o),
(1564,248,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
96 1 12 13 97 1 10 12 82 1 2 3 83 53 52 3 1 2 13 1 6 16 19 18 2 7 4 31 30 2 5 17 90 89 2 0 5 8 76 104 103 2 0 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
20 15 19 3 13 12 13 133 14 1 12 10 10 12 112 0 16 1 6 1 16 6 128 21 1 17 7 5 7 17 5 128 0 10 3 2 10 89 0 3 9 1 2 1 3 2 105 0 1 0 4 7 1 4 105 0 6 0 7 17 6 7 103 8 1 5 0 0 5 89 8 1 5 5 0 97 18 11 2 0 5 0 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 82 values pushed */
20 15 19 3 13 12 13 133 14 1 12 10 12 133 0 16 1 6 1 16 6 128 21 1 17 7 5 7 17 5 128 0 10 3 2 10 89 0 3 9 1 2 1 3 2 105 0 1 0 4 7 1 4 105 0 6 0 7 17 6 7 103 8 1 5 0 0 5 89 8 1 5 5 0 97 18 11 2 0 5 0 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 46 values pushed */
117 117 105 105 65 65 32 32 117 128 117 127 123 121 105 116 105 115 111 109 65 76 65 75 71 69 32 64 32 63 57 55 51 49 34 17 25 36 35 17 19 38 33 22 6 31
CALL[ ]	/* CallFunction */";
};
width = 2225;
}
);
note = uniE001;
unicode = 57345;
},
{
glyphname = uniE002;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,48,o),
(533,48,qs),
(540,48,o),
(545,53,qs),
(722,229,ls),
(781,288,o),
(781,367,qs),
(781,386,ls),
(781,393,o),
(784,399,o),
(790,401,qs),
(838,418,o),
(900,499,o),
(900,550,qs),
(900,594,o),
(858,667,o),
(786,710,o),
(741,710,qs),
(688,710,o),
(611,653,o),
(591,603,qs),
(587,592,o),
(575,584,o),
(566,584,qs),
(501,584,ls),
(490,584,o),
(478,592,o),
(474,603,qs),
(454,653,o),
(377,710,o),
(324,710,qs),
(279,710,o),
(207,667,o),
(165,594,o),
(165,550,qs),
(165,499,o),
(227,418,o),
(275,401,qs),
(281,399,o),
(284,393,o),
(284,386,qs),
(284,367,ls),
(284,294,o),
(343,229,q),
(520,53,l)
);
},
{
closed = 1;
nodes = (
(496,0,ls),
(502,0,o),
(509,7,o),
(509,12,qs),
(509,17,o),
(505,21,qs),
(302,222,ls),
(266,258,o),
(213,258,qs),
(179,258,o),
(119,227,o),
(81,168,o),
(81,130,qs),
(81,97,o),
(114,37,o),
(174,0,o),
(213,0,qs)
);
},
{
closed = 1;
nodes = (
(275,435,o),
(205,505,o),
(205,554,qs),
(205,603,o),
(275,672,o),
(324,672,qs),
(373,672,o),
(442,603,o),
(442,554,qs),
(442,505,o),
(373,435,o),
(324,435,qs)
);
},
{
closed = 1;
nodes = (
(364,456,o),
(421,514,o),
(421,554,qs),
(421,594,o),
(364,651,o),
(324,651,qs),
(284,651,o),
(226,594,o),
(226,554,qs),
(226,514,o),
(284,456,o),
(324,456,qs)
);
},
{
closed = 1;
nodes = (
(295,484,o),
(254,525,o),
(254,554,qs),
(254,583,o),
(295,623,o),
(324,623,qs),
(338,623,o),
(354,616,q),
(346,614,o),
(336,600,o),
(336,592,qs),
(336,581,o),
(351,566,o),
(362,566,qs),
(370,566,o),
(384,576,o),
(386,584,q),
(393,568,o),
(393,554,qs),
(393,525,o),
(353,484,o),
(324,484,qs)
);
},
{
closed = 1;
nodes = (
(852,0,ls),
(891,0,o),
(951,37,o),
(984,97,o),
(984,130,qs),
(984,168,o),
(946,227,o),
(886,258,o),
(852,258,qs),
(799,258,o),
(763,222,qs),
(560,21,ls),
(556,17,o),
(556,12,qs),
(556,7,o),
(563,0,o),
(569,0,qs)
);
},
{
closed = 1;
nodes = (
(693,435,o),
(623,505,o),
(623,554,qs),
(623,603,o),
(693,672,o),
(742,672,qs),
(791,672,o),
(860,603,o),
(860,554,qs),
(860,505,o),
(791,435,o),
(742,435,qs)
);
},
{
closed = 1;
nodes = (
(782,456,o),
(839,514,o),
(839,554,qs),
(839,594,o),
(782,651,o),
(742,651,qs),
(702,651,o),
(644,594,o),
(644,554,qs),
(644,514,o),
(702,456,o),
(742,456,qs)
);
},
{
closed = 1;
nodes = (
(713,484,o),
(672,525,o),
(672,554,qs),
(672,583,o),
(713,623,o),
(742,623,qs),
(756,623,o),
(772,616,q),
(764,614,o),
(754,600,o),
(754,592,qs),
(754,581,o),
(769,566,o),
(780,566,qs),
(788,566,o),
(802,576,o),
(804,584,q),
(811,568,o),
(811,554,qs),
(811,525,o),
(771,484,o),
(742,484,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
162 159 99 96 4 1 11 3 1 4 7 2 76 153 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
0 1 11 10 11 1 10 128 19 1 10 12 11 10 112 26 16 23 3 7 9 4 9 7 4 128 13 1 4 3 9 4 3 126 0 3 5 9 3 5 126 14 22 2 5 5 132 2 1 0 15 1 6 8 0 6 105 17 1 8 20 1 11 1 8 11 105 28 21 25 3 12 9 9 12 89 28 21 25 3 12 12 9 97 27 18 24 3 9 12 9 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 93 values pushed */
0 1 11 10 11 1 10 128 19 1 10 12 11 10 12 126 26 16 23 3 7 9 4 9 7 4 128 13 1 4 3 9 4 3 126 0 3 5 9 3 5 126 14 22 2 5 5 132 2 1 0 15 1 6 8 0 6 105 17 1 8 20 1 11 1 8 11 105 28 21 25 3 12 9 9 12 89 28 21 25 3 12 12 9 97 27 18 24 3 9 12 9 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 70 values pushed */
149 149 137 137 125 125 86 86 74 74 62 62 45 45 149 170 149 169 165 163 157 155 137 148 137 147 143 141 125 136 125 135 131 129 124 122 116 114 86 107 86 106 102 100 94 92 74 85 74 84 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 29 6 27
CALL[ ]	/* CallFunction */";
};
width = 1107;
}
);
note = uniE002;
unicode = 57346;
},
{
glyphname = uniE003;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,48,o),
(533,48,qs),
(540,48,o),
(545,53,qs),
(722,229,ls),
(781,288,o),
(781,367,qs),
(781,386,ls),
(781,393,o),
(784,399,o),
(790,401,qs),
(838,418,o),
(900,499,o),
(900,550,qs),
(900,594,o),
(858,667,o),
(786,710,o),
(741,710,qs),
(688,710,o),
(611,653,o),
(591,603,qs),
(587,592,o),
(575,584,o),
(566,584,qs),
(501,584,ls),
(490,584,o),
(478,592,o),
(474,603,qs),
(454,653,o),
(377,710,o),
(324,710,qs),
(279,710,o),
(207,667,o),
(165,594,o),
(165,550,qs),
(165,499,o),
(227,418,o),
(275,401,qs),
(281,399,o),
(284,393,o),
(284,386,qs),
(284,367,ls),
(284,294,o),
(343,229,q),
(520,53,l)
);
},
{
closed = 1;
nodes = (
(496,0,ls),
(502,0,o),
(509,7,o),
(509,12,qs),
(509,17,o),
(505,21,qs),
(302,222,ls),
(266,258,o),
(213,258,qs),
(179,258,o),
(119,227,o),
(81,168,o),
(81,130,qs),
(81,97,o),
(114,37,o),
(174,0,o),
(213,0,qs)
);
},
{
closed = 1;
nodes = (
(284,456,o),
(226,514,o),
(226,554,qs),
(226,594,o),
(284,651,o),
(324,651,qs),
(364,651,o),
(421,594,o),
(421,554,qs),
(421,514,o),
(364,456,o),
(324,456,qs)
);
},
{
closed = 1;
nodes = (
(353,484,o),
(393,525,o),
(393,554,qs),
(393,568,o),
(386,584,q),
(384,576,o),
(370,566,o),
(362,566,qs),
(351,566,o),
(336,581,o),
(336,592,qs),
(336,600,o),
(346,614,o),
(354,616,q),
(338,623,o),
(324,623,qs),
(295,623,o),
(254,583,o),
(254,554,qs),
(254,525,o),
(295,484,o),
(324,484,qs)
);
},
{
closed = 1;
nodes = (
(852,0,ls),
(891,0,o),
(951,37,o),
(984,97,o),
(984,130,qs),
(984,168,o),
(946,227,o),
(886,258,o),
(852,258,qs),
(799,258,o),
(763,222,qs),
(560,21,ls),
(556,17,o),
(556,12,qs),
(556,7,o),
(563,0,o),
(569,0,qs)
);
},
{
closed = 1;
nodes = (
(702,456,o),
(644,514,o),
(644,554,qs),
(644,594,o),
(702,651,o),
(742,651,qs),
(782,651,o),
(839,594,o),
(839,554,qs),
(839,514,o),
(782,456,o),
(742,456,qs)
);
},
{
closed = 1;
nodes = (
(771,484,o),
(811,525,o),
(811,554,qs),
(811,568,o),
(804,584,q),
(802,576,o),
(788,566,o),
(780,566,qs),
(769,566,o),
(754,581,o),
(754,592,qs),
(754,600,o),
(764,614,o),
(772,616,q),
(756,623,o),
(742,623,qs),
(713,623,o),
(672,583,o),
(672,554,qs),
(672,525,o),
(713,484,o),
(742,484,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 150 values pushed */
132 81 2 1 8 3 1 4 7 2 76 141 90 2 1 1 75 0 1 8 9 8 1 9 128 16 1 9 10 8 9 10 126 21 14 19 3 7 10 4 10 7 4 128 11 1 4 3 10 4 3 126 0 3 5 10 3 5 126 12 18 2 5 5 132 2 1 0 13 1 6 8 0 6 105 15 1 8 1 10 8 89 15 1 8 8 10 97 22 17 20 3 10 8 10 81 125 125 113 113 74 74 62 62 45 45 125 146 125 145 138 137 131 129 113 124 113 123 119 117 112 110 104 102 74 95 74 94 87 86 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 23 6 27
CALL[ ]	/* CallFunction */";
};
width = 1107;
}
);
note = uniE003;
unicode = 57347;
},
{
glyphname = uniE004;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,48,o),
(533,48,qs),
(540,48,o),
(545,53,qs),
(722,229,ls),
(781,288,o),
(781,367,qs),
(781,386,ls),
(781,393,o),
(784,399,o),
(790,401,qs),
(838,418,o),
(900,499,o),
(900,550,qs),
(900,594,o),
(858,667,o),
(786,710,o),
(741,710,qs),
(688,710,o),
(611,653,o),
(591,603,qs),
(587,592,o),
(575,584,o),
(566,584,qs),
(501,584,ls),
(490,584,o),
(478,592,o),
(474,603,qs),
(454,653,o),
(377,710,o),
(324,710,qs),
(279,710,o),
(207,667,o),
(165,594,o),
(165,550,qs),
(165,499,o),
(227,418,o),
(275,401,qs),
(281,399,o),
(284,393,o),
(284,386,qs),
(284,367,ls),
(284,294,o),
(343,229,q),
(520,53,l)
);
},
{
closed = 1;
nodes = (
(496,0,ls),
(502,0,o),
(509,7,o),
(509,12,qs),
(509,17,o),
(505,21,qs),
(302,222,ls),
(266,258,o),
(213,258,qs),
(179,258,o),
(119,227,o),
(81,168,o),
(81,130,qs),
(81,97,o),
(114,37,o),
(174,0,o),
(213,0,qs)
);
},
{
closed = 1;
nodes = (
(275,435,o),
(205,505,o),
(205,554,qs),
(205,603,o),
(275,672,o),
(324,672,qs),
(373,672,o),
(442,603,o),
(442,554,qs),
(442,505,o),
(373,435,o),
(324,435,qs)
);
},
{
closed = 1;
nodes = (
(364,456,o),
(421,514,o),
(421,554,qs),
(421,594,o),
(364,651,o),
(324,651,qs),
(284,651,o),
(226,594,o),
(226,554,qs),
(226,514,o),
(284,456,o),
(324,456,qs)
);
},
{
closed = 1;
nodes = (
(295,484,o),
(254,525,o),
(254,554,qs),
(254,583,o),
(295,623,o),
(324,623,qs),
(338,623,o),
(354,616,q),
(346,614,o),
(336,600,o),
(336,592,qs),
(336,581,o),
(351,566,o),
(362,566,qs),
(370,566,o),
(384,576,o),
(386,584,q),
(393,568,o),
(393,554,qs),
(393,525,o),
(353,484,o),
(324,484,qs)
);
},
{
closed = 1;
nodes = (
(852,0,ls),
(891,0,o),
(951,37,o),
(984,97,o),
(984,130,qs),
(984,168,o),
(946,227,o),
(886,258,o),
(852,258,qs),
(799,258,o),
(763,222,qs),
(560,21,ls),
(556,17,o),
(556,12,qs),
(556,7,o),
(563,0,o),
(569,0,qs)
);
},
{
closed = 1;
nodes = (
(1236,0,l),
(1236,214,l),
(1441,0,l),
(1587,0,l),
(1343,260,l),
(1572,511,l),
(1428,511,l),
(1236,309,l),
(1236,700,l),
(1122,700,l),
(1122,0,l)
);
},
{
closed = 1;
nodes = (
(1908,-12,o),
(2033,57,o),
(2104,179,o),
(2104,254,qs),
(2104,329,o),
(2033,452,o),
(1908,523,o),
(1830,523,qs),
(1752,523,o),
(1628,452,o),
(1557,329,o),
(1557,254,qs),
(1557,179,o),
(1628,57,o),
(1752,-12,o),
(1830,-12,qs)
);
},
{
closed = 1;
nodes = (
(1781,95,o),
(1710,137,o),
(1671,210,o),
(1671,254,qs),
(1671,298,o),
(1710,371,o),
(1781,413,o),
(1828,413,qs),
(1875,413,o),
(1947,371,o),
(1987,298,o),
(1987,254,qs),
(1987,210,o),
(1947,137,o),
(1875,95,o),
(1828,95,qs)
);
},
{
closed = 1;
nodes = (
(1754,566,o),
(1795,607,o),
(1795,637,qs),
(1795,667,o),
(1755,707,o),
(1724,707,qs),
(1694,707,o),
(1653,665,o),
(1653,636,qs),
(1653,607,o),
(1694,566,o),
(1724,566,qs)
);
},
{
closed = 1;
nodes = (
(1965,566,o),
(2006,607,o),
(2006,637,qs),
(2006,667,o),
(1966,707,o),
(1935,707,qs),
(1905,707,o),
(1864,665,o),
(1864,636,qs),
(1864,607,o),
(1905,566,o),
(1935,566,qs)
);
},
{
closed = 1;
nodes = (
(2284,0,l),
(2284,700,l),
(2174,700,l),
(2174,0,l)
);
},
{
closed = 1;
nodes = (
(2599,95,o),
(2527,140,o),
(2489,213,o),
(2489,254,qs),
(2489,297,o),
(2530,370,o),
(2602,413,o),
(2648,413,qs),
(2716,413,o),
(2804,323,o),
(2804,254,qs),
(2804,209,o),
(2764,136,o),
(2693,95,o),
(2648,95,qs)
);
},
{
closed = 1;
nodes = (
(2744,-12,o),
(2858,60,o),
(2920,182,o),
(2920,254,qs),
(2920,331,o),
(2854,454,o),
(2740,523,o),
(2669,523,qs),
(2612,523,o),
(2524,478,o),
(2489,431,q),
(2489,700,l),
(2379,700,l),
(2379,0,l),
(2489,0,l),
(2489,80,l),
(2524,33,o),
(2612,-12,o),
(2669,-12,qs)
);
},
{
closed = 1;
nodes = (
(3103,0,l),
(3103,511,l),
(2990,511,l),
(2990,0,l)
);
},
{
closed = 1;
nodes = (
(3076,566,o),
(3117,607,o),
(3117,637,qs),
(3117,667,o),
(3077,707,o),
(3046,707,qs),
(3016,707,o),
(2975,665,o),
(2975,636,qs),
(2975,607,o),
(3016,566,o),
(3046,566,qs)
);
},
{
closed = 1;
nodes = (
(693,435,o),
(623,505,o),
(623,554,qs),
(623,603,o),
(693,672,o),
(742,672,qs),
(791,672,o),
(860,603,o),
(860,554,qs),
(860,505,o),
(791,435,o),
(742,435,qs)
);
},
{
closed = 1;
nodes = (
(782,456,o),
(839,514,o),
(839,554,qs),
(839,594,o),
(782,651,o),
(742,651,qs),
(702,651,o),
(644,594,o),
(644,554,qs),
(644,514,o),
(702,456,o),
(742,456,qs)
);
},
{
closed = 1;
nodes = (
(713,484,o),
(672,525,o),
(672,554,qs),
(672,583,o),
(713,623,o),
(742,623,qs),
(756,623,o),
(772,616,q),
(764,614,o),
(754,600,o),
(754,592,qs),
(754,581,o),
(769,566,o),
(780,566,qs),
(788,566,o),
(802,576,o),
(804,584,q),
(811,568,o),
(811,554,qs),
(811,525,o),
(771,484,o),
(742,484,qs)
);
}
);
userData = {
assembly = "NPUSHW[ ]	/* 33 values pushed */
283 280 99 96 4 1 11 218 1 21 7 130 127 3 3 4 21 133 1 22 4 213 1 3 22 5 76 274 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 154 values pushed */
32 27 2 15 0 6 0 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 39 1 6 8 0 6 89 41 1 8 44 1 11 1 8 11 105 37 25 23 2 4 0 43 56 38 53 26 52 24 7 10 19 0 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 155 values pushed */
32 27 2 15 23 6 23 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 2 1 0 39 1 6 8 0 6 105 41 1 8 44 1 11 1 8 11 105 37 25 2 23 43 56 38 53 26 52 24 7 10 19 23 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 154 values pushed */
32 27 2 15 0 6 0 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 39 1 6 8 0 6 89 41 1 8 44 1 11 1 8 11 105 37 25 23 2 4 0 43 56 38 53 26 52 24 7 10 19 0 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 146 values pushed */
270 270 258 258 246 246 234 234 211 211 196 196 180 180 168 168 152 152 136 136 86 86 74 74 62 62 45 45 270 291 270 290 286 284 278 276 258 269 258 268 264 262 246 257 246 256 252 250 234 245 234 244 240 238 233 232 231 230 211 229 211 228 222 220 217 216 215 214 196 210 196 209 203 201 195 194 193 192 180 191 180 190 186 184 168 179 168 178 174 172 152 167 152 166 160 158 136 151 136 150 144 142 135 134 132 131 129 128 126 125 124 122 116 114 86 107 86 106 102 100 94 92 74 85 74 84 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 60 6 27
CALL[ ]	/* CallFunction */";
};
width = 3247;
}
);
note = uniE004;
},
{
glyphname = uniE005;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,48,o),
(533,48,qs),
(540,48,o),
(545,53,qs),
(722,229,ls),
(781,288,o),
(781,367,qs),
(781,386,ls),
(781,393,o),
(784,399,o),
(790,401,qs),
(838,418,o),
(900,499,o),
(900,550,qs),
(900,594,o),
(858,667,o),
(786,710,o),
(741,710,qs),
(688,710,o),
(611,653,o),
(591,603,qs),
(587,592,o),
(575,584,o),
(566,584,qs),
(501,584,ls),
(490,584,o),
(478,592,o),
(474,603,qs),
(454,653,o),
(377,710,o),
(324,710,qs),
(279,710,o),
(207,667,o),
(165,594,o),
(165,550,qs),
(165,499,o),
(227,418,o),
(275,401,qs),
(281,399,o),
(284,393,o),
(284,386,qs),
(284,367,ls),
(284,294,o),
(343,229,q),
(520,53,l)
);
},
{
closed = 1;
nodes = (
(496,0,ls),
(502,0,o),
(509,7,o),
(509,12,qs),
(509,17,o),
(505,21,qs),
(302,222,ls),
(266,258,o),
(213,258,qs),
(179,258,o),
(119,227,o),
(81,168,o),
(81,130,qs),
(81,97,o),
(114,37,o),
(174,0,o),
(213,0,qs)
);
},
{
closed = 1;
nodes = (
(284,456,o),
(226,514,o),
(226,554,qs),
(226,594,o),
(284,651,o),
(324,651,qs),
(364,651,o),
(421,594,o),
(421,554,qs),
(421,514,o),
(364,456,o),
(324,456,qs)
);
},
{
closed = 1;
nodes = (
(353,484,o),
(393,525,o),
(393,554,qs),
(393,568,o),
(386,584,q),
(384,576,o),
(370,566,o),
(362,566,qs),
(351,566,o),
(336,581,o),
(336,592,qs),
(336,600,o),
(346,614,o),
(354,616,q),
(338,623,o),
(324,623,qs),
(295,623,o),
(254,583,o),
(254,554,qs),
(254,525,o),
(295,484,o),
(324,484,qs)
);
},
{
closed = 1;
nodes = (
(852,0,ls),
(891,0,o),
(951,37,o),
(984,97,o),
(984,130,qs),
(984,168,o),
(946,227,o),
(886,258,o),
(852,258,qs),
(799,258,o),
(763,222,qs),
(560,21,ls),
(556,17,o),
(556,12,qs),
(556,7,o),
(563,0,o),
(569,0,qs)
);
},
{
closed = 1;
nodes = (
(702,456,o),
(644,514,o),
(644,554,qs),
(644,594,o),
(702,651,o),
(742,651,qs),
(782,651,o),
(839,594,o),
(839,554,qs),
(839,514,o),
(782,456,o),
(742,456,qs)
);
},
{
closed = 1;
nodes = (
(771,484,o),
(811,525,o),
(811,554,qs),
(811,568,o),
(804,584,q),
(802,576,o),
(788,566,o),
(780,566,qs),
(769,566,o),
(754,581,o),
(754,592,qs),
(754,600,o),
(764,614,o),
(772,616,q),
(756,623,o),
(742,623,qs),
(713,623,o),
(672,583,o),
(672,554,qs),
(672,525,o),
(713,484,o),
(742,484,qs)
);
},
{
closed = 1;
nodes = (
(1236,0,l),
(1236,214,l),
(1441,0,l),
(1587,0,l),
(1343,260,l),
(1572,511,l),
(1428,511,l),
(1236,309,l),
(1236,700,l),
(1122,700,l),
(1122,0,l)
);
},
{
closed = 1;
nodes = (
(1908,-12,o),
(2033,57,o),
(2104,179,o),
(2104,254,qs),
(2104,329,o),
(2033,452,o),
(1908,523,o),
(1830,523,qs),
(1752,523,o),
(1628,452,o),
(1557,329,o),
(1557,254,qs),
(1557,179,o),
(1628,57,o),
(1752,-12,o),
(1830,-12,qs)
);
},
{
closed = 1;
nodes = (
(1781,95,o),
(1710,137,o),
(1671,210,o),
(1671,254,qs),
(1671,298,o),
(1710,371,o),
(1781,413,o),
(1828,413,qs),
(1875,413,o),
(1947,371,o),
(1987,298,o),
(1987,254,qs),
(1987,210,o),
(1947,137,o),
(1875,95,o),
(1828,95,qs)
);
},
{
closed = 1;
nodes = (
(1754,566,o),
(1795,607,o),
(1795,637,qs),
(1795,667,o),
(1755,707,o),
(1724,707,qs),
(1694,707,o),
(1653,665,o),
(1653,636,qs),
(1653,607,o),
(1694,566,o),
(1724,566,qs)
);
},
{
closed = 1;
nodes = (
(1965,566,o),
(2006,607,o),
(2006,637,qs),
(2006,667,o),
(1966,707,o),
(1935,707,qs),
(1905,707,o),
(1864,665,o),
(1864,636,qs),
(1864,607,o),
(1905,566,o),
(1935,566,qs)
);
},
{
closed = 1;
nodes = (
(2284,0,l),
(2284,700,l),
(2174,700,l),
(2174,0,l)
);
},
{
closed = 1;
nodes = (
(2599,95,o),
(2527,140,o),
(2489,213,o),
(2489,254,qs),
(2489,297,o),
(2530,370,o),
(2602,413,o),
(2648,413,qs),
(2716,413,o),
(2804,323,o),
(2804,254,qs),
(2804,209,o),
(2764,136,o),
(2693,95,o),
(2648,95,qs)
);
},
{
closed = 1;
nodes = (
(2744,-12,o),
(2858,60,o),
(2920,182,o),
(2920,254,qs),
(2920,331,o),
(2854,454,o),
(2740,523,o),
(2669,523,qs),
(2612,523,o),
(2524,478,o),
(2489,431,q),
(2489,700,l),
(2379,700,l),
(2379,0,l),
(2489,0,l),
(2489,80,l),
(2524,33,o),
(2612,-12,o),
(2669,-12,qs)
);
},
{
closed = 1;
nodes = (
(3103,0,l),
(3103,511,l),
(2990,511,l),
(2990,0,l)
);
},
{
closed = 1;
nodes = (
(3076,566,o),
(3117,607,o),
(3117,637,qs),
(3117,667,o),
(3077,707,o),
(3046,707,qs),
(3016,707,o),
(2975,665,o),
(2975,636,qs),
(2975,607,o),
(3016,566,o),
(3046,566,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
132 81 2 1 8 240 1 24 7 152 149 3 3 4 24 155 1 25 4 235 1 3 25 5 76 141 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 149 values pushed */
35 30 2 18 0 6 0 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 13 1 6 8 0 6 89 40 28 26 2 4 0 53 41 50 29 49 5 27 9 0 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 150 values pushed */
35 30 2 18 26 6 26 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 2 1 0 13 1 6 8 0 6 105 40 28 2 26 53 41 50 29 49 5 27 9 26 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 149 values pushed */
35 30 2 18 0 6 0 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 13 1 6 8 0 6 89 40 28 26 2 4 0 53 41 50 29 49 5 27 9 0 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 130 values pushed */
256 256 233 233 218 218 202 202 190 190 174 174 158 158 125 125 113 113 74 74 62 62 45 45 256 267 256 266 262 260 255 254 253 252 233 251 233 250 244 242 239 238 237 236 218 232 218 231 225 223 217 216 215 214 202 213 202 212 208 206 190 201 190 200 196 194 174 189 174 188 182 180 158 173 158 172 166 164 157 156 154 153 151 150 148 147 125 146 125 145 138 137 131 129 113 124 113 123 119 117 112 110 104 102 74 95 74 94 87 86 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 54 6 27
CALL[ ]	/* CallFunction */";
};
width = 3247;
}
);
note = uniE005;
},
{
glyphname = REbackwards;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-43,0,l),
(85,0,l),
(314,303,l),
(411,303,l),
(358,0,l),
(464,0,l),
(588,700,l),
(363,700,ls),
(238,700,o),
(86,581,o),
(86,473,qs),
(86,414,o),
(153,334,o),
(212,321,q)
);
},
{
closed = 1;
nodes = (
(251,393,o),
(196,443,o),
(196,485,qs),
(196,550,o),
(270,611,o),
(349,611,qs),
(465,611,l),
(427,393,l),
(311,393,ls)
);
},
{
closed = 1;
nodes = (
(1043,0,l),
(1167,700,l),
(726,700,l),
(710,611,l),
(1045,611,l),
(1011,414,l),
(721,414,l),
(705,326,l),
(995,326,l),
(953,89,l),
(618,89,l),
(602,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
13 1 2 7 1 76 0 8 0 7 2 8 7 103 12 1 5 0 2 6 5 2 103 9 1 4 4 0 95 10 1 0 0 33 77 0 6 6 1 95 11 3 2 1 1 34 1 78 14 14 34 33 32 31 30 29 28 27 26 25 24 23 14 22 14 21 35 17 17 17 36 13 8 27
CALL[ ]	/* CallFunction */";
};
width = 1153;
}
);
note = REbackwards;
},
{
glyphname = RethinkWordmark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(3260,0,l),
(3260,488,l),
(3589,0,l),
(3717,0,l),
(3717,700,l),
(3589,700,l),
(3589,211,l),
(3260,700,l),
(3132,700,l),
(3132,0,l)
);
},
{
closed = 1;
nodes = (
(24,0,l),
(175,0,l),
(347,295,l),
(425,295,l),
(425,0,l),
(553,0,l),
(553,700,l),
(310,700,ls),
(202,700,o),
(135,647,qs),
(70,594,o),
(70,498,qs),
(70,426,o),
(109,379,qs),
(148,333,o),
(219,316,q)
);
},
{
closed = 1;
nodes = (
(251,404,o),
(225,428,qs),
(200,455,o),
(200,498,qs),
(200,542,o),
(226,566,qs),
(251,591,o),
(313,591,qs),
(425,591,l),
(425,404,l),
(313,404,ls)
);
},
{
closed = 1;
nodes = (
(1187,0,l),
(1187,700,l),
(738,700,l),
(738,591,l),
(1059,591,l),
(1059,424,l),
(784,424,l),
(784,315,l),
(1059,315,l),
(1059,109,l),
(738,109,l),
(738,0,l)
);
},
{
closed = 1;
nodes = (
(1682,0,l),
(1682,591,l),
(1887,591,l),
(1887,700,l),
(1350,700,l),
(1350,591,l),
(1554,591,l),
(1554,0,l)
);
},
{
closed = 1;
nodes = (
(2172,0,l),
(2172,316,l),
(2486,316,l),
(2486,0,l),
(2614,0,l),
(2614,700,l),
(2486,700,l),
(2486,425,l),
(2172,425,l),
(2172,700,l),
(2044,700,l),
(2044,0,l)
);
},
{
closed = 1;
nodes = (
(2937,0,l),
(2937,700,l),
(2809,700,l),
(2809,0,l)
);
},
{
closed = 1;
nodes = (
(4039,0,l),
(4039,261,l),
(4110,339,l),
(4312,0,l),
(4463,0,l),
(4196,433,l),
(4440,700,l),
(4279,700,l),
(4039,431,l),
(4039,700,l),
(3911,700,l),
(3911,0,l)
);
},
{
closed = 1;
nodes = (
(4613,700,l),
(4646,700,l),
(4681,765,l),
(4699,765,l),
(4699,700,l),
(4727,700,l),
(4727,855,l),
(4673,855,ls),
(4647,855,o),
(4625,830,o),
(4625,811,qs),
(4625,783,o),
(4654,772,q)
);
},
{
closed = 1;
nodes = (
(4720,629,o),
(4785,667,o),
(4823,733,o),
(4823,772,qs),
(4823,811,o),
(4785,877,o),
(4719,916,o),
(4680,916,qs),
(4637,916,o),
(4572,874,o),
(4536,808,o),
(4536,772,qs),
(4536,734,o),
(4574,668,o),
(4640,629,o),
(4680,629,qs)
);
},
{
closed = 1;
nodes = (
(4648,652,o),
(4593,685,o),
(4560,740,o),
(4560,772,qs),
(4560,822,o),
(4631,892,o),
(4680,892,qs),
(4730,892,o),
(4800,822,o),
(4800,772,qs),
(4800,723,o),
(4730,652,o),
(4680,652,qs)
);
},
{
closed = 1;
nodes = (
(4668,789,o),
(4652,800,o),
(4652,811,qs),
(4652,832,o),
(4677,832,qs),
(4699,832,l),
(4699,789,l),
(4680,789,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
97 1 34 41 78 75 7 3 12 8 81 25 2 11 9 82 2 2 10 6 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 110 values pushed */
45 1 41 40 34 40 41 34 128 0 34 33 40 34 112 35 1 33 0 40 33 112 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 44 1 39 43 1 37 8 39 37 105 21 1 12 24 1 11 6 12 11 103 42 1 9 0 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 111 values pushed */
45 1 41 40 34 40 41 34 128 0 34 33 40 34 112 35 1 33 0 40 33 0 126 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 44 1 39 43 1 37 8 39 37 105 21 1 12 24 1 11 6 12 11 103 42 1 9 0 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 112 values pushed */
45 1 41 40 34 40 41 34 128 0 34 33 40 34 33 126 35 1 33 0 40 33 0 126 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 44 1 39 43 1 37 8 39 37 105 21 1 12 24 1 11 6 12 11 103 42 1 9 0 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 94 values pushed */
127 127 114 114 98 98 26 26 127 134 127 133 130 128 114 126 114 125 120 118 98 113 98 112 106 104 96 95 94 93 92 91 90 88 84 83 80 79 77 76 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 26 36 26 35 35 17 17 17 39 18 17 18 16 46 8 31
CALL[ ]	/* CallFunction */";
};
width = 4789;
}
);
note = RethinkWordmark;
},
{
glyphname = Rlogobig;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(525,-12,o),
(692,85,o),
(789,252,o),
(789,350,qs),
(789,448,o),
(692,615,o),
(525,712,o),
(427,712,qs),
(329,712,o),
(162,615,o),
(65,448,o),
(65,350,qs),
(65,252,o),
(162,85,o),
(329,-12,o),
(427,-12,qs)
);
},
{
closed = 1;
nodes = (
(345,47,o),
(206,129,o),
(124,268,o),
(124,350,qs),
(124,432,o),
(206,571,o),
(345,652,o),
(427,652,qs),
(509,652,o),
(648,571,o),
(729,432,o),
(729,350,qs),
(729,268,o),
(648,129,o),
(509,47,o),
(427,47,qs)
);
},
{
closed = 1;
nodes = (
(342,168,l),
(356,196,o),
(416,308,o),
(429,333,q),
(474,333,l),
(474,168,l),
(547,168,l),
(547,559,l),
(410,559,ls),
(344,559,o),
(287,493,o),
(287,447,qs),
(287,411,o),
(327,361,o),
(361,349,q),
(258,168,l)
);
},
{
closed = 1;
nodes = (
(395,392,o),
(356,420,o),
(356,447,qs),
(356,473,o),
(391,501,o),
(419,501,qs),
(474,501,l),
(474,392,l),
(428,392,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
7 1 5 6 3 6 5 3 128 0 4 0 8 9 4 8 105 12 1 9 0 6 5 9 6 103 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 97 10 1 1 1 40 1 78 48 48 16 16 0 0 48 56 48 55 51 49 47 46 43 42 41 40 39 37 16 31 16 30 24 22 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 818;
}
);
note = Rlogobig;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = "Medium Italic";
properties = (
{
key = postscriptFontName;
value = "KolbiSans-MediumItalic";
},
{
key = postscriptFullNames;
values = (
{
language = ENG;
value = "Kolbi Sans Medium Italic";
}
);
}
);
weightClass = 500;
}
);
kerningLTR = {
m01 = {
"@MMK_L_A" = {
"@MMK_R_C" = -55;
"@MMK_R_S" = -18;
"@MMK_R_T" = -80;
"@MMK_R_U" = -34;
"@MMK_R_V" = -116;
"@MMK_R_W" = -83;
"@MMK_R_X" = -18;
"@MMK_R_Y" = -103;
"@MMK_R_a" = -18;
"@MMK_R_asterisk" = -95;
"@MMK_R_at" = -15;
"@MMK_R_backslash" = -64;
"@MMK_R_c" = -30;
"@MMK_R_f" = -21;
"@MMK_R_hyphen" = -40;
"@MMK_R_multiply" = -47;
"@MMK_R_parenright" = -20;
"@MMK_R_plus" = -53;
"@MMK_R_question" = -40;
"@MMK_R_s" = -15;
"@MMK_R_t" = -47;
"@MMK_R_u" = -24;
"@MMK_R_v" = -70;
"@MMK_R_w" = -49;
"@MMK_R_x" = -40;
"@MMK_R_y" = -77;
"@MMK_R_z" = 7;
};
"@MMK_L_B" = {
"@MMK_R_A" = -28;
"@MMK_R_AE" = -37;
"@MMK_R_S" = -5;
"@MMK_R_T" = -54;
"@MMK_R_V" = -48;
"@MMK_R_W" = -28;
"@MMK_R_X" = -30;
"@MMK_R_Y" = -55;
"@MMK_R_asterisk" = -24;
"@MMK_R_backslash" = -34;
"@MMK_R_braceright" = -40;
"@MMK_R_c" = -3;
"@MMK_R_comma" = -24;
"@MMK_R_g" = -15;
"@MMK_R_parenright" = -67;
"@MMK_R_period" = -30;
"@MMK_R_slash" = -43;
"@MMK_R_underscore" = -50;
"@MMK_R_x" = -10;
};
"@MMK_L_Cacute" = {
"@MMK_R_AE" = -13;
"@MMK_R_T" = -20;
"@MMK_R_V" = -20;
"@MMK_R_W" = -20;
"@MMK_R_X" = -20;
"@MMK_R_Y" = -40;
"@MMK_R_parenright" = -20;
};
"@MMK_L_E" = {
"@MMK_R_C" = -10;
};
"@MMK_L_F" = {
"@MMK_R_A" = -60;
"@MMK_R_a" = -40;
"@MMK_R_c" = -30;
"@MMK_R_g" = -38;
"@MMK_R_period" = -60;
"@MMK_R_s" = -20;
};
"@MMK_L_G" = {
"@MMK_R_T" = -25;
"@MMK_R_W" = -25;
"@MMK_R_Y" = -43;
};
"@MMK_L_J" = {
"@MMK_R_A" = -22;
};
"@MMK_L_K" = {
"@MMK_R_A" = -20;
"@MMK_R_C" = -59;
"@MMK_R_J" = -13;
"@MMK_R_S" = -35;
"@MMK_R_T" = -10;
"@MMK_R_a" = -30;
"@MMK_R_asterisk" = -11;
"@MMK_R_at" = -10;
"@MMK_R_c" = -60;
"@MMK_R_dotlessi" = -30;
"@MMK_R_f" = -23;
"@MMK_R_g" = -33;
"@MMK_R_guillemotleft" = -44;
"@MMK_R_hyphen" = -60;
"@MMK_R_i" = -23;
"@MMK_R_igrave" = -15;
"@MMK_R_j" = -23;
"@MMK_R_p" = -10;
"@MMK_R_plus" = -40;
"@MMK_R_question" = -16;
"@MMK_R_s" = -40;
"@MMK_R_t" = -38;
"@MMK_R_u" = -40;
"@MMK_R_v" = -65;
"@MMK_R_w" = -60;
"@MMK_R_x" = -53;
"@MMK_R_y" = -65;
"@MMK_R_z" = -20;
};
"@MMK_L_L" = {
"@MMK_R_C" = -77;
"@MMK_R_S" = -35;
"@MMK_R_T" = -120;
"@MMK_R_U" = -40;
"@MMK_R_V" = -137;
"@MMK_R_W" = -80;
"@MMK_R_Y" = -121;
"@MMK_R_asterisk" = -107;
"@MMK_R_at" = -15;
"@MMK_R_backslash" = -64;
"@MMK_R_c" = -35;
"@MMK_R_hyphen" = -60;
"@MMK_R_percent" = -68;
"@MMK_R_plus" = -60;
"@MMK_R_question" = -30;
"@MMK_R_t" = -21;
"@MMK_R_uni018F" = -30;
"@MMK_R_uni02BA" = -101;
"@MMK_R_v" = -67;
"@MMK_R_w" = -43;
"@MMK_R_x" = -10;
"@MMK_R_y" = -70;
};
"@MMK_L_N" = {
"@MMK_R_c" = -3;
};
"@MMK_L_P" = {
"@MMK_R_A" = -72;
"@MMK_R_AE" = -107;
"@MMK_R_S" = 4;
"@MMK_R_V" = -8;
"@MMK_R_Y" = -19;
"@MMK_R_a" = -20;
"@MMK_R_c" = -25;
"@MMK_R_dotlessi" = 10;
"@MMK_R_g" = -24;
"@MMK_R_period" = -50;
};
"@MMK_L_Q" = {
"@MMK_R_A" = -20;
"@MMK_R_T" = -37;
"@MMK_R_U" = 7;
"@MMK_R_V" = -39;
"@MMK_R_W" = -33;
"@MMK_R_Y" = -53;
"@MMK_R_u" = 4;
};
"@MMK_L_R" = {
"@MMK_R_C" = -13;
"@MMK_R_J" = -5;
"@MMK_R_T" = -23;
"@MMK_R_V" = -37;
"@MMK_R_W" = -28;
"@MMK_R_Y" = -30;
"@MMK_R_a" = -23;
"@MMK_R_c" = -33;
"@MMK_R_plus" = -13;
"@MMK_R_s" = -13;
"@MMK_R_u" = -13;
};
"@MMK_L_S" = {
"@MMK_R_C" = -5;
"@MMK_R_T" = -25;
"@MMK_R_V" = -40;
"@MMK_R_W" = -35;
"@MMK_R_Y" = -50;
"@MMK_R_c" = -5;
"@MMK_R_y" = -5;
};
"@MMK_L_T" = {
"@MMK_R_A" = -74;
"@MMK_R_AE" = -90;
"@MMK_R_C" = -31;
"@MMK_R_J" = -60;
"@MMK_R_S" = -8;
"@MMK_R_a" = -110;
"@MMK_R_at" = -29;
"@MMK_R_backslash" = 24;
"@MMK_R_c" = -110;
"@MMK_R_comma" = -80;
"@MMK_R_dotlessi" = -100;
"@MMK_R_exclamdown" = -39;
"@MMK_R_f" = -20;
"@MMK_R_g" = -108;
"@MMK_R_hyphen" = -50;
"@MMK_R_iacute" = 5;
"@MMK_R_ibreve" = 70;
"@MMK_R_igrave" = 5;
"@MMK_R_multiply" = -83;
"@MMK_R_p" = -100;
"@MMK_R_period" = -80;
"@MMK_R_plus" = -53;
"@MMK_R_question" = 20;
"@MMK_R_questiondown" = -67;
"@MMK_R_rcaron" = -50;
"@MMK_R_s" = -105;
"@MMK_R_semicolon" = -54;
"@MMK_R_slash" = -44;
"@MMK_R_t" = -27;
"@MMK_R_u" = -105;
"@MMK_R_underscore" = -60;
"@MMK_R_uni006A0301" = 10;
"@MMK_R_v" = -80;
"@MMK_R_w" = -85;
"@MMK_R_x" = -80;
"@MMK_R_y" = -80;
"@MMK_R_z" = -85;
};
"@MMK_L_Thorn" = {
"@MMK_R_A" = -21;
"@MMK_R_T" = -93;
"@MMK_R_V" = -60;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -77;
"@MMK_R_period" = -20;
};
"@MMK_L_U" = {
"@MMK_R_A" = -37;
"@MMK_R_AE" = -50;
"@MMK_R_g" = -25;
"@MMK_R_period" = -20;
"@MMK_R_s" = -10;
"@MMK_R_slash" = -30;
"@MMK_R_underscore" = -37;
};
"@MMK_L_V" = {
"@MMK_R_A" = -88;
"@MMK_R_AE" = -103;
"@MMK_R_C" = -24;
"@MMK_R_J" = -68;
"@MMK_R_S" = -10;
"@MMK_R_a" = -60;
"@MMK_R_at" = -32;
"@MMK_R_backslash" = 7;
"@MMK_R_c" = -70;
"@MMK_R_colon" = -30;
"@MMK_R_comma" = -77;
"@MMK_R_dotlessi" = -40;
"@MMK_R_exclamdown" = -34;
"@MMK_R_f" = -18;
"@MMK_R_g" = -68;
"@MMK_R_hyphen" = -47;
"@MMK_R_igrave" = 10;
"@MMK_R_multiply" = -53;
"@MMK_R_p" = -40;
"@MMK_R_period" = -60;
"@MMK_R_plus" = -60;
"@MMK_R_rcaron" = -10;
"@MMK_R_s" = -60;
"@MMK_R_slash" = -63;
"@MMK_R_t" = -15;
"@MMK_R_u" = -40;
"@MMK_R_underscore" = -70;
"@MMK_R_uni006A0301" = 5;
"@MMK_R_v" = -20;
"@MMK_R_w" = -25;
"@MMK_R_x" = -23;
"@MMK_R_y" = -15;
"@MMK_R_z" = -20;
};
"@MMK_L_W" = {
"@MMK_R_A" = -92;
"@MMK_R_AE" = -90;
"@MMK_R_C" = -38;
"@MMK_R_J" = -53;
"@MMK_R_Oslash" = -20;
"@MMK_R_S" = -15;
"@MMK_R_a" = -78;
"@MMK_R_at" = -35;
"@MMK_R_c" = -80;
"@MMK_R_comma" = -57;
"@MMK_R_dotlessi" = -48;
"@MMK_R_exclamdown" = -27;
"@MMK_R_f" = -18;
"@MMK_R_g" = -78;
"@MMK_R_hyphen" = -47;
"@MMK_R_i" = -18;
"@MMK_R_iacute" = -15;
"@MMK_R_igrave" = 3;
"@MMK_R_j" = -10;
"@MMK_R_multiply" = -47;
"@MMK_R_p" = -48;
"@MMK_R_period" = -70;
"@MMK_R_plus" = -53;
"@MMK_R_rcaron" = -30;
"@MMK_R_s" = -73;
"@MMK_R_semicolon" = -27;
"@MMK_R_slash" = -57;
"@MMK_R_t" = -20;
"@MMK_R_u" = -45;
"@MMK_R_underscore" = -43;
"@MMK_R_v" = -33;
"@MMK_R_w" = -33;
"@MMK_R_x" = -33;
"@MMK_R_y" = -33;
"@MMK_R_z" = -35;
};
"@MMK_L_X" = {
"@MMK_R_A" = -13;
"@MMK_R_C" = -56;
"@MMK_R_S" = -10;
"@MMK_R_a" = -35;
"@MMK_R_c" = -50;
"@MMK_R_g" = -25;
"@MMK_R_s" = -40;
"@MMK_R_t" = -43;
"@MMK_R_u" = -34;
"@MMK_R_w" = -53;
"@MMK_R_y" = -68;
"@MMK_R_z" = -20;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -87;
"@MMK_R_AE" = -84;
"@MMK_R_C" = -45;
"@MMK_R_J" = -68;
"@MMK_R_Oslash" = -35;
"@MMK_R_S" = -10;
"@MMK_R_a" = -88;
"@MMK_R_at" = -40;
"@MMK_R_c" = -100;
"@MMK_R_colon" = -40;
"@MMK_R_comma" = -57;
"@MMK_R_dotlessi" = -58;
"@MMK_R_exclamdown" = -44;
"@MMK_R_f" = -23;
"@MMK_R_g" = -78;
"@MMK_R_hyphen" = -44;
"@MMK_R_i" = -20;
"@MMK_R_iacute" = -20;
"@MMK_R_igrave" = -5;
"@MMK_R_multiply" = -83;
"@MMK_R_p" = -53;
"@MMK_R_period" = -77;
"@MMK_R_plus" = -87;
"@MMK_R_questiondown" = -74;
"@MMK_R_rcaron" = -20;
"@MMK_R_s" = -95;
"@MMK_R_semicolon" = -41;
"@MMK_R_slash" = -57;
"@MMK_R_t" = -25;
"@MMK_R_u" = -75;
"@MMK_R_underscore" = -74;
"@MMK_R_uni02BA" = 30;
"@MMK_R_v" = -45;
"@MMK_R_w" = -35;
"@MMK_R_x" = -45;
"@MMK_R_y" = -45;
"@MMK_R_z" = -45;
};
"@MMK_L_Z" = {
"@MMK_R_C" = -20;
"@MMK_R_a" = -20;
"@MMK_R_c" = -30;
"@MMK_R_s" = -8;
};
"@MMK_L_a" = {
"@MMK_R_asterisk" = -34;
"@MMK_R_backslash" = -40;
"@MMK_R_lslash" = 10;
"@MMK_R_uni02BA" = -64;
"@MMK_R_v" = -24;
"@MMK_R_w" = -16;
"@MMK_R_y" = -28;
};
"@MMK_L_aacute" = {
"@MMK_R_asterisk" = -34;
"@MMK_R_backslash" = -60;
"@MMK_R_c" = -5;
"@MMK_R_f" = -8;
"@MMK_R_t" = -13;
"@MMK_R_v" = -32;
"@MMK_R_w" = -30;
"@MMK_R_y" = -36;
};
"@MMK_L_ae" = {
"@MMK_R_Y" = -90;
"@MMK_R_asterisk" = -41;
"@MMK_R_backslash" = -64;
"@MMK_R_g" = -7;
"@MMK_R_lslash" = 18;
"@MMK_R_question" = -20;
"@MMK_R_uni02BA" = -67;
"@MMK_R_v" = -26;
"@MMK_R_w" = -20;
"@MMK_R_x" = -25;
"@MMK_R_y" = -30;
};
"@MMK_L_asterisk" = {
"@MMK_R_A" = -75;
"@MMK_R_AE" = -114;
"@MMK_R_C" = -12;
"@MMK_R_a" = -7;
"@MMK_R_c" = -21;
"@MMK_R_s" = -19;
};
"@MMK_L_at" = {
"@MMK_R_A" = -15;
"@MMK_R_AE" = -15;
"@MMK_R_T" = -47;
"@MMK_R_V" = -52;
"@MMK_R_W" = -46;
"@MMK_R_Y" = -55;
"@MMK_R_percent" = -33;
"@MMK_R_period" = -13;
"@MMK_R_uni02BA" = -46;
"@MMK_R_w" = -17;
"@MMK_R_y" = -22;
};
"@MMK_L_b" = {
"@MMK_R_T" = -115;
"@MMK_R_V" = -80;
"@MMK_R_asterisk" = -57;
"@MMK_R_backslash" = -84;
"@MMK_R_braceright" = -50;
"@MMK_R_c" = -8;
"@MMK_R_f" = -8;
"@MMK_R_g" = -8;
"@MMK_R_lslash" = 5;
"@MMK_R_parenright" = -57;
"@MMK_R_question" = -40;
"@MMK_R_s" = -8;
"@MMK_R_slash" = -7;
"@MMK_R_t" = -20;
"@MMK_R_uni02BA" = -87;
"@MMK_R_v" = -40;
"@MMK_R_w" = -30;
"@MMK_R_x" = -33;
"@MMK_R_y" = -47;
"@MMK_R_z" = -5;
};
"@MMK_L_backslash" = {
"@MMK_R_C" = -40;
"@MMK_R_T" = -80;
"@MMK_R_U" = -11;
"@MMK_R_V" = -91;
"@MMK_R_W" = -67;
"@MMK_R_Y" = -70;
"@MMK_R_c" = -20;
"@MMK_R_hyphen" = -43;
"@MMK_R_uni02BA" = -104;
};
"@MMK_L_braceright" = {
"@MMK_R_A" = -47;
"@MMK_R_AE" = -50;
"@MMK_R_T" = -48;
"@MMK_R_W" = -24;
"@MMK_R_Y" = -50;
"@MMK_R_period" = -50;
};
"@MMK_L_c" = {
"@MMK_R_w" = -10;
"@MMK_R_y" = -18;
};
"@MMK_L_colon" = {
"@MMK_R_V" = -30;
"@MMK_R_Y" = -40;
};
"@MMK_L_comma" = {
"@MMK_R_C" = -37;
"@MMK_R_T" = -80;
"@MMK_R_V" = -80;
"@MMK_R_W" = -53;
"@MMK_R_Y" = -77;
"@MMK_R_percent" = -72;
"@MMK_R_t" = -27;
"@MMK_R_w" = -30;
"@MMK_R_y" = -50;
};
"@MMK_L_exclamdown" = {
"@MMK_R_T" = -37;
"@MMK_R_V" = -34;
"@MMK_R_W" = -11;
"@MMK_R_Y" = -44;
};
"@MMK_L_f" = {
"@MMK_R_a" = -16;
"@MMK_R_c" = -10;
"@MMK_R_g" = -20;
"@MMK_R_period" = -11;
"@MMK_R_s" = -11;
};
"@MMK_L_g" = {
"@MMK_R_a" = -5;
"@MMK_R_c" = -18;
"@MMK_R_f" = 10;
"@MMK_R_j" = 36;
"@MMK_R_t" = 20;
"@MMK_R_u" = -3;
};
"@MMK_L_germandbls" = {
"@MMK_R_y" = -40;
};
"@MMK_L_greater" = {
"@MMK_R_period" = -60;
};
"@MMK_L_hyphen" = {
"@MMK_R_A" = -37;
"@MMK_R_T" = -54;
"@MMK_R_V" = -47;
"@MMK_R_W" = -37;
"@MMK_R_Y" = -54;
"@MMK_R_backslash" = -70;
"@MMK_R_slash" = -43;
};
"@MMK_L_ibreve" = {
"@MMK_R_T" = 70;
"@MMK_R_b" = 20;
};
"@MMK_L_k" = {
"@MMK_R_a" = -32;
"@MMK_R_at" = -10;
"@MMK_R_c" = -34;
"@MMK_R_s" = -22;
};
"@MMK_L_l" = {
"@MMK_R_ibreve" = 15;
};
"@MMK_L_lslash" = {
"@MMK_R_a" = 3;
"@MMK_R_c" = 5;
"@MMK_R_w" = 15;
};
"@MMK_L_multiply" = {
"@MMK_R_A" = -13;
"@MMK_R_AE" = -20;
"@MMK_R_T" = -83;
"@MMK_R_V" = -54;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -74;
};
"@MMK_L_parenleft" = {
"@MMK_R_A" = -26;
"@MMK_R_C" = -57;
"@MMK_R_a" = -50;
"@MMK_R_c" = -34;
"@MMK_R_s" = -20;
};
"@MMK_L_period" = {
"@MMK_R_C" = -50;
"@MMK_R_T" = -80;
"@MMK_R_U" = -20;
"@MMK_R_V" = -60;
"@MMK_R_W" = -70;
"@MMK_R_Y" = -81;
"@MMK_R_at" = -10;
"@MMK_R_backslash" = -100;
"@MMK_R_less" = -60;
"@MMK_R_question" = -43;
"@MMK_R_v" = -47;
"@MMK_R_w" = -40;
"@MMK_R_y" = -60;
};
"@MMK_L_plus" = {
"@MMK_R_A" = -26;
"@MMK_R_T" = -57;
"@MMK_R_V" = -73;
"@MMK_R_W" = -53;
"@MMK_R_Y" = -80;
};
"@MMK_L_question" = {
"@MMK_R_A" = -67;
"@MMK_R_AE" = -80;
"@MMK_R_period" = -90;
};
"@MMK_L_questiondown" = {
"@MMK_R_T" = -73;
"@MMK_R_Y" = -70;
"@MMK_R_c" = -34;
"@MMK_R_percent" = -34;
"@MMK_R_z" = 20;
};
"@MMK_L_quotedblright" = {
"@MMK_R_J" = -74;
"@MMK_R_at" = -17;
"@MMK_R_s" = -47;
"@MMK_R_slash" = -104;
};
"@MMK_L_r" = {
"@MMK_R_c" = -14;
"@MMK_R_colon" = 13;
"@MMK_R_f" = 5;
"@MMK_R_period" = -40;
"@MMK_R_t" = 10;
"@MMK_R_u" = 5;
"@MMK_R_w" = 5;
"@MMK_R_y" = 8;
};
"@MMK_L_s" = {
"@MMK_R_asterisk" = -61;
"@MMK_R_backslash" = -67;
"@MMK_R_f" = -13;
"@MMK_R_parenright" = -24;
"@MMK_R_question" = -27;
"@MMK_R_t" = -18;
"@MMK_R_u" = -3;
"@MMK_R_v" = -33;
"@MMK_R_w" = -18;
"@MMK_R_x" = -18;
"@MMK_R_y" = -33;
};
"@MMK_L_semicolon" = {
"@MMK_R_T" = -40;
"@MMK_R_Y" = -15;
};
"@MMK_L_slash" = {
"@MMK_R_C" = -33;
"@MMK_R_T" = 11;
"@MMK_R_V" = 34;
"@MMK_R_W" = 11;
"@MMK_R_Y" = 40;
"@MMK_R_a" = -30;
"@MMK_R_c" = -46;
"@MMK_R_dotlessi" = -14;
"@MMK_R_g" = -34;
"@MMK_R_hyphen" = -43;
"@MMK_R_period" = -110;
"@MMK_R_s" = -31;
};
"@MMK_L_t" = {
"@MMK_R_c" = -18;
"@MMK_R_comma" = 39;
};
"@MMK_L_underscore" = {
"@MMK_R_C" = -67;
"@MMK_R_T" = -74;
"@MMK_R_U" = -47;
"@MMK_R_V" = -90;
"@MMK_R_W" = -67;
"@MMK_R_Y" = -74;
};
"@MMK_L_v" = {
"@MMK_R_A" = -70;
"@MMK_R_a" = -10;
"@MMK_R_c" = -23;
"@MMK_R_g" = -24;
"@MMK_R_period" = -40;
"@MMK_R_s" = -15;
"@MMK_R_t" = 20;
};
"@MMK_L_w" = {
"@MMK_R_a" = -7;
"@MMK_R_at" = -7;
"@MMK_R_c" = -12;
"@MMK_R_comma" = -30;
"@MMK_R_f" = 5;
"@MMK_R_g" = -21;
"@MMK_R_lslash" = 8;
"@MMK_R_period" = -40;
"@MMK_R_questiondown" = -13;
"@MMK_R_s" = -8;
"@MMK_R_t" = 5;
};
"@MMK_L_x" = {
"@MMK_R_c" = -28;
"@MMK_R_s" = -18;
};
"@MMK_L_y" = {
"@MMK_R_T" = -70;
"@MMK_R_a" = -20;
"@MMK_R_at" = -7;
"@MMK_R_c" = -23;
"@MMK_R_comma" = -60;
"@MMK_R_g" = -27;
"@MMK_R_multiply" = -13;
"@MMK_R_period" = -50;
"@MMK_R_questiondown" = -37;
"@MMK_R_s" = -13;
"@MMK_R_slash" = -30;
};
"@MMK_L_z" = {
"@MMK_R_c" = -8;
};
AE = {
ibreve = 27;
imacron = 54;
itilde = 37;
v = -17;
};
AEacute = {
ibreve = 27;
imacron = 54;
itilde = 37;
v = -17;
};
Aacute = {
asterisk = -95;
at = -15;
backslash = -64;
f = -13;
multiply = -47;
parenright = -20;
plus = -53;
question = -40;
v = -70;
};
Abreve = {
asterisk = -95;
at = -15;
backslash = -64;
f = -13;
multiply = -47;
parenright = -20;
plus = -53;
question = -40;
v = -70;
};
Acircumflex = {
asterisk = -95;
at = -15;
backslash = -64;
f = -13;
multiply = -47;
parenright = -20;
plus = -53;
question = -40;
v = -70;
};
Adieresis = {
asterisk = -95;
at = -15;
backslash = -64;
f = -13;
multiply = -47;
parenright = -20;
plus = -53;
question = -40;
v = -70;
};
Agrave = {
asterisk = -95;
at = -15;
backslash = -64;
f = -13;
multiply = -47;
parenright = -20;
plus = -53;
question = -40;
v = -70;
};
Amacron = {
asterisk = -95;
at = -15;
backslash = -64;
f = -13;
multiply = -47;
parenright = -20;
plus = -53;
question = -40;
v = -70;
};
Aogonek = {
asterisk = -95;
at = -15;
backslash = -64;
f = -13;
multiply = -47;
parenright = -20;
plus = -53;
question = -40;
v = -70;
};
Aring = {
asterisk = -95;
at = -15;
backslash = -64;
f = -13;
multiply = -47;
parenright = -20;
plus = -53;
question = -40;
v = -70;
};
Atilde = {
asterisk = -95;
at = -15;
backslash = -64;
f = -13;
multiply = -47;
parenright = -20;
plus = -53;
question = -40;
v = -70;
};
B = {
A = -21;
AE = -30;
AEacute = -30;
Aacute = -21;
Abreve = -21;
Acircumflex = -21;
Adieresis = -21;
Agrave = -21;
Amacron = -21;
Aogonek = -21;
Aring = -21;
Atilde = -21;
C = -5;
Cacute = -5;
Ccaron = -5;
Ccedilla = -5;
Cdotaccent = -5;
G = -5;
Gbreve = -5;
Gdotaccent = -5;
O = -5;
OE = -5;
Oacute = -5;
Obreve = -5;
Ocircumflex = -5;
Odieresis = -5;
Ograve = -5;
Ohungarumlaut = -5;
Omacron = -5;
Otilde = -5;
Q = -5;
T = -29;
Tcaron = -29;
V = -29;
W = -25;
Wacute = -25;
Wcircumflex = -25;
Wdieresis = -25;
Wgrave = -25;
X = -18;
Y = -30;
Yacute = -30;
Ycircumflex = -30;
Ydieresis = -30;
Ygrave = -30;
imacron = 25;
itilde = 10;
uni0122 = -5;
uni0162 = -29;
uni021A = -29;
uni1EF8 = -30;
uni1EF9 = -8;
y = -8;
yacute = -8;
ycircumflex = -8;
ydieresis = -8;
ygrave = -8;
};
C = {
dotlessi = 5;
eng = 5;
idieresis = 10;
imacron = 10;
iogonek = 5;
itilde = 10;
m = 5;
n = 5;
nacute = 5;
ncaron = 5;
ntilde = 5;
r = 5;
racute = 5;
uni0146 = 5;
uni0157 = 5;
uni0326 = 5;
};
Cacute = {
imacron = 30;
itilde = 30;
};
Ccaron = {
imacron = 30;
itilde = 30;
};
Ccedilla = {
imacron = 30;
itilde = 30;
};
Cdotaccent = {
imacron = 30;
itilde = 30;
};
E = {
ibreve = 18;
icircumflex = 10;
imacron = 54;
itilde = 37;
v = -17;
};
Eacute = {
ibreve = 27;
imacron = 54;
itilde = 37;
v = -17;
};
Ebreve = {
ibreve = 27;
imacron = 54;
itilde = 37;
v = -17;
};
Ecaron = {
ibreve = 27;
imacron = 54;
itilde = 37;
v = -17;
};
Ecircumflex = {
ibreve = 27;
imacron = 54;
itilde = 37;
v = -17;
};
Edieresis = {
ibreve = 27;
imacron = 54;
itilde = 37;
v = -17;
};
Edotaccent = {
ibreve = 27;
imacron = 54;
itilde = 37;
v = -17;
};
Egrave = {
ibreve = 27;
imacron = 54;
itilde = 37;
v = -17;
};
Emacron = {
ibreve = 27;
imacron = 54;
itilde = 37;
v = -17;
};
Eogonek = {
ibreve = 27;
imacron = 54;
itilde = 37;
v = -17;
};
Euro = {
imacron = 30;
itilde = 30;
};
F = {
J = -50;
at = -15;
comma = -40;
iacute = 5;
ibreve = 28;
icircumflex = 28;
igrave = 8;
imacron = 68;
itilde = 38;
multiply = -20;
underscore = -40;
uni006A0301 = 8;
};
G = {
imacron = 30;
};
Gbreve = {
imacron = 30;
};
Gdotaccent = {
imacron = 30;
};
H = {
ibreve = 10;
imacron = 45;
itilde = 15;
};
I = {
ibreve = 10;
imacron = 45;
itilde = 15;
};
Iacute = {
imacron = 40;
itilde = 11;
};
Ibreve = {
imacron = 40;
itilde = 11;
};
Icircumflex = {
imacron = 40;
itilde = 11;
};
Idieresis = {
imacron = 40;
itilde = 11;
};
Idotaccent = {
imacron = 40;
itilde = 11;
};
Igrave = {
imacron = 40;
itilde = 11;
};
Imacron = {
imacron = 40;
itilde = 11;
};
Iogonek = {
imacron = 40;
itilde = 11;
};
Itilde = {
imacron = 40;
itilde = 11;
};
J = {
ibreve = 10;
igrave = 50;
imacron = 60;
itilde = 13;
};
K = {
ibreve = 20;
icircumflex = -5;
imacron = 50;
l = -3;
};
L = {
V = -80;
};
Lacute = {
V = -80;
};
Lcaron = {
V = -80;
};
Ldot = {
V = -80;
};
Lslash = {
V = -80;
};
M = {
ibreve = 10;
imacron = 45;
itilde = 15;
};
N = {
ibreve = 10;
imacron = 45;
itilde = 15;
};
Nacute = {
imacron = 40;
itilde = 11;
};
Ncaron = {
imacron = 40;
itilde = 11;
};
Ntilde = {
imacron = 40;
itilde = 11;
};
OE = {
ibreve = 27;
imacron = 54;
itilde = 37;
v = -17;
};
Oslash = {
igrave = 50;
imacron = 51;
slash = -43;
underscore = -33;
};
P = {
J = -66;
X = -30;
Z = -20;
Zacute = -20;
Zcaron = -20;
Zdotaccent = -20;
at = -12;
comma = -87;
imacron = 20;
itilde = 36;
parenright = -40;
slash = -73;
underscore = -44;
};
Q = {
X = -20;
};
R = {
imacron = 30;
itilde = 20;
};
Racute = {
imacron = 30;
itilde = 20;
};
Rcaron = {
imacron = 30;
itilde = 20;
};
S = {
imacron = 34;
itilde = 20;
};
Sacute = {
imacron = 34;
itilde = 20;
};
Scaron = {
imacron = 34;
itilde = 20;
};
Scedilla = {
imacron = 34;
itilde = 20;
};
T = {
abreve = -103;
adieresis = -83;
amacron = -83;
atilde = -103;
ebreve = -103;
edieresis = -83;
emacron = -83;
gbreve = -95;
ibreve = 35;
icircumflex = 50;
imacron = 73;
itilde = 40;
ntilde = -90;
odieresis = -83;
omacron = -90;
otilde = -103;
racute = -70;
scaron = -95;
udieresis = -80;
umacron = -85;
uni1EBD = -103;
utilde = -100;
ydieresis = -65;
};
Tcaron = {
abreve = -103;
adieresis = -83;
amacron = -83;
atilde = -103;
ebreve = -103;
edieresis = -83;
emacron = -83;
gbreve = -95;
ibreve = 35;
icircumflex = 50;
imacron = 73;
itilde = 40;
ntilde = -90;
odieresis = -83;
omacron = -90;
otilde = -103;
racute = -70;
scaron = -95;
udieresis = -80;
umacron = -85;
uni1EBD = -103;
utilde = -100;
ydieresis = -65;
};
Thorn = {
X = -70;
parenright = -50;
};
U = {
ibreve = 10;
imacron = 46;
itilde = 14;
};
Uacute = {
ibreve = 10;
imacron = 46;
itilde = 14;
};
Ubreve = {
ibreve = 10;
imacron = 46;
itilde = 14;
};
Ucircumflex = {
ibreve = 10;
imacron = 46;
itilde = 14;
};
Udieresis = {
ibreve = 10;
imacron = 46;
itilde = 14;
};
Ugrave = {
ibreve = 10;
imacron = 46;
itilde = 14;
};
Uhungarumlaut = {
ibreve = 10;
imacron = 46;
itilde = 14;
};
Umacron = {
ibreve = 10;
imacron = 46;
itilde = 14;
};
Uogonek = {
ibreve = 10;
imacron = 46;
itilde = 14;
};
Uring = {
ibreve = 10;
imacron = 46;
itilde = 14;
};
Utilde = {
ibreve = 10;
imacron = 46;
itilde = 14;
};
V = {
adieresis = -55;
edieresis = -60;
emacron = -65;
ibreve = 40;
icircumflex = 25;
imacron = 75;
itilde = 40;
odieresis = -60;
omacron = -68;
};
W = {
adieresis = -73;
edieresis = -73;
ibreve = 36;
icircumflex = 20;
imacron = 73;
itilde = 30;
odieresis = -73;
};
Wacute = {
adieresis = -73;
edieresis = -73;
ibreve = 36;
icircumflex = 20;
imacron = 73;
itilde = 30;
odieresis = -73;
};
Wcircumflex = {
adieresis = -73;
edieresis = -73;
ibreve = 36;
icircumflex = 20;
imacron = 73;
itilde = 30;
odieresis = -73;
};
Wdieresis = {
adieresis = -73;
edieresis = -73;
ibreve = 36;
icircumflex = 20;
imacron = 73;
itilde = 30;
odieresis = -73;
};
Wgrave = {
adieresis = -73;
edieresis = -73;
ibreve = 36;
icircumflex = 20;
imacron = 73;
itilde = 30;
odieresis = -73;
};
X = {
J = -8;
at = -22;
f = -23;
ibreve = 27;
imacron = 50;
itilde = 10;
multiply = -67;
question = -24;
v = -68;
x = -30;
};
Y = {
adieresis = -73;
amacron = -78;
edieresis = -78;
emacron = -88;
ibreve = 30;
icircumflex = 15;
imacron = 68;
itilde = 28;
odieresis = -78;
omacron = -88;
racute = -48;
scaron = -88;
udieresis = -68;
};
Yacute = {
adieresis = -73;
amacron = -78;
edieresis = -78;
emacron = -88;
ibreve = 30;
icircumflex = 15;
imacron = 68;
itilde = 28;
odieresis = -78;
omacron = -88;
racute = -48;
scaron = -88;
udieresis = -68;
};
Ycircumflex = {
adieresis = -73;
amacron = -78;
edieresis = -78;
emacron = -88;
ibreve = 30;
icircumflex = 15;
imacron = 68;
itilde = 28;
odieresis = -78;
omacron = -88;
racute = -48;
scaron = -88;
udieresis = -68;
};
Ydieresis = {
adieresis = -73;
amacron = -78;
edieresis = -78;
emacron = -88;
ibreve = 30;
icircumflex = 15;
imacron = 68;
itilde = 28;
odieresis = -78;
omacron = -88;
racute = -48;
scaron = -88;
udieresis = -68;
};
Ygrave = {
adieresis = -73;
amacron = -78;
edieresis = -78;
emacron = -88;
ibreve = 30;
icircumflex = 15;
imacron = 68;
itilde = 28;
odieresis = -78;
omacron = -88;
racute = -48;
scaron = -88;
udieresis = -68;
};
Z = {
ibreve = 37;
imacron = 60;
itilde = 34;
};
Zacute = {
ibreve = 37;
imacron = 60;
itilde = 34;
};
Zcaron = {
ibreve = 37;
imacron = 60;
itilde = 34;
};
Zdotaccent = {
ibreve = 37;
imacron = 60;
itilde = 34;
};
asterisk = {
J = -67;
at = -30;
exclam = -11;
imacron = 67;
itilde = 40;
questiondown = -84;
slash = -124;
};
at = {
X = -10;
asterisk = -53;
backslash = -45;
braceright = -26;
comma = -13;
greater = -20;
less = -20;
parenright = -43;
question = -33;
quotedblleft = -7;
quotedblright = -12;
quoteleft = -7;
quoteright = -12;
semicolon = -12;
slash = -17;
underscore = -20;
};
backslash = {
at = -20;
backslash = -127;
comma = 50;
question = -30;
quotedblbase = 57;
quotedblleft = -67;
quotedblright = -103;
quoteleft = -67;
quoteright = -103;
quotesinglbase = 57;
underscore = 27;
};
bar = {
imacron = 40;
itilde = 11;
};
bracketleft = {
imacron = 21;
};
bracketright = {
imacron = 60;
itilde = 27;
};
brokenbar = {
imacron = 40;
itilde = 11;
};
c = {
asterisk = -35;
backslash = -74;
parenright = -30;
question = -34;
v = -18;
x = -18;
};
cacute = {
asterisk = -35;
backslash = -74;
parenright = -30;
question = -34;
v = -19;
};
ccaron = {
asterisk = -35;
backslash = -74;
parenright = -30;
question = -34;
v = -19;
};
ccedilla = {
asterisk = -35;
backslash = -74;
parenright = -30;
question = -34;
v = -19;
};
cdotaccent = {
asterisk = -35;
backslash = -74;
parenright = -30;
question = -34;
v = -19;
};
comma = {
backslash = -87;
question = -11;
v = -54;
};
d = {
imacron = 40;
};
dcaron = {
questiondown = -18;
};
dcroat = {
imacron = 71;
};
dollar = {
imacron = 34;
itilde = 20;
};
eth = {
imacron = 30;
};
exclam = {
asterisk = -15;
igrave = 47;
imacron = 50;
itilde = 7;
};
f = {
aacute = -17;
abreve = -17;
acircumflex = -17;
adieresis = -17;
aeacute = -17;
agrave = -17;
amacron = -17;
aogonek = -17;
aring = -17;
atilde = -17;
ibreve = 27;
igrave = 40;
imacron = 60;
itilde = 37;
};
fl = {
imacron = 40;
};
germandbls = {
asterisk = -60;
v = -60;
};
greater = {
at = -22;
parenright = -60;
};
i = {
lslash = 8;
};
iacute = {
asterisk = 26;
b = 60;
backslash = 74;
braceright = 11;
bracketleft = 60;
bracketright = 21;
exclam = 47;
f = 40;
h = 60;
idieresis = 80;
imacron = 60;
itilde = 55;
k = 60;
l = 60;
lacute = 60;
lcaron = 60;
ldot = 60;
lslash = 40;
parenright = 15;
question = 57;
quotedblleft = 53;
quotedblright = 40;
quoteleft = 53;
quoteright = 40;
uni0137 = 60;
uni013C = 60;
};
ibreve = {
backslash = 54;
question = 40;
};
imacron = {
B = 40;
D = 40;
Dcaron = 40;
E = 40;
Eacute = 40;
Ebreve = 40;
Ecaron = 40;
Ecircumflex = 40;
Edieresis = 40;
Edotaccent = 40;
Egrave = 40;
Emacron = 40;
Eogonek = 40;
F = 40;
H = 40;
I = 40;
Iacute = 40;
Ibreve = 40;
Icircumflex = 40;
Idieresis = 40;
Idotaccent = 40;
Igrave = 40;
Imacron = 40;
Itilde = 40;
K = 40;
L = 40;
Lacute = 40;
Lcaron = 40;
Ldot = 40;
M = 40;
N = 40;
Nacute = 40;
Ncaron = 40;
Ntilde = 40;
P = 40;
R = 40;
Racute = 40;
Rcaron = 40;
Thorn = 40;
asterisk = 70;
b = 60;
backslash = 93;
bar = 40;
bracketleft = 60;
bracketright = 21;
brokenbar = 40;
exclam = 70;
f = 40;
germandbls = 60;
h = 60;
k = 60;
l = 60;
lacute = 60;
lcaron = 60;
ldot = 60;
lslash = 67;
question = 73;
quotedblleft = 73;
quotedblright = 70;
quoteleft = 73;
quoteright = 70;
thorn = 60;
uni0136 = 40;
uni0137 = 60;
uni013B = 40;
uni013C = 60;
uni0145 = 40;
uni0156 = 40;
uni02B9 = 100;
uni02BA = 100;
uni1EBC = 40;
uni20A8 = 40;
z = 40;
zacute = 40;
zcaron = 40;
zdotaccent = 40;
};
itilde = {
asterisk = 40;
b = 15;
bracketleft = 27;
exclam = 11;
f = 30;
h = 15;
j = 34;
k = 15;
l = 15;
lacute = 15;
lcaron = 15;
ldot = 15;
question = 40;
quotedblleft = 30;
quotedblright = 30;
quoteleft = 30;
quoteright = 30;
uni0137 = 15;
uni013C = 15;
uni02B9 = 60;
uni02BA = 60;
};
j = {
itilde = 40;
};
l = {
imacron = 40;
};
lacute = {
imacron = 40;
};
lcaron = {
b = 110;
h = 110;
k = 110;
l = 110;
questiondown = -18;
};
less = {
at = -25;
parenright = -44;
};
lslash = {
i = 8;
imacron = 60;
questiondown = 24;
v = 15;
};
multiply = {
X = -33;
};
parenleft = {
at = -40;
};
plus = {
slash = -37;
};
q = {
backslash = -40;
j = 30;
};
question = {
J = -33;
X = -30;
at = -15;
comma = -65;
ibreve = 30;
igrave = 40;
imacron = 54;
itilde = 37;
parenright = -81;
questiondown = -93;
quotedblbase = -37;
quotesinglbase = -37;
slash = -70;
underscore = -64;
};
questiondown = {
asterisk = -47;
backslash = -50;
question = -47;
quotedblbase = 40;
quotesinglbase = 40;
v = -13;
};
quotedbl = {
ibreve = 27;
imacron = 80;
itilde = 30;
};
quotedblbase = {
backslash = -120;
question = -30;
};
quotedblleft = {
J = -74;
at = -22;
ibreve = 13;
imacron = 63;
itilde = 24;
questiondown = -67;
slash = -100;
};
quotedblright = {
ibreve = 27;
imacron = 80;
itilde = 30;
};
quoteleft = {
J = -74;
at = -22;
ibreve = 13;
imacron = 63;
itilde = 24;
questiondown = -67;
slash = -100;
};
quoteright = {
ibreve = 27;
imacron = 80;
itilde = 30;
};
quotesinglbase = {
backslash = -120;
question = -30;
};
quotesingle = {
ibreve = 27;
imacron = 80;
itilde = 30;
};
sacute = {
v = -37;
};
scaron = {
v = -37;
};
scedilla = {
v = -37;
};
slash = {
B = 44;
D = 44;
Dcaron = 44;
E = 44;
Eacute = 44;
Ebreve = 44;
Ecaron = 44;
Ecircumflex = 44;
Edieresis = 44;
Edotaccent = 44;
Egrave = 44;
Emacron = 44;
Eogonek = 44;
F = 44;
H = 44;
I = 44;
Iacute = 44;
Ibreve = 44;
Icircumflex = 60;
Idieresis = 54;
Idotaccent = 44;
Igrave = 40;
Imacron = 90;
Itilde = 44;
J = -37;
K = 44;
L = 44;
Lacute = 44;
Lcaron = 44;
Ldot = 44;
M = 44;
N = 44;
Nacute = 44;
Ncaron = 44;
Ntilde = 44;
Oslash = -33;
P = 44;
R = 44;
Racute = 44;
Rcaron = 44;
Thorn = 44;
at = -32;
bar = 44;
brokenbar = 44;
comma = -44;
ibreve = 40;
icircumflex = 43;
idieresis = 37;
igrave = 87;
imacron = 80;
plus = -56;
questiondown = -57;
quotedblbase = -58;
quotesinglbase = -58;
slash = -123;
underscore = -124;
uni0136 = 44;
uni013B = 44;
uni0145 = 44;
uni0156 = 44;
uni1EBC = 44;
uni20A8 = 44;
};
underscore = {
asterisk = -97;
at = -33;
backslash = -157;
j = 21;
question = -60;
underscore = -114;
};
uni0122 = {
imacron = 30;
};
uni0136 = {
ibreve = 20;
icircumflex = -5;
imacron = 50;
l = -3;
};
uni013B = {
V = -80;
};
uni013C = {
imacron = 40;
};
uni0145 = {
imacron = 40;
itilde = 11;
};
uni0156 = {
imacron = 30;
itilde = 20;
};
uni0162 = {
abreve = -103;
adieresis = -83;
amacron = -83;
atilde = -103;
ebreve = -103;
edieresis = -83;
emacron = -83;
gbreve = -95;
ibreve = 35;
icircumflex = 50;
imacron = 73;
itilde = 40;
ntilde = -90;
odieresis = -83;
omacron = -90;
otilde = -103;
racute = -70;
scaron = -95;
udieresis = -80;
umacron = -85;
uni1EBD = -103;
utilde = -100;
ydieresis = -65;
};
uni0218 = {
imacron = 34;
itilde = 20;
};
uni0219 = {
v = -37;
};
uni021A = {
abreve = -103;
adieresis = -83;
amacron = -83;
atilde = -103;
ebreve = -103;
edieresis = -83;
emacron = -83;
gbreve = -95;
ibreve = 35;
icircumflex = 50;
imacron = 73;
itilde = 40;
ntilde = -90;
odieresis = -83;
omacron = -90;
otilde = -103;
racute = -70;
scaron = -95;
udieresis = -80;
umacron = -85;
uni1EBD = -103;
utilde = -100;
ydieresis = -65;
};
uni02B9 = {
J = -41;
at = -25;
backslash = 20;
imacron = 100;
itilde = 60;
};
uni02BA = {
J = -41;
at = -25;
backslash = 20;
imacron = 100;
itilde = 60;
};
uni1EBC = {
ibreve = 27;
imacron = 54;
itilde = 37;
v = -17;
};
uni1EF8 = {
adieresis = -73;
amacron = -78;
edieresis = -78;
emacron = -88;
ibreve = 30;
icircumflex = 15;
imacron = 68;
itilde = 28;
odieresis = -78;
omacron = -88;
racute = -48;
scaron = -88;
udieresis = -68;
};
uni20A8 = {
v = -37;
};
v = {
at = -15;
comma = -40;
f = 20;
lslash = 8;
questiondown = -20;
};
z = {
imacron = 40;
};
zacute = {
imacron = 40;
};
zcaron = {
imacron = 40;
};
zdotaccent = {
imacron = 40;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2022 The Rethink Sans Project Authors (https://github.com/hans-thiessen/Rethink-Sans)";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "The Rethink Sans project authors (Hans Thiessen). DM Sans designed by Colophon Foundry.";
}
);
},
{
key = designerURL;
value = "https://www.hansthiessen.com/";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://scripts.sil.org/OFL";
}
);
},
{
key = licenseURL;
value = "https://scripts.sil.org/OFL";
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Rethink Communications LLC";
}
);
},
{
key = manufacturerURL;
value = "https://rethinkideas.com/";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 1;
}
